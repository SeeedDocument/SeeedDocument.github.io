{
    "docs": [
        {
            "location": "/", 
            "text": "Platform\n\n\n\n\n\n\n\n\nArduino\n\n\nBeaglebone\n\n\nRaspberry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWio\n\n\nmbed\n\n\nRePhone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinkIt\n\n\nReSpeaker\n\n\nShield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEssentials\n\n\nWireless\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove\n\n\n\n\n\n\n\n\nSensor\n\n\nActuator\n\n\nDisplay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommunication\n\n\nOthers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIOT\n\n\n\n\n\n\n\n\nIOT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaker Pro\n\n\n\n\n\n\n\n\nMaker Pro\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial\n\n\n\n\n\n\n\n\nTutorial\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u534f\u8bae\n\n\nCopyright \n 2018-2017 Seeed Inc. (\nhttps://www.seeedstudio.com\n)\n\n\n\u6587\u6863\u53ca\u56fe\u7247\n\n\n\n\u8fd9\u91cc\u6240\u6709\u7684\u56fe\u7247\u548c\u6587\u6863\u987a\u4ece \nCreative Commons Attribution-ShareAlike 4.0 International License\n. \n \n\n\u7684\u534f\u8bae\n\n\n\u8054\u7cfb\u6211\u4eec\n\n\n\u5982\u679c\u4f60\u6709\u6587\u6863\u6216\u8005\u6280\u672f\u4e0a\u7684\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb", 
            "title": "Seeed\u6587\u6863\u4e2d\u6587\u7ad9\u70b9\u4ecb\u7ecd"
        }, 
        {
            "location": "/#platform", 
            "text": "Arduino  Beaglebone  Raspberry               Wio  mbed  RePhone               LinkIt  ReSpeaker  Shield               Essentials  Wireless", 
            "title": "Platform"
        }, 
        {
            "location": "/#grove", 
            "text": "Sensor  Actuator  Display               Communication  Others", 
            "title": "Grove"
        }, 
        {
            "location": "/#iot", 
            "text": "IOT", 
            "title": "IOT"
        }, 
        {
            "location": "/#maker-pro", 
            "text": "Maker Pro", 
            "title": "Maker Pro"
        }, 
        {
            "location": "/#tutorial", 
            "text": "Tutorial", 
            "title": "Tutorial"
        }, 
        {
            "location": "/#_1", 
            "text": "Copyright   2018-2017 Seeed Inc. ( https://www.seeedstudio.com )", 
            "title": "\u534f\u8bae"
        }, 
        {
            "location": "/#_2", 
            "text": "\u8fd9\u91cc\u6240\u6709\u7684\u56fe\u7247\u548c\u6587\u6863\u987a\u4ece  Creative Commons Attribution-ShareAlike 4.0 International License .    \n\u7684\u534f\u8bae", 
            "title": "\u6587\u6863\u53ca\u56fe\u7247"
        }, 
        {
            "location": "/#_3", 
            "text": "\u5982\u679c\u4f60\u6709\u6587\u6863\u6216\u8005\u6280\u672f\u4e0a\u7684\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb", 
            "title": "\u8054\u7cfb\u6211\u4eec"
        }, 
        {
            "location": "/Arduino/", 
            "text": "Arduino\u662f\u57fa\u4e8e\u6613\u4e8e\u4f7f\u7528\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u7684\u5f00\u6e90\u539f\u578b\u5e73\u53f0\u3002\u56e0\u4e3a\u5b83\u662f\u5982\u6b64\u7075\u6d3b\u548c\u5f00\u6e90\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u6709\u5174\u8da3\u521b\u5efa\u4ea4\u4e92\u5f0f\u5bf9\u8c61\u6216\u73af\u5883\uff0c\u65e0\u8bba\u60a8\u662f\u827a\u672f\u5bb6\uff0c\u8bbe\u8ba1\u5e08\u8fd8\u662f\u4e1a\u4f59\u7231\u597d\u8005\uff0cArduino\u90fd\u662f\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\n\n\nSeeed Studio\u7684\u5ea7\u53f3\u94ed\u4e4b\u4e00\u662f\u201c\u589e\u957f\u5dee\u5f02\u201d\uff0c\u73b0\u5728\u5df2\u6210\u4e3a\u516c\u53f8\u6587\u5316\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e0d\u4ec5\u4f53\u73b0\u5728\u6211\u4eec\u5728\u666e\u53ca\u5f00\u6e90\u6587\u5316\u65b9\u9762\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u4e5f\u53cd\u6620\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u4e2d\u3002\u81ea\u516c\u53f8\u6210\u7acb\u4ee5\u6765\uff0c\u6211\u4eec\u4e0d\u65ad\u521b\u5efa\u81ea\u5df1\u7684\u5f00\u653e\u5e73\u53f0\uff0c\u4e0e\u73b0\u6709\u7684\u5e73\u53f0\u4e0d\u540c\u3002\n\n\n\u5728Seeed\uff0c\u60a8\u4e0d\u4ec5\u53ef\u4ee5\u53d1\u73b0Arduino\u677f\uff0c\u5982Arduino Nano\u548cArduino Mega\uff0c\u8fd8\u6709\u8bb8\u591a\u677f\u5757\uff0c\u5982Seeed Studio\u548cArduino\u7684\u8054\u5408\u52aa\u529b\uff0c\u5982Seeeduino\u3002 Seeeduino\u4e0eArduino\u517c\u5bb9\uff0c\u5177\u6709\u66f4\u5f3a\u5927\u7684\u529f\u80fd\u548c\u66f4\u4f4e\u7684\u4ef7\u683c\u3002\u9996\u5148\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u5bf9\u5e94\u4e8eArduino Mega\u7684\u6700\u65b0\u7248\u672cSeeeduino V4.2\u6216Seeeduino Mega\u3002\n\n\n\u5668\u6750\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Seeeduino\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nGrove_Starter_kit_for_Arduino_101\n\n\nSeeeduino_Cloud\n\n\nSeeeduino_LoRAWAN", 
            "title": "Arduino"
        }, 
        {
            "location": "/Arduino/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Seeeduino\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Grove_Starter_kit_for_Arduino_101  Seeeduino_Cloud  Seeeduino_LoRAWAN", 
            "title": "\u5668\u6750\u6e05\u5355"
        }, 
        {
            "location": "/Seeeduino_Cloud/", 
            "text": "Seeeduino Cloud\u662f\u57fa\u4e8e\nDragino WiFi IoT\u6a21\u5757HE\n\u548cATmega32u4 \u7684\u5fae\u63a7\u5236\u5668\u677f\u3002HE\u662f\u4e00\u79cd\u9ad8\u6027\u80fd\uff0c\u4f4e\u6210\u672c\u7684150M\uff0c2.4G WiFi\u6a21\u5757\uff0c\u8fd9\u610f\u5473\u7740\u4e2d\u6587\u7684\u201c\u6838\u5fc3\u201d\u548c\u5185\u90e8\u7684\u5f00\u6e90OpenWrt\u7cfb\u7edf\u3002Seeeduino Cloud\u4e5f\u662fArduino\u517c\u5bb9\u677f\uff0c\u4e0eGrove\uff0cShield\u548cIDE\uff08Arduino IDE 1.5.3\u53ca\u66f4\u9ad8\u7248\u672c\uff09100%\u517c\u5bb9\u3002\u9664\u4e86Arduino\u7684\u6b63\u5e38\u63a5\u53e3\uff0cSeeeduino Cloud\u5185\u7f6e\u4e86\u4ee5\u592a\u7f51\u548cWiFi\u652f\u6301\uff0c\u4e00\u4e2aUSB-A\u7aef\u53e3\uff0c\u975e\u5e38\u9002\u5408\u90a3\u4e9b\u9700\u8981\u7f51\u7edc\u8fde\u63a5\u548c\u5927\u5bb9\u91cf\u5b58\u50a8\u7684\u539f\u578b\u8bbe\u8ba1\u3002\u4f7fSeeeduino Cloud\u6210\u4e3a\u4e00\u4e2aIoT\u7f51\u5173\u4e5f\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u7269\u8054\u7f51  \n\n\n\u667a\u80fd\u5bb6\u5c45\n\n\n\u5b66\u4e60\n\n\n\n\n\u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u9879\u76ee\u4f9b\u60a8\u53c2\u8003\u3002\n\n\n\n\n\n\n\n\n\u7b80\u5355\u7684Wi-Fi Messager\n\n\n\u5c06\u6570\u636e\u53d1\u9001\u5230Google\u6587\u6863\n\n\n\u592a\u9633\u80fd\u7535\u6c60\u677f\u76d1\u63a7\u7cfb\u7edf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u505a\u4e00\u4e2a\n\n\n\u9a6c\u4e0a\u505a\u4e00\u4e2a\n\n\n\u9a6c\u4e0a\u505a\u4e00\u4e2a\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u4e0eArduino Yun\u517c\u5bb9\n\n\n\u57fa\u4e8eDragino WiFi IoT\u6a21\u5757HE\n\n\n\u5185\u7f6e\u5f00\u6e90OpenWrt\u7cfb\u7edf\n\n\n\u652f\u6301 2.4Ghz WiFi, 802.11 b/g/n\n\n\n\u652f\u6301\u4ee5\u592a\u7f51\n\n\n\u652f\u6301 USB 2.0\n\n\n\u677f\u8f7dGrove\u8fde\u63a5\u5668\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\u56e0\u4e3aSeeeduino Cloud\u6709\u4e24\u4e2a\u5904\u7406\u5668\uff0c\u6240\u4ee5\u8fd9\u4e00\u8282\u663e\u793a\u4e86\u4e24\u4e2a\u5355\u72ec\u8868\u683c\u4e2d\u6bcf\u4e2a\u5904\u7406\u5668\u7684\u7279\u5f81\u3002\n\n\nDragino HE\u6a21\u5757\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u503c\n\n\n\n\n\n\n\n\n\n\nCPU\n\n\nATHEROS AR9331\n\n\n\n\n\n\nClock Speed\n\n\n400MHz\n\n\n\n\n\n\nRAM\n\n\n64MB\n\n\n\n\n\n\nFlash\n\n\n16MB\n\n\n\n\n\n\nOS\n\n\nOpenWrt\n\n\n\n\n\n\nInterfaces\n\n\n2 x RJ45, 1 x USB Host, 1 x UART, 14 multiplex GPIOs\n\n\n\n\n\n\nPower\n\n\n3.3V Power Input\n\n\n\n\n\n\nWiFi\n\n\nSupport 150M 2.4Ghz WiFi, 802.11 b/g/n\n\n\n\n\n\n\n\n\nAVR Arduino\u5fae\u63a7\u5236\u5668\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u503c\n\n\n\n\n\n\n\n\n\n\nMicrocontroller\n\n\nATmega32u4\n\n\n\n\n\n\nFlash Memory\n\n\n32KB\n\n\n\n\n\n\nSRAM\n\n\n2.5kB\n\n\n\n\n\n\nEEPROM\n\n\n1kB\n\n\n\n\n\n\nClock Speed\n\n\n16MHz\n\n\n\n\n\n\nOperating Voltage\n\n\n5V\n\n\n\n\n\n\nDigital I/O Pins\n\n\n20\n\n\n\n\n\n\nPWM Channels\n\n\n7\n\n\n\n\n\n\nAnalog Input Channels\n\n\n12\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\u4e0b\u56fe\u663e\u793a\u4e86Seeeduino Cloud\u786c\u4ef6\u529f\u80fd\u7684\u6982\u8ff0\u3002\u5f15\u811a\u56fe\u4e2d\u663e\u793a\u4e86Seeeduino Cloud\u5404\u79cd\u5f15\u811a\u7684\u529f\u80fd\u3002\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u5feb\u901f\u53c2\u8003\u3002\n\n\n\n\n\n\nRJ45\u4ee5\u592a\u7f51\u7aef\u53e3\n\nLAN\u7aef\u53e3\u8fde\u63a5\u5230ATHEROS AR9331\uff0c\u5e76\u5177\u6709\u81ea\u5df1\u7684IP\u5730\u5740\uff0c\u53ef\u7528\u4e8eInternet\u8fde\u63a5\u548c\u8bbe\u5907\u7ba1\u7406\u3002\n\n\nUSB \u8f93\u5165\n\nUSB\u7aef\u53e3\u7528\u4e8e\u5c06\u7535\u8def\u677f\u8fde\u63a5\u5230PC\u8fdb\u884c\u7f16\u7a0b\u548c\u4e0a\u7535\u3002Micro USB\u662f\u5927\u591a\u6570Android\u624b\u673a\u548c\u5176\u4ed6\u8bbe\u5907\u4e2d\u666e\u904d\u5b58\u5728\u7684USB\u7248\u672c\u3002\u4f60\u5bb6\u91cc\u53ef\u80fd\u6709\u51e0\u5341\u6839\u8fd9\u4e9b\u6570\u636e\u7ebf\u3002\n\n\nUSB HOST\n\nSeeeduino Cloud\u63d0\u4f9bUSB HOST\u529f\u80fd\uff0c\u4f7f\u5176\u80fd\u591f\u8fde\u63a5\u5230\u5404\u79cdUSB\u8bbe\u5907\uff0c\u5982\u7f51\u7edc\u6444\u50cf\u5934\uff0cUSB\u9a71\u52a8\u5668\uff0c\u952e\u76d8\uff0c\u64cd\u7eb5\u6746\u7b49\u3002\n\n\n32U4 RST\n\n\u630932U4 Reset \u6309\u94ae\u5bf9ATmega32U4 MCU\u8fdb\u884c\u590d\u4f4d. \u901a\u5e38\uff0c\u5b83\u7528\u4e8e\u7a0b\u5e8f\u590d\u4f4d.\n\n\nSYS RST\n\n\u6309\u4e0b\u7cfb\u7edf\u590d\u4f4d\u6309\u94ae\u5c06\u91cd\u65b0\u542f\u52a8Linux\u7cfb\u7edf\u3002\n\n\nWi-Fi RST\n\nWi-Fi\u91cd\u7f6e\u6309\u94ae\u4ec5\u652f\u6301\u957f\u6309\u30025\u79d2\u949f\u540e\u6309\u4e0b\u5e76\u91ca\u653e\uff0c\u5c06\u91cd\u7f6eWiFi\u8bbe\u7f6e\u3002\u5176\u4ed6\u8bbe\u7f6e\u5c06\u88ab\u4fdd\u7559\u3002\u5982\u679c\u572830\u79d2\u540e\u6309\u4e0b\u5e76\u91ca\u653e\u6309\u94ae\uff0c\u5219\u4f1a\u5c06\u6240\u6709\u8bbe\u7f6e\u91cd\u7f6e\u4e3a\u51fa\u5382\u9ed8\u8ba4\u503c\u3002\n\n\nGrove Connectors\n\nSeeedStudio\u5177\u6709\u652f\u6301I2C\u6216UART\u8fde\u63a5\u7684\u5404\u79cd\u4f20\u611f\u5668/\u8bbe\u5907\u3002\u53e6\u5916\uff0c\u6211\u4eec\u9500\u552e\u72ec\u7acb\u7684Grove\u8fde\u63a5\u5668\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5236\u4f5c\u81ea\u5df1\u7684\u4f20\u611f\u5668\u8fde\u63a5\u3002\u5982\u679c\u8981\u4f7f\u7528\u8fd9\u4e9b\u5f15\u811a\uff0cI2C Grove\u8fde\u63a5\u5668\u4e5f\u5206\u522b\u8fde\u63a5\u5230SDA\u548cSCL\u7684\u6a21\u62df\u5f15\u811aA4\u548cA5\u3002UART Grove\u8fde\u63a5\u5668\u5206\u522b\u8fde\u63a5\u5230\u6570\u5b57\u5f15\u811a0\u548c1\uff0c\u7528\u4e8eRX\u548cTX\u3002\n\n\nICSP\n\n\u8fd9\u662fATmega32U4\u7684ICSP\u63a5\u53e3\uff0c\u5b83\u4f4d\u4e8eArduino Uno\uff0cDue\uff0cMega\u548cLeonardo\u517c\u5bb9\u786c\u4ef6\uff08\u4f8b\u5982\u5c4f\u853d\uff09\u7684\u6807\u51c6ICSP / SPI\u4f4d\u7f6e\u3002\u8be5\u7aef\u53e3\u4e2d\u7684SPI\u5f15\u811a\uff1aMISO\uff0cSCK\u548cMOSI\u4e5f\u5206\u522b\u8fde\u63a5\u5230\u6570\u5b57\u5f15\u811a12,13\u548c11\uff0c\u5c31\u50cfArduino Uno\u90a3\u6837\u3002\n\n\nI-PEX Connector\n\n\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u5916\u90e8\u5929\u7ebf\u7684I-PEX\u8fde\u63a5\u5668\u3002\n\n\n\n\nPins\n\n\u56e0\u4e3aAtheros AR9331\u6240\u6709I / O\u7ebf\u90fd\u8fde\u63a5\u5230ATmega32U4\uff0c\u6240\u4ee5\u4e0d\u80fd\u8bbf\u95eeAtheros AR9331\u7684I / O\u5f15\u811a\u300232U4\u4e0a\u768420\u4e2a\u6570\u5b57\u5f15\u811a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\uff0c\u4f7f\u7528pinMode\uff08\uff09\uff0cdigitalWrite\uff08\uff09\u548cdigitalRead\uff08\uff09\u51fd\u6570\u3002\u5b83\u4eec\u5de5\u4f5c\u57285\u4f0f\u3002\u6bcf\u4e2a\u5f15\u811a\u53ef\u63d0\u4f9b\u6216\u63a5\u6536\u6700\u592740 mA\uff0c\u5e76\u5177\u670920-50 kOhms\u7684\u5185\u90e8\u4e0a\u62c9\u7535\u963b\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u65ad\u5f00\uff09\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u9488\u811a\u5177\u6709\u4e13\u95e8\u7684\u529f\u80fd\uff1a\n\n\n\n\nSerial: 0 (RX) and 1 (TX).\u7528\u4e8eATmega32U4\u786c\u4ef6\u4e32\u884c\u63a5\u6536\uff08RX\uff09\u548c\u53d1\u9001\uff08TX\uff09TTL\u6570\u636e\u3002\u8bf7\u6ce8\u610f\uff0c\u5728Seeeduino Cloud\u4e2d\uff0cSerial\u7c7b\u662f\u6307USB\uff08CDC\uff09\u901a\u4fe1; \u5bf9\u4e8e\u5f15\u811a0\u548c1\u4e0a\u7684TTL\u4e32\u884c\uff0c\u4f7f\u7528Serial1\u7c7b\u3002Seeeduino Cloud\u4e0a\u7684ATmega32U4\u548cAR9331\u7684\u786c\u4ef6\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7528\u4e8e\u5728\u4e24\u4e2a\u5904\u7406\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002\u5982\u5728Linux\u7cfb\u7edf\u4e2d\u5e38\u89c1\u7684\u90a3\u6837\uff0c\u5728AR9331\u7684\u4e32\u884c\u7aef\u53e3\u4e0a\u7ed9\u63a7\u5236\u53f0\u4ee5\u8bbf\u95ee\u7cfb\u7edf\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8bbf\u95eeLinux\u63d0\u4f9b\u7684\u7a0b\u5e8f\u548c\u5de5\u5177\u3002\n\n\nTWI: 2 (SDA) and 3 (SCL). \u652f\u6301\u7528Wire\u5e93\u6587\u4ef6\u8fdb\u884cTWI\u901a\u8baf\u3002\n\n\nExternal Interrupts: 3 (interrupt 0), 2 (interrupt 1), 0 (interrupt 2), 1 (interrupt 3) and 7 (interrupt 4). \u8fd9\u4e9b\u5f15\u811a\u53ef\u4ee5\u914d\u7f6e\u5728\u4f4e\u7535\u5e73\u503c\u89e6\u53d1\uff0c\u4e0a\u5347\u6cbf\u6216\u4e0b\u964d\u6cbf\u89e6\u53d1\uff0c\u6216\u503c\u7684\u53d8\u5316\u7684\u65f6\u5019\u89e6\u53d1\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605attachInterrupt\uff08\uff09\u51fd\u6570\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u5f15\u811a0\u548c1\u4f5c\u4e3a\u4e2d\u65ad\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e5f\u662f\u7528\u4e8e\u4e0eLinux\u5904\u7406\u5668\u901a\u4fe1\u7684\u786c\u4ef6\u4e32\u884c\u7aef\u53e3\u3002\u5f15\u811a7\u8fde\u63a5\u5230AR9331\u5904\u7406\u5668\uff0c\u5c06\u6765\u53ef\u80fd\u88ab\u7528\u4f5c\u63e1\u624b\u4fe1\u53f7\u3002\u5982\u679c\u6253\u7b97\u5c06\u5176\u7528\u4f5c\u4e2d\u65ad\uff0c\u5c0f\u5fc3\u53ef\u80fd\u4f1a\u6709\u51b2\u7a81\u3002\n\n\nPWM: 3, 5, 6, 9, 10, 11, \u548c 13. \u7528analogWrite\uff08\uff09\u51fd\u6570\u63d0\u4f9b8\u4f4dPWM\u8f93\u51fa\u3002\n\n\nSPI: ICSP header. \u8fd9\u4e9b\u5f15\u811a\u652f\u6301\u4f7f\u7528SPI\u5e93\u7684SPI\u901a\u4fe1\u3002\u8bf7\u6ce8\u610f\uff0cSPI\u5f15\u811a\u6ca1\u6709\u8fde\u63a5\u5230\u4efb\u4f55\u6570\u5b57I / O\u5f15\u811a\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f4d\u4e8eUno\u4e0a\uff0c\u5b83\u4eec\u4ec5\u5728ICSP\u8fde\u63a5\u5668\u4e0a\u53ef\u7528\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u6709\u4f7f\u7528SPI\u7684shield\uff0c\u4f46\u6ca1\u67096\u9488ICSP\u8fde\u63a5\u5668\u8fde\u63a5\u5230Seeeduino Cloud\u76846\u5f15\u811aICSP\u63a5\u5934\uff0c\u5219shield\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002SPI\u5f15\u811a\u4e5f\u8fde\u63a5\u5230AR9331 gpio\u5f15\u811a\uff0c\u5b83\u5df2\u7ecf\u5728SPI\u63a5\u53e3\u7684\u8f6f\u4ef6\u4e2d\u5b9e\u73b0\u3002\u8fd9\u610f\u5473\u7740ATMega32u4\u548cAR9331\u4e5f\u53ef\u4ee5\u4f7f\u7528SPI\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u3002\n\n\nAnalog Inputs: Seeeduino Cloud\u670912\u4e2a\u6a21\u62df\u8f93\u5165\uff0c\u6807\u8bb0\u4e3aA0\u81f3A11\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528\u4f5c\u6570\u5b57I / O\u3002\u5f15\u811aA0-A5\u51fa\u73b0\u5728\u4e0eUno\u76f8\u540c\u7684\u4f4d\u7f6e; \u8f93\u5165A6-A11\u5206\u522b\u4f4d\u4e8e\u6570\u5b57I / O\u5f15\u811a4,6,8,9,10\u548c12\u4e0a\u3002\u6bcf\u4e2a\u6a21\u62df\u8f93\u5165\u63d0\u4f9b10\u4f4d\u5206\u8fa8\u7387\uff08\u53731024\u4e2a\u4e0d\u540c\u7684\u503c\uff09\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u62df\u8f93\u5165\u4ece0\u52305\u4f0f\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u4f7f\u7528AREF\u5f15\u811a\u548canalogReference\uff08\uff09\u529f\u80fd\u6765\u66f4\u6539\u5176\u8303\u56f4\u7684\u4e0a\u9650\u3002\n\n\nAREF. \u6a21\u62df\u8f93\u5165\u7684\u53c2\u8003\u7535\u538b\u3002\u4e0eanalogReference()\u4e00\u8d77\u4f7f\u7528.\n\n\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\nSeeeduino Cloud \u67092\u4e2a\u5904\u7406\u5668\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f\u7c7b\u4f3cLeonardo\u7684ATmega32U4. \u53e6\u5916\u4e00\u4e2a\u662fAtheros 9331, \u8fd0\u884cLinux\u548cOpenWRT wireless stack, \u4f7f\u677f\u53ef\u4ee5\u8fde\u63a5\u5230WiFi\u548c\u4ee5\u592a\u7f51\u3002 \u4f7f\u7528 \nYun Bridge Library\n, \u53ef\u4ee5\u901a\u8fc7Arduino\u5728Linux\u7cfb\u7edf\u4e0a\u8c03\u7528\u7a0b\u5e8f\u6216\u81ea\u5b9a\u4e49\u811a\u672c\u6765\u8fde\u63a5\u5404\u79cd\u4e92\u8054\u7f51\u670d\u52a1\u3002\n\n\nATmega32U4 \u7a0b\u5e8f\n\n\nATmega32U4\u4f7f\u7528\nArduino\u8f6f\u4ef6\uff08IDE\uff09\n\u7f16\u7a0b\uff0c\u5982\u679c\u60a8\u5c1a\u672a\u5b89\u88c5\uff0c\u8bf7\u70b9\u51fb\n\u6b64\u5904\n\u8fdb\u884c\u5b89\u88c5\u8bf4\u660e\u3002\n\n\n\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\n\n\n\u9996\u5148\uff0c\u4f60\u9700\u8981\uff1a\n\n\n\n\n\u83b7\u53d6Micro-USB\u7535\u7f06\n\n\n\u60a8\u9996\u5148\u9700\u8981Micro-USB\u7535\u7f06; Android\u624b\u673a\u7684\u6570\u636e\u7ebf\u4e5f\u53ef\u4ee5\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u53ef\u4ee5\u5728\n\u8fd9\u91cc\n\u4e70\u4e00\u4e2a\u3002\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\u5c0f\u5fc3\u8fde\u63a5 micro USB \u63a5\u53e3, \u5426\u5219\u53ef\u80fd\u4f1a\u4f7f\u63d2\u5ea7\u8131\u843d\u3002\n\n\n\n\n\n\n\u8fde\u63a5\u786c\u4ef6\n\n\n\u5c06USB\u8fde\u63a5\u5230\u8ba1\u7b97\u673a\u6216\u5916\u90e8\u7535\u6e90\u7ed9Seeeduino Cloud\u4f9b\u7535\u3002\u4f7f\u7528USB\u7535\u7f06\u5c06Arduino\u677f\u8fde\u63a5\u5230\u7535\u8111\u3002\u7eff\u8272\u7535\u6e90LED\uff08\u6807\u6709PWR\uff09\u5e94\u8be5\u70b9\u4eae\u3002\n\n\n\n\n\n\n\n\nFor Windows\n\n\nWindows\u7248\u672c\u7684Arduino Software\uff08IDE\uff09\u5df2\u7ecf\u5305\u542b\u9a71\u52a8\u7a0b\u5e8f\u3002\u5b89\u88c5\u5b83\u65f6\uff0c\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5b89\u88c5\u5b83\u4eec\u3002\u8fde\u63a5\u60a8\u7684Seeeduino Yun\u7684\u65f6\u5019\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5c06\u81ea\u52a8\u5b89\u88c5\u3002\n\n\nFor MAC\n\n\n\u7b2c\u4e00\u6b21\u5c06Seeeduino Cloud\u63d2\u5165Mac\uff0c\u201cKeyboard Setup Assistant\u201d\u5c06\u4f1a\u8df3\u51fa\u3002\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u4e0eSeeeduino Yun\u76f8\u5173; \u60a8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u7a97\u53e3\u5de6\u4e0a\u65b9\u7684\u7ea2\u8272\u6309\u94ae\u6765\u5173\u95ed\u6b64\u5bf9\u8bdd\u6846\u3002\n\n\nFor Linux\n\n\n\u65e0\u9700\u4e3aUbuntu 10.0.4\u53ca\u66f4\u9ad8\u7248\u672c\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4f46\u8bf7\u786e\u4fdd\u7aef\u53e35353\u672a\u88ab\u9632\u706b\u5899\u963b\u6b62\u3002\n\n\n\u5f00\u59cb\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\n\n\n\u6253\u5f00 LED blink \u7a0b\u5e8f: File \n Examples \n01.Basics \n Blink.\n\n\n\n\n\u9009\u62e9\u4f60\u7684board type and port\n\n\n\u4f60\u9700\u8981\u901a\u8fc7 Tools \n Board menu \u6765\u9009\u62e9\u76f8\u5e94\u7684 Arduino or Genuino board.\n\n\n\n\n\u901a\u8fc7 Tools -\n Serial Port \u83dc\u5355\u6765\u9009\u62e9\u7aef\u53e3. \u7c7b\u4f3c COM3 \u6216\u8005\u66f4\u9ad8(COM1 \u548c COM2 \u901a\u5e38\u4f5c\u4e3a\u786c\u4ef6\u4e32\u53e3\u9884\u7559). \u8981\u4e86\u89e3\u5177\u4f53\u54ea\u4e2a\u7aef\u53e3\uff0c\u60a8\u53ef\u4ee5\u65ad\u5f00\u7535\u8def\u677f\u5e76\u91cd\u65b0\u6253\u5f00; \u6d88\u5931\u7684\u5c31\u662fArduino\u6216Genuino. \u91cd\u65b0\u8fde\u63a5\u7535\u8def\u677f\u5e76\u9009\u62e9\u8be5\u4e32\u884c\u7aef\u53e3\u3002\u5f53\u60a8\u7684\u7535\u8def\u677f\u5728WiFi\u4e0a\u6b63\u786e\u914d\u7f6e\u65f6\uff0c\u60a8\u5c06\u5728\u201c\u7aef\u53e3\u201d\u5217\u8868\u4e2d\u627e\u5230\u5b83\uff0c\u5982\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002\n\n\n\n\n\u4e0a\u4f20\u7a0b\u5e8f\n\n\n\u73b0\u5728\uff0c\u53ea\u9700\u70b9\u51fbIDE\u4e2d\u7684\u201cUpload\u201d\u6309\u94ae\u5373\u53ef\u3002\u7b49\u5f85\u51e0\u79d2\u949f - \u60a8\u5e94\u8be5\u770b\u5230\u677f\u4e0a\u7684RX\u548cTX LED\u95ea\u70c1\u3002\u5982\u679c\u4e0a\u4f20\u6210\u529f\uff0c\u5219\u4f1a\u5728\u72b6\u6001\u680f\u4e2d\u663e\u793a\u201cDone uploading\u201d\u6d88\u606f\u3002\n\n\n\n\n\u4e0a\u4f20\u5b8c\u6210\u540e\u7684\u51e0\u79d2\u949f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u7535\u8def\u677f\u4e0a\u7684LED\uff08D13\uff09\u5f00\u59cb\u95ea\u70c1\uff08\u7eff\u8272\uff09\u3002\u5982\u679c\u662f\uff0c\u606d\u559c\uff01\u4f60\u5df2\u7ecf\u5f97\u5230\u4e86Arduino\u7684\u8fd0\u884c\u3002\u5982\u679c\u60a8\u6709\u95ee\u9898\uff0c\u8bf7\u53c2\u9605\u6545\u969c\u6392\u9664\u5efa\u8bae\u3002\n\n\n\u5728ATHEROS AR9331\u4e0a\u7f16\u7a0b\n\n\n\u7f51\u7edc\u914d\u7f6e\n\n\nSeeeduino Cloud\u5177\u6709WiFi\u63a5\u53e3\u548cLAN\u7aef\u53e3\u3002\u4ed6\u4eec\u90fd\u6709IP\u5730\u5740\uff0c\u53ef\u4ee5\u7528\u4e8e\u4e92\u8054\u7f51\u8fde\u63a5\u548c\u8bbe\u5907\u7ba1\u7406\u3002\n\n\n1. Wi-Fi AP Mode\n\n\n\u5f53\u60a8\u7b2c\u4e00\u6b21\u6253\u5f00Seeeduino Cloud\u65f6\uff0c\u5c06\u4f1a\u663e\u793aWi-Fi\u8fde\u63a5\u4e2d\u663e\u793a\u7684\u4e0d\u5b89\u5168WiFi\u7f51\u7edcSeeeduinoCloud-AXXXX\u3002\u60a8\u53ef\u4ee5\u5c06\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u6b64\u7f51\u7edc\uff0c\u5982\u4e0b\u6240\u793a\u3002\u60a8\u7684\u8ba1\u7b97\u673a\u5c06\u83b7\u5f97\u6b64\u7f51\u7edc\u7684IP\u5730\u5740 \n192.168.240.xxx\n\u3002Seeeduino Cloud\u7684\u9ed8\u8ba4IP\u5730\u5740\u4e3a \n192.168.240.1\n\u3002\n\n\n2. Wi-Fi STA Mode\n\n\n\u8fde\u63a5SeeeduinoCloud-AXXXX\u540e\uff0c\u5728\u6d4f\u89c8\u5668\u641c\u7d22\u6846\u4e2d\u8f93\u5165172.31.255.254\u6216192.168.240.1\uff0c\u60a8\u5c06\u4f7f\u7528Web UI\u8fde\u63a5\u5230Seeeduino Cloud\u3002\u9ed8\u8ba4\u5bc6\u7801\u4e3a\u201cseeeduino\u201d\uff0c\u7136\u540e\u5355\u51fbLOG IN\u3002\n\n\n\n\n\u70b9\u51fb \"SYSTEM\", \u9009\u62e9\u60a8\u7684Wi-Fi\u7f51\u7edc\uff0c\u8f93\u5165\u5bc6\u7801\uff0c\u7136\u540e\u70b9\u51fb \"CONFIGURE \n RESTART\".\n\n\n\n\n3. Onboard Ethernet\n\n\n\u5f53\u60a8\u4f7f\u7528\u4ee5\u592a\u7f51\u7535\u7f06\u5c06Seeeduino Cloud\u8fde\u63a5\u5230\u6709\u7ebf\u7f51\u7edc\u65f6\uff0c\u5c06\u5c1d\u8bd5\u901a\u8fc7DHCP\u81ea\u52a8\u8fde\u63a5\u3002\u8be5\u677f\u5c06\u663e\u793a\u5728\u7f51\u7edc\u5217\u8868\u4e0a\uff0c\u5c31\u50cf\u901a\u8fc7WiFi\u4e00\u6837\u3002\n\n\nTerminal\n\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7SSH\u8bbf\u95eeSeeeduino Cloud\u7684\u7ec8\u7aef\uff0c\u4ee5\u7f16\u7a0b\u6216\u914d\u7f6eATHEROS AR9331\u3002\n\n\n\n\n\u4e0b\u8f7d SSH client \u4f8b\u5982 \nputty\n\n\n\u4f7f\u7528Seeeduino Cloud\u7684IP\u5730\u5740\u5e76\u8fd0\u884cSSH client\u3002\n\n\n\n\nusername: root\npassword: seeeduino\n\n\n\n\n\n\nYun Bridge Library\n\n\nThe Bridge Library \u7b80\u5316\u4e86Arduino Board\u548cDragino HE\u4e4b\u95f4\u7684\u901a\u8baf\u3002 \u6765\u81eaAVR\u7684Bridge commands\u7531HE\u4e0a\u7684Python\u6765\u89e3\u6790.\n\n\n\u4ed6\u7684\u4f5c\u7528\u5982\u4e0b\uff1a\n\n\n\n\n\u5728Arduino\u8981\u6c42\u7684\u65f6\u5019\u5728GNU / Linux\u7aef\u6267\u884c\u7a0b\u5e8f\n\n\n\u63d0\u4f9b\u5171\u4eab\u5b58\u50a8\u7a7a\u95f4\uff0c\u7528\u4e8e\u5171\u4eab\u6570\u636e\uff0c\u5982Arduino\u548cInternet\u4e4b\u95f4\u7684\u4f20\u611f\u5668\u8bfb\u6570;\n\n\n\u63a5\u6536\u6765\u81eaInternet\u7684\u547d\u4ee4\uff0c\u5e76\u5c06\u5176\u76f4\u63a5\u4f20\u9012\u5230Arduino\u3002\n\n\n\n\nArduino Official Website\n\u6709\u8be6\u7ec6\u7684\u89e3\u91ca\u548c\u5f88\u591a\u4f8b\u5b50\u6765\u5c55\u793a\u5982\u4f55\u4f7f\u7528Bridge. \u4ee5\u4e0b\u662f\u4f7f\u7528Bridge Library\u7684\u4e00\u4e9b\u793a\u4f8b.\n\n\nExample 1: \u8ddfLinux\u6253\u62db\u547c\n\n\nThis example is a hello test between the Arduino and Seeeduino Cloud. The example can be found on the Arduino IDE\n File \n Examples \n Bridge \n ConsoleRead. A tutorial of this example can be found \nhere\n. You can see the code below with some additional details to understand it with the Seeeduino Cloud:\n\u8fd9\u4e2a\u4f8b\u5b50\u662fArduino\u548cSeeeduino Cloud\u4e4b\u95f4\u7684\u4e00\u4e2ahello\u6d4b\u8bd5\u3002\u8be5\u793a\u4f8b\u53ef\u4ee5\u5728Arduino IDE-\n File - \n Examples - \n Bridge - \n ConsoleRead\u4e2d\u627e\u5230\u3002\u8fd9\u4e2a\u4f8b\u5b50\u7684\u6559\u7a0b\u53ef\u4ee5\u5728\n\u8fd9\u91cc\n\u627e\u5230\u3002\u60a8\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u67e5\u770b\u4e00\u4e9b\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f:\n\n\n#include \nConsole.h\n\n\nString name;\n\nvoid setup() {\n    // Initialize Console and wait for port to open:\n    Bridge.begin();\n    Console.begin();\n\n    // Wait for Console port to connect\n    while (!Console);\n\n    Console.println(\nHi, what\ns your name?\n);\n}\n\nvoid loop() {\n    if (Console.available() \n 0) {\n        char c = Console.read(); // read the next char received\n        // look for the newline character, this is the last character in the string\n        if (c == \n\\n\n) {\n            //print text with the name received\n            Console.print(\nHi \n);\n            Console.print(name);\n            Console.println(\n! Nice to meet you!\n);\n            Console.println();\n            // Ask again for name and clear the old name\n            Console.println(\nHi, what\ns your name?\n);\n            name = \n;  // clear the name string\n        }\n        else {       // if the buffer is empty Cosole.read() returns -1\n            name += c; // append the read char from Console to the name string\n        }\n    }\n}\n\n\n\n\n\u4f8b\u7a0b 2: \u4e0a\u4f20\u6570\u636e\u5230\u7269\u8054\u7f51\u670d\u52a1\u5668\n\n\n\u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5c06\u6570\u636e\u8bb0\u5f55\u5230\u516c\u5171IoT\u670d\u52a1\u5668\u201cXively\u201d\u3002\u793a\u4f8b\u662f\u4eceArduino IDE-\n File - \n Examples - \n Bridge - \n XivelyClient. \u8fd9\u4e2a\u4f8b\u5b50\u7684\u6559\u7a0b\u53ef\u4ee5\u5728\n\u8fd9\u91cc\n\u8fd9\u91cc\u53c2\u8003\u3002\u4e0a\u4f20\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\uff1a\n\n\n\n\nSeeeduino Cloud \u63a5\u5165\u4e92\u8054\u7f51\u3002\n\n\n\u6839\u636e\u6559\u7a0b\u8f93\u5165\u60a8\u7684FEED ID\u548cAPI KEY\u3002\u6ce8\u610f\uff0cFEED ID\u5e94\u5728\u53cc\u5f15\u53f7\u201c\u201d\u5185\u3002\n\n\n\n\n/*\n  Xively sensor client with Strings\n\n This sketch connects an analog sensor to Xively,\n using an Arduino Y\u00fan.\n\n created 15 March 2010\n updated 27 May 2013\n by Tom Igoe\n\n http://arduino.cc/en/Tutorial/YunXivelyClient\n\n */\n#include \nProcess.h\n\n#include \npasswords.h\n      // contains my passwords, see below\n\n/*\n  NOTE: passwords.h is not included with this repo because it contains my passwords.\n You need to create it for your own version of this application.  To do so, make\n a new tab in Arduino, call it passwords.h, and include the following variables and constants:\n\n #define APIKEY        \nfoo\n                  // replace your pachube api key here\n #define FEEDID        0000                   // replace your feed ID\n #define USERAGENT     \nmy-project\n           // user agent is the project name\n */\n\n// set up net client info:\nconst unsigned long postingInterval = 60000;  //delay between updates to xively.com\nunsigned long lastRequest = 0;      // when you last made a request\nString dataString = \n;\n\nvoid setup() {\n    // start serial port:\n    Bridge.begin();\n    Serial.begin(9600);\n\n    while (!Serial);   // wait for Network Serial to open\n    Serial.println(\nXively client\n);\n\n    // Do a first update immediately\n    updateData();\n    sendData();\n    lastRequest = millis();\n}\n\nvoid loop() {\n    // get a timestamp so you can calculate reading and sending intervals:\n    long now = millis();\n\n    // if the sending interval has passed since your\n    // last connection, then connect again and send data:\n    if (now - lastRequest \n= postingInterval) {\n        updateData();\n        sendData();\n        lastRequest = now;\n    }\n}\n\nvoid updateData() {\n    // convert the readings to a String to send it:\n    dataString = \nTemperature,\n;\n    dataString += random(10) + 20;\n    // add pressure:\n    dataString += \n\\nPressure,\n;\n    dataString += random(5) + 100;\n}\n\n// this method makes a HTTP connection to the server:\nvoid sendData() {\n    // form the string for the API header parameter:\n    String apiString = \nX-ApiKey: \n;\n    apiString += APIKEY;\n\n    // form the string for the URL parameter:\n    String url = \nhttps://api.xively.com/v2/feeds/\n;\n    url += FEEDID;\n    url += \n.csv\n;\n\n    // Send the HTTP PUT request\n\n    // Is better to declare the Process here, so when the\n    // sendData function finishes the resources are immediately\n    // released. Declaring it global works too, BTW.\n    Process xively;\n    Serial.print(\n\\n\\nSending data... \n);\n    xively.begin(\ncurl\n);\n    xively.addParameter(\n-k\n);\n    xively.addParameter(\n--request\n);\n    xively.addParameter(\nPUT\n);\n    xively.addParameter(\n--data\n);\n    xively.addParameter(dataString);\n    xively.addParameter(\n--header\n);\n    xively.addParameter(apiString);\n    xively.addParameter(url);\n    xively.run();\n    Serial.println(\ndone!\n);\n\n    // If there\ns incoming data from the net connection,\n    // send it out the Serial:\n    while (xively.available() \n 0) {\n        char c = xively.read();\n        Serial.write(c);\n    }\n}\n\n\n\n\n\n\n\u4f8b\u7a0b 3: \u5c06\u6570\u636e\u8bb0\u5f55\u5728USB\u95ea\u5b58\u4e2d\n\n\n\u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5c06\u6570\u636e\u8bb0\u5f55\u5230USB\u95ea\u5b58\u3002\u672c\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u7a0b\u5e8f\u4e0e\n\u6b64\u5904\n\u76f8\u540c\u3002\u5e76\u4e14\u53ef\u4ee5\u5728\u90a3\u91cc\u627e\u5230\u6e90\u4ee3\u7801\u3002Seeeduino Cloud\u5c06\u81ea\u52a8\u5c06USB\u95ea\u5b58\u6620\u5c04\u5230\u76ee\u5f55/ mnt /sda1\u3002\u800c\u7a0b\u5e8f\u4f1a\u5c06\u4f20\u611f\u5668\u6570\u636e\u9644\u52a0\u5230\u6587\u4ef6/mnt/sda1/data/datalog.csv\u3002\u56e0\u6b64\uff0c\u5728\u8fd0\u884c\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5728USB\u95ea\u5b58\u4e2d\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u3002\n\n\n#include \nFileIO.h\n     //FileIO class allow user to operate Linux file system\n#include \nConsole.h\n    //Console class provide the interactive between IDE and Yun Shield\nvoid setup() {\n    // Initialize the Console\n    Bridge.begin();\n    Console.begin();\n    FileSystem.begin();\n    while(!Console);   // wait for Serial port to connect.\n    Console.println(\nFilesystem datalogger\\n\n);\n}\nvoid loop () {\n    // make a string that start with a timestamp for assembling the data to log:\n    String dataString;\n    dataString += getTimeStamp();\n    dataString += \n , \n;\n    // read three sensors and append to the string:\n    for (int analogPin = 0; analogPin \n 3; analogPin++) {\n        int sensor = analogRead(analogPin);\n        dataString += String(sensor);\n        if (analogPin \n 2) {\n            dataString += \n,\n;    // separate the values with a comma\n        }\n    }\n    // open the file. note that only one file can be open at a time,\n    // so you have to close this one before opening another.\n    // The USB flash card is mounted at \n/mnt/sda1\n by default\n    File dataFile = FileSystem.open(\n/mnt/sda1/data/datalog.csv\n, FILE_APPEND);\n    // if the file is available, write to it:\n    if (dataFile) {\n        dataFile.println(dataString);\n        dataFile.close();\n        // print to the serial port too:\n        Console.println(dataString);\n    }\n    // if the file isn\nt open, pop up an error:\n    else {\n        Console.println(\nerror opening datalog.csv\n);\n    }\n    delay(15000);  //Write every 15 seconds\n}\n// getTimeStamp function return a string with the time stamp\n// Yun Shield will call the Linux \ndate\n command and get the time stamp\nString getTimeStamp() {\n    String result;\n    Process time;\n    // date is a command line utility to get the date and the time\n    // in different formats depending on the additional parameter\n    time.begin(\ndate\n);\n    time.addParameter(\n+%D-%T\n);   // parameters: D for the complete date mm/dd/yy\n    //              T for the time hh:mm:ss\n    time.run();   // run the command\n    // read the output of the command\n    while(time.available()\n0) {\n        char c = time.read();\n        if(c != \n\\n\n)\n        result += c;\n    }\n    return result;\n}\n\n\n\n\n\n\n\u7269\u8054\u7f51\u670d\u52a1\u5668\u914d\u7f6e\n\n\nIoT Server\u9875\u9762\u5141\u8bb8\u60a8\u5c06\u6570\u636e\u4e0a\u4f20\u5230\u8bf8\u5982Xively\u4e4b\u7c7b\u7684IoT\u7f51\u7ad9\uff0c\u800c\u60a8\u53ea\u9700\u8981\u5c06\u4f20\u611f\u5668\u6570\u636e\u5199\u5165\u4e32\u53e3\u3002\n\n\n\n\n\u7a0b\u5e8f\u5982\u4e0b\uff1a\n\n\n/*\n  Simulate UART TX Data\n\n This sketch simulate Temperature and Humidity data to UART.\n\n To test the pass through feature for different IoT service\n\n created 25 Apr 2014\n by Dragino Technology Co., Limited\n\n Reference:\n http://wiki.dragino.com/index.php?title=Xively#Upload_data_to_Xively_use_Pass_Through_Mode\n\n */\nString dataString = \n;\n\nvoid setup() {\n    Serial1.begin(115200);\n}\n\nvoid loop() {\n    dataString = \ntemp:\n;\n    dataString += random(10) + 20;\n    Serial1.println(dataString);  // upload Temperature data\n    delay(20000);\n    dataString = \nhumidity:\n;\n    dataString += random(5) + 70;  // upload humidity data\n    Serial1.println(dataString);\n    delay(20000);\n}\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n\u539f\u7406\u56fe\n\n\n\n\nSeeeduino Cloud Eagle file\n\n\nSeeeduino Cloud PDF file\n\n\n\n\n\n\n\n\n\u56fa\u4ef6\n\n\n\n\nSeeeduino Cloud Firmware\n\n\n\n\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nGetting Started with Arduino\n\n\nArduino Language Reference\n\n\nDownload the Arduino Software(IDE)\n\n\nArduino FAQ\n\n\nArduino Introduction\n\n\nWikipedia page for Arduino\n\n\nArduino Yun Wiki\n\n\nGetting started with Arduino Yun\n\n\nYun Bridge Library\n\n\n\n\n\n\n\n\nFAQ\n\n\n\n\n\u4ec0\u4e48\u662f Yun Bridge Library?\n\n\n\n\nYun Bridge Library \u7528\u4e8eMPU\u548cMCU\u4e4b\u95f4\u901a\u4fe1\u7684\u673a\u5236\u3002 Seeeduino Cloud \u4f7f\u7528 Yun Bridge Library\uff0c \u8ba9Arduino\u7528\u6237\u8f7b\u677e\u6784\u5efa\u5176\u7269\u8054\u7f51\u9879\u76ee\u3002", 
            "title": "Seeeduino_Cloud"
        }, 
        {
            "location": "/Seeeduino_Cloud/#_1", 
            "text": "\u7269\u8054\u7f51    \u667a\u80fd\u5bb6\u5c45  \u5b66\u4e60   \u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u9879\u76ee\u4f9b\u60a8\u53c2\u8003\u3002     \u7b80\u5355\u7684Wi-Fi Messager  \u5c06\u6570\u636e\u53d1\u9001\u5230Google\u6587\u6863  \u592a\u9633\u80fd\u7535\u6c60\u677f\u76d1\u63a7\u7cfb\u7edf           \u9a6c\u4e0a\u505a\u4e00\u4e2a  \u9a6c\u4e0a\u505a\u4e00\u4e2a  \u9a6c\u4e0a\u505a\u4e00\u4e2a", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Seeeduino_Cloud/#_2", 
            "text": "\u4e0eArduino Yun\u517c\u5bb9  \u57fa\u4e8eDragino WiFi IoT\u6a21\u5757HE  \u5185\u7f6e\u5f00\u6e90OpenWrt\u7cfb\u7edf  \u652f\u6301 2.4Ghz WiFi, 802.11 b/g/n  \u652f\u6301\u4ee5\u592a\u7f51  \u652f\u6301 USB 2.0  \u677f\u8f7dGrove\u8fde\u63a5\u5668", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Seeeduino_Cloud/#_3", 
            "text": "\u56e0\u4e3aSeeeduino Cloud\u6709\u4e24\u4e2a\u5904\u7406\u5668\uff0c\u6240\u4ee5\u8fd9\u4e00\u8282\u663e\u793a\u4e86\u4e24\u4e2a\u5355\u72ec\u8868\u683c\u4e2d\u6bcf\u4e2a\u5904\u7406\u5668\u7684\u7279\u5f81\u3002  Dragino HE\u6a21\u5757     \u53c2\u6570  \u503c      CPU  ATHEROS AR9331    Clock Speed  400MHz    RAM  64MB    Flash  16MB    OS  OpenWrt    Interfaces  2 x RJ45, 1 x USB Host, 1 x UART, 14 multiplex GPIOs    Power  3.3V Power Input    WiFi  Support 150M 2.4Ghz WiFi, 802.11 b/g/n     AVR Arduino\u5fae\u63a7\u5236\u5668     \u53c2\u6570  \u503c      Microcontroller  ATmega32u4    Flash Memory  32KB    SRAM  2.5kB    EEPROM  1kB    Clock Speed  16MHz    Operating Voltage  5V    Digital I/O Pins  20    PWM Channels  7    Analog Input Channels  12", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Seeeduino_Cloud/#_4", 
            "text": "\u4e0b\u56fe\u663e\u793a\u4e86Seeeduino Cloud\u786c\u4ef6\u529f\u80fd\u7684\u6982\u8ff0\u3002\u5f15\u811a\u56fe\u4e2d\u663e\u793a\u4e86Seeeduino Cloud\u5404\u79cd\u5f15\u811a\u7684\u529f\u80fd\u3002\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u5feb\u901f\u53c2\u8003\u3002    RJ45\u4ee5\u592a\u7f51\u7aef\u53e3 \nLAN\u7aef\u53e3\u8fde\u63a5\u5230ATHEROS AR9331\uff0c\u5e76\u5177\u6709\u81ea\u5df1\u7684IP\u5730\u5740\uff0c\u53ef\u7528\u4e8eInternet\u8fde\u63a5\u548c\u8bbe\u5907\u7ba1\u7406\u3002  USB \u8f93\u5165 \nUSB\u7aef\u53e3\u7528\u4e8e\u5c06\u7535\u8def\u677f\u8fde\u63a5\u5230PC\u8fdb\u884c\u7f16\u7a0b\u548c\u4e0a\u7535\u3002Micro USB\u662f\u5927\u591a\u6570Android\u624b\u673a\u548c\u5176\u4ed6\u8bbe\u5907\u4e2d\u666e\u904d\u5b58\u5728\u7684USB\u7248\u672c\u3002\u4f60\u5bb6\u91cc\u53ef\u80fd\u6709\u51e0\u5341\u6839\u8fd9\u4e9b\u6570\u636e\u7ebf\u3002  USB HOST \nSeeeduino Cloud\u63d0\u4f9bUSB HOST\u529f\u80fd\uff0c\u4f7f\u5176\u80fd\u591f\u8fde\u63a5\u5230\u5404\u79cdUSB\u8bbe\u5907\uff0c\u5982\u7f51\u7edc\u6444\u50cf\u5934\uff0cUSB\u9a71\u52a8\u5668\uff0c\u952e\u76d8\uff0c\u64cd\u7eb5\u6746\u7b49\u3002  32U4 RST \n\u630932U4 Reset \u6309\u94ae\u5bf9ATmega32U4 MCU\u8fdb\u884c\u590d\u4f4d. \u901a\u5e38\uff0c\u5b83\u7528\u4e8e\u7a0b\u5e8f\u590d\u4f4d.  SYS RST \n\u6309\u4e0b\u7cfb\u7edf\u590d\u4f4d\u6309\u94ae\u5c06\u91cd\u65b0\u542f\u52a8Linux\u7cfb\u7edf\u3002  Wi-Fi RST \nWi-Fi\u91cd\u7f6e\u6309\u94ae\u4ec5\u652f\u6301\u957f\u6309\u30025\u79d2\u949f\u540e\u6309\u4e0b\u5e76\u91ca\u653e\uff0c\u5c06\u91cd\u7f6eWiFi\u8bbe\u7f6e\u3002\u5176\u4ed6\u8bbe\u7f6e\u5c06\u88ab\u4fdd\u7559\u3002\u5982\u679c\u572830\u79d2\u540e\u6309\u4e0b\u5e76\u91ca\u653e\u6309\u94ae\uff0c\u5219\u4f1a\u5c06\u6240\u6709\u8bbe\u7f6e\u91cd\u7f6e\u4e3a\u51fa\u5382\u9ed8\u8ba4\u503c\u3002  Grove Connectors \nSeeedStudio\u5177\u6709\u652f\u6301I2C\u6216UART\u8fde\u63a5\u7684\u5404\u79cd\u4f20\u611f\u5668/\u8bbe\u5907\u3002\u53e6\u5916\uff0c\u6211\u4eec\u9500\u552e\u72ec\u7acb\u7684Grove\u8fde\u63a5\u5668\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5236\u4f5c\u81ea\u5df1\u7684\u4f20\u611f\u5668\u8fde\u63a5\u3002\u5982\u679c\u8981\u4f7f\u7528\u8fd9\u4e9b\u5f15\u811a\uff0cI2C Grove\u8fde\u63a5\u5668\u4e5f\u5206\u522b\u8fde\u63a5\u5230SDA\u548cSCL\u7684\u6a21\u62df\u5f15\u811aA4\u548cA5\u3002UART Grove\u8fde\u63a5\u5668\u5206\u522b\u8fde\u63a5\u5230\u6570\u5b57\u5f15\u811a0\u548c1\uff0c\u7528\u4e8eRX\u548cTX\u3002  ICSP \n\u8fd9\u662fATmega32U4\u7684ICSP\u63a5\u53e3\uff0c\u5b83\u4f4d\u4e8eArduino Uno\uff0cDue\uff0cMega\u548cLeonardo\u517c\u5bb9\u786c\u4ef6\uff08\u4f8b\u5982\u5c4f\u853d\uff09\u7684\u6807\u51c6ICSP / SPI\u4f4d\u7f6e\u3002\u8be5\u7aef\u53e3\u4e2d\u7684SPI\u5f15\u811a\uff1aMISO\uff0cSCK\u548cMOSI\u4e5f\u5206\u522b\u8fde\u63a5\u5230\u6570\u5b57\u5f15\u811a12,13\u548c11\uff0c\u5c31\u50cfArduino Uno\u90a3\u6837\u3002  I-PEX Connector \n\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u5916\u90e8\u5929\u7ebf\u7684I-PEX\u8fde\u63a5\u5668\u3002   Pins \n\u56e0\u4e3aAtheros AR9331\u6240\u6709I / O\u7ebf\u90fd\u8fde\u63a5\u5230ATmega32U4\uff0c\u6240\u4ee5\u4e0d\u80fd\u8bbf\u95eeAtheros AR9331\u7684I / O\u5f15\u811a\u300232U4\u4e0a\u768420\u4e2a\u6570\u5b57\u5f15\u811a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\uff0c\u4f7f\u7528pinMode\uff08\uff09\uff0cdigitalWrite\uff08\uff09\u548cdigitalRead\uff08\uff09\u51fd\u6570\u3002\u5b83\u4eec\u5de5\u4f5c\u57285\u4f0f\u3002\u6bcf\u4e2a\u5f15\u811a\u53ef\u63d0\u4f9b\u6216\u63a5\u6536\u6700\u592740 mA\uff0c\u5e76\u5177\u670920-50 kOhms\u7684\u5185\u90e8\u4e0a\u62c9\u7535\u963b\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u65ad\u5f00\uff09\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u9488\u811a\u5177\u6709\u4e13\u95e8\u7684\u529f\u80fd\uff1a   Serial: 0 (RX) and 1 (TX).\u7528\u4e8eATmega32U4\u786c\u4ef6\u4e32\u884c\u63a5\u6536\uff08RX\uff09\u548c\u53d1\u9001\uff08TX\uff09TTL\u6570\u636e\u3002\u8bf7\u6ce8\u610f\uff0c\u5728Seeeduino Cloud\u4e2d\uff0cSerial\u7c7b\u662f\u6307USB\uff08CDC\uff09\u901a\u4fe1; \u5bf9\u4e8e\u5f15\u811a0\u548c1\u4e0a\u7684TTL\u4e32\u884c\uff0c\u4f7f\u7528Serial1\u7c7b\u3002Seeeduino Cloud\u4e0a\u7684ATmega32U4\u548cAR9331\u7684\u786c\u4ef6\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7528\u4e8e\u5728\u4e24\u4e2a\u5904\u7406\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002\u5982\u5728Linux\u7cfb\u7edf\u4e2d\u5e38\u89c1\u7684\u90a3\u6837\uff0c\u5728AR9331\u7684\u4e32\u884c\u7aef\u53e3\u4e0a\u7ed9\u63a7\u5236\u53f0\u4ee5\u8bbf\u95ee\u7cfb\u7edf\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8bbf\u95eeLinux\u63d0\u4f9b\u7684\u7a0b\u5e8f\u548c\u5de5\u5177\u3002  TWI: 2 (SDA) and 3 (SCL). \u652f\u6301\u7528Wire\u5e93\u6587\u4ef6\u8fdb\u884cTWI\u901a\u8baf\u3002  External Interrupts: 3 (interrupt 0), 2 (interrupt 1), 0 (interrupt 2), 1 (interrupt 3) and 7 (interrupt 4). \u8fd9\u4e9b\u5f15\u811a\u53ef\u4ee5\u914d\u7f6e\u5728\u4f4e\u7535\u5e73\u503c\u89e6\u53d1\uff0c\u4e0a\u5347\u6cbf\u6216\u4e0b\u964d\u6cbf\u89e6\u53d1\uff0c\u6216\u503c\u7684\u53d8\u5316\u7684\u65f6\u5019\u89e6\u53d1\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605attachInterrupt\uff08\uff09\u51fd\u6570\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u5f15\u811a0\u548c1\u4f5c\u4e3a\u4e2d\u65ad\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e5f\u662f\u7528\u4e8e\u4e0eLinux\u5904\u7406\u5668\u901a\u4fe1\u7684\u786c\u4ef6\u4e32\u884c\u7aef\u53e3\u3002\u5f15\u811a7\u8fde\u63a5\u5230AR9331\u5904\u7406\u5668\uff0c\u5c06\u6765\u53ef\u80fd\u88ab\u7528\u4f5c\u63e1\u624b\u4fe1\u53f7\u3002\u5982\u679c\u6253\u7b97\u5c06\u5176\u7528\u4f5c\u4e2d\u65ad\uff0c\u5c0f\u5fc3\u53ef\u80fd\u4f1a\u6709\u51b2\u7a81\u3002  PWM: 3, 5, 6, 9, 10, 11, \u548c 13. \u7528analogWrite\uff08\uff09\u51fd\u6570\u63d0\u4f9b8\u4f4dPWM\u8f93\u51fa\u3002  SPI: ICSP header. \u8fd9\u4e9b\u5f15\u811a\u652f\u6301\u4f7f\u7528SPI\u5e93\u7684SPI\u901a\u4fe1\u3002\u8bf7\u6ce8\u610f\uff0cSPI\u5f15\u811a\u6ca1\u6709\u8fde\u63a5\u5230\u4efb\u4f55\u6570\u5b57I / O\u5f15\u811a\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f4d\u4e8eUno\u4e0a\uff0c\u5b83\u4eec\u4ec5\u5728ICSP\u8fde\u63a5\u5668\u4e0a\u53ef\u7528\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u6709\u4f7f\u7528SPI\u7684shield\uff0c\u4f46\u6ca1\u67096\u9488ICSP\u8fde\u63a5\u5668\u8fde\u63a5\u5230Seeeduino Cloud\u76846\u5f15\u811aICSP\u63a5\u5934\uff0c\u5219shield\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002SPI\u5f15\u811a\u4e5f\u8fde\u63a5\u5230AR9331 gpio\u5f15\u811a\uff0c\u5b83\u5df2\u7ecf\u5728SPI\u63a5\u53e3\u7684\u8f6f\u4ef6\u4e2d\u5b9e\u73b0\u3002\u8fd9\u610f\u5473\u7740ATMega32u4\u548cAR9331\u4e5f\u53ef\u4ee5\u4f7f\u7528SPI\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u3002  Analog Inputs: Seeeduino Cloud\u670912\u4e2a\u6a21\u62df\u8f93\u5165\uff0c\u6807\u8bb0\u4e3aA0\u81f3A11\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528\u4f5c\u6570\u5b57I / O\u3002\u5f15\u811aA0-A5\u51fa\u73b0\u5728\u4e0eUno\u76f8\u540c\u7684\u4f4d\u7f6e; \u8f93\u5165A6-A11\u5206\u522b\u4f4d\u4e8e\u6570\u5b57I / O\u5f15\u811a4,6,8,9,10\u548c12\u4e0a\u3002\u6bcf\u4e2a\u6a21\u62df\u8f93\u5165\u63d0\u4f9b10\u4f4d\u5206\u8fa8\u7387\uff08\u53731024\u4e2a\u4e0d\u540c\u7684\u503c\uff09\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u62df\u8f93\u5165\u4ece0\u52305\u4f0f\uff0c\u5c3d\u7ba1\u53ef\u4ee5\u4f7f\u7528AREF\u5f15\u811a\u548canalogReference\uff08\uff09\u529f\u80fd\u6765\u66f4\u6539\u5176\u8303\u56f4\u7684\u4e0a\u9650\u3002  AREF. \u6a21\u62df\u8f93\u5165\u7684\u53c2\u8003\u7535\u538b\u3002\u4e0eanalogReference()\u4e00\u8d77\u4f7f\u7528.", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Seeeduino_Cloud/#_5", 
            "text": "Seeeduino Cloud \u67092\u4e2a\u5904\u7406\u5668\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f\u7c7b\u4f3cLeonardo\u7684ATmega32U4. \u53e6\u5916\u4e00\u4e2a\u662fAtheros 9331, \u8fd0\u884cLinux\u548cOpenWRT wireless stack, \u4f7f\u677f\u53ef\u4ee5\u8fde\u63a5\u5230WiFi\u548c\u4ee5\u592a\u7f51\u3002 \u4f7f\u7528  Yun Bridge Library , \u53ef\u4ee5\u901a\u8fc7Arduino\u5728Linux\u7cfb\u7edf\u4e0a\u8c03\u7528\u7a0b\u5e8f\u6216\u81ea\u5b9a\u4e49\u811a\u672c\u6765\u8fde\u63a5\u5404\u79cd\u4e92\u8054\u7f51\u670d\u52a1\u3002  ATmega32U4 \u7a0b\u5e8f  ATmega32U4\u4f7f\u7528 Arduino\u8f6f\u4ef6\uff08IDE\uff09 \u7f16\u7a0b\uff0c\u5982\u679c\u60a8\u5c1a\u672a\u5b89\u88c5\uff0c\u8bf7\u70b9\u51fb \u6b64\u5904 \u8fdb\u884c\u5b89\u88c5\u8bf4\u660e\u3002  \u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f  \u9996\u5148\uff0c\u4f60\u9700\u8981\uff1a   \u83b7\u53d6Micro-USB\u7535\u7f06  \u60a8\u9996\u5148\u9700\u8981Micro-USB\u7535\u7f06; Android\u624b\u673a\u7684\u6570\u636e\u7ebf\u4e5f\u53ef\u4ee5\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u53ef\u4ee5\u5728 \u8fd9\u91cc \u4e70\u4e00\u4e2a\u3002      Warning  \u5c0f\u5fc3\u8fde\u63a5 micro USB \u63a5\u53e3, \u5426\u5219\u53ef\u80fd\u4f1a\u4f7f\u63d2\u5ea7\u8131\u843d\u3002    \u8fde\u63a5\u786c\u4ef6  \u5c06USB\u8fde\u63a5\u5230\u8ba1\u7b97\u673a\u6216\u5916\u90e8\u7535\u6e90\u7ed9Seeeduino Cloud\u4f9b\u7535\u3002\u4f7f\u7528USB\u7535\u7f06\u5c06Arduino\u677f\u8fde\u63a5\u5230\u7535\u8111\u3002\u7eff\u8272\u7535\u6e90LED\uff08\u6807\u6709PWR\uff09\u5e94\u8be5\u70b9\u4eae\u3002     For Windows  Windows\u7248\u672c\u7684Arduino Software\uff08IDE\uff09\u5df2\u7ecf\u5305\u542b\u9a71\u52a8\u7a0b\u5e8f\u3002\u5b89\u88c5\u5b83\u65f6\uff0c\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5b89\u88c5\u5b83\u4eec\u3002\u8fde\u63a5\u60a8\u7684Seeeduino Yun\u7684\u65f6\u5019\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5c06\u81ea\u52a8\u5b89\u88c5\u3002  For MAC  \u7b2c\u4e00\u6b21\u5c06Seeeduino Cloud\u63d2\u5165Mac\uff0c\u201cKeyboard Setup Assistant\u201d\u5c06\u4f1a\u8df3\u51fa\u3002\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u4e0eSeeeduino Yun\u76f8\u5173; \u60a8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u7a97\u53e3\u5de6\u4e0a\u65b9\u7684\u7ea2\u8272\u6309\u94ae\u6765\u5173\u95ed\u6b64\u5bf9\u8bdd\u6846\u3002  For Linux  \u65e0\u9700\u4e3aUbuntu 10.0.4\u53ca\u66f4\u9ad8\u7248\u672c\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4f46\u8bf7\u786e\u4fdd\u7aef\u53e35353\u672a\u88ab\u9632\u706b\u5899\u963b\u6b62\u3002  \u5f00\u59cb\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f  \u6253\u5f00 LED blink \u7a0b\u5e8f: File   Examples  01.Basics   Blink.   \u9009\u62e9\u4f60\u7684board type and port  \u4f60\u9700\u8981\u901a\u8fc7 Tools   Board menu \u6765\u9009\u62e9\u76f8\u5e94\u7684 Arduino or Genuino board.   \u901a\u8fc7 Tools -  Serial Port \u83dc\u5355\u6765\u9009\u62e9\u7aef\u53e3. \u7c7b\u4f3c COM3 \u6216\u8005\u66f4\u9ad8(COM1 \u548c COM2 \u901a\u5e38\u4f5c\u4e3a\u786c\u4ef6\u4e32\u53e3\u9884\u7559). \u8981\u4e86\u89e3\u5177\u4f53\u54ea\u4e2a\u7aef\u53e3\uff0c\u60a8\u53ef\u4ee5\u65ad\u5f00\u7535\u8def\u677f\u5e76\u91cd\u65b0\u6253\u5f00; \u6d88\u5931\u7684\u5c31\u662fArduino\u6216Genuino. \u91cd\u65b0\u8fde\u63a5\u7535\u8def\u677f\u5e76\u9009\u62e9\u8be5\u4e32\u884c\u7aef\u53e3\u3002\u5f53\u60a8\u7684\u7535\u8def\u677f\u5728WiFi\u4e0a\u6b63\u786e\u914d\u7f6e\u65f6\uff0c\u60a8\u5c06\u5728\u201c\u7aef\u53e3\u201d\u5217\u8868\u4e2d\u627e\u5230\u5b83\uff0c\u5982\u5c4f\u5e55\u622a\u56fe\u6240\u793a\u3002   \u4e0a\u4f20\u7a0b\u5e8f  \u73b0\u5728\uff0c\u53ea\u9700\u70b9\u51fbIDE\u4e2d\u7684\u201cUpload\u201d\u6309\u94ae\u5373\u53ef\u3002\u7b49\u5f85\u51e0\u79d2\u949f - \u60a8\u5e94\u8be5\u770b\u5230\u677f\u4e0a\u7684RX\u548cTX LED\u95ea\u70c1\u3002\u5982\u679c\u4e0a\u4f20\u6210\u529f\uff0c\u5219\u4f1a\u5728\u72b6\u6001\u680f\u4e2d\u663e\u793a\u201cDone uploading\u201d\u6d88\u606f\u3002   \u4e0a\u4f20\u5b8c\u6210\u540e\u7684\u51e0\u79d2\u949f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u7535\u8def\u677f\u4e0a\u7684LED\uff08D13\uff09\u5f00\u59cb\u95ea\u70c1\uff08\u7eff\u8272\uff09\u3002\u5982\u679c\u662f\uff0c\u606d\u559c\uff01\u4f60\u5df2\u7ecf\u5f97\u5230\u4e86Arduino\u7684\u8fd0\u884c\u3002\u5982\u679c\u60a8\u6709\u95ee\u9898\uff0c\u8bf7\u53c2\u9605\u6545\u969c\u6392\u9664\u5efa\u8bae\u3002  \u5728ATHEROS AR9331\u4e0a\u7f16\u7a0b  \u7f51\u7edc\u914d\u7f6e  Seeeduino Cloud\u5177\u6709WiFi\u63a5\u53e3\u548cLAN\u7aef\u53e3\u3002\u4ed6\u4eec\u90fd\u6709IP\u5730\u5740\uff0c\u53ef\u4ee5\u7528\u4e8e\u4e92\u8054\u7f51\u8fde\u63a5\u548c\u8bbe\u5907\u7ba1\u7406\u3002  1. Wi-Fi AP Mode  \u5f53\u60a8\u7b2c\u4e00\u6b21\u6253\u5f00Seeeduino Cloud\u65f6\uff0c\u5c06\u4f1a\u663e\u793aWi-Fi\u8fde\u63a5\u4e2d\u663e\u793a\u7684\u4e0d\u5b89\u5168WiFi\u7f51\u7edcSeeeduinoCloud-AXXXX\u3002\u60a8\u53ef\u4ee5\u5c06\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u6b64\u7f51\u7edc\uff0c\u5982\u4e0b\u6240\u793a\u3002\u60a8\u7684\u8ba1\u7b97\u673a\u5c06\u83b7\u5f97\u6b64\u7f51\u7edc\u7684IP\u5730\u5740  192.168.240.xxx \u3002Seeeduino Cloud\u7684\u9ed8\u8ba4IP\u5730\u5740\u4e3a  192.168.240.1 \u3002  2. Wi-Fi STA Mode  \u8fde\u63a5SeeeduinoCloud-AXXXX\u540e\uff0c\u5728\u6d4f\u89c8\u5668\u641c\u7d22\u6846\u4e2d\u8f93\u5165172.31.255.254\u6216192.168.240.1\uff0c\u60a8\u5c06\u4f7f\u7528Web UI\u8fde\u63a5\u5230Seeeduino Cloud\u3002\u9ed8\u8ba4\u5bc6\u7801\u4e3a\u201cseeeduino\u201d\uff0c\u7136\u540e\u5355\u51fbLOG IN\u3002   \u70b9\u51fb \"SYSTEM\", \u9009\u62e9\u60a8\u7684Wi-Fi\u7f51\u7edc\uff0c\u8f93\u5165\u5bc6\u7801\uff0c\u7136\u540e\u70b9\u51fb \"CONFIGURE   RESTART\".   3. Onboard Ethernet  \u5f53\u60a8\u4f7f\u7528\u4ee5\u592a\u7f51\u7535\u7f06\u5c06Seeeduino Cloud\u8fde\u63a5\u5230\u6709\u7ebf\u7f51\u7edc\u65f6\uff0c\u5c06\u5c1d\u8bd5\u901a\u8fc7DHCP\u81ea\u52a8\u8fde\u63a5\u3002\u8be5\u677f\u5c06\u663e\u793a\u5728\u7f51\u7edc\u5217\u8868\u4e0a\uff0c\u5c31\u50cf\u901a\u8fc7WiFi\u4e00\u6837\u3002  Terminal  \u60a8\u53ef\u4ee5\u901a\u8fc7SSH\u8bbf\u95eeSeeeduino Cloud\u7684\u7ec8\u7aef\uff0c\u4ee5\u7f16\u7a0b\u6216\u914d\u7f6eATHEROS AR9331\u3002   \u4e0b\u8f7d SSH client \u4f8b\u5982  putty  \u4f7f\u7528Seeeduino Cloud\u7684IP\u5730\u5740\u5e76\u8fd0\u884cSSH client\u3002   username: root\npassword: seeeduino   Yun Bridge Library  The Bridge Library \u7b80\u5316\u4e86Arduino Board\u548cDragino HE\u4e4b\u95f4\u7684\u901a\u8baf\u3002 \u6765\u81eaAVR\u7684Bridge commands\u7531HE\u4e0a\u7684Python\u6765\u89e3\u6790.  \u4ed6\u7684\u4f5c\u7528\u5982\u4e0b\uff1a   \u5728Arduino\u8981\u6c42\u7684\u65f6\u5019\u5728GNU / Linux\u7aef\u6267\u884c\u7a0b\u5e8f  \u63d0\u4f9b\u5171\u4eab\u5b58\u50a8\u7a7a\u95f4\uff0c\u7528\u4e8e\u5171\u4eab\u6570\u636e\uff0c\u5982Arduino\u548cInternet\u4e4b\u95f4\u7684\u4f20\u611f\u5668\u8bfb\u6570;  \u63a5\u6536\u6765\u81eaInternet\u7684\u547d\u4ee4\uff0c\u5e76\u5c06\u5176\u76f4\u63a5\u4f20\u9012\u5230Arduino\u3002   Arduino Official Website \u6709\u8be6\u7ec6\u7684\u89e3\u91ca\u548c\u5f88\u591a\u4f8b\u5b50\u6765\u5c55\u793a\u5982\u4f55\u4f7f\u7528Bridge. \u4ee5\u4e0b\u662f\u4f7f\u7528Bridge Library\u7684\u4e00\u4e9b\u793a\u4f8b.  Example 1: \u8ddfLinux\u6253\u62db\u547c  This example is a hello test between the Arduino and Seeeduino Cloud. The example can be found on the Arduino IDE  File   Examples   Bridge   ConsoleRead. A tutorial of this example can be found  here . You can see the code below with some additional details to understand it with the Seeeduino Cloud:\n\u8fd9\u4e2a\u4f8b\u5b50\u662fArduino\u548cSeeeduino Cloud\u4e4b\u95f4\u7684\u4e00\u4e2ahello\u6d4b\u8bd5\u3002\u8be5\u793a\u4f8b\u53ef\u4ee5\u5728Arduino IDE-  File -   Examples -   Bridge -   ConsoleRead\u4e2d\u627e\u5230\u3002\u8fd9\u4e2a\u4f8b\u5b50\u7684\u6559\u7a0b\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002\u60a8\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u67e5\u770b\u4e00\u4e9b\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f:  #include  Console.h \n\nString name;\n\nvoid setup() {\n    // Initialize Console and wait for port to open:\n    Bridge.begin();\n    Console.begin();\n\n    // Wait for Console port to connect\n    while (!Console);\n\n    Console.println( Hi, what s your name? );\n}\n\nvoid loop() {\n    if (Console.available()   0) {\n        char c = Console.read(); // read the next char received\n        // look for the newline character, this is the last character in the string\n        if (c ==  \\n ) {\n            //print text with the name received\n            Console.print( Hi  );\n            Console.print(name);\n            Console.println( ! Nice to meet you! );\n            Console.println();\n            // Ask again for name and clear the old name\n            Console.println( Hi, what s your name? );\n            name =  ;  // clear the name string\n        }\n        else {       // if the buffer is empty Cosole.read() returns -1\n            name += c; // append the read char from Console to the name string\n        }\n    }\n}  \u4f8b\u7a0b 2: \u4e0a\u4f20\u6570\u636e\u5230\u7269\u8054\u7f51\u670d\u52a1\u5668  \u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5c06\u6570\u636e\u8bb0\u5f55\u5230\u516c\u5171IoT\u670d\u52a1\u5668\u201cXively\u201d\u3002\u793a\u4f8b\u662f\u4eceArduino IDE-  File -   Examples -   Bridge -   XivelyClient. \u8fd9\u4e2a\u4f8b\u5b50\u7684\u6559\u7a0b\u53ef\u4ee5\u5728 \u8fd9\u91cc \u8fd9\u91cc\u53c2\u8003\u3002\u4e0a\u4f20\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\uff1a   Seeeduino Cloud \u63a5\u5165\u4e92\u8054\u7f51\u3002  \u6839\u636e\u6559\u7a0b\u8f93\u5165\u60a8\u7684FEED ID\u548cAPI KEY\u3002\u6ce8\u610f\uff0cFEED ID\u5e94\u5728\u53cc\u5f15\u53f7\u201c\u201d\u5185\u3002   /*\n  Xively sensor client with Strings\n\n This sketch connects an analog sensor to Xively,\n using an Arduino Y\u00fan.\n\n created 15 March 2010\n updated 27 May 2013\n by Tom Igoe\n\n http://arduino.cc/en/Tutorial/YunXivelyClient\n\n */\n#include  Process.h \n#include  passwords.h       // contains my passwords, see below\n\n/*\n  NOTE: passwords.h is not included with this repo because it contains my passwords.\n You need to create it for your own version of this application.  To do so, make\n a new tab in Arduino, call it passwords.h, and include the following variables and constants:\n\n #define APIKEY         foo                   // replace your pachube api key here\n #define FEEDID        0000                   // replace your feed ID\n #define USERAGENT      my-project            // user agent is the project name\n */\n\n// set up net client info:\nconst unsigned long postingInterval = 60000;  //delay between updates to xively.com\nunsigned long lastRequest = 0;      // when you last made a request\nString dataString =  ;\n\nvoid setup() {\n    // start serial port:\n    Bridge.begin();\n    Serial.begin(9600);\n\n    while (!Serial);   // wait for Network Serial to open\n    Serial.println( Xively client );\n\n    // Do a first update immediately\n    updateData();\n    sendData();\n    lastRequest = millis();\n}\n\nvoid loop() {\n    // get a timestamp so you can calculate reading and sending intervals:\n    long now = millis();\n\n    // if the sending interval has passed since your\n    // last connection, then connect again and send data:\n    if (now - lastRequest  = postingInterval) {\n        updateData();\n        sendData();\n        lastRequest = now;\n    }\n}\n\nvoid updateData() {\n    // convert the readings to a String to send it:\n    dataString =  Temperature, ;\n    dataString += random(10) + 20;\n    // add pressure:\n    dataString +=  \\nPressure, ;\n    dataString += random(5) + 100;\n}\n\n// this method makes a HTTP connection to the server:\nvoid sendData() {\n    // form the string for the API header parameter:\n    String apiString =  X-ApiKey:  ;\n    apiString += APIKEY;\n\n    // form the string for the URL parameter:\n    String url =  https://api.xively.com/v2/feeds/ ;\n    url += FEEDID;\n    url +=  .csv ;\n\n    // Send the HTTP PUT request\n\n    // Is better to declare the Process here, so when the\n    // sendData function finishes the resources are immediately\n    // released. Declaring it global works too, BTW.\n    Process xively;\n    Serial.print( \\n\\nSending data...  );\n    xively.begin( curl );\n    xively.addParameter( -k );\n    xively.addParameter( --request );\n    xively.addParameter( PUT );\n    xively.addParameter( --data );\n    xively.addParameter(dataString);\n    xively.addParameter( --header );\n    xively.addParameter(apiString);\n    xively.addParameter(url);\n    xively.run();\n    Serial.println( done! );\n\n    // If there s incoming data from the net connection,\n    // send it out the Serial:\n    while (xively.available()   0) {\n        char c = xively.read();\n        Serial.write(c);\n    }\n}   \u4f8b\u7a0b 3: \u5c06\u6570\u636e\u8bb0\u5f55\u5728USB\u95ea\u5b58\u4e2d  \u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5c06\u6570\u636e\u8bb0\u5f55\u5230USB\u95ea\u5b58\u3002\u672c\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u7a0b\u5e8f\u4e0e \u6b64\u5904 \u76f8\u540c\u3002\u5e76\u4e14\u53ef\u4ee5\u5728\u90a3\u91cc\u627e\u5230\u6e90\u4ee3\u7801\u3002Seeeduino Cloud\u5c06\u81ea\u52a8\u5c06USB\u95ea\u5b58\u6620\u5c04\u5230\u76ee\u5f55/ mnt /sda1\u3002\u800c\u7a0b\u5e8f\u4f1a\u5c06\u4f20\u611f\u5668\u6570\u636e\u9644\u52a0\u5230\u6587\u4ef6/mnt/sda1/data/datalog.csv\u3002\u56e0\u6b64\uff0c\u5728\u8fd0\u884c\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5728USB\u95ea\u5b58\u4e2d\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u3002  #include  FileIO.h      //FileIO class allow user to operate Linux file system\n#include  Console.h     //Console class provide the interactive between IDE and Yun Shield\nvoid setup() {\n    // Initialize the Console\n    Bridge.begin();\n    Console.begin();\n    FileSystem.begin();\n    while(!Console);   // wait for Serial port to connect.\n    Console.println( Filesystem datalogger\\n );\n}\nvoid loop () {\n    // make a string that start with a timestamp for assembling the data to log:\n    String dataString;\n    dataString += getTimeStamp();\n    dataString +=   ,  ;\n    // read three sensors and append to the string:\n    for (int analogPin = 0; analogPin   3; analogPin++) {\n        int sensor = analogRead(analogPin);\n        dataString += String(sensor);\n        if (analogPin   2) {\n            dataString +=  , ;    // separate the values with a comma\n        }\n    }\n    // open the file. note that only one file can be open at a time,\n    // so you have to close this one before opening another.\n    // The USB flash card is mounted at  /mnt/sda1  by default\n    File dataFile = FileSystem.open( /mnt/sda1/data/datalog.csv , FILE_APPEND);\n    // if the file is available, write to it:\n    if (dataFile) {\n        dataFile.println(dataString);\n        dataFile.close();\n        // print to the serial port too:\n        Console.println(dataString);\n    }\n    // if the file isn t open, pop up an error:\n    else {\n        Console.println( error opening datalog.csv );\n    }\n    delay(15000);  //Write every 15 seconds\n}\n// getTimeStamp function return a string with the time stamp\n// Yun Shield will call the Linux  date  command and get the time stamp\nString getTimeStamp() {\n    String result;\n    Process time;\n    // date is a command line utility to get the date and the time\n    // in different formats depending on the additional parameter\n    time.begin( date );\n    time.addParameter( +%D-%T );   // parameters: D for the complete date mm/dd/yy\n    //              T for the time hh:mm:ss\n    time.run();   // run the command\n    // read the output of the command\n    while(time.available() 0) {\n        char c = time.read();\n        if(c !=  \\n )\n        result += c;\n    }\n    return result;\n}   \u7269\u8054\u7f51\u670d\u52a1\u5668\u914d\u7f6e  IoT Server\u9875\u9762\u5141\u8bb8\u60a8\u5c06\u6570\u636e\u4e0a\u4f20\u5230\u8bf8\u5982Xively\u4e4b\u7c7b\u7684IoT\u7f51\u7ad9\uff0c\u800c\u60a8\u53ea\u9700\u8981\u5c06\u4f20\u611f\u5668\u6570\u636e\u5199\u5165\u4e32\u53e3\u3002   \u7a0b\u5e8f\u5982\u4e0b\uff1a  /*\n  Simulate UART TX Data\n\n This sketch simulate Temperature and Humidity data to UART.\n\n To test the pass through feature for different IoT service\n\n created 25 Apr 2014\n by Dragino Technology Co., Limited\n\n Reference:\n http://wiki.dragino.com/index.php?title=Xively#Upload_data_to_Xively_use_Pass_Through_Mode\n\n */\nString dataString =  ;\n\nvoid setup() {\n    Serial1.begin(115200);\n}\n\nvoid loop() {\n    dataString =  temp: ;\n    dataString += random(10) + 20;\n    Serial1.println(dataString);  // upload Temperature data\n    delay(20000);\n    dataString =  humidity: ;\n    dataString += random(5) + 70;  // upload humidity data\n    Serial1.println(dataString);\n    delay(20000);\n}", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Seeeduino_Cloud/#_6", 
            "text": "\u539f\u7406\u56fe   Seeeduino Cloud Eagle file  Seeeduino Cloud PDF file     \u56fa\u4ef6   Seeeduino Cloud Firmware     \u53c2\u8003\u8d44\u6599   Getting Started with Arduino  Arduino Language Reference  Download the Arduino Software(IDE)  Arduino FAQ  Arduino Introduction  Wikipedia page for Arduino  Arduino Yun Wiki  Getting started with Arduino Yun  Yun Bridge Library", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Seeeduino_Cloud/#faq", 
            "text": "\u4ec0\u4e48\u662f Yun Bridge Library?   Yun Bridge Library \u7528\u4e8eMPU\u548cMCU\u4e4b\u95f4\u901a\u4fe1\u7684\u673a\u5236\u3002 Seeeduino Cloud \u4f7f\u7528 Yun Bridge Library\uff0c \u8ba9Arduino\u7528\u6237\u8f7b\u677e\u6784\u5efa\u5176\u7269\u8054\u7f51\u9879\u76ee\u3002", 
            "title": "FAQ"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/", 
            "text": "Seeeduino LoRaWAN W / GPS\u662f\u5d4c\u5165\u4e86LoRaWan\u534f\u8bae\u548cGPS\u529f\u80fd\u7684Arduino\u5f00\u53d1\u677f\uff0c\u901a\u8fc7\u8fd9\u6b3e\u5f00\u53d1\u677f\u60a8\u53ef\u4ee5\u5feb\u901f\u4e0a\u624b\u5e76\u4e14\u4f53\u9a8c\u5230LoRa\u5728\u7269\u8054\u7f51\u9886\u57df\u7684\u4f18\u52bf\u3002\u57fa\u4e8e\u901a\u4fe1\u6a21\u5757RHF76-052AM\uff0cSeeeduino LoRaWAN\u4e0eLoRaWAN A / C\u7c7b\u517c\u5bb9\uff0c\u652f\u6301\u591a\u79cd\u901a\u4fe1\u9891\u7387\u3002\n\n\n4\u4e2a\u677f\u8f7d\u6807\u51c6Grove\u8fde\u63a5\u5668\u4f7fSeeeduino LoRaWan\u80fd\u591f\u65b9\u4fbf\u5730\u4e0eSeeedstudio\u7684\u6570\u767e\u4e2aGrove\u4f20\u611f\u5668\u548c\u6267\u884c\u5668\u8fde\u63a5\uff0c\u4ece\u800c\u4f7f\u7528\u6237\u80fd\u591f\u66f4\u52a0\u4e13\u6ce8\u4e8e\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u4e0d\u540c\u6a21\u5757\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u6b64\u5916\uff0c\u8be5\u677f\u8fd8\u5d4c\u5165\u4e86\u96c6\u6210\u7684\u9502\u7535\u6c60\u7ba1\u7406\u82af\u7247\uff0c\u53ef\u4ee5\u901a\u8fc7USB\u63a5\u53e3\u5bf9\u7535\u8def\u677f\u8fdb\u884c\u5145\u7535\u3002\u5728\u4f4e\u529f\u8017\u6a21\u5f0f\u4e0b\uff0c\u5145\u6ee1\u7535\u7684\u9502\u7535\u6c60\u53ef\u4ee5\u4e3a\u7535\u6c60\u4f9b\u7535\u6570\u6708\u3002\n\n\n\u5982\u679c\u60a8\u60f3\u5feb\u901f\u5efa\u7acb\u4e00\u4e2a\u7269\u8054\u7f51\u5e94\u7528\u7a0b\u5e8f\uff0cSeeeduino LoRaWAN\u5c06\u662f\u60a8\u7684\u6700\u4f73\u9009\u62e9\u3002\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7248\u672c\n\n\n\u7248\u672c\u65e5\u671f\n\n\n\u8d2d\u4e70\u65b9\u5f0f\n\n\n\n\n\n\n\n\n\n\nSeeeduino LoRaWAN\n\n\nDec 20, 2016\n\n\n\u70b9\u51fb\u8d2d\u4e70\n\n\n\n\n\n\nSeeeduino LoRaWAN W/GPS\n\n\nDec 20, 2016\n\n\n\u70b9\u51fb\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\u8bf7\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\u66f4\u65b0\u56fa\u4ef6\u3002\n\n\n\n\n\n\nTip\n\n\nSeeeduino LoRaWAN W / GPS\u7531GPS\u6a21\u5757\u548cLoRaWAN\u6a21\u5757\u7ec4\u6210\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u6700\u5c0f\u7535\u6d41 (3.7V \u9502\u7535\u6c60) - 2mA\n\n\n\u6700\u5c0f\u7535\u6d41 (3.7V \u9502\u7535\u6c60 \n \u53bb\u6389 PWR LED) - 80 uA\n\n\n\n\nArduino/Processor\uff08\u5904\u7406\u5668\uff09\n\n\n\n\nATSAMD21G18 @ 48MHz with 3.3V logic/power\n\n\nArduino compatible (based on Arduino Zero bootloader)\n\n\nEmbedded with lithium battery management chip and status indicator led\n\n\n20 GPIOs\n\n\n4 on-board Grove connectors\n\n\n18 x PWM pins\n\n\n6 x analog inputs\n\n\n1 x analog output (A0)\n\n\n3.3V regulator with 200mA output\n\n\nReset button\n\n\n\n\nLoRaWAN/RHF76-052\n\n\n\n\n1.45uA sleep current in WOR mode (Spec of the modules, not the board)\n\n\nHigh link budget of 160dB. -140dBm sensitivity and 19dBm Output power.\n\n\nDual band, 434/470MHz and 868/915MHz\n\n\n19dBm@434MHz/470MHz\n\n\n14dBm@868MHz/915MHz\n\n\n\n\n\n\nSupport LoRaWAN protocol, Class A/C\n\n\nUltra long range communication\n\n\nUltra low power consumption\n\n\nFirmware upgrade\n\n\nSmall size: 23mm X 28mm with 33 pin SMT package\n\n\n\n\n\n\nWarning\n\n\n\u4e0e\u5927\u591a\u6570Arduino\u548cGenuino\u677f\u4e0d\u540c\uff0cZore\u8fd0\u884c\u57283.3V\u3002I / O\u5f15\u811a\u53ef\u627f\u53d7\u7684\u6700\u5927\u7535\u538b\u4e3a3.3V\u3002\u5c06\u9ad8\u4e8e3.3V\u7684\u7535\u538b\u65bd\u52a0\u5230\u4efb\u4f55I / O\u5f15\u811a\u53ef\u80fd\u4f1a\u635f\u574f\u7535\u8def\u677f\u3002\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6570\u503c\n\n\n\n\n\n\n\n\n\n\n\u5fae\u5904\u7406\u5668\n\n\nATSAMD21G18, 32-Bit ARM Cortex M0+\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n3.3V\n\n\n\n\n\n\nDigital I/O Pins\n\n\n20\n\n\n\n\n\n\nPWM Pins\n\n\nAll but pins 2 and 7\n\n\n\n\n\n\nUART\n\n\n2 (Native and Programming)\n\n\n\n\n\n\nAnalog Input Pins\n\n\n6, 12-bit ADC channels\n\n\n\n\n\n\nAnalog Output Pins\n\n\n1, 10-bit DAC\n\n\n\n\n\n\n\u5916\u90e8\u4e2d\u65ad\n\n\nAll pins except pin 4\n\n\n\n\n\n\n\u76f4\u6d41\u7535\u6d41 I/O Pin\n\n\n7 mA\n\n\n\n\n\n\nFlash Memory\n\n\n256 KB\n\n\n\n\n\n\nSRAM\n\n\n32 KB\n\n\n\n\n\n\nEEPROM\n\n\nNone\n\n\n\n\n\n\nClock Speed\n\n\n48 MHz\n\n\n\n\n\n\n\u957f\n\n\n68 mm\n\n\n\n\n\n\n\u5bbd\n\n\n53 mm\n\n\n\n\n\n\n\u51c0\u91cd\n\n\n19.6g(without GPS), 19.9(with GPS)\n\n\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u7269\u8054\u7f51\n\n\n\u5b89\u4fdd\n\n\n\u667a\u80fd\u5bb6\u5c45\n\n\n\u667a\u80fd\u7535\u7f51\n\n\n\u667a\u80fd\u519c\u573a\n\n\n\u667a\u80fd\u516c\u56ed\n\n\n\n\n\n\nTip\n\n\n\n\n\u4f7f\u7528Grove\u6a21\u5757\u6269\u5c55\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\n\n\n\n\n\n\n\u677f\u4e0a\u67094\u4e2aGrove\u8fde\u63a5\u5668\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u542c\u8bf4Grove\uff0c\u8bf7\u70b9\u51fb \nGrove System\n \u83b7\u53d6\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u7b80\u800c\u8a00\u4e4b\uff0cGroves\u7cfb\u7edf\u662f\u7531\u6570\u767e\u79cd\u6807\u51c6\u7edf\u4e00\u7684\u4f20\u611f\u5668\uff0c\u6267\u884c\u5668\uff0c\u663e\u793a\u5668\u4ee5\u53ca\u901a\u8baf\u6a21\u5757\u7ec4\u6210\u7684\u6807\u51c6\u5316\u7cfb\u7edf\u3002\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n1.\n Micro USB - Programming and supply power to the board\n\n\n2.\n Grove connectors\n\n\n3.\n JST2.0 Lipo battery input (3.7V) and charge status led\n\n\n4.\n DFU Button - Firmware mode button\n\n\n5.\n Reset Button\n\n\n6.\n Arduino Pinout\n\n\n7.\n ICSP pins\n\n\n8.\n Firmware mode led\n\n\n9.\n Wire antenna\n\n\nA.\n uFL antenna\n\n\nB.\n RF module - RHF76-052AM\n\n\nC.\n ARM Cortex M0 processor - ATSAMD21G18\n\n\nD.\n LEDs\n\n\nRX/TX\n - \u5f53\u6709UART\u6570\u636e\u4f20\u8f93\u65f6\u4f1a\u95ea\u70c1(from/to USB)\n\n\nL\n - an led connect to D13\n\n\nPWR\n - power\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\u5982\u679c\u8981\u4f7f\u75284\u677f\u8f7dGrove\u8fde\u63a5\u5668\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4digitalWrite\uff0838\uff0cHIGH\uff09\u6253\u5f00VCC\u3002\u5426\u5219\u60a8\u65e0\u6cd5\u4e3aGrove\u6a21\u5757\u63d0\u4f9b\u7535\u6e90\u3002\n\n\n\n\n\n\n\u7ba1\u811a\u56fe\n\n\n\n\n\n\n\n\nPin \u540d\u79f0\n\n\nGPIO \u7f16\u53f7\n\n\n\u5916\u90e8\u4e2d\u65ad\n\n\nPWM\n\n\nAnalog In\n\n\nAnalog Out\n\n\n\u529f\u80fd\n\n\n\n\n\n\n\n\n\n\n0\n\n\n#0\n\n\nYES\n\n\nYES\n\n\n\n\n\n\nRX(Serial)\n\n\n\n\n\n\n1\n\n\n#1\n\n\nYES\n\n\nYES\n\n\n\n\n\n\nTX(Serial)\n\n\n\n\n\n\n2\n\n\n#2\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n#3\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n#4\n\n\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n#5\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n#6\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n#7\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n#8\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n#9\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n#10\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\n11\n\n\n#11\n\n\nYES\n\n\nYES\n\n\n\n\n\n\nSPI_MOSI\n\n\n\n\n\n\n12\n\n\n#12\n\n\nYES\n\n\nYES\n\n\n\n\n\n\nSPI_MISO\n\n\n\n\n\n\n13\n\n\n#13\n\n\nYES\n\n\nYES\n\n\n\n\n\n\nSPI_SCK\n\n\n\n\n\n\nSDA\n\n\n#20\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\nSCL\n\n\n#21\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n\n\nA0\n\n\n#A0\n\n\nYES\n\n\nYES\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\nA1\n\n\n#A1\n\n\nYES\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nA2\n\n\n#A2\n\n\nYES\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nA3\n\n\n#A3\n\n\nYES\n\n\nYES\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nA4\n\n\n#A4\n\n\nYES\n\n\nYES\n\n\nYES\n\n\n\n\nVoltage of Battery\n\n\n\n\n\n\nA5\n\n\n#A5\n\n\nYES\n\n\nYES\n\n\nYES\n\n\n\n\nCharge Status\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\u6240\u6709\u7684\u5f15\u811a\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6570\u5b57\u4fe1\u53f7\u7684\u8f93\u5165/\u8f93\u51fa\u3002\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5357 - Arduino IDE\n\n\n\n\nNote\n\n\n\n\n\u8fd9\u4e2a\u6307\u5357\u662f\u57fa\u4e8eWin10 \u548c Arduino IDE v1.6.0\n\n\n\n\n\n\n\u9996\u5148\u60a8\u9700\u8981\u5b89\u88c5\u6700\u65b0\u7684 Arduino IDE, \u7136\u540e\u70b9\u51fb\u8fd9\u91cc\u5c06 \nSeeeduino LoRa\n \u6dfb\u52a0\u5230\u60a8\u7684 Arduino IDE\u3002\n\n\n\u5b89\u88c5\u9a71\u52a8 (For Windows)\n\n\n\u5f53\u7b2c\u4e00\u6b21\u63d2\u5165\u7535\u8def\u677f\u65f6\uff0c\u60a8\u5e94\u8be5\u4f1a\u5f97\u5230\u540d\u4e3aSeeeduino LoRaWAN\u7684USB COM\u8bbe\u5907\u3002\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\u6765\u4e0b\u8f7d\u5f00\u53d1\u677f\u7684\u9a71\u52a8\u3002\n\n\n\n\n\u4e3a\u4e86\u786e\u4fdd\u9a71\u52a8\u7a0b\u5e8f\u5b89\u88c5\u6210\u529f\uff0c\u8bf7\u6253\u5f00\u8bbe\u5907\u7ba1\u7406\u5668\u4ee5\u67e5\u770b \nSeeeduino LoRaWAN\n \u662f\u5426\u5b58\u5728\u3002\n\n\n\n\n\u95ea\u70c1\n\n\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4e0a\u4f20\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b - \u201c\u95ea\u70c1\u201d\u5230Seeeduino LoRaWAN\u3002\n\n\n\u6253\u5f00\u60a8\u7684Arduino IDE\uff0c\u7136\u540e\u5355\u51fb \nFile\uff08\u6587\u4ef6\uff09 \n Examples\uff08\u793a\u4f8b\uff09 \n 01.Basics \n Blink\n \u6765\u6253\u5f00\u4f8b\u7a0b\u6216\u8005\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n\n// the setup function runs once when you press reset or power the board\n\n\nvoid\n \nsetup\n()\n \n{\n\n  \n// initialize digital pin 13 as an output.\n\n  \npinMode\n(\n13\n,\n \nOUTPUT\n);\n\n\n}\n\n\n\n// the loop function runs over and over again forever\n\n\nvoid\n \nloop\n()\n \n{\n\n  \ndigitalWrite\n(\n13\n,\n \nHIGH\n);\n   \n// turn the LED on (HIGH is the voltage level)\n\n  \ndelay\n(\n1000\n);\n              \n// wait for a second\n\n  \ndigitalWrite\n(\n13\n,\n \nLOW\n);\n    \n// turn the LED off by making the voltage LOW\n\n  \ndelay\n(\n1000\n);\n              \n// wait for a second\n\n\n}\n\n\n\n\n\n\u7136\u540e,\n\n\n\u70b9\u51fb\u5de5\u5177\n\u677f\n Seeeduino LoRaWAN\n\n\n\u5355\u51fb\u5de5\u5177\n\u7aef\u53e3\u4ee5\u9009\u62e9\u6b63\u786e\u7684\u7aef\u53e3\u53f7\u3002\uff08\u4e0d\u8981\u9009\u62e9COM1\uff09\n\n\n\n\n\u7136\u540e\u70b9\u51fbArduino IDE\u5de6\u4e0a\u89d2\u7684\u4e0a\u4f20\u6309\u94ae\uff0c\u51e0\u79d2\u949f\u540e\u4f8b\u7a0b\u4e0a\u4f20\u6210\u529f\u3002\n\n\n\n\n\u5982\u679c\u4e0a\u4f20\u6210\u529f\uff0c\u60a8\u5c06\u770b\u5230\u4e0b\u56fe\u6240\u793a\u7684\u7ea2\u8272\u4fe1\u606f\uff0c\u8fd9\u65f6\u89c2\u5bdf\u60a8\u7684\u677f\u8f7dLED\uff0c\u770b\uff0c\u5b83\u5728\u95ea\u70c1\uff01\n\n\n\n\n\u7535\u6c60\n\n\n\u60a8\u53ef\u4ee5\u901a\u8fc73.7V \u9502\u7535\u6c60\u4e3a\u7535\u8def\u677f\u4f9b\u7535\u3002\u4ea7\u54c1\u5957\u4ef6\u4e2d\u6709\u4e00\u4e2aJST2.0\u7535\u7f06\uff0c\u5982\u679c\u60a8\u4e0d\u80fd\u627e\u5230\u5e26\u6709JST2.0\u8fde\u63a5\u5668\u7684\u7535\u6c60\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u6839\u7ebf\u7f06\u3002\n\n\n\n\nWarning\n\n\n\n\n\u786e\u4fdd\u7535\u6c60\u7684\u6b63\u6781\u548c\u8d1f\u6781\u8fde\u63a5\u6b63\u786e\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u635f\u574f\u7535\u8def\u677f\u3002.\n\n\n\n\n\n\n\u7535\u6c60\u7684\u5145\u7535\u72b6\u6001\u5f15\u811a\u548c\u6b63\u6781\u5f15\u811a\u5206\u522b\u8fde\u63a5\u5230A4\u548cA5\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u68c0\u6d4b\u7535\u6c60\u7684\u5145\u7535\u72b6\u6001\u548c\u6d4b\u91cf\u7535\u6c60\u7535\u538b\u3002\n\n\n\u590d\u5236\u5e76\u4e0a\u4f20\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u68c0\u6d4b\u7535\u6c60\u72b6\u6001\u3002\n\n\n\n\nNote\n\n\n\n\n\u5145\u7535\u65f6\uff0c\u72b6\u6001\u503c\u8fd4\u56de0\uff1b\u5145\u7535\u5b8c\u6210\u6216\u65e0\u7535\u6c60\u63d2\u5165\uff0c\u72b6\u6001\u503c\u8fd4\u56de1\u3002\n\n\n\n\n\n\n\u53d1\u9001\u548c\u63a5\u6536\u793a\u4f8b\n\n\nLoRaWAN\u6a21\u5757\u62e5\u6709\u4e00\u4e2a\u5f88\u597d\u7528\u7684\u5e93\uff0c\u5bf9\u4e8e\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u5f88\u591a\u5173\u4e8eLoRa\u7684\u534f\u8bae\uff08\u534f\u8bae\u662f\u5f88\u590d\u6742\u548c\u96be\u4ee5\u9605\u8bfb\u7684\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u9ad8\u7ea7\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u5173\u4e8eLoRa\u534f\u8bae\u7684\u77e5\u8bc6\u3002\u60a8\u4e0d\u9700\u8981\u4e0b\u8f7d\u5e93\uff0c\u5b83\u5df2\u7ecf\u5305\u542b\u5728\u5305\u4e2d\u3002\u60a8\u53ef\u4ee5\u5728 \nFile\uff08\u6587\u4ef6\uff09 \n Examples\uff08\u793a\u4f8b\uff09 \n LoRaWAN\n \u4e2d\u627e\u5230\u793a\u4f8b\u7a0b\u5e8f\u3002\n\n\n\u60a8\u9700\u89812\u5757Seeeduino LoRaWAN\u6765\u5b8c\u6210\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u7528\u4e8e\u53d1\u9001\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u63a5\u6536\u3002\n\n\n\u53d1\u9001\n\n\n\u6253\u5f00\u60a8\u7684Arduino IDE\uff0c\u7136\u540e\u5355\u51fb \nFile\uff08\u6587\u4ef6\uff09 \n Examples\uff08\u793a\u4f8b\uff09 \n LoRaWAN \n p2p_tx\n \u6765\u6253\u5f00\u4f8b\u7a0b\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u590d\u5236\u4e0b\u9762\u7684\u7684\u4ee3\u7801\u3002\n\u8be5\u4f8b\u7a0b\u5c06\u4f1a\u6bcf\u96943000 ms\u5e7f\u64ad\u4e00\u6b21 \"Hello World!\"\n\n\n// Seduino LoRaWAN - TX example\n#include \nLoRaWan.h\n\n\nvoid setup(void)\n{\n    SerialUSB.begin(115200);\n    lora.init();\n    lora.initP2PMode(433, SF12, BW125, 8, 8, 20);\n}\n\nvoid loop(void)\n{\n    lora.transferPacketP2PMode(\nHello World!\n);\n    SerialUSB.println(\nSend string.\n);\n    delay(3000);\n}\n\n\n\n\n\u63a5\u6536\n\n\n\u6253\u5f00\u60a8\u7684 Arduino IDE \u70b9\u51fb \nFile\uff08\u6587\u4ef6\uff09 \n Examples\uff08\u793a\u4f8b\uff09 \n LoRaWAN \n p2p_rx\n \u6765\u6253\u5f00\u4f8b\u7a0b\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u590d\u5236\u4e0b\u9762\u7684\u7684\u4ee3\u7801\uff1a\n\n\n// Seduino LoRaWAN - RX example\n#include \nLoRaWan.h\n\n\nunsigned char buffer[128] = {0, };\n\nvoid setup(void)\n{\n    SerialUSB.begin(115200);\n    lora.init();\n    lora.initP2PMode(433, SF12, BW125, 8, 8, 20);\n}\n\nvoid loop(void)\n{\n    short length = 0;\n    short rssi = 0;\n\n    memset(buffer, 0, 128);\n    length = lora.receivePacketP2PMode(buffer, 128,  \nrssi, 1);\n\n    if(length)\n    {\n        SerialUSB.print(\nLength is: \n);\n        SerialUSB.println(length);\n        SerialUSB.print(\nRSSI is: \n);\n        SerialUSB.println(rssi);\n        SerialUSB.print(\nData is: \n);\n        for(unsigned char i = 0; i \n length; i ++)\n        {\n            SerialUSB.print(\n0x\n);\n            SerialUSB.print(buffer[i], HEX);\n            SerialUSB.print(\n \n);\n        }\n        SerialUSB.println();\n    }\n}\n\n\n\n\n\u5728\u4e24\u4e2a\u4f8b\u7a0b\u90fd\u4e0a\u4f20\u5b8c\u6bd5\u540e\uff0c\u6253\u5f00\u63a5\u6536\u677f\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u83b7\u53d6\u4e00\u4e9b\u6570\u636e\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\n\n\n\nNote\n\n\n\u6211\u4eec\u5c06\u5f88\u5feb\u4e3aLoRa\u63d0\u4f9b\u7f51\u5173\u5957\u4ef6\uff0c\u6211\u4eec\u5c06\u5728\u5957\u4ef6\u7684\u7ef4\u57fa\u4e0a\u6dfb\u52a0\u5173\u4e8eAPB\u548cOTAA\u6a21\u5f0f\u7684\u5165\u95e8\u3002\n\n\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\n\n\nW\u6211\u4eec\u63d0\u4f9b\u4e86\u5f88\u591a\u6709\u7528\u7684\u4f8b\u5b50\u3002\u60a8\u53ef\u4ee5\u6253\u5f00 \nFile\uff08\u6587\u4ef6\uff09 \n Examples\uff08\u793a\u4f8b\uff09 \n LoRaWan\n \u6765\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4f8b\u7a0b\u5305\u62ec\uff1a\n\n\n\n\nABP\n\n\nOTAA\n\n\np2p-rx\n\n\np2p-tx\n\n\n\n\nGPS\u6570\u636e\n\n\n\n\nNote\n\n\n\u672c\u7ae0\u4ec5\u9002\u7528\u4e8eSeeeduino LoRaWAN W / GPS\u3002\n\n\n\n\n\u590d\u5236\u4e0b\u9762\u7684\u4ee3\u7801\u4f60Seeeduino LoRaWAN W / GPS\u3002\n\nvoid setup()\n{\n    Serial.begin(9600);\n    SerialUSB.begin(115200);\n}\n\nvoid loop()\n{\n    while(Serial.available())\n    {\n        SerialUSB.write(Serial.read());\n    }\n    while(SerialUSB.available())\n    {\n        Serial.write(SerialUSB.read());\n    }\n}\n\n\n\n\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u7136\u540e\u60a8\u5c06\u4eceGPS\u83b7\u53d6\u6570\u636e\u3002\n\n\n\n\u4f4e\u529f\u8017\u3001\u5c0f\u7535\u6d41\n\n\n\u6211\u4eec\u6d4b\u8bd5\u7684\u6700\u5c0f\u7535\u6d41\u4e3a80uA\uff08\u5bf9\u4e8eSeeeduino LoRaWAN\uff09\u3002\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\u3002\n\n\n1\u3001\u53d6\u4e0bPWR LED\uff08\u5982\u679c\u4e0d\u53d6\u4e0b\u6b64LED\uff0c\u7535\u6d41\u5c06\n 2mA\uff09\n2\u3001\u53d6\u4e0bCHG LED\n3\u3001\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0a\u4f20\u5230\u60a8\u7684\u4e3b\u677f\u3002\n\n\n\n\n\n#include \nLoRaWan.h\n\n#include \nEnergySaving.h\n\n\nEnergySaving nrgSave;\n\nvoid blink()\n{\n    for(unsigned char i = 0; i \n 5; i ++)\n    {\n        digitalWrite(13,HIGH);\n        delay(500);\n        digitalWrite(13,LOW);\n        delay(500);\n    }\n}\n\nvoid setup()\n{\n    for(unsigned char i = 0; i \n 26; i ++)      // important, set all pins to HIGH to save power\n    {\n        pinMode(i, OUTPUT);\n        digitalWrite(i, HIGH);\n    }\n\n    lora.init();\n    blink();    \n    lora.setDeviceLowPower();\n    blink();    \n    nrgSave.begin(WAKE_EXT_INTERRUPT, 7, dummy);    // buton on D7 to wake up the board\n    nrgSave.standby();\n}\n\nvoid loop()\n{\n    blink();\n    nrgSave.standby();\n}\n\nvoid dummy(void)\n{\n    // do something\n}\n\n// END File\n\n\n\n\n\u66f4\u65b0\u56fa\u4ef6\n\n\n\u56fa\u4ef6\u7248\u672c\u4e3a2.0.10\uff0c\u5982\u679c\u60a8\u60f3\u68c0\u67e5\u60a8\u7684\u7248\u672c\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0a\u4f20\u5230\u60a8\u7684\u4e3b\u677f\u3002\n\nvoid setup()\n{\n    Serial1.begin(9600);\n    SerialUSB.begin(115200);\n}\n\nvoid loop()\n{\n    while(Serial1.available())\n    {\n        SerialUSB.write(Serial1.read());\n    }\n    while(SerialUSB.available())\n    {\n        Serial1.write(SerialUSB.read());\n    }\n}\n\n\n\u6253\u5f00\u60a8\u7684\u4e32\u53e3\u76d1\u89c6\u5668\uff0c\u7136\u540e\u8f93\u5165\uff1a\n\nAT+VER\n\n\n\u7136\u540e\u60a8\u5c06\u770b\u5230\u60a8\u7684\u5f00\u53d1\u677f\u5f53\u524d\u7684\u7248\u672c\u3002\n\n\n\n\n\u5982\u679c\u8981\u66f4\u65b0\u56fa\u4ef6\uff0c\u5219\u9700\u8981\u9075\u5faa\u51e0\u4e2a\u6b65\u9aa4\u3002\n\n\n\u6b65\u9aa41\n\n\n\u5c06\u4e0b\u5217\u4ee3\u7801\u590d\u5236\u5e76\u4e0a\u4f20\u5230\u60a8\u7684\u4e3b\u677f\u3002\n\n\n// Update firmware to RHF76-052AM\n\n\n#include\n \nArduino.h\n\n\n\nvoid\n \nsetup\n()\n\n\n{\n\n    \nSerialDBG\n.\nbegin\n(\n115200\n);\n\n    \nSerialUSB\n.\nbegin\n(\n115200\n);\n\n\n}\n\n\n\nvoid\n \nloop\n()\n\n\n{\n\n    \nwhile\n(\nSerialDBG\n.\navailable\n())\n\n    \n{\n\n        \nSerialUSB\n.\nwrite\n(\nSerialDBG\n.\nread\n());\n\n    \n}\n\n    \nwhile\n(\nSerialUSB\n.\navailable\n())\n\n    \n{\n\n        \nSerialDBG\n.\nwrite\n(\nSerialUSB\n.\nread\n());\n\n    \n}\n\n\n}\n\n\n\n\n\n\u6b65\u9aa42\n\n\n\u5c06\u677f\u5361\u7684USB\u63a5\u5934\u53d6\u4e0b\uff0c\u7136\u540e\u63d2\u4e0a\uff0c\u91cd\u65b0\u8fde\u63a5\u7535\u8111\uff0c\u7136\u540e\u70b9\u51fbDFU\u6309\u94ae\uff0c\u7b49\u5230\u56fa\u4ef6\u6a21\u5f0fLED\u5f00\u59cb\u95ea\u70c1\u60a8\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002\n\n\n\u6b65\u9aa43\n\n\n\u70b9\u51fb\u4e0b\u8f7d\u6700\u65b0\u7684\u56fa\u4ef6 .bin file.\n\n\n\n\n\u6b65\u9aa44\n\n\n\u6253\u5f00PuTTy\u5e76\u8fde\u63a5\u5230\u7535\u8def\u677f\n\n\n\n\n\n\nTip\n\n\n\n\n\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6700\u65b0\u7684PuTTy\uff1a.php \nhttp://www.extraputty.com/download.php\n\n\n\n\n\n\n\u6b65\u9aa45\n\n\n\u5c06\u60a8\u7684\u5f00\u53d1\u677f\u548cPutty\u76f8\u8fde\uff0c\u60a8\u5c06\u770b\u5230\u5b57\u6bcd\u201cC\u201d\u4e0d\u65ad\u5730\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002\u70b9\u51fb**Files Transfer\uff08\u6587\u4ef6\u4f20\u8f93\uff09 \n Ymodem \n Send**, \u7136\u540e\u9009\u62e9\u6b65\u9aa44\u4e2d\u4e0b\u8f7d\u7684.bin file\u3002\n\n\n\u7136\u540e\u5347\u7ea7\u5c31\u5f00\u59cb\u4e86\u3002\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[eagle\u539f\u7406\u56fe]\n \nSchematics in Eagle\n\n\n[sketchup\u6587\u4ef6]\n \nSketchup file(3D)\n\n\n[RHF76-052 \u7535\u6c14\u56fe]\n  \nCE certification of RHF 76-052\n\n\n[RHF76-052\u56fa\u4ef6]\n \nRHF76-052 Firmware V2.0.10\n\n\n[\u6570\u636e\u624b\u518cRHF76-052AM]\n \nDatasheet of RHF76-052AM", 
            "title": "Seeeduino_LoRAWAN"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_1", 
            "text": "\u6700\u5c0f\u7535\u6d41 (3.7V \u9502\u7535\u6c60) - 2mA  \u6700\u5c0f\u7535\u6d41 (3.7V \u9502\u7535\u6c60   \u53bb\u6389 PWR LED) - 80 uA", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#arduinoprocessor", 
            "text": "ATSAMD21G18 @ 48MHz with 3.3V logic/power  Arduino compatible (based on Arduino Zero bootloader)  Embedded with lithium battery management chip and status indicator led  20 GPIOs  4 on-board Grove connectors  18 x PWM pins  6 x analog inputs  1 x analog output (A0)  3.3V regulator with 200mA output  Reset button", 
            "title": "Arduino/Processor\uff08\u5904\u7406\u5668\uff09"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#lorawanrhf76-052", 
            "text": "1.45uA sleep current in WOR mode (Spec of the modules, not the board)  High link budget of 160dB. -140dBm sensitivity and 19dBm Output power.  Dual band, 434/470MHz and 868/915MHz  19dBm@434MHz/470MHz  14dBm@868MHz/915MHz    Support LoRaWAN protocol, Class A/C  Ultra long range communication  Ultra low power consumption  Firmware upgrade  Small size: 23mm X 28mm with 33 pin SMT package    Warning  \u4e0e\u5927\u591a\u6570Arduino\u548cGenuino\u677f\u4e0d\u540c\uff0cZore\u8fd0\u884c\u57283.3V\u3002I / O\u5f15\u811a\u53ef\u627f\u53d7\u7684\u6700\u5927\u7535\u538b\u4e3a3.3V\u3002\u5c06\u9ad8\u4e8e3.3V\u7684\u7535\u538b\u65bd\u52a0\u5230\u4efb\u4f55I / O\u5f15\u811a\u53ef\u80fd\u4f1a\u635f\u574f\u7535\u8def\u677f\u3002", 
            "title": "LoRaWAN/RHF76-052"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_2", 
            "text": "\u9879\u76ee  \u6570\u503c      \u5fae\u5904\u7406\u5668  ATSAMD21G18, 32-Bit ARM Cortex M0+    \u5de5\u4f5c\u7535\u538b  3.3V    Digital I/O Pins  20    PWM Pins  All but pins 2 and 7    UART  2 (Native and Programming)    Analog Input Pins  6, 12-bit ADC channels    Analog Output Pins  1, 10-bit DAC    \u5916\u90e8\u4e2d\u65ad  All pins except pin 4    \u76f4\u6d41\u7535\u6d41 I/O Pin  7 mA    Flash Memory  256 KB    SRAM  32 KB    EEPROM  None    Clock Speed  48 MHz    \u957f  68 mm    \u5bbd  53 mm    \u51c0\u91cd  19.6g(without GPS), 19.9(with GPS)", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_3", 
            "text": "\u7269\u8054\u7f51  \u5b89\u4fdd  \u667a\u80fd\u5bb6\u5c45  \u667a\u80fd\u7535\u7f51  \u667a\u80fd\u519c\u573a  \u667a\u80fd\u516c\u56ed    Tip   \u4f7f\u7528Grove\u6a21\u5757\u6269\u5c55\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f    \u677f\u4e0a\u67094\u4e2aGrove\u8fde\u63a5\u5668\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u542c\u8bf4Grove\uff0c\u8bf7\u70b9\u51fb  Grove System  \u83b7\u53d6\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u7b80\u800c\u8a00\u4e4b\uff0cGroves\u7cfb\u7edf\u662f\u7531\u6570\u767e\u79cd\u6807\u51c6\u7edf\u4e00\u7684\u4f20\u611f\u5668\uff0c\u6267\u884c\u5668\uff0c\u663e\u793a\u5668\u4ee5\u53ca\u901a\u8baf\u6a21\u5757\u7ec4\u6210\u7684\u6807\u51c6\u5316\u7cfb\u7edf\u3002", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_4", 
            "text": "1.  Micro USB - Programming and supply power to the board  2.  Grove connectors  3.  JST2.0 Lipo battery input (3.7V) and charge status led  4.  DFU Button - Firmware mode button  5.  Reset Button  6.  Arduino Pinout  7.  ICSP pins  8.  Firmware mode led  9.  Wire antenna  A.  uFL antenna  B.  RF module - RHF76-052AM  C.  ARM Cortex M0 processor - ATSAMD21G18  D.  LEDs  RX/TX  - \u5f53\u6709UART\u6570\u636e\u4f20\u8f93\u65f6\u4f1a\u95ea\u70c1(from/to USB)  L  - an led connect to D13  PWR  - power      Tip   \u5982\u679c\u8981\u4f7f\u75284\u677f\u8f7dGrove\u8fde\u63a5\u5668\uff0c\u8bf7\u4f7f\u7528\u547d\u4ee4digitalWrite\uff0838\uff0cHIGH\uff09\u6253\u5f00VCC\u3002\u5426\u5219\u60a8\u65e0\u6cd5\u4e3aGrove\u6a21\u5757\u63d0\u4f9b\u7535\u6e90\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_5", 
            "text": "Pin \u540d\u79f0  GPIO \u7f16\u53f7  \u5916\u90e8\u4e2d\u65ad  PWM  Analog In  Analog Out  \u529f\u80fd      0  #0  YES  YES    RX(Serial)    1  #1  YES  YES    TX(Serial)    2  #2  YES        3  #3  YES  YES       4  #4   YES       5  #5  YES  YES       6  #6  YES  YES       7  #7  YES        8  #8  YES  YES       9  #9  YES  YES       10  #10  YES  YES       11  #11  YES  YES    SPI_MOSI    12  #12  YES  YES    SPI_MISO    13  #13  YES  YES    SPI_SCK    SDA  #20  YES  YES       SCL  #21  YES  YES       A0  #A0  YES  YES  YES  YES     A1  #A1  YES  YES  YES      A2  #A2  YES  YES  YES      A3  #A3  YES  YES  YES      A4  #A4  YES  YES  YES   Voltage of Battery    A5  #A5  YES  YES  YES   Charge Status      Note   \u6240\u6709\u7684\u5f15\u811a\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6570\u5b57\u4fe1\u53f7\u7684\u8f93\u5165/\u8f93\u51fa\u3002", 
            "title": "\u7ba1\u811a\u56fe"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#-arduino-ide", 
            "text": "Note   \u8fd9\u4e2a\u6307\u5357\u662f\u57fa\u4e8eWin10 \u548c Arduino IDE v1.6.0    \u9996\u5148\u60a8\u9700\u8981\u5b89\u88c5\u6700\u65b0\u7684 Arduino IDE, \u7136\u540e\u70b9\u51fb\u8fd9\u91cc\u5c06  Seeeduino LoRa  \u6dfb\u52a0\u5230\u60a8\u7684 Arduino IDE\u3002", 
            "title": "\u5165\u95e8\u6307\u5357 - Arduino IDE"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#for-windows", 
            "text": "\u5f53\u7b2c\u4e00\u6b21\u63d2\u5165\u7535\u8def\u677f\u65f6\uff0c\u60a8\u5e94\u8be5\u4f1a\u5f97\u5230\u540d\u4e3aSeeeduino LoRaWAN\u7684USB COM\u8bbe\u5907\u3002\u70b9\u51fb\u4e0b\u9762\u7684\u94fe\u63a5\u6765\u4e0b\u8f7d\u5f00\u53d1\u677f\u7684\u9a71\u52a8\u3002   \u4e3a\u4e86\u786e\u4fdd\u9a71\u52a8\u7a0b\u5e8f\u5b89\u88c5\u6210\u529f\uff0c\u8bf7\u6253\u5f00\u8bbe\u5907\u7ba1\u7406\u5668\u4ee5\u67e5\u770b  Seeeduino LoRaWAN  \u662f\u5426\u5b58\u5728\u3002", 
            "title": "\u5b89\u88c5\u9a71\u52a8 (For Windows)"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_6", 
            "text": "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4e0a\u4f20\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b - \u201c\u95ea\u70c1\u201d\u5230Seeeduino LoRaWAN\u3002  \u6253\u5f00\u60a8\u7684Arduino IDE\uff0c\u7136\u540e\u5355\u51fb  File\uff08\u6587\u4ef6\uff09   Examples\uff08\u793a\u4f8b\uff09   01.Basics   Blink  \u6765\u6253\u5f00\u4f8b\u7a0b\u6216\u8005\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\uff1a  // the setup function runs once when you press reset or power the board  void   setup ()   { \n   // initialize digital pin 13 as an output. \n   pinMode ( 13 ,   OUTPUT );  }  // the loop function runs over and over again forever  void   loop ()   { \n   digitalWrite ( 13 ,   HIGH );     // turn the LED on (HIGH is the voltage level) \n   delay ( 1000 );                // wait for a second \n   digitalWrite ( 13 ,   LOW );      // turn the LED off by making the voltage LOW \n   delay ( 1000 );                // wait for a second  }   \u7136\u540e,  \u70b9\u51fb\u5de5\u5177 \u677f  Seeeduino LoRaWAN  \u5355\u51fb\u5de5\u5177 \u7aef\u53e3\u4ee5\u9009\u62e9\u6b63\u786e\u7684\u7aef\u53e3\u53f7\u3002\uff08\u4e0d\u8981\u9009\u62e9COM1\uff09   \u7136\u540e\u70b9\u51fbArduino IDE\u5de6\u4e0a\u89d2\u7684\u4e0a\u4f20\u6309\u94ae\uff0c\u51e0\u79d2\u949f\u540e\u4f8b\u7a0b\u4e0a\u4f20\u6210\u529f\u3002   \u5982\u679c\u4e0a\u4f20\u6210\u529f\uff0c\u60a8\u5c06\u770b\u5230\u4e0b\u56fe\u6240\u793a\u7684\u7ea2\u8272\u4fe1\u606f\uff0c\u8fd9\u65f6\u89c2\u5bdf\u60a8\u7684\u677f\u8f7dLED\uff0c\u770b\uff0c\u5b83\u5728\u95ea\u70c1\uff01", 
            "title": "\u95ea\u70c1"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_7", 
            "text": "\u60a8\u53ef\u4ee5\u901a\u8fc73.7V \u9502\u7535\u6c60\u4e3a\u7535\u8def\u677f\u4f9b\u7535\u3002\u4ea7\u54c1\u5957\u4ef6\u4e2d\u6709\u4e00\u4e2aJST2.0\u7535\u7f06\uff0c\u5982\u679c\u60a8\u4e0d\u80fd\u627e\u5230\u5e26\u6709JST2.0\u8fde\u63a5\u5668\u7684\u7535\u6c60\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u6839\u7ebf\u7f06\u3002   Warning   \u786e\u4fdd\u7535\u6c60\u7684\u6b63\u6781\u548c\u8d1f\u6781\u8fde\u63a5\u6b63\u786e\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u635f\u574f\u7535\u8def\u677f\u3002.    \u7535\u6c60\u7684\u5145\u7535\u72b6\u6001\u5f15\u811a\u548c\u6b63\u6781\u5f15\u811a\u5206\u522b\u8fde\u63a5\u5230A4\u548cA5\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u68c0\u6d4b\u7535\u6c60\u7684\u5145\u7535\u72b6\u6001\u548c\u6d4b\u91cf\u7535\u6c60\u7535\u538b\u3002  \u590d\u5236\u5e76\u4e0a\u4f20\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u68c0\u6d4b\u7535\u6c60\u72b6\u6001\u3002   Note   \u5145\u7535\u65f6\uff0c\u72b6\u6001\u503c\u8fd4\u56de0\uff1b\u5145\u7535\u5b8c\u6210\u6216\u65e0\u7535\u6c60\u63d2\u5165\uff0c\u72b6\u6001\u503c\u8fd4\u56de1\u3002", 
            "title": "\u7535\u6c60"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_8", 
            "text": "LoRaWAN\u6a21\u5757\u62e5\u6709\u4e00\u4e2a\u5f88\u597d\u7528\u7684\u5e93\uff0c\u5bf9\u4e8e\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u5f88\u591a\u5173\u4e8eLoRa\u7684\u534f\u8bae\uff08\u534f\u8bae\u662f\u5f88\u590d\u6742\u548c\u96be\u4ee5\u9605\u8bfb\u7684\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u9ad8\u7ea7\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u5173\u4e8eLoRa\u534f\u8bae\u7684\u77e5\u8bc6\u3002\u60a8\u4e0d\u9700\u8981\u4e0b\u8f7d\u5e93\uff0c\u5b83\u5df2\u7ecf\u5305\u542b\u5728\u5305\u4e2d\u3002\u60a8\u53ef\u4ee5\u5728  File\uff08\u6587\u4ef6\uff09   Examples\uff08\u793a\u4f8b\uff09   LoRaWAN  \u4e2d\u627e\u5230\u793a\u4f8b\u7a0b\u5e8f\u3002  \u60a8\u9700\u89812\u5757Seeeduino LoRaWAN\u6765\u5b8c\u6210\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u7528\u4e8e\u53d1\u9001\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u63a5\u6536\u3002", 
            "title": "\u53d1\u9001\u548c\u63a5\u6536\u793a\u4f8b"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_9", 
            "text": "\u6253\u5f00\u60a8\u7684Arduino IDE\uff0c\u7136\u540e\u5355\u51fb  File\uff08\u6587\u4ef6\uff09   Examples\uff08\u793a\u4f8b\uff09   LoRaWAN   p2p_tx  \u6765\u6253\u5f00\u4f8b\u7a0b\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u590d\u5236\u4e0b\u9762\u7684\u7684\u4ee3\u7801\u3002\n\u8be5\u4f8b\u7a0b\u5c06\u4f1a\u6bcf\u96943000 ms\u5e7f\u64ad\u4e00\u6b21 \"Hello World!\"  // Seduino LoRaWAN - TX example\n#include  LoRaWan.h \n\nvoid setup(void)\n{\n    SerialUSB.begin(115200);\n    lora.init();\n    lora.initP2PMode(433, SF12, BW125, 8, 8, 20);\n}\n\nvoid loop(void)\n{\n    lora.transferPacketP2PMode( Hello World! );\n    SerialUSB.println( Send string. );\n    delay(3000);\n}", 
            "title": "\u53d1\u9001"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_10", 
            "text": "\u6253\u5f00\u60a8\u7684 Arduino IDE \u70b9\u51fb  File\uff08\u6587\u4ef6\uff09   Examples\uff08\u793a\u4f8b\uff09   LoRaWAN   p2p_rx  \u6765\u6253\u5f00\u4f8b\u7a0b\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u590d\u5236\u4e0b\u9762\u7684\u7684\u4ee3\u7801\uff1a  // Seduino LoRaWAN - RX example\n#include  LoRaWan.h \n\nunsigned char buffer[128] = {0, };\n\nvoid setup(void)\n{\n    SerialUSB.begin(115200);\n    lora.init();\n    lora.initP2PMode(433, SF12, BW125, 8, 8, 20);\n}\n\nvoid loop(void)\n{\n    short length = 0;\n    short rssi = 0;\n\n    memset(buffer, 0, 128);\n    length = lora.receivePacketP2PMode(buffer, 128,   rssi, 1);\n\n    if(length)\n    {\n        SerialUSB.print( Length is:  );\n        SerialUSB.println(length);\n        SerialUSB.print( RSSI is:  );\n        SerialUSB.println(rssi);\n        SerialUSB.print( Data is:  );\n        for(unsigned char i = 0; i   length; i ++)\n        {\n            SerialUSB.print( 0x );\n            SerialUSB.print(buffer[i], HEX);\n            SerialUSB.print(   );\n        }\n        SerialUSB.println();\n    }\n}  \u5728\u4e24\u4e2a\u4f8b\u7a0b\u90fd\u4e0a\u4f20\u5b8c\u6bd5\u540e\uff0c\u6253\u5f00\u63a5\u6536\u677f\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u83b7\u53d6\u4e00\u4e9b\u6570\u636e\u5982\u4e0b\u6240\u793a\uff1a    Note  \u6211\u4eec\u5c06\u5f88\u5feb\u4e3aLoRa\u63d0\u4f9b\u7f51\u5173\u5957\u4ef6\uff0c\u6211\u4eec\u5c06\u5728\u5957\u4ef6\u7684\u7ef4\u57fa\u4e0a\u6dfb\u52a0\u5173\u4e8eAPB\u548cOTAA\u6a21\u5f0f\u7684\u5165\u95e8\u3002", 
            "title": "\u63a5\u6536"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_11", 
            "text": "W\u6211\u4eec\u63d0\u4f9b\u4e86\u5f88\u591a\u6709\u7528\u7684\u4f8b\u5b50\u3002\u60a8\u53ef\u4ee5\u6253\u5f00  File\uff08\u6587\u4ef6\uff09   Examples\uff08\u793a\u4f8b\uff09   LoRaWan  \u6765\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4f8b\u7a0b\u5305\u62ec\uff1a   ABP  OTAA  p2p-rx  p2p-tx", 
            "title": "\u4e3e\u4e2a\u4f8b\u5b50"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#gps", 
            "text": "Note  \u672c\u7ae0\u4ec5\u9002\u7528\u4e8eSeeeduino LoRaWAN W / GPS\u3002   \u590d\u5236\u4e0b\u9762\u7684\u4ee3\u7801\u4f60Seeeduino LoRaWAN W / GPS\u3002 void setup()\n{\n    Serial.begin(9600);\n    SerialUSB.begin(115200);\n}\n\nvoid loop()\n{\n    while(Serial.available())\n    {\n        SerialUSB.write(Serial.read());\n    }\n    while(SerialUSB.available())\n    {\n        Serial.write(SerialUSB.read());\n    }\n}  \u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u7136\u540e\u60a8\u5c06\u4eceGPS\u83b7\u53d6\u6570\u636e\u3002", 
            "title": "GPS\u6570\u636e"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_12", 
            "text": "\u6211\u4eec\u6d4b\u8bd5\u7684\u6700\u5c0f\u7535\u6d41\u4e3a80uA\uff08\u5bf9\u4e8eSeeeduino LoRaWAN\uff09\u3002\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\u3002  1\u3001\u53d6\u4e0bPWR LED\uff08\u5982\u679c\u4e0d\u53d6\u4e0b\u6b64LED\uff0c\u7535\u6d41\u5c06  2mA\uff09\n2\u3001\u53d6\u4e0bCHG LED\n3\u3001\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0a\u4f20\u5230\u60a8\u7684\u4e3b\u677f\u3002  #include  LoRaWan.h \n#include  EnergySaving.h \n\nEnergySaving nrgSave;\n\nvoid blink()\n{\n    for(unsigned char i = 0; i   5; i ++)\n    {\n        digitalWrite(13,HIGH);\n        delay(500);\n        digitalWrite(13,LOW);\n        delay(500);\n    }\n}\n\nvoid setup()\n{\n    for(unsigned char i = 0; i   26; i ++)      // important, set all pins to HIGH to save power\n    {\n        pinMode(i, OUTPUT);\n        digitalWrite(i, HIGH);\n    }\n\n    lora.init();\n    blink();    \n    lora.setDeviceLowPower();\n    blink();    \n    nrgSave.begin(WAKE_EXT_INTERRUPT, 7, dummy);    // buton on D7 to wake up the board\n    nrgSave.standby();\n}\n\nvoid loop()\n{\n    blink();\n    nrgSave.standby();\n}\n\nvoid dummy(void)\n{\n    // do something\n}\n\n// END File", 
            "title": "\u4f4e\u529f\u8017\u3001\u5c0f\u7535\u6d41"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_13", 
            "text": "\u56fa\u4ef6\u7248\u672c\u4e3a2.0.10\uff0c\u5982\u679c\u60a8\u60f3\u68c0\u67e5\u60a8\u7684\u7248\u672c\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0a\u4f20\u5230\u60a8\u7684\u4e3b\u677f\u3002 void setup()\n{\n    Serial1.begin(9600);\n    SerialUSB.begin(115200);\n}\n\nvoid loop()\n{\n    while(Serial1.available())\n    {\n        SerialUSB.write(Serial1.read());\n    }\n    while(SerialUSB.available())\n    {\n        Serial1.write(SerialUSB.read());\n    }\n} \n\u6253\u5f00\u60a8\u7684\u4e32\u53e3\u76d1\u89c6\u5668\uff0c\u7136\u540e\u8f93\u5165\uff1a AT+VER \n\u7136\u540e\u60a8\u5c06\u770b\u5230\u60a8\u7684\u5f00\u53d1\u677f\u5f53\u524d\u7684\u7248\u672c\u3002   \u5982\u679c\u8981\u66f4\u65b0\u56fa\u4ef6\uff0c\u5219\u9700\u8981\u9075\u5faa\u51e0\u4e2a\u6b65\u9aa4\u3002  \u6b65\u9aa41  \u5c06\u4e0b\u5217\u4ee3\u7801\u590d\u5236\u5e76\u4e0a\u4f20\u5230\u60a8\u7684\u4e3b\u677f\u3002  // Update firmware to RHF76-052AM  #include   Arduino.h  void   setup ()  { \n     SerialDBG . begin ( 115200 ); \n     SerialUSB . begin ( 115200 );  }  void   loop ()  { \n     while ( SerialDBG . available ()) \n     { \n         SerialUSB . write ( SerialDBG . read ()); \n     } \n     while ( SerialUSB . available ()) \n     { \n         SerialDBG . write ( SerialUSB . read ()); \n     }  }   \u6b65\u9aa42  \u5c06\u677f\u5361\u7684USB\u63a5\u5934\u53d6\u4e0b\uff0c\u7136\u540e\u63d2\u4e0a\uff0c\u91cd\u65b0\u8fde\u63a5\u7535\u8111\uff0c\u7136\u540e\u70b9\u51fbDFU\u6309\u94ae\uff0c\u7b49\u5230\u56fa\u4ef6\u6a21\u5f0fLED\u5f00\u59cb\u95ea\u70c1\u60a8\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002  \u6b65\u9aa43  \u70b9\u51fb\u4e0b\u8f7d\u6700\u65b0\u7684\u56fa\u4ef6 .bin file.   \u6b65\u9aa44  \u6253\u5f00PuTTy\u5e76\u8fde\u63a5\u5230\u7535\u8def\u677f    Tip   \u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6700\u65b0\u7684PuTTy\uff1a.php  http://www.extraputty.com/download.php    \u6b65\u9aa45  \u5c06\u60a8\u7684\u5f00\u53d1\u677f\u548cPutty\u76f8\u8fde\uff0c\u60a8\u5c06\u770b\u5230\u5b57\u6bcd\u201cC\u201d\u4e0d\u65ad\u5730\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002\u70b9\u51fb**Files Transfer\uff08\u6587\u4ef6\u4f20\u8f93\uff09   Ymodem   Send**, \u7136\u540e\u9009\u62e9\u6b65\u9aa44\u4e2d\u4e0b\u8f7d\u7684.bin file\u3002  \u7136\u540e\u5347\u7ea7\u5c31\u5f00\u59cb\u4e86\u3002", 
            "title": "\u66f4\u65b0\u56fa\u4ef6"
        }, 
        {
            "location": "/Seeeduino_LoRAWAN/#_14", 
            "text": "[eagle\u539f\u7406\u56fe]   Schematics in Eagle  [sketchup\u6587\u4ef6]   Sketchup file(3D)  [RHF76-052 \u7535\u6c14\u56fe]    CE certification of RHF 76-052  [RHF76-052\u56fa\u4ef6]   RHF76-052 Firmware V2.0.10  [\u6570\u636e\u624b\u518cRHF76-052AM]   Datasheet of RHF76-052AM", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/", 
            "text": "Grove\u7cfb\u7edf\u65e8\u5728\u901a\u8fc7\u4e0d\u540c\u7684\u4f20\u611f\u5668\uff08\u5982\u5404\u79cd\u4f20\u611f\u5668\u548c\u7535\u673a\uff09\uff0c\u6269\u5c55\u677f\u548cGrove\u8fde\u63a5\u7ebf\u5c06\u5904\u7406\u5668\u8fde\u63a5\u5230\u73b0\u5b9e\u7684\u4e16\u754c\uff0c\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u4e00\u6761\u8fde\u5e26\u7684\u4f20\u8f93\u7ebf\u3002 \u4f7f\u7528Grove\u7cfb\u7edf\uff0c\u60a8\u4e0d\u4f1a\u50cf\u4ee5\u524d\u90a3\u6837\u9700\u8981\u590d\u6742\u7684\u8fde\u63a5\uff0c\u4e5f\u4e0d\u9700\u8981\u710a\u63a5\u5de5\u5177\uff0c\u9762\u5305\u677f\u548c\u8df3\u7ebf\u3002 \u60a8\u53ea\u9700\u8981\u5c06\u5927\u91cf\u4f20\u611f\u5668\u63d2\u5165\u5230\u6269\u5c55\u677f\u4e0a\u6216\u662f\u6709Grove\u63a5\u53e3\u7684\u5f00\u53d1\u677f\u4e0a\u3002 Grove\u7cfb\u7edf\u975e\u5e38\u6709\u52a9\u4e8e\u52a0\u5feb\u60a8\u9879\u76ee\u7684\u5f00\u53d1\u8fc7\u7a0b\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u65b0\u624b\u3002\n\n\nNote\n \u672c\u6587\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u4e5f\u9002\u7528\u4e8eGenuino 101\u3002\n\n\n\n\n\u7248\u672c\u4fe1\u606f\n\n\n\n\n\n\n\u4ea7\u54c1\u7248\u672c\n\n\n \u53d1\u5e03\u65e5\u671f\n\n\n \u652f\u6301\u72b6\u6001 \n\n\n \u8bf4\u660e\n\n\n\n\n\n Grodu Starter Kit for Arduino 101\uff08v1.0\u5f53\u524d\u7248\u672c\uff09 \n\n\n 2016\u5e744\u6708\n\n\n \u652f\u6301\n\n\n \u65e0\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u4f7f\u7528Grove\u63a5\u53e3\uff0c\u80fd\u591f\u8282\u7701\u65f6\u95f4\uff0c\u51cf\u5c11\u65b0\u624b\u7684\u4f7f\u7528\u56f0\u96be\n\n\n\n\n\n\n\u6709\u5f88\u591a\u5404\u79cd\u529f\u80fd\u7684\u6a21\u5757\uff0c\u8fd9\u4e2a\u662f\u5b66\u4e60\u5fc5\u5907\u7684\u57fa\u7840\n\n\n\n\n\n\n\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u5177\u7bb1\uff0c\u540c\u65f6\u4ef7\u683c\u4fbf\u5b9c\n\n\n\n\n\n\n\u80fd\u591f\u6709\u8da3\u7684\u4e00\u6b65\u6b65\u5b8c\u6210\u9879\u76ee\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\n\n\n\n\u5e73\u53f0\n\n\n Seeeduino/Arduino \n\n\n Rasberry Pi \n\n\n LinkIt One \n\n\n Beaglebone \n\n\n LinkIt ONE\n\n\n\n\n\n \u652f\u6301\u72b6\u6001\n\n\n \u652f\u6301\uff0c\u9664\u4e86\u4ec5\u9002\u7528\u4e8eArduino / Seeeduino\u5e73\u53f0\u7684Base Shield\u3002\n\n\n\n\n\u786c\u4ef6\u6982\u51b5\n\n\n\u672c\u90e8\u5206\u5217\u51fa\u4e86\u8be5\u5de5\u5177\u5305\u4e2d\u7684\u4e3b\u8981\u90e8\u5206\u548c\u94fe\u63a5\uff0c\u4ee5\u83b7\u53d6\u6bcf\u4e2a\u529f\u80fd\u6a21\u5757\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\n\n\n\n\u6750\u6599\u6e05\u5355\n\n\n\n\n\n\n\u6750\u6599  \n\n\n\u6570\u91cf\n\n\n \u7f51\u9875\u94fe\u63a5\n\n\n\n\n\n Grove - Rotary Angle Sensor(P)  \n\n\n 1 \u5757\n\n\n \n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n Grove \u2013 Button\n\n\n1 \u5757\n\n\n \n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Touch Sensor \n\n\n1 \u5757\n\n\n \n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove LEDs\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Buzzer\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Sound Sensor\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Light Sensor\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Temperature Sensor\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Relay\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - Servo\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nGrove - LCD RGB Backlight\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\nBase Shield V2.0\n\n\n1 \u5757\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\u7528\u6237\u624b\u518c\uff08\u5370\u5237\u672c\uff09\n\n\n1 \u5757\n\n\n \nGrove_Starter_Kit_arduino_101_\u7528\u6237\u624b\u518c.pdf\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u57fa\u4e8eArduino\n\n\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u53c2\u4e0eArduino\uff0c\u60a8\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u57fa\u672c\u77e5\u8bc6\u3002 \u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u4e86\u4e00\u4e9b\u6587\u4ef6\uff0c\u4f9b\u5927\u5bb6\u5f00\u59cb\u4f7f\u7528\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n.\n\n\nArduino IDE\uff08\u6bcf\u4e2a\u6a21\u5757\u7684\u57fa\u672c\u793a\u4f8b\uff09\n\n\n\u5728\u60a8\u80fd\u591f\u8ba9LED\u95ea\u70c1\u540e\uff08Windows\u7528\u6237\u53ef\u4ee5\u5728 \n\u8fd9\u91cc\n \u5b89\u88c5Arduino IDE\uff0c\u60a8\u53ef\u4ee5\u5728 \n\u8fd9\u91cc\n \u627e\u5230\u9002\u7528\u4e8eMac OS\u548cLinux \u7684\u5176\u4ed6\u7248\u672c\n\uff09\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u719f\u6089Seeedstudio Grove\u7cfb\u7edf \nGrove_System\n\u3002 \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5957\u4ef6\u8fdb\u884c\u4e00\u4e9b\u597d\u73a9\u7684\u8bd5\u9a8c\u3002 \u53ef\u4ee5\u5728 \n\u7a0b\u5e8f\u4e0b\u8f7d\n \u4e0a\u4e0b\u8f7d\u7a0b\u5e8f\uff09\u3002", 
            "title": "Grove_Starter_kit_for_Arduino_101"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#_1", 
            "text": "\u4ea7\u54c1\u7248\u672c   \u53d1\u5e03\u65e5\u671f   \u652f\u6301\u72b6\u6001    \u8bf4\u660e    Grodu Starter Kit for Arduino 101\uff08v1.0\u5f53\u524d\u7248\u672c\uff09    2016\u5e744\u6708   \u652f\u6301   \u65e0", 
            "title": "\u7248\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#_2", 
            "text": "\u4f7f\u7528Grove\u63a5\u53e3\uff0c\u80fd\u591f\u8282\u7701\u65f6\u95f4\uff0c\u51cf\u5c11\u65b0\u624b\u7684\u4f7f\u7528\u56f0\u96be    \u6709\u5f88\u591a\u5404\u79cd\u529f\u80fd\u7684\u6a21\u5757\uff0c\u8fd9\u4e2a\u662f\u5b66\u4e60\u5fc5\u5907\u7684\u57fa\u7840    \u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u5177\u7bb1\uff0c\u540c\u65f6\u4ef7\u683c\u4fbf\u5b9c    \u80fd\u591f\u6709\u8da3\u7684\u4e00\u6b65\u6b65\u5b8c\u6210\u9879\u76ee", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#_3", 
            "text": "\u5e73\u53f0   Seeeduino/Arduino    Rasberry Pi    LinkIt One    Beaglebone    LinkIt ONE    \u652f\u6301\u72b6\u6001   \u652f\u6301\uff0c\u9664\u4e86\u4ec5\u9002\u7528\u4e8eArduino / Seeeduino\u5e73\u53f0\u7684Base Shield\u3002", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#_4", 
            "text": "\u672c\u90e8\u5206\u5217\u51fa\u4e86\u8be5\u5de5\u5177\u5305\u4e2d\u7684\u4e3b\u8981\u90e8\u5206\u548c\u94fe\u63a5\uff0c\u4ee5\u83b7\u53d6\u6bcf\u4e2a\u529f\u80fd\u6a21\u5757\u7684\u66f4\u591a\u4fe1\u606f\u3002", 
            "title": "\u786c\u4ef6\u6982\u51b5"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#_5", 
            "text": "\u6750\u6599    \u6570\u91cf   \u7f51\u9875\u94fe\u63a5    Grove - Rotary Angle Sensor(P)     1 \u5757    \u9a6c\u4e0a\u8d2d\u4e70     Grove \u2013 Button  1 \u5757    \u9a6c\u4e0a\u8d2d\u4e70    Grove - Touch Sensor   1 \u5757    \u9a6c\u4e0a\u8d2d\u4e70    Grove LEDs  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - Buzzer  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - Sound Sensor  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - Light Sensor  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - Temperature Sensor  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - Relay  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - Servo  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Grove - LCD RGB Backlight  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    Base Shield V2.0  1 \u5757  \u9a6c\u4e0a\u8d2d\u4e70    \u7528\u6237\u624b\u518c\uff08\u5370\u5237\u672c\uff09  1 \u5757    Grove_Starter_Kit_arduino_101_\u7528\u6237\u624b\u518c.pdf", 
            "title": "\u6750\u6599\u6e05\u5355"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#_6", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#arduino", 
            "text": "\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u53c2\u4e0eArduino\uff0c\u60a8\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u57fa\u672c\u77e5\u8bc6\u3002 \u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u4e86\u4e00\u4e9b\u6587\u4ef6\uff0c\u4f9b\u5927\u5bb6\u5f00\u59cb\u4f7f\u7528\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc .", 
            "title": "\u57fa\u4e8eArduino"
        }, 
        {
            "location": "/Grove_Starter_kit_for_Arduino_101/#arduino-ide", 
            "text": "\u5728\u60a8\u80fd\u591f\u8ba9LED\u95ea\u70c1\u540e\uff08Windows\u7528\u6237\u53ef\u4ee5\u5728  \u8fd9\u91cc  \u5b89\u88c5Arduino IDE\uff0c\u60a8\u53ef\u4ee5\u5728  \u8fd9\u91cc  \u627e\u5230\u9002\u7528\u4e8eMac OS\u548cLinux \u7684\u5176\u4ed6\u7248\u672c\n\uff09\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u719f\u6089Seeedstudio Grove\u7cfb\u7edf  Grove_System \u3002 \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5957\u4ef6\u8fdb\u884c\u4e00\u4e9b\u597d\u73a9\u7684\u8bd5\u9a8c\u3002 \u53ef\u4ee5\u5728  \u7a0b\u5e8f\u4e0b\u8f7d  \u4e0a\u4e0b\u8f7d\u7a0b\u5e8f\uff09\u3002", 
            "title": "Arduino IDE\uff08\u6bcf\u4e2a\u6a21\u5757\u7684\u57fa\u672c\u793a\u4f8b\uff09"
        }, 
        {
            "location": "/BeagleBone/", 
            "text": "BeagleBones\u5728\u5fae\u63a7\u5236\u5668\u4e16\u754c\u4e2d\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u665a\uff0c\u4f46\u662f\u9ad8\u6027\u80fd\u548c\u4f4e\u529f\u8017\u4f7f\u5176\u6210\u4e3a\u5f00\u653e\u786c\u4ef6\u9886\u57df\u7684\u4e09\u5927\u6d41\u884c\u5e73\u53f0\u4e4b\u4e00\u3002 Beagles\u610f\u5473\u7740\u5c0f\u5305\u88c5\u4e2d\u7684\u5927\u529f\u80fd\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5c0f\u578bPC\u53ef\u4ee5\u7528\u4e8e\u60a8\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5904\u7406\u4e0e\u684c\u9762PC\u76f8\u540c\u7684\u8bb8\u591a\u76f8\u540c\u4efb\u52a1\u3002\u7c7b\u4f3c\u4e8eArduino\u548cRaspberry Pi\uff0cBeaglebone\u677f\u88ab\u827a\u672f\u5bb6\uff0c\u8bbe\u8ba1\u5e08\u548c\u7231\u597d\u8005\u7528\u6765\u5b9e\u73b0\u4ed6\u4eec\u7684\u9879\u76ee\u3002\n\n\nBeagleBone\u677f\u662f\u7f8e\u5999\u7684\u677f\uff0c\u4f46Seeed\u661f\u7403\u4e0a\u7684\u4eba\u5bf9\u76ee\u524d\u7684Beaglebone\u5e76\u4e0d\u6ee1\u610f\uff0c\u60f3\u8981\u505a\u51fa\u4e00\u4e9b\u6539\u5584\u3002\u5c31\u50cf\u6211\u4eec\u5728Seeeduino\u505a\u7684\u4e00\u6837\uff0c\u6211\u4eec\u4e0eBeaglebone.org\u8c08\u8bba\u4e86\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u7ec8\u4e8e\u6709\u673a\u4f1a\u4e0e\u4ed6\u4eec\u4e00\u8d77\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u677f\u5b50\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u521b\u5efa\u4e86Seeed Studio\u81ea\u5df1\u7684Beaglebone\uff0cBeaglebone Green\uff08\u7b80\u79f0BBG\uff09 \uff09\u3002\n\n\nBeagleBone Green\u7531Beaglebone Black\uff08\u7b80\u79f0BBB\uff09\u6539\u8fdb\uff0c\u5982\u679c\u60a8\u4e86\u89e3BBB\uff0c\u60a8\u5c06\u4f1a\u77e5\u9053BBB\u5c31\u50cf\u662fbeagleboard\u7cfb\u5217\u4e2d\u7684\u660e\u661f\u677f\uff0c\u5b83\u7ee7\u627f\u4e86Beaglebone\u7684\u5c0f\u5c3a\u5bf8\uff0c\u5e76\u589e\u52a0\u4e86\u8bb8\u591a\u597d\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4ef7\u683c\u4f4e\u5f97\u591a\u5f53\u6211\u4eec\u8bbe\u8ba1BBG\u65f6\uff0c\u6211\u4eec\u51b3\u5b9a\u4fdd\u7559\u51e0\u4e4e\u6240\u6709BBB\u7684\u4f18\u70b9\uff0c\u5982\u5fae\u5c0f\u7684\u5c3a\u5bf8\uff0c\u4e30\u5bcc\u7684\u754c\u9762\u548c\u5f3a\u5927\u7684\u6269\u5c55\u6027\uff0c\u540c\u65f6\u75282 Seeed Grove\u8fde\u63a5\u5668\u66ff\u4ee3HDMI\u63a5\u53e3\uff0c\u4f7f\u5176\u4e0eGrove\u517c\u5bb9\u3002\n\n\n\u6211\u4eec\u53d1\u5e03\u4e86\u53e6\u4e00\u4e2aBeagleBone\uff0c\u540d\u4e3aBeagleBone Green Wireless\uff08\u7b80\u79f0BBGW\uff09\uff0c\u9664\u4e86\u8fde\u63a5\u5668\uff0cBBGW\u8fd8\u5305\u62ec\u9ad8\u6027\u80fd\u7075\u6d3b\u7684WiFi /\u84dd\u7259\u63a5\u53e3\uff0c\u4f7f\u5176\u6210\u4e3aBeagleBone\u7684\u9996\u4e2aWiFi /\u84dd\u7259\u677f\u5bb6\u5ead\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684BeagleBone\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nBeagleBone_Green", 
            "title": "BeagleBone"
        }, 
        {
            "location": "/BeagleBone/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684BeagleBone\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   BeagleBone_Green", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/BeagleBone_Green/", 
            "text": "SeeedStudio BeagleBone Green\uff08BBG\uff09\u662f\u4e13\u4e3a\u5f00\u53d1\u8005\u548c\u4e1a\u4f59\u7231\u597d\u8005\u8bbe\u8ba1\u7684\uff0c\u4f4e\u6210\u672c\uff0c\u5f00\u6e90\uff0c\u793e\u533a\u652f\u6301\u7684\u5f00\u53d1\u5e73\u53f0\u3002 \u8fd9\u662f\nBeagleBoard.org\n\u548cSeeed Studio\u7684\u5171\u540c\u52aa\u529b\u3002 \u5b83\u57fa\u4e8e\nBeagleBone Black\n \u7684\u7ecf\u5178\u5f00\u6e90\u786c\u4ef6\u8bbe\u8ba1\uff0c\u5e76\u5f00\u53d1\u6210\u8fd9\u79cd\u5dee\u5f02\u5316\u7248\u672c\u3002 BBG\u5305\u62ec\u4e24\u4e2aGrove\u8fde\u63a5\u5668\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u8fde\u63a5\u5230\u5927\u91cfGrove\u4f20\u611f\u5668\u7cfb\u5217\u3002 \u79fb\u9664\u677f\u8f7dHDMI\u4e3a\u8fd9\u4e9bGrove\u8fde\u63a5\u5668\u817e\u51fa\u7a7a\u95f4\u3002\n\n\n\u5728\u4e0d\u523010\u79d2\u5185\u542f\u52a8Linux\uff0c\u53ea\u9700\u4e00\u6839USB\u7535\u7f06\u5373\u53ef\u57285\u5206\u949f\u5185\u5f00\u59cb\u5f00\u53d1\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u548cBeagleBone Black\u5b8c\u5168\u517c\u5bb9\n\n\n\u5904\u7406\u5668: AM335x 1GHz ARMR Cortex-A8\n\n\n512MB DDR3 RAM\n\n\n4GB 8-bit eMMC \u677f\u8f7d flash \u5b58\u50a8\n\n\n3D \u56fe\u5f62\u52a0\u901f\u5668\n\n\nNEON \u6d6e\u70b9\u52a0\u901f\u5668\n\n\n2x PRU 32-bit \u5fae\u5904\u7406\u5668\n\n\n\n\n\n\n\u63a5\u53e3\n\n\nUSB client\u53ef\u4f9b\u7535\u548c\u901a\u4fe1\n\n\nUSB host\n\n\nEthernet\n\n\n2x 46 pin \u63a5\u5934\n\n\n2x Grove connectors (I2C and UART)\n\n\n\n\n\n\n\u7cfb\u7edf\u517c\u5bb9\n\n\nDebian\n\n\nAndroid\n\n\nUbuntu\n\n\nCloud9 IDE on Node.js w/ BoneScript library\n\n\n\u5373\u5c06\u517c\u5bb9\u66f4\u591a\n\n\n\n\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u5185\u5bb9\n\n\n\n\n\n\n\n\n\n\n\u5904\u7406\u5668\n\n\nAM335x 1GHz ARMR Cortex-A8\n\n\n\n\n\n\nRAM\n\n\n512MB DDR3\n\n\n\n\n\n\n\u677f\u8f7dFlash \u5b58\u50a8\n\n\n4GB eMMC\n\n\n\n\n\n\nCPU Supports\n\n\nNEON floating-point \n 3D graphics accelerator\n\n\n\n\n\n\nMicro USB  Supports\n\n\npowering \n communications\n\n\n\n\n\n\nUSB\n\n\nHost  1\n\n\n\n\n\n\nGrove Connectors\n\n\n2 (One I2C and One UART)\n\n\n\n\n\n\nGPIO\n\n\n2 x 46 pin headers\n\n\n\n\n\n\nEthernet\n\n\n1\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\n\n\n0 ~ 75\u00b0\n\n\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\n\n\u7269\u8054\u7f51\n\n\n\u667a\u80fd\u5bb6\u5c45\n\n\n\u5de5\u4e1a\u5e94\u7528\n\n\n\u81ea\u52a8\u5316\u8fc7\u7a0b\u63a7\u5236\n\n\n\u673a\u5668\u4eba\u4ea4\u4e92\n\n\n\u4f20\u611f\u5668\u8282\u70b9\n\n\n\n\n\u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u9879\u76ee\u53ef\u4ee5\u4f9b\u60a8\u53c2\u8003\u3002\n\n\n\n\n\n\n\n\nHome Center\n\n\nRetro Lamp\n\n\nDrive a Motor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBBG Acrylic Case\n\n\nGPIO Control\n\n\nSmart Light\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\n\nUSB Host\n - USB Host\n\n\nDC Power and USB Client\n - \u4e3a\u677f\u5b50\u4f9b\u7535\u5e76\u4e14\u4f5c\u4e3a\u4ece\u673a\n\n\nLEDs\n\n\nD2\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5fc3\u8df3\u95ea\u70c1\n\n\nD3\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u8bfb\u5199SD\u5361\u6570\u636e\u65f6\u4eae\u8d77\n\n\nD4\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53 CPU \u6d3b\u52a8\u65f6\u4eae\u8d77\n\n\nD5\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53eMMC \u8bfb\u5199\u65f6\u4eae\u8d77\n\n\n\n\n\n\nBoot \u6309\u94ae\n\n\n\u5f53\u6709SD\u5361\u63d2\u5165\u65f6\uff0c\u7cfb\u7edf\u5c06\u9996\u5148\u4eceSD\u5361\u542f\u52a8\uff0c\u5982\u679c\u8981\u4eceeMMC\u542f\u52a8\uff0c\u8bf7\u6309\u6b64\u6309\u94ae\uff0c\u7136\u540e\u63a5\u901a\u7535\u6e90.\n\n\n\u5f53\u542f\u52a8\u540e\u5c31\u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u6309\u94ae, \u8fde\u63a5\u5230 \nGPIO_72\n\n\n\n\n\n\nI2C Grove Interface\n - \u8fde\u63a5\u5230 \nI2C2\n\n\nUart Grove Interface\n - \u8fde\u63a5\u5230 \nUART2\n\n\nSerial Debug\n - \u8fde\u63a5\u5230 \nUART0\n, PIN1~PIN6: GND, NC, NC, RX, TX, NC, \u8bf7\u6ce8\u610fpin1 \u662f\u6307\u9760\u8fd1USB \u7684\u7ba1\u811a.\n\n\n\n\n\u7ba1\u811a\u56fe\n\n\n\u6bcf\u4e2a\u6570\u5b57 I/O pin \u62e5\u67098\u79cd\u4e0d\u540c\u6a21\u5f0f\u53ef\u4f9b\u9009\u62e9\uff0c\u5305\u62ec GPIO.\n\n\n65 \u79cd\u4e0d\u540c\u53ef\u80fd\u7684\u6570\u5b57 I/Os\n\n\n\n\nNote\n\n\n\u5728 GPIO \u6a21\u5f0f\u4e0b\uff0c\u6bcf\u4e2a\u6570\u5b57 I/O \u7ba1\u811a\u90fd\u53ef\u4ee5\u5904\u7406\u4e2d\u65ad\u3002\n\n\n\n\n\n\nPWMs and Timers\n\n\n\n\nNote\n\n\n\u9ad8\u8fbe8\u4e2a\u6570\u5b57 I/O \u5f15\u811a\u53ef\u4ee5\u88ab\u914d\u7f6e\u6210\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\u6a21\u5f0f (PWM) \uff0c\u4ece\u800c\u5728\u65e0\u9700CPU\u53c2\u4e0e\u7684\u60c5\u51b5\u4e0b\u7528\u4e8e\u4ea7\u751f\u4fe1\u53f7\u6765\u63a7\u5236\u7535\u673a\u6216\u8005\u4ea7\u751f\u6a21\u62df\u7535\u5e73\u3002\n\n\n\n\n\n\n\u6a21\u62df\u8f93\u5165\n\n\n\n\nNote\n\n\n\u8bf7\u786e\u4fdd\u5728\u4efb\u4f55\u6a21\u62df\u5f15\u811a\u52a0\u7684\u8f93\u5165\u7535\u538b\u4e0d\u9ad8\u4e8e1.8V\u3002\u677f\u5361\u4e0a\u53ea\u6709\u4e00\u4e2a8\u901a\u9053\u7684 12-bit \u6570\u6a21\u8f6c\u5316\u5668\uff0c\u5176\u4e2d7\u4e2a\u901a\u9053\u5f15\u51fa\u5230\u63a5\u53e3\u3002\n\n\n\n\n\n\nUART\n\n\n\n\nNote\n\n\n\u6709\u4e00\u4e2a\u4e13\u7528\u7684\u8fde\u63a5\u5934\u7528\u4e8e\u8fde\u63a5UART0\u811a\u5e76\u4e14\u8fde\u63a5\u5230debug\u7ebf\u7f06\u30025\u4e2a\u9644\u52a0\u7684\u4e32\u884c\u53e3\u4e5f\u8fde\u63a5\u5230\u4e86\u6269\u5c55\u63a5\u53e3\u3002\n\n\n\n\n\n\nI2C\n\n\n\n\nNote\n\n\n\u7b2c\u4e00\u4e2aI2C\u603b\u7ebf\u7528\u4e8e\u8bfb\u53d6Cape\u9644\u52a0\u677f\u4e0a\u7684EEPROMS\uff0c\u4e3a\u4e86\u4e0d\u4f1a\u5f71\u54cd\u8be5\u529f\u80fd\u8be5\u603b\u7ebf\u4e0d\u80fd\u7528\u4e8e\u5176\u4ed6\u6570\u5b57I / O\u64cd\u4f5c\uff0c\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5b83\u5728\u53ef\u7528\u5730\u5740\u4e2d\u6dfb\u52a0\u5176\u4ed6I2C\u8bbe\u5907\u3002 \u7b2c\u4e8c\u4e2aI2C\u603b\u7ebf\u53ef\u4f9b\u60a8\u81ea\u7531\u914d\u7f6e\u548c\u4f7f\u7528\u3002\n\n\n\n\n\n\nSPI\n\n\n\n\nNote\n\n\n\u82e5\u662f\u9700\u8981\u5feb\u901f\u4f20\u8f93\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u4f7f\u7528SPI\u63a5\u53e3\u3002\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5357\n\n\n\n\n\n\nNote\n\n\n\u6b64\u7ae0\u8282\u662f\u57fa\u4e8eWindows 10 \u7cfb\u7edf\uff0c\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u7684\u6307\u5357\u4e0e\u6b64\u7c7b\u4f3c\u3002\n\n\n\n\n\u6b65\u9aa41.\u901a\u8fc7 USB \u63a5\u53e3\u8fde\u63a5 BBG\n\n\n\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684Micro-USB\u7535\u7f06\u5c06\u60a8\u7684BBG\u63a5\u5165\u7535\u8111\u3002 \u8fd9\u5c06\u540c\u65f6\u4e3a\u7535\u8def\u677f\u4f9b\u7535\u5e76\u63d0\u4f9b\u5f00\u53d1\u63a5\u53e3\u3002 BBG\u5c06\u4ece\u677f\u8f7d2GB\u62164GB eMMC\u542f\u52a8Linux\u3002\n\n\nBBG\u5c06\u4f5c\u4e3a\u95ea\u5b58\u9a71\u52a8\u5668\u8fd0\u884c\uff0c\u4e3a\u60a8\u63d0\u4f9b\u6587\u6863\u548c\u9a71\u52a8\u7a0b\u5e8f\u7684\u672c\u5730\u526f\u672c\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u63a5\u53e3\u53ef\u80fd\u4e0d\u7528\u4e8e\u4f7f\u7528\u65b0\u6620\u50cf\u91cd\u65b0\u914d\u7f6emicroSD\u5361\uff0c\u4f46\u53ef\u7528\u4e8e\u4f7f\u7528uEnv.txt\u6587\u4ef6\u66f4\u65b0\u5f15\u5bfc\u53c2\u6570\u3002\n\n\n\u60a8\u5c06\u770b\u5230PWR LED\u7a33\u5b9a\u70b9\u4eae\u3002 \u572810\u79d2\u949f\u5185\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u53e6\u4e00\u4e2aLED\u4ee5\u5176\u9ed8\u8ba4\u914d\u7f6e\u95ea\u70c1\u3002\n\n\n\n\nD2\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5fc3\u8df3\u95ea\u70c1\n\n\nD3\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u8bfb\u5199SD\u5361\u6570\u636e\u65f6\u4eae\u8d77\n\n\nD4\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53 CPU \u6d3b\u52a8\u65f6\u4eae\u8d77\n\n\nD5\n \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53eMMC \u8bfb\u5199\u65f6\u4eae\u8d77\n\n\n\n\n\u6b65\u9aa42. \u5b89\u88c5\u9a71\u52a8\n\n\n\u4e3a\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8ba9\u60a8\u7684Beaglebone\u53ef\u4ee5\u901a\u8fc7USB\u8bbf\u95ee\u7f51\u7edc\u3002 \u5176\u4ed6\u9a71\u52a8\u7a0b\u5e8f\u53ef\u8ba9\u60a8\u8bbf\u95ee\u7684\u4e3b\u677f\u3002\n\n\n\n\n\n\n\n\n\u64cd\u4f5c\u7cfb\u7edf\n\n\nUSB \u9a71\u52a8\n\n\n\u5907\u6ce8\n\n\n\n\n\n\n\n\n\n\nWindows (64-bit)\n\n\n64-bit installer\n\n\n\n\n\n\n\n\nWindows (32-bit)\n\n\n32-bit installer\n\n\n\n\n\n\n\n\nMac OS X\n\n\nNetwork\n and \nSerial\n\n\n\u6ce8\u610fNetwork\u548cSerial\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u9a71\u52a8\uff0c\u60a8\u90fd\u9700\u8981\u5b89\u88c5\n\n\n\n\n\n\nLinux\n\n\nmkudevrule.sh\n\n\n\u9a71\u52a8\u7a0b\u5e8f\u5b89\u88c5\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u51e0\u4e2audev\u89c4\u5219\u5f88\u6709\u5e2e\u52a9\u3002.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\u5bf9\u4e8eWindows\u7cfb\u7edf\uff0c\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9:\n\n\n\n\nWindows \u9a71\u52a8\u8ba4\u8bc1\u8b66\u544a\u53ef\u80fd\u4f1a\u5f39\u51fa\u4e24\u5230\u4e09\u6b21\uff0c\u70b9\u51fb \"\u5ffd\u7565\", \"\u5b89\u88c5\" \u6216\u8005 \"\u8fd0\u884c\"\n\n\n\u70b9\u51fb\u4e0b\u9762\u94fe\u63a5\u67e5\u770b\u60a8\u9700\u8981\u5b89\u88c564\u4f4d\u6216\u800532\u4f4d \n\u70b9\u51fb\u8fd9\u91cc\n\n\n\u5728\u975e\u6700\u65b0\u7248\u672c\u7684Windows\u7cfb\u7edf\u4e0b,\u60a8\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u9047\u5230\u9519\u8bef (0xc000007b)\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u70b9\u51fb \n\u5b89\u88c5\n \u518d\u91cd\u8bd5\u4e00\u6b21\u3002\n\n\n\u60a8\u53ef\u80fd\u9700\u8981\u91cd\u542f\u7535\u8111\u3002\n\n\n\u8be5\u9a71\u52a8\u5728Windows 10 \u4e0b\u6d4b\u8bd5\u901a\u8fc7\u3002\n\n\n\n\n\n\n\n\nNote\n\n\nAdditional FTDI USB to serial/JTAG information and drivers are available from \nhttps://www.ftdichip.com/Drivers/VCP.htm\n.\n\n\n\n\n\n\nNote\n\n\nAdditional USB to virtual Ethernet information and drivers are available from \nhttps://www.linux-usb.org/gadget/\n and \nhttps://joshuawise.com/horndis\n.\n\n\n\n\n\u6b65\u9aa43. \u4f7f\u7528\u6d4f\u89c8\u5668\u6d4f\u89c8\u60a8\u7684 Beagle\n\n\n\u4f7f\u7528Chrome\u6216Firefox\uff08Internet Explorer\u5c06\u4e0d\u8d77\u4f5c\u7528\uff09\uff0c\u6d4f\u89c8\u5230\u60a8\u7684\u7535\u8def\u677f\u4e0a\u8fd0\u884c\u7684Web\u670d\u52a1\u5668\u3002 \u5b83\u5c06\u52a0\u8f7d\u4e00\u4e2a\u6f14\u793a\u6587\u7a3f\uff0c\u5411\u60a8\u663e\u793a\u7535\u8def\u677f\u7684\u529f\u80fd\u3002 \u4f7f\u7528\u952e\u76d8\u4e0a\u7684\u7bad\u5934\u952e\u6d4f\u89c8\u6f14\u793a\u6587\u7a3f\u3002\n\u4f7f\u7528Chrome\u6216Firefox\uff08Internet Explorer\u5c06\u4e0d\u8d77\u4f5c\u7528\uff09\uff0c\u6d4f\u89c8\u5230\u60a8\u7684\u7535\u8def\u677f\u4e0a\u8fd0\u884c\u7684Web\u670d\u52a1\u5668\u3002 \u5b83\u5c06\u52a0\u8f7d\u4e00\u4e2a\u6f14\u793a\u6587\u7a3f\uff0c\u5411\u60a8\u5c55\u793a\u7535\u8def\u677f\u7684\u529f\u80fd\u3002 \u4f7f\u7528\u952e\u76d8\u4e0a\u7684\u7bad\u5934\u952e\u5bfc\u822a\u6f14\u793a\u6587\u7a3f\u3002\n\n\n\u70b9\u51fb \nhttp://192.168.7.2\n \u6765\u52a0\u8f7d\u60a8\u7684 BBG.\n\u8f83\u65e7\u7684\u8f6f\u4ef6\u6620\u50cf\u8981\u6c42\u60a8\u4f7f\u7528BEAGLE_BONE\u9a71\u52a8\u5668\u542f\u52a8\u7f51\u7edc\u3002 \u4f7f\u7528\u6700\u65b0\u7684\u8f6f\u4ef6\u6620\u50cf\uff0c\u4e0d\u518d\u9700\u8981\u8be5\u6b65\u9aa4\u3002\n\n\n\n\n\u6b65\u9aa44. Cloud9 IDE\n\n\n\u8981\u5f00\u59cb\u7f16\u8f91\u60a8\u7684\u4e3b\u677f\u4e0a\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5355\u51fb\u4e0b\u9762\u94fe\u63a5\u6765\u5f00\u542f Cloud9 IDE\n\n\n\n\n\u66f4\u65b0\u5230\u6700\u65b0\u7684\u8f6f\u4ef6\n\n\n\n\n\u60a8\u9700\u8981\u5c06\u4e3b\u677f\u66f4\u65b0\u5230\u6700\u65b0\u7684\u8f6f\u4ef6\u4ee5\u4fdd\u6301\u66f4\u597d\u7684\u6027\u80fd\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u9010\u6b65\u5b9e\u73b0\u3002\n\n\n\u6b65\u9aa41. \u4e0b\u8f7d\u6700\u65b0\u7684\u56fa\u4ef6\n\n\n\u9996\u5148\uff0c\u60a8\u5fc5\u987b\u5728\u8fd9\u91cc\u4e0b\u8f7d\u5408\u9002\u7684\u56fa\u4ef6\u3002\n\n\n\n\n\n\nNote\n\n\n\u7531\u4e8e\u8f6f\u4ef6\u5927\u5c0f\uff0c\u6b64\u4e0b\u8f7d\u53ef\u80fd\u9700\u8981\u7ea630\u5206\u949f\u6216\u66f4\u957f\u65f6\u95f4\u3002\n\n\n\n\n\u60a8\u4e0b\u8f7d\u7684\u6587\u4ef6\u5c06\u6709\u4e00\u4e2a**img.xz **\u6269\u5c55\u540d\u3002 \u8fd9\u662f\u7528\u4e8eSD\u5361\u70e7\u5f55\u7684\u56fa\u4ef6\u3002\n\n\n\u6b65\u9aa42. \u5b89\u88c5SD\u5361\u70e7\u5f55\u7a0b\u5e8f\n\n\n\u4e0b\u8f7d\u5e76\u4e14\u5b89\u88c5  \nImage Writer for Windows\n. \u8bf7\u786e\u4fdd\u60a8\u4e0b\u8f7d\u7684\u662f\u5bf9\u5e94\u81ea\u5df1\u7cfb\u7edf\u7684\u7248\u672c\u3002\n\n\n\u6b65\u9aa43. \u5c06\u60a8\u7684\u56fa\u4ef6\u5199\u5165SD\u5361\n\n\n\u9996\u5148\u9700\u8981\u901a\u8fc7\u4e00\u4e2aSD\u9002\u914d\u5668\u5c06microSD\u5361\u8fde\u63a5\u5230\u7535\u8111\u3002 \u7136\u540e\u4f7f\u7528\u8f6f\u4ef6Image Write for Windows\u5c06\u89e3\u538b\u7f29\u7684\u56fa\u4ef6\u5199\u5165SD\u5361\u3002\n\n\n\n\n\u70b9\u51fb \nWrite\n \u6309\u94ae,\u7136\u540e\u5199\u5165\u7a0b\u5e8f\u5c06\u5f00\u542f\u3002\n\n\n\n\n\n\nNote\n\n\n\n\n\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u6709\u5173\u635f\u574fSD\u5361\u7684\u8b66\u544a\uff0c\u8bf7\u60a8\u653e\u5fc3\u9009\u62e9\u63a5\u53d7\u3002\n\n\n\u6b64\u65f6\u60a8\u4e0d\u5e94\u5c06 BeagleBone \u94fe\u63a5\u5230\u7535\u8111\u3002\n\n\n\u6574\u4e2a\u8fc7\u7a0b\u5927\u6982\u4f1a\u6301\u7eed10\u5206\u949f\u3002\n\n\n\n\n\n\n\u6b65\u9aa44. \u4eceSD\u5361\u542f\u52a8\u60a8\u7684\u7cfb\u7edf\n\n\n\u5173\u95ed\u7535\u6e90\uff0c\u63d2\u5165SD\u5361\uff0c\u7136\u540e\u6253\u5f00\u7535\u6e90\uff0c\u7cfb\u7edf\u5c31\u5c06\u4eceSD\u5361\u542f\u52a8\u3002\n\n\n\n\nNote\n\n\n\n\n\n\n\u5982\u679c\u60a8\u4e0d\u9700\u8981\u5c06\u56fa\u4ef6\u5199\u5165\u60a8\u7684\u677f\u8f7deMMC\uff0c\u5219\u65e0\u9700\u9605\u8bfb\u672c\u7ae0\u6700\u540e\u4e00\u7ae0\u3002 \u5426\u5219\u8bf7\u7ee7\u7eed\u3002\n\n\n\n\n\u5982\u679c\u60a8\u5e0c\u671b\u5c06\u56fa\u4ef6\u5199\u5165\u60a8\u7684\u677f\u8f7deMMC\uff0c\u5219\u9700\u8981\u52a0\u8f7d\u8fdb\u677f\u5361\u5e76\u4fee\u6539\u6587\u4ef6\u3002\n\n\n\u5728 \n/boot/uEnv.txt\n \u4e2d\u627e\u5230:\n\n\n##enable BBB: eMMC Flasher:\n#cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh\n\n\n\n\n\n\u4fee\u6539\u4e3a:\n\n\n##enable BBB: eMMC Flasher:\ncmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh\n\n\n\n\n\n\u7136\u540e\u60a8\u5c06\u770b\u52304\u4e2aLED\u706f\u4f1a\u5982\u4e0b\u56fe\u95ea\u70c1\u3002\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u770b\u5230\u4e0a\u56fe\u6240\u793a\u7684\u7684\u706f\u8ff9\uff0c\u8bf7\u6309RESET\u6309\u94ae\u91cd\u7f6e\u7535\u8def\u677f\u3002\n\n\n\n\n\u5f53\u95ea\u70c1\u5b8c\u6210\u65f6\uff0c\u6240\u67094\u4e2a\u7528\u6237\u6307\u793a\u706f LED\u5c06\u5173\u95ed\u3002 \u6700\u65b0\u7684Debian\u7cfb\u7edf\u5728\u5b8c\u6210\u56fa\u4ef6\u52a0\u8f7d\u540e\u81ea\u52a8\u5173\u95ed\u7535\u8def\u677f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6700\u591a\u53ef\u80fd\u4f1a\u6301\u7eed** 10\u5206\u949f**\u3002 \u5173\u95ed\u7535\u6e90\uff0c\u53d6\u51faSD\u5361\uff0c\u518d\u6b21\u63a5\u901a\u7535\u6e90\u5373\u53ef\u5b8c\u6210\u3002\n\n\nGrove for BBG\n\n\n\n\nGrove \u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4e00\u4e2a\u5177\u6709\u6807\u51c6\u534f\u8bae\u7684\u8fde\u63a5\u5668\u7cfb\u7edf\u3002 Grove\u91c7\u7528\u79ef\u6728\u5f0f\u7ec4\u88c5\u7535\u5b50\u6280\u672f\u3002 \u4e0e\u57fa\u4e8e\u8df3\u7ebf\u6216\u710a\u63a5\u7684\u7cfb\u7edf\u76f8\u6bd4\uff0c\u5177\u6709\u8fde\u63a5\u65b9\u4fbf\u3001\u7ed3\u6784\u7b80\u5355\u3001\u6613\u4e8e\u4e0a\u624b\u3001\u53ef\u5feb\u901f\u5165\u95e8\u5b66\u4e60\u7b49\u8bf8\u591a\u4f18\u70b9\u3002\n\n\n\u4e0b\u8868\u7f57\u5217\u4e86\u9002\u7528\u4e8e BBG \u7684Grove \u6a21\u5757.\n\n\n\n\n\n\n\n\nSKU\n\n\n\u540d\u79f0\n\n\n\u63a5\u53e3\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\n101020054\n\n\nGrove - 3-Axis Digital Accelerometer(+16g)\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020071\n\n\nGrove - 3-Axis Digital Accelerometer(+400g)\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020034\n\n\nGrove - 3-Axis Digital Compass\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020050\n\n\nGrove - 3-Axis Digital Gyro\n\n\nAnalog\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020081\n\n\nGrove - 6-Axis Accelerometer\nCompass v2.0\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020072\n\n\nGrove - Barometer Sensor(BMP180)\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n104030010\n\n\nGrove - Blue LED\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020003\n\n\nGrove - Button\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n111020000\n\n\nGrove - Button(P)\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n107020000\n\n\nGrove - Buzzer\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n104030006\n\n\nGrove - Chainable RGB LED\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020030\n\n\nGrove - Digital Light Sensor\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n103020024\n\n\nGrove - Finger-clip Heart Rate Sensor\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020082\n\n\nGrove - Finger-clip Heart Rate Sensor with shell\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n113020003\n\n\nGrove - GPS\n\n\nUART\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n104030007\n\n\nGrove - Green LED\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n103020013\n\n\nGrove - I2C ADC\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n103020006\n\n\nGrove - I2C Hub\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020079\n\n\nGrove - IMU 10DOF\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020080\n\n\nGrove - IMU 9DOF v2.0\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020040\n\n\nGrove - IR Distance Interrupter\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n104030011\n\n\nGrove - OLED Display 0.96''\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n104030008\n\n\nGrove - OLED Display 1.12''\n\n\nI2C\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n104030005\n\n\nGrove - Red LED\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n103020005\n\n\nGrove - Relay\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n316010005\n\n\nGrove - Servo\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020023\n\n\nGrove - Sound Sensor\n\n\nAnalog\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020004\n\n\nGrove - Switch(P)\n\n\nI/O\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020015\n\n\nGrove - Temperature Sensor\n\n\nAnalog\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n101020019\n\n\nGrove - Temperature\nHumidity Sensor Pro\n\n\nAnalog\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\nCape for BBG\n\n\n\n\n\u5728\u60a8\u5f00\u59cb\u81ea\u5df1\u7684\u9879\u76ee\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u6269\u5c55\u677f\u3002 BBG \u5df2\u7ecf\u6709\u8bb8\u591a\u6269\u5c55\u677f\uff0c\u5305\u62ec\u6db2\u6676\u663e\u793a\u5668\uff0c\u7535\u673a\u9a71\u52a8\u5668\u4ee5\u53caHDMI\u6269\u5c55\u7b49\u3002\u4ee5\u4e0b\u662f\u5176\u4e2d\u7684\u4e00\u4e9b\u63a8\u8350\u3002\n\n\n\n\n\n\n\n\nGrove Cape\n\n\nMotor Bridge Cape\n\n\nHDMI Cape\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGET ONE NOW!\n\n\nGET ONE NOW!\n\n\nGET ONE NOW!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove Cape\n\n\n5 Inch LCD\n\n\n7 Inch LCD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGET ONE NOW!\n\n\nGET ONE NOW!\n\n\nGET ONE NOW!\n\n\n\n\n\n\n\n\nFAQ\n\n\n\n\n\n\nBBG 1 \u548c BBG 2 \u6709\u4f55\u4e0d\u540c?\n \u00a0 \n\n\u6211\u4eec\u57282016\u5e74\u66f4\u65b0\u4e86Beaglebone Green\u7684eMMC\u3002\u56e0\u6b64\uff0c\u4ee5\u524d\u7684BBG1\u56fa\u4ef6\u5728BBG2\u4e0a\u65e0\u6cd5\u4f7f\u7528\uff0c\u4f46\u65b0\u7684\u56fa\u4ef6\u5728BBG1\u548cBBG2\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u3002\n \u00a0  \n\n\n\n\n\u53c2\u8003\n\n\n\n\n\u6709\u5f88\u591a\u53c2\u8003\u8d44\u6599\u53ef\u4ee5\u5e2e\u52a9\u60a8\u83b7\u5f97\u6709\u5173 BBG \u7684\u66f4\u591a\u4fe1\u606f\u3002\n\n\n\n\nBeagleBoard Main Page\n\n\nBeagleBone Green info at BeagleBoard page\n\n\nBeagleBoard Getting Started\n\n\nTroubleshooting\n\n\nHardware documentation\n\n\nProjects of BeagleBoard\n\n\nCE certification of BBG\n\n\nFCC certification of BBG\n\n\n\n\n\u8d44\u6599\u4e0b\u8f7d\n\n\n\n\n\n\nBEAGLEBONE_GREEN SRM(v1a)(pdf)\n\n\nBEAGLEBONE_GREEN Schematic(pdf)\n\n\nBEAGLEBONE_GREEN Schematic(OrCAD)\n\n\nBEAGLEBONE_GREEN PCB(OrCAD)", 
            "title": "BeagleBone_Green"
        }, 
        {
            "location": "/BeagleBone_Green/#_1", 
            "text": "\u548cBeagleBone Black\u5b8c\u5168\u517c\u5bb9  \u5904\u7406\u5668: AM335x 1GHz ARMR Cortex-A8  512MB DDR3 RAM  4GB 8-bit eMMC \u677f\u8f7d flash \u5b58\u50a8  3D \u56fe\u5f62\u52a0\u901f\u5668  NEON \u6d6e\u70b9\u52a0\u901f\u5668  2x PRU 32-bit \u5fae\u5904\u7406\u5668    \u63a5\u53e3  USB client\u53ef\u4f9b\u7535\u548c\u901a\u4fe1  USB host  Ethernet  2x 46 pin \u63a5\u5934  2x Grove connectors (I2C and UART)    \u7cfb\u7edf\u517c\u5bb9  Debian  Android  Ubuntu  Cloud9 IDE on Node.js w/ BoneScript library  \u5373\u5c06\u517c\u5bb9\u66f4\u591a", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/BeagleBone_Green/#_2", 
            "text": "\u9879\u76ee  \u5185\u5bb9      \u5904\u7406\u5668  AM335x 1GHz ARMR Cortex-A8    RAM  512MB DDR3    \u677f\u8f7dFlash \u5b58\u50a8  4GB eMMC    CPU Supports  NEON floating-point   3D graphics accelerator    Micro USB  Supports  powering   communications    USB  Host  1    Grove Connectors  2 (One I2C and One UART)    GPIO  2 x 46 pin headers    Ethernet  1    \u5de5\u4f5c\u6e29\u5ea6  0 ~ 75\u00b0", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/BeagleBone_Green/#_3", 
            "text": "\u7269\u8054\u7f51  \u667a\u80fd\u5bb6\u5c45  \u5de5\u4e1a\u5e94\u7528  \u81ea\u52a8\u5316\u8fc7\u7a0b\u63a7\u5236  \u673a\u5668\u4eba\u4ea4\u4e92  \u4f20\u611f\u5668\u8282\u70b9   \u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u9879\u76ee\u53ef\u4ee5\u4f9b\u60a8\u53c2\u8003\u3002     Home Center  Retro Lamp  Drive a Motor           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!        BBG Acrylic Case  GPIO Control  Smart Light           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/BeagleBone_Green/#_4", 
            "text": "USB Host  - USB Host  DC Power and USB Client  - \u4e3a\u677f\u5b50\u4f9b\u7535\u5e76\u4e14\u4f5c\u4e3a\u4ece\u673a  LEDs  D2  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5fc3\u8df3\u95ea\u70c1  D3  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u8bfb\u5199SD\u5361\u6570\u636e\u65f6\u4eae\u8d77  D4  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53 CPU \u6d3b\u52a8\u65f6\u4eae\u8d77  D5  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53eMMC \u8bfb\u5199\u65f6\u4eae\u8d77    Boot \u6309\u94ae  \u5f53\u6709SD\u5361\u63d2\u5165\u65f6\uff0c\u7cfb\u7edf\u5c06\u9996\u5148\u4eceSD\u5361\u542f\u52a8\uff0c\u5982\u679c\u8981\u4eceeMMC\u542f\u52a8\uff0c\u8bf7\u6309\u6b64\u6309\u94ae\uff0c\u7136\u540e\u63a5\u901a\u7535\u6e90.  \u5f53\u542f\u52a8\u540e\u5c31\u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u6309\u94ae, \u8fde\u63a5\u5230  GPIO_72    I2C Grove Interface  - \u8fde\u63a5\u5230  I2C2  Uart Grove Interface  - \u8fde\u63a5\u5230  UART2  Serial Debug  - \u8fde\u63a5\u5230  UART0 , PIN1~PIN6: GND, NC, NC, RX, TX, NC, \u8bf7\u6ce8\u610fpin1 \u662f\u6307\u9760\u8fd1USB \u7684\u7ba1\u811a.   \u7ba1\u811a\u56fe  \u6bcf\u4e2a\u6570\u5b57 I/O pin \u62e5\u67098\u79cd\u4e0d\u540c\u6a21\u5f0f\u53ef\u4f9b\u9009\u62e9\uff0c\u5305\u62ec GPIO.  65 \u79cd\u4e0d\u540c\u53ef\u80fd\u7684\u6570\u5b57 I/Os   Note  \u5728 GPIO \u6a21\u5f0f\u4e0b\uff0c\u6bcf\u4e2a\u6570\u5b57 I/O \u7ba1\u811a\u90fd\u53ef\u4ee5\u5904\u7406\u4e2d\u65ad\u3002    PWMs and Timers   Note  \u9ad8\u8fbe8\u4e2a\u6570\u5b57 I/O \u5f15\u811a\u53ef\u4ee5\u88ab\u914d\u7f6e\u6210\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\u6a21\u5f0f (PWM) \uff0c\u4ece\u800c\u5728\u65e0\u9700CPU\u53c2\u4e0e\u7684\u60c5\u51b5\u4e0b\u7528\u4e8e\u4ea7\u751f\u4fe1\u53f7\u6765\u63a7\u5236\u7535\u673a\u6216\u8005\u4ea7\u751f\u6a21\u62df\u7535\u5e73\u3002    \u6a21\u62df\u8f93\u5165   Note  \u8bf7\u786e\u4fdd\u5728\u4efb\u4f55\u6a21\u62df\u5f15\u811a\u52a0\u7684\u8f93\u5165\u7535\u538b\u4e0d\u9ad8\u4e8e1.8V\u3002\u677f\u5361\u4e0a\u53ea\u6709\u4e00\u4e2a8\u901a\u9053\u7684 12-bit \u6570\u6a21\u8f6c\u5316\u5668\uff0c\u5176\u4e2d7\u4e2a\u901a\u9053\u5f15\u51fa\u5230\u63a5\u53e3\u3002    UART   Note  \u6709\u4e00\u4e2a\u4e13\u7528\u7684\u8fde\u63a5\u5934\u7528\u4e8e\u8fde\u63a5UART0\u811a\u5e76\u4e14\u8fde\u63a5\u5230debug\u7ebf\u7f06\u30025\u4e2a\u9644\u52a0\u7684\u4e32\u884c\u53e3\u4e5f\u8fde\u63a5\u5230\u4e86\u6269\u5c55\u63a5\u53e3\u3002    I2C   Note  \u7b2c\u4e00\u4e2aI2C\u603b\u7ebf\u7528\u4e8e\u8bfb\u53d6Cape\u9644\u52a0\u677f\u4e0a\u7684EEPROMS\uff0c\u4e3a\u4e86\u4e0d\u4f1a\u5f71\u54cd\u8be5\u529f\u80fd\u8be5\u603b\u7ebf\u4e0d\u80fd\u7528\u4e8e\u5176\u4ed6\u6570\u5b57I / O\u64cd\u4f5c\uff0c\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5b83\u5728\u53ef\u7528\u5730\u5740\u4e2d\u6dfb\u52a0\u5176\u4ed6I2C\u8bbe\u5907\u3002 \u7b2c\u4e8c\u4e2aI2C\u603b\u7ebf\u53ef\u4f9b\u60a8\u81ea\u7531\u914d\u7f6e\u548c\u4f7f\u7528\u3002    SPI   Note  \u82e5\u662f\u9700\u8981\u5feb\u901f\u4f20\u8f93\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u4f7f\u7528SPI\u63a5\u53e3\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/BeagleBone_Green/#_5", 
            "text": "Note  \u6b64\u7ae0\u8282\u662f\u57fa\u4e8eWindows 10 \u7cfb\u7edf\uff0c\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u7684\u6307\u5357\u4e0e\u6b64\u7c7b\u4f3c\u3002   \u6b65\u9aa41.\u901a\u8fc7 USB \u63a5\u53e3\u8fde\u63a5 BBG  \u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684Micro-USB\u7535\u7f06\u5c06\u60a8\u7684BBG\u63a5\u5165\u7535\u8111\u3002 \u8fd9\u5c06\u540c\u65f6\u4e3a\u7535\u8def\u677f\u4f9b\u7535\u5e76\u63d0\u4f9b\u5f00\u53d1\u63a5\u53e3\u3002 BBG\u5c06\u4ece\u677f\u8f7d2GB\u62164GB eMMC\u542f\u52a8Linux\u3002  BBG\u5c06\u4f5c\u4e3a\u95ea\u5b58\u9a71\u52a8\u5668\u8fd0\u884c\uff0c\u4e3a\u60a8\u63d0\u4f9b\u6587\u6863\u548c\u9a71\u52a8\u7a0b\u5e8f\u7684\u672c\u5730\u526f\u672c\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u63a5\u53e3\u53ef\u80fd\u4e0d\u7528\u4e8e\u4f7f\u7528\u65b0\u6620\u50cf\u91cd\u65b0\u914d\u7f6emicroSD\u5361\uff0c\u4f46\u53ef\u7528\u4e8e\u4f7f\u7528uEnv.txt\u6587\u4ef6\u66f4\u65b0\u5f15\u5bfc\u53c2\u6570\u3002  \u60a8\u5c06\u770b\u5230PWR LED\u7a33\u5b9a\u70b9\u4eae\u3002 \u572810\u79d2\u949f\u5185\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u53e6\u4e00\u4e2aLED\u4ee5\u5176\u9ed8\u8ba4\u914d\u7f6e\u95ea\u70c1\u3002   D2  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5fc3\u8df3\u95ea\u70c1  D3  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u8bfb\u5199SD\u5361\u6570\u636e\u65f6\u4eae\u8d77  D4  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53 CPU \u6d3b\u52a8\u65f6\u4eae\u8d77  D5  \u5728 boot \u4e2d\u914d\u7f6e\u4e3a\u5f53eMMC \u8bfb\u5199\u65f6\u4eae\u8d77   \u6b65\u9aa42. \u5b89\u88c5\u9a71\u52a8  \u4e3a\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8ba9\u60a8\u7684Beaglebone\u53ef\u4ee5\u901a\u8fc7USB\u8bbf\u95ee\u7f51\u7edc\u3002 \u5176\u4ed6\u9a71\u52a8\u7a0b\u5e8f\u53ef\u8ba9\u60a8\u8bbf\u95ee\u7684\u4e3b\u677f\u3002     \u64cd\u4f5c\u7cfb\u7edf  USB \u9a71\u52a8  \u5907\u6ce8      Windows (64-bit)  64-bit installer     Windows (32-bit)  32-bit installer     Mac OS X  Network  and  Serial  \u6ce8\u610fNetwork\u548cSerial\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u9a71\u52a8\uff0c\u60a8\u90fd\u9700\u8981\u5b89\u88c5    Linux  mkudevrule.sh  \u9a71\u52a8\u7a0b\u5e8f\u5b89\u88c5\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u51e0\u4e2audev\u89c4\u5219\u5f88\u6709\u5e2e\u52a9\u3002.      Note  \u5bf9\u4e8eWindows\u7cfb\u7edf\uff0c\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9:   Windows \u9a71\u52a8\u8ba4\u8bc1\u8b66\u544a\u53ef\u80fd\u4f1a\u5f39\u51fa\u4e24\u5230\u4e09\u6b21\uff0c\u70b9\u51fb \"\u5ffd\u7565\", \"\u5b89\u88c5\" \u6216\u8005 \"\u8fd0\u884c\"  \u70b9\u51fb\u4e0b\u9762\u94fe\u63a5\u67e5\u770b\u60a8\u9700\u8981\u5b89\u88c564\u4f4d\u6216\u800532\u4f4d  \u70b9\u51fb\u8fd9\u91cc  \u5728\u975e\u6700\u65b0\u7248\u672c\u7684Windows\u7cfb\u7edf\u4e0b,\u60a8\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u9047\u5230\u9519\u8bef (0xc000007b)\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u70b9\u51fb  \u5b89\u88c5  \u518d\u91cd\u8bd5\u4e00\u6b21\u3002  \u60a8\u53ef\u80fd\u9700\u8981\u91cd\u542f\u7535\u8111\u3002  \u8be5\u9a71\u52a8\u5728Windows 10 \u4e0b\u6d4b\u8bd5\u901a\u8fc7\u3002     Note  Additional FTDI USB to serial/JTAG information and drivers are available from  https://www.ftdichip.com/Drivers/VCP.htm .    Note  Additional USB to virtual Ethernet information and drivers are available from  https://www.linux-usb.org/gadget/  and  https://joshuawise.com/horndis .   \u6b65\u9aa43. \u4f7f\u7528\u6d4f\u89c8\u5668\u6d4f\u89c8\u60a8\u7684 Beagle  \u4f7f\u7528Chrome\u6216Firefox\uff08Internet Explorer\u5c06\u4e0d\u8d77\u4f5c\u7528\uff09\uff0c\u6d4f\u89c8\u5230\u60a8\u7684\u7535\u8def\u677f\u4e0a\u8fd0\u884c\u7684Web\u670d\u52a1\u5668\u3002 \u5b83\u5c06\u52a0\u8f7d\u4e00\u4e2a\u6f14\u793a\u6587\u7a3f\uff0c\u5411\u60a8\u663e\u793a\u7535\u8def\u677f\u7684\u529f\u80fd\u3002 \u4f7f\u7528\u952e\u76d8\u4e0a\u7684\u7bad\u5934\u952e\u6d4f\u89c8\u6f14\u793a\u6587\u7a3f\u3002\n\u4f7f\u7528Chrome\u6216Firefox\uff08Internet Explorer\u5c06\u4e0d\u8d77\u4f5c\u7528\uff09\uff0c\u6d4f\u89c8\u5230\u60a8\u7684\u7535\u8def\u677f\u4e0a\u8fd0\u884c\u7684Web\u670d\u52a1\u5668\u3002 \u5b83\u5c06\u52a0\u8f7d\u4e00\u4e2a\u6f14\u793a\u6587\u7a3f\uff0c\u5411\u60a8\u5c55\u793a\u7535\u8def\u677f\u7684\u529f\u80fd\u3002 \u4f7f\u7528\u952e\u76d8\u4e0a\u7684\u7bad\u5934\u952e\u5bfc\u822a\u6f14\u793a\u6587\u7a3f\u3002  \u70b9\u51fb  http://192.168.7.2  \u6765\u52a0\u8f7d\u60a8\u7684 BBG.\n\u8f83\u65e7\u7684\u8f6f\u4ef6\u6620\u50cf\u8981\u6c42\u60a8\u4f7f\u7528BEAGLE_BONE\u9a71\u52a8\u5668\u542f\u52a8\u7f51\u7edc\u3002 \u4f7f\u7528\u6700\u65b0\u7684\u8f6f\u4ef6\u6620\u50cf\uff0c\u4e0d\u518d\u9700\u8981\u8be5\u6b65\u9aa4\u3002   \u6b65\u9aa44. Cloud9 IDE  \u8981\u5f00\u59cb\u7f16\u8f91\u60a8\u7684\u4e3b\u677f\u4e0a\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5355\u51fb\u4e0b\u9762\u94fe\u63a5\u6765\u5f00\u542f Cloud9 IDE", 
            "title": "\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/BeagleBone_Green/#_6", 
            "text": "\u60a8\u9700\u8981\u5c06\u4e3b\u677f\u66f4\u65b0\u5230\u6700\u65b0\u7684\u8f6f\u4ef6\u4ee5\u4fdd\u6301\u66f4\u597d\u7684\u6027\u80fd\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u9010\u6b65\u5b9e\u73b0\u3002  \u6b65\u9aa41. \u4e0b\u8f7d\u6700\u65b0\u7684\u56fa\u4ef6  \u9996\u5148\uff0c\u60a8\u5fc5\u987b\u5728\u8fd9\u91cc\u4e0b\u8f7d\u5408\u9002\u7684\u56fa\u4ef6\u3002    Note  \u7531\u4e8e\u8f6f\u4ef6\u5927\u5c0f\uff0c\u6b64\u4e0b\u8f7d\u53ef\u80fd\u9700\u8981\u7ea630\u5206\u949f\u6216\u66f4\u957f\u65f6\u95f4\u3002   \u60a8\u4e0b\u8f7d\u7684\u6587\u4ef6\u5c06\u6709\u4e00\u4e2a**img.xz **\u6269\u5c55\u540d\u3002 \u8fd9\u662f\u7528\u4e8eSD\u5361\u70e7\u5f55\u7684\u56fa\u4ef6\u3002  \u6b65\u9aa42. \u5b89\u88c5SD\u5361\u70e7\u5f55\u7a0b\u5e8f  \u4e0b\u8f7d\u5e76\u4e14\u5b89\u88c5   Image Writer for Windows . \u8bf7\u786e\u4fdd\u60a8\u4e0b\u8f7d\u7684\u662f\u5bf9\u5e94\u81ea\u5df1\u7cfb\u7edf\u7684\u7248\u672c\u3002  \u6b65\u9aa43. \u5c06\u60a8\u7684\u56fa\u4ef6\u5199\u5165SD\u5361  \u9996\u5148\u9700\u8981\u901a\u8fc7\u4e00\u4e2aSD\u9002\u914d\u5668\u5c06microSD\u5361\u8fde\u63a5\u5230\u7535\u8111\u3002 \u7136\u540e\u4f7f\u7528\u8f6f\u4ef6Image Write for Windows\u5c06\u89e3\u538b\u7f29\u7684\u56fa\u4ef6\u5199\u5165SD\u5361\u3002   \u70b9\u51fb  Write  \u6309\u94ae,\u7136\u540e\u5199\u5165\u7a0b\u5e8f\u5c06\u5f00\u542f\u3002    Note   \u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u6709\u5173\u635f\u574fSD\u5361\u7684\u8b66\u544a\uff0c\u8bf7\u60a8\u653e\u5fc3\u9009\u62e9\u63a5\u53d7\u3002  \u6b64\u65f6\u60a8\u4e0d\u5e94\u5c06 BeagleBone \u94fe\u63a5\u5230\u7535\u8111\u3002  \u6574\u4e2a\u8fc7\u7a0b\u5927\u6982\u4f1a\u6301\u7eed10\u5206\u949f\u3002    \u6b65\u9aa44. \u4eceSD\u5361\u542f\u52a8\u60a8\u7684\u7cfb\u7edf  \u5173\u95ed\u7535\u6e90\uff0c\u63d2\u5165SD\u5361\uff0c\u7136\u540e\u6253\u5f00\u7535\u6e90\uff0c\u7cfb\u7edf\u5c31\u5c06\u4eceSD\u5361\u542f\u52a8\u3002   Note    \u5982\u679c\u60a8\u4e0d\u9700\u8981\u5c06\u56fa\u4ef6\u5199\u5165\u60a8\u7684\u677f\u8f7deMMC\uff0c\u5219\u65e0\u9700\u9605\u8bfb\u672c\u7ae0\u6700\u540e\u4e00\u7ae0\u3002 \u5426\u5219\u8bf7\u7ee7\u7eed\u3002   \u5982\u679c\u60a8\u5e0c\u671b\u5c06\u56fa\u4ef6\u5199\u5165\u60a8\u7684\u677f\u8f7deMMC\uff0c\u5219\u9700\u8981\u52a0\u8f7d\u8fdb\u677f\u5361\u5e76\u4fee\u6539\u6587\u4ef6\u3002  \u5728  /boot/uEnv.txt  \u4e2d\u627e\u5230:  ##enable BBB: eMMC Flasher:\n#cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh  \u4fee\u6539\u4e3a:  ##enable BBB: eMMC Flasher:\ncmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh  \u7136\u540e\u60a8\u5c06\u770b\u52304\u4e2aLED\u706f\u4f1a\u5982\u4e0b\u56fe\u95ea\u70c1\u3002    Note    \u5982\u679c\u6ca1\u6709\u770b\u5230\u4e0a\u56fe\u6240\u793a\u7684\u7684\u706f\u8ff9\uff0c\u8bf7\u6309RESET\u6309\u94ae\u91cd\u7f6e\u7535\u8def\u677f\u3002   \u5f53\u95ea\u70c1\u5b8c\u6210\u65f6\uff0c\u6240\u67094\u4e2a\u7528\u6237\u6307\u793a\u706f LED\u5c06\u5173\u95ed\u3002 \u6700\u65b0\u7684Debian\u7cfb\u7edf\u5728\u5b8c\u6210\u56fa\u4ef6\u52a0\u8f7d\u540e\u81ea\u52a8\u5173\u95ed\u7535\u8def\u677f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6700\u591a\u53ef\u80fd\u4f1a\u6301\u7eed** 10\u5206\u949f**\u3002 \u5173\u95ed\u7535\u6e90\uff0c\u53d6\u51faSD\u5361\uff0c\u518d\u6b21\u63a5\u901a\u7535\u6e90\u5373\u53ef\u5b8c\u6210\u3002", 
            "title": "\u66f4\u65b0\u5230\u6700\u65b0\u7684\u8f6f\u4ef6"
        }, 
        {
            "location": "/BeagleBone_Green/#grove-for-bbg", 
            "text": "Grove \u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4e00\u4e2a\u5177\u6709\u6807\u51c6\u534f\u8bae\u7684\u8fde\u63a5\u5668\u7cfb\u7edf\u3002 Grove\u91c7\u7528\u79ef\u6728\u5f0f\u7ec4\u88c5\u7535\u5b50\u6280\u672f\u3002 \u4e0e\u57fa\u4e8e\u8df3\u7ebf\u6216\u710a\u63a5\u7684\u7cfb\u7edf\u76f8\u6bd4\uff0c\u5177\u6709\u8fde\u63a5\u65b9\u4fbf\u3001\u7ed3\u6784\u7b80\u5355\u3001\u6613\u4e8e\u4e0a\u624b\u3001\u53ef\u5feb\u901f\u5165\u95e8\u5b66\u4e60\u7b49\u8bf8\u591a\u4f18\u70b9\u3002  \u4e0b\u8868\u7f57\u5217\u4e86\u9002\u7528\u4e8e BBG \u7684Grove \u6a21\u5757.     SKU  \u540d\u79f0  \u63a5\u53e3  \u8d2d\u4e70\u94fe\u63a5      101020054  Grove - 3-Axis Digital Accelerometer(+16g)  I2C  \u8d2d\u4e70\u94fe\u63a5    101020071  Grove - 3-Axis Digital Accelerometer(+400g)  I2C  \u8d2d\u4e70\u94fe\u63a5    101020034  Grove - 3-Axis Digital Compass  I2C  \u8d2d\u4e70\u94fe\u63a5    101020050  Grove - 3-Axis Digital Gyro  Analog  \u8d2d\u4e70\u94fe\u63a5    101020081  Grove - 6-Axis Accelerometer Compass v2.0  I2C  \u8d2d\u4e70\u94fe\u63a5    101020072  Grove - Barometer Sensor(BMP180)  I2C  \u8d2d\u4e70\u94fe\u63a5    104030010  Grove - Blue LED  I/O  \u8d2d\u4e70\u94fe\u63a5    101020003  Grove - Button  I/O  \u8d2d\u4e70\u94fe\u63a5    111020000  Grove - Button(P)  I/O  \u8d2d\u4e70\u94fe\u63a5    107020000  Grove - Buzzer  I/O  \u8d2d\u4e70\u94fe\u63a5    104030006  Grove - Chainable RGB LED  I2C  \u8d2d\u4e70\u94fe\u63a5    101020030  Grove - Digital Light Sensor  I2C  \u8d2d\u4e70\u94fe\u63a5    103020024  Grove - Finger-clip Heart Rate Sensor  I2C  \u8d2d\u4e70\u94fe\u63a5    101020082  Grove - Finger-clip Heart Rate Sensor with shell  I2C  \u8d2d\u4e70\u94fe\u63a5    113020003  Grove - GPS  UART  \u8d2d\u4e70\u94fe\u63a5    104030007  Grove - Green LED  I/O  \u8d2d\u4e70\u94fe\u63a5    103020013  Grove - I2C ADC  I2C  \u8d2d\u4e70\u94fe\u63a5    103020006  Grove - I2C Hub  I2C  \u8d2d\u4e70\u94fe\u63a5    101020079  Grove - IMU 10DOF  I2C  \u8d2d\u4e70\u94fe\u63a5    101020080  Grove - IMU 9DOF v2.0  I2C  \u8d2d\u4e70\u94fe\u63a5    101020040  Grove - IR Distance Interrupter  I/O  \u8d2d\u4e70\u94fe\u63a5    104030011  Grove - OLED Display 0.96''  I2C  \u8d2d\u4e70\u94fe\u63a5    104030008  Grove - OLED Display 1.12''  I2C  \u8d2d\u4e70\u94fe\u63a5    104030005  Grove - Red LED  I/O  \u8d2d\u4e70\u94fe\u63a5    103020005  Grove - Relay  I/O  \u8d2d\u4e70\u94fe\u63a5    316010005  Grove - Servo  I/O  \u8d2d\u4e70\u94fe\u63a5    101020023  Grove - Sound Sensor  Analog  \u8d2d\u4e70\u94fe\u63a5    101020004  Grove - Switch(P)  I/O  \u8d2d\u4e70\u94fe\u63a5    101020015  Grove - Temperature Sensor  Analog  \u8d2d\u4e70\u94fe\u63a5    101020019  Grove - Temperature Humidity Sensor Pro  Analog  \u8d2d\u4e70\u94fe\u63a5", 
            "title": "Grove for BBG"
        }, 
        {
            "location": "/BeagleBone_Green/#cape-for-bbg", 
            "text": "\u5728\u60a8\u5f00\u59cb\u81ea\u5df1\u7684\u9879\u76ee\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u6269\u5c55\u677f\u3002 BBG \u5df2\u7ecf\u6709\u8bb8\u591a\u6269\u5c55\u677f\uff0c\u5305\u62ec\u6db2\u6676\u663e\u793a\u5668\uff0c\u7535\u673a\u9a71\u52a8\u5668\u4ee5\u53caHDMI\u6269\u5c55\u7b49\u3002\u4ee5\u4e0b\u662f\u5176\u4e2d\u7684\u4e00\u4e9b\u63a8\u8350\u3002     Grove Cape  Motor Bridge Cape  HDMI Cape           GET ONE NOW!  GET ONE NOW!  GET ONE NOW!        Grove Cape  5 Inch LCD  7 Inch LCD           GET ONE NOW!  GET ONE NOW!  GET ONE NOW!", 
            "title": "Cape for BBG"
        }, 
        {
            "location": "/BeagleBone_Green/#faq", 
            "text": "BBG 1 \u548c BBG 2 \u6709\u4f55\u4e0d\u540c?\n \u00a0  \n\u6211\u4eec\u57282016\u5e74\u66f4\u65b0\u4e86Beaglebone Green\u7684eMMC\u3002\u56e0\u6b64\uff0c\u4ee5\u524d\u7684BBG1\u56fa\u4ef6\u5728BBG2\u4e0a\u65e0\u6cd5\u4f7f\u7528\uff0c\u4f46\u65b0\u7684\u56fa\u4ef6\u5728BBG1\u548cBBG2\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u3002", 
            "title": "FAQ"
        }, 
        {
            "location": "/BeagleBone_Green/#_7", 
            "text": "\u6709\u5f88\u591a\u53c2\u8003\u8d44\u6599\u53ef\u4ee5\u5e2e\u52a9\u60a8\u83b7\u5f97\u6709\u5173 BBG \u7684\u66f4\u591a\u4fe1\u606f\u3002   BeagleBoard Main Page  BeagleBone Green info at BeagleBoard page  BeagleBoard Getting Started  Troubleshooting  Hardware documentation  Projects of BeagleBoard  CE certification of BBG  FCC certification of BBG", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/BeagleBone_Green/#_8", 
            "text": "BEAGLEBONE_GREEN SRM(v1a)(pdf)  BEAGLEBONE_GREEN Schematic(pdf)  BEAGLEBONE_GREEN Schematic(OrCAD)  BEAGLEBONE_GREEN PCB(OrCAD)", 
            "title": "\u8d44\u6599\u4e0b\u8f7d"
        }, 
        {
            "location": "/Raspberry/", 
            "text": "Raspberry Pi\u6700\u521d\u662f\u7531\u82f1\u56fd\u7684\u4e00\u4e2a\u975e\u8425\u5229\u7ec4\u7ec7\u8bbe\u8ba1\u548c\u521b\u5efa\u7684\uff0c\u65e8\u5728\u521b\u5efa\u8fd9\u4e2a\u5355\u677f\uff0c\u4ee5\u4fc3\u8fdb\u5b66\u6821\u548c\u53d1\u5c55\u4e2d\u56fd\u5bb6\u57fa\u7840\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u6559\u5b66\u3002\u5b83\u662f\u4e00\u79cd\u4fe1\u7528\u5361\u5927\u5c0f\u7684\u8ba1\u7b97\u673a\uff0c\u53ef\u4ee5\u9884\u5b89\u88c5Linux\uff0c\u5c3d\u7ba1\u4f53\u79ef\u5c0f\u5de7\uff0c\u4f46\u5b83\u53ef\u4ee5\u5904\u7406\u4e0e\u684c\u9762PC\u5927\u90e8\u5206\u76f8\u540c\u7684\u4efb\u52a1\u3002\n\n\n\u6811\u8393\u6d3e\u8ddf\u65b0\u4e86\u51e0\u4ee3\u3002\u7b2c\u4e00\u4ee3\uff08Pi 1\uff09\u4e8e2012\u5e742\u6708\u53d1\u5e03\uff0c\u57fa\u672c\u578b\u53f7A\u548c\u66f4\u9ad8\u89c4\u683c\u7684\u578b\u53f7B.A +\u548cB +\u578b\u53f7\u4e00\u5e74\u540e\u53d1\u5e03\u3002 Raspberry Pi 2\u578b\u53f7B\u4e8e2015\u5e742\u6708\u53d1\u5e03\uff0c2016\u5e742\u6708\u53d1\u5e03\u4e86Raspberry Pi 3\u578b\u53f7B\u3002\n\n\n\u5728Seeed Studio\uff0c\u6211\u4eec\u4e0d\u4ec5\u63d0\u4f9b\u4e0a\u8ff0\u4e0d\u540c\u7684raspberry pi\u677f\uff0c\u8fd8\u63d0\u4f9b\u4e0d\u540c\u7684\u914d\u4ef6\u548c\u5165\u95e8\u5de5\u5177\u5305\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u521b\u5efaraspberry pi\u9879\u76ee\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5df2\u7ecf\u5728Seeed\u7684\u6811\u8393\u6d3e\u793e\u533a\u4e2d\u521b\u5efa\u4e86\u8bb8\u591a\u6559\u7a0b\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u6784\u5efa\u81ea\u5df1\u7684\u521b\u610f\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Raspberry Pi\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "Raspberry"
        }, 
        {
            "location": "/Raspberry/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Raspberry Pi\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Wio/", 
            "text": "Wio\u5e73\u53f0\u57282015\u5e74\u5e95\u9996\u6b21\u5f15\u5165\u4e16\u754c\uff0c\u5f53\u65f6Wio Link\u5728Kickstarter\u4e0a\u6210\u7acb\u3002\u4f5c\u4e3a\u6211\u4eec\u5728Kickstarter\u63a8\u51fa\u7684\u7b2c\u4e8c\u6b3e\u4ea7\u54c1\uff0cWio Link\u7684\u7ed3\u679c\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u9884\u671f\u3002\u6240\u4ee5\u4e0d\u4e45\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u5e03\u4e86Wio\u94fe\u63a5\u7684\u5144\u5f1f\u4ea7\u54c1--Wio Node\u3002\u4e24\u8005\u5177\u6709\u51e0\u4e4e\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4f46\u5c3a\u5bf8\u548c\u8fde\u63a5\u5668\u6570\u91cf\u4e0d\u540c\uff0c\u9002\u5e94\u4e0d\u540c\u7684\u60c5\u51b5\u3002\n\n\n\u5173\u4e8eWio\u6700\u6709\u5438\u5f15\u529b\u7684\u4e00\u4ef6\u4e8b\u662f\u4f7f\u7528\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u7684RESTful API\u7684\u865a\u62df\u5316\u5373\u63d2\u5373\u7528\u6a21\u5757\uff0c\u901a\u8fc7\u4f7f\u7528\u54ea\u4e9b\u4eba\u771f\u6b63\u53ef\u4ee5\u6446\u8131\u710a\u63a5\uff0c\u8df3\u7ebf\u548c\u77e5\u8bc6\uff0c\u5982\u7535\u5b50\u5de5\u7a0b\uff0c\u5fae\u63a7\u5236\u5668\u7f16\u7a0b\uff0c\u7f51\u7edc\u7f16\u7a0b\uff0cIoT\u534f\u8bae\u5904\u7406\u3002\u6211\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u5143\u7d20\u4e0d\u597d\uff0c\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u8fd9\u4e9b\u6b65\u9aa4\u548c\u77e5\u8bc6\u672c\u8d28\u4e0a\u662f\u7ec3\u4e60\uff0c\u4f46\u6709\u65f6\u5019\u6211\u4eec\u53ea\u662f\u60f3\u8981\u5feb\u901f\u7684\u539f\u578b\u548c\u5feb\u901f\u53cd\u5e94\uff0c\u8fd9\u5c31\u662fWio\u8bde\u751f\u7684\uff0c\u7b80\u5316\u4e86\u6240\u6709\u7684\u6b65\u9aa4\uff0c\u4f7f\u539f\u578b\u8bbe\u8ba1\u53d8\u5f97\u5bb9\u6613\uff0c\u5373\u4f7f\u60a8\u5bf9\u7535\u5b50\u4ea7\u54c1\u4e00\u65e0\u6240\u77e5\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u7ea65\u5206\u949f\u5185\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684IoT\u9879\u76ee\u662f\u4e0d\u5938\u5f20\u7684\u3002\n\n\n\u6211\u4eec\u5b89\u6392\u4e86\u8bb8\u591a\u6709\u8da3\u7684\u9879\u76ee\u6559\u7a0b\uff0c\u8ba9\u60a8\u5f00\u59cb\u4f7f\u7528Wio\uff0c\u60a8\u53ef\u4ee5\u8fdc\u7a0b\u4f9b\u6c34\u60a8\u7684\u690d\u7269\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5728\u5bb6\u65f6\u5582\u72d7\uff0c\u60f3\u8981\u6316\u6398Wio\u53ef\u4ee5\u5236\u4f5c\u4ec0\u4e48\u5176\u4ed6\u7684\u4e1c\u897f\uff1f\u5f88\u5feb\u67e5\u770bWio\u94fe\u63a5\u548cWio\u8282\u70b9\u7684\u6587\u6863\uff0c\u73a9\u5f97\u5f00\u5fc3\uff01\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Wio\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "Wio"
        }, 
        {
            "location": "/Wio/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Wio\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/LinkIt/", 
            "text": "\u60a8\u9700\u8981\u4e86\u89e3\u7684LinkIt\u7cfb\u5217\u7684\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u662fLi\u200b\u200bnkIt One\uff0c\u56e0\u4e3a\u5b83\u5f88\u597d\u5730\u5b9a\u4e49\u4e86LinkIt\u5e73\u53f0\u6b63\u5728\u505a\u4ec0\u4e48\u3002 LinkIt\u5b83\u5fc5\u987b\u662f\u5730\u7403\u4e0a\u529f\u80fd\u6700\u4e30\u5bcc\u7684\u7535\u8def\u677f\u4e4b\u4e00\u3002\u5b83\u5728\u5355\u4e2a\u5f00\u53d1\u677f\u4e0a\u5305\u62ecARM7 EJ-S\u2122\uff0cGSM\uff0cGPRS\uff0cWi-Fi\uff0c\u84dd\u7259BR / EDR / BLE\uff0cGPS\uff0c\u97f3\u9891\u7f16\u89e3\u7801\u5668\u548cSD\u5361\u8fde\u63a5\u5668\u3002\u73b0\u5728\u4f60\u53ef\u80fd\u4f1a\u660e\u767d\u4e3a\u4ec0\u4e48\u5b83\u88ab\u79f0\u4e3aLinkIt One\u3002\u9664\u4e86\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u5b83\u8fd8\u662f\u4e00\u4e2a\u5177\u6709\u4e30\u5bcc\u517c\u5bb9\u6027\u548c\u5f3a\u5927\u53ef\u6269\u5c55\u6027\u7684\u677f\uff0c\u901a\u8fc7\u4f7f\u7528LinkIt ONE\u4e0eMediaTek LinkIt SDK\uff08\u5bf9\u4e8eArduino\uff09\uff0c\u60a8\u5c06\u80fd\u591f\u8f7b\u677e\u5730\u5c06\u60a8\u7684\u60f3\u6cd5\u8f6c\u5316\u4e3a\u5b9e\u9645\u539f\u578b\uff0c\u5e76\u4f7f\u5176\u6210\u4e3a\u73b0\u5b9eSeeed\u4ea7\u54c1\u5316\u548c\u654f\u6377\u5236\u9020\u670d\u52a1\u3002\n\n\n\u5728LinkIt ONE\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u5e03\u4e86LinkIt Smart 7688\u548cLinkIt Smart 7688 Duo\uff0c\u5b83\u4eec\u90fd\u4e13\u4e3a\u667a\u80fd\u5bb6\u5c45\u548c\u529e\u516c\u5ba4\u7684Rich Application IoT\u8bbe\u5907\u7684\u539f\u578b\u8bbe\u8ba1\u800c\u8bbe\u8ba1\u3002\u4e3a\u4e86\u4f7f\u539f\u578b\u66f4\u52a0\u65b9\u4fbf\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u6211\u4eec\u8fd8\u53d1\u5e03\u4e86LinkIt Smart 7688\u548cLinkIt Smart 7688 Duo\u7684breakout\u677f\u5b50\uff0c\u4f8b\u5982LinkIt Smart 7688 Duo\u7684Arduino breakout board\u548cLinkIt Smart 7688 V2.0\u7684breakout board\u3002\u8d8a\u6765\u8d8a\u591a\u7684\u677f\u5361\u52a0\u5165\u5230LinkIt\u7cfb\u5217\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5728New Seeed Wiki\u4e2d\u627e\u5230\u6709\u5173\u5982\u4f55\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u4e3b\u677f\u7684\u6240\u6709\u6559\u7a0b\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684LinkIt Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nLinkIt_Smart_7688", 
            "title": "LinkIt"
        }, 
        {
            "location": "/LinkIt/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684LinkIt Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   LinkIt_Smart_7688", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/LinkIt_Smart_7688/", 
            "text": "LinkIt Smart 7688\uff08\u7d27\u51d1\u578b\u63a7\u5236\u5668\u677f\uff09\u662f\u4e00\u4e2a\u57fa\u4e8eOpenWrt Linux\u53d1\u884c\u7248\u548cMT7688(\n\u6570\u636e\u624b\u518c\n)\u7684\u5f00\u653e\u5f0f\u5f00\u53d1\u677f\u3002 \u8be5\u4e3b\u677f\u4e13\u4e3a\u667a\u80fd\u5bb6\u5c45\u4e30\u5bcc\u591a\u5f69\u7684\u7269\u8054\u7f51\u8bbe\u5907\u751f\u6001\u800c\u8bbe\u8ba1\u3002 \u8be5\u677f\u63d0\u4f9b\u8db3\u591f\u7684\u5185\u5b58\u548c\u5b58\u50a8\uff0c\u4ee5\u5b9e\u73b0\u5f3a\u5927\u7684\u89c6\u9891\u5904\u7406\u3002 \u8be5\u5e73\u53f0\u8fd8\u63d0\u4f9b\u4e86\u5728Python\uff0cNode.js\u548cC\u7f16\u7a0b\u8bed\u8a00\u4e2d\u521b\u5efa\u8bbe\u5907\u5e94\u7528\u7a0b\u5e8f\u7684\u9009\u9879\u3002 \u8be5\u677f\u53ea\u662f\u8054\u53d1\u79d1LinkIt Smart 7688\u5e73\u53f0\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u5e73\u53f0\u8fd8\u6709\u8bb8\u591a\u529f\u80fd\u6027\u80fd\u4e0d\u540c\u7684\u5176\u4ed6\u5f00\u53d1\u677f\u3002\n\n\n\n\nNote\n\n\n\n\n\n\n\u672c\u9875\u4ec5\u5f15\u5bfc\u60a8\u5f00\u59cb\u4f7f\u7528\u6b64\u5f00\u53d1\u677f\u3002 \u6709\u5173\u5b8c\u6574\u7684\u6307\u5357\uff0c\u8bf7\u53c2\u9605\u6b64\u5904 \n\u8be6\u60c5\u6307\u5357\n.\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u5355\u8f93\u5165\u5355\u8f93\u51fa\uff081T1R\uff09Wi-Fi 802.11 b / g / n\u3002\n\n\nGPIO\u5f15\u811a, I\n2\nC, I\n2\nS, SPI, UART, PWM \u4ee5\u53ca Ethernet \u63a5\u53e3.\n\n\n580 MHz MIPS CPU.\n\n\n32MB Flash and 128MB DDR2 RAM.\n\n\nUSB host.\n\n\nMicro SD slot.\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\n\n\u4e30\u5bcc\u591a\u5f69\u7684\u667a\u80fd\u5bb6\u5c45\u7269\u8054\u7f51\u5e94\u7528\n\n\n\u673a\u5668\u4eba\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u5206\u7c7b\n\n\n\n \u53c2\u6570\n\n\n\n\u8be6\u60c5\n\n\n\n\n\n MPU \n\n\n \u82af\u7247\u96c6 \n\n\n MT7688AN\n\n\n\n\n\n \u5185\u6838 \n\n\n MIPS24KEc\n\n\n\n\n\n \u65f6\u949f\u9891\u7387\n\n\n 580MHz\n\n\n\n\n\n \u5de5\u4f5c\u7535\u538b \n\n\n 3.3V\n\n\n\n\n\n PCB \u89c4\u683c \n\n\n \u5c3a\u5bf8 \n\n\n 55.7 x 26 mm\n\n\n\n\n\n \u5b58\u50a8   \n\n\n Flash \n\n\n 32MB\n\n\n\n\n\n  RAM\n\n\n 128MB DDR2\n\n\n\n\n\n \u7535\u6e90  \n\n\n USB Power \n\n\n 5V (USB micro-B)\n\n\n\n\n\n  VCC \n\n\n 3.3V (Pin Breakout)\n\n\n\n\n\n GPIO  \n\n\n \u5f15\u811a\u6570\u91cf \n\n\n 22 (MT7688AN)\n\n\n\n\n\n  \u7535\u538b \n\n\n 3.3V\n\n\n\n\n\n PWM  \n\n\n \u5f15\u811a\u6570\u91cf\n\n\n 4 (MT7688AN)\n\n\n\n\n\n  \u7535\u538b \n\n\n 3.3V\n\n\n\n\n\n  \u6700\u5927\u5206\u8fa8\u7387 \n\n\n 7 bits (customizable)\n\n\n\n\n\n\u6700\u9ad8\u9891\u7387@\u5206\u8fa8\u7387 \n\n\n\n\n100kHz@1-bit,\n50kHz@2-bit,\n25kHz@3-bit,\n12.5kHz@4-bit,\n6.25kHz@5-bit,\n3.125kHz@6-bit,\n1.5625kHz@7-bit (\u6807\u51c6\u6a21\u5f0f)\n\n\n\n\n\n\n\n\n40MHz@1-bit,\n20MHz@2-bit,\n10MHz@3-bit,\n5MHz@4-bit,\n2.5MHz@5-bit,\n1.25Mhz@6-bit,\n625kHz@7-bit\n(\u5feb\u901f\u6a21\u5f0f)\n\n\n\n\n\n\n \u5916\u90e8\u4e2d\u65ad \n\n\n \u5f15\u811a\u6570\u91cf \n\n\n 22 (MT7688AN)\n\n\n\n\n\n SPI \n\n\n Set count \n\n\n 1 (MT7688AN)\n\n\n\n\n\n  \u5f15\u811a\u7f16\u53f7 \n\n\n P22, P23, P24 (\u548c\u7247\u4e0a\u5b58\u50a8\u590d\u7528), P25\n\n\n\n\n\n  \u6700\u9ad8\u901f\u5ea6 \n\n\n 25 MHz\n\n\n\n\n\n SPI Slave \n\n\n Set count \n\n\n 1 (MT7688AN)\n\n\n\n\n\n  \u5f15\u811a\u7f16\u53f7 \n\n\n P28, P29, P30, P31\n\n\n\n\n\n  \u6700\u9ad8\u901f\u5ea6 \n\n\n 25 MHz\n\n\n\n\n\n I\n2\nS \n\n\n Set count \n\n\n 1 (MT7688AN)\n\n\n\n\n\n  \u5f15\u811a\u7f16\u53f7 \n\n\n P10, P11, P12, P13\n\n\n\n\n\n I\n2\nC \n\n\n Set count \n\n\n 1\n\n\n\n\n\n  \u5f15\u811a\u7f16\u53f7 \n\n\n P20, P21\n\n\n\n\n\n  \u901f\u5ea6 \n\n\n 120K/400K\n\n\n\n\n\n UART Lite \n\n\n Set count \n\n\n 3 (MT7688AN)\n\n\n\n\n\n  \u5f15\u811a\u7f16\u53f7 \n\n\n P8, P9, P16, P17, P18, P19\n\n\n\n\n\n  \u6700\u9ad8\u901f\u5ea6 \n\n\n 0.5Mbps\n\n\n\n\n\n USB Host \n\n\n Set count \n\n\n 1 (MT7688AN)\n\n\n\n\n\n  \u5f15\u811a\u7f16\u53f7 \n\n\n P6, P7\n\n\n\n\n\n  \u901f\u5ea6 \n\n\n Micro-AB\n\n\n\n\n\n \u7f51\u7edc\u901a\u4fe1 \n\n\n Wi-Fi \n\n\n 1T1R 802.11 b/g/n (2.4G)\n\n\n\n\n\n  Ethernet \n\n\n 1-port 10/100 FE PHY\n\n\n\n\n\n \u5f15\u811a\u7f16\u53f7 \n\n\n P2, P3, P4, P5\n\n\n\n\n\n \u7528\u6237\u5b58\u50a8 \n\n\n SD Card \n\n\n Micro SD\nSDXC\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\n\n\u9879\u76ee\u540d\u79f0   \n\n\n \u6570\u91cf\n\n\n\n\n\n LinkIt\nTM\n Smart 7688  \n\n\n 1PC\n\n\n\n\n\n \u6307\u5357 \n\n\n 1PC\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u8fde\u63a5\u5230\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\n\n\n\n\nNote\n\n\n\n\n\n\n\u6ce8\u610f\u624b\u518c\u4e2d\u63cf\u8ff0\u4e86\u4e24\u79cd\u65b9\u6cd5\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u5c55\u793a\u4f3c\u4e4e\u6709\u70b9\u56f0\u96be\u7684\u9ad8\u7ea7\u65b9\u5f0f\uff08\u4f7f\u7528USB\u5230\u4e32\u884c\u9002\u914d\u5668\uff09\u3002 \u4f46\u662f\uff0c\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u60a8\u4f1a\u53d7\u76ca\u532a\u6d45\u3002\n\n\n\n\n\u6240\u9700\u6750\u6599\n\n\n\n\nLinkIt Smart 7688 \u00d7 1\n\n\nUSB \u6570\u636e\u7ebf (type A to micro type-B) \u00d7 2\n\n\nUSB \u8f6c\u4e32\u53e3\u9002\u914d\u5668\u00d7 1\n\n\n\u8df3\u7ebf \u00d7 3\n\n\n\n\n\u5bf9\u4e8eWindows\u7cfb\u7edf\uff1a\n\n\n**1.**\u70b9\u51fb\u5b89\u88c5 \nPuTTy\n \u3002 PuTTY\u53ef\u4ee5\u4f7f\u7528SSH\uff08Secure Socket Shell\uff09\u7684\u7cfb\u7edf\u63a7\u5236\u53f0\u73af\u5883\u6765\u8bbf\u95ee\u5f00\u53d1\u677f\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\n\n\n**2.**\u70b9\u51fb\u5b89\u88c5 \nBonjour\n \u6253\u5370\u670d\u52a1\uff08\u5bf9\u4e8eWindows 7\uff0cWindows 8\uff0cWindows 10\uff09\u3002\n\n\n**3.**\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u57fa\u4e8eFTDI\u82af\u7247\u7684USB\u7535\u7f06\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u4e0b\u8f7d\u5e76\u5b89\u88c5\u5176\u9a71\u52a8\u7a0b\u5e8f\u3002 \u5982\u679c\u60a8\u9047\u5230\u6700\u65b0\u9a71\u52a8\u7a0b\u5e8f\u95ee\u9898\uff0c\u8bf7\u5c1d\u8bd5\u5b89\u88c5 \n\u65e7\u7248\u672c\n\u3002\n\n\n4.\n \u63a5\u4e0b\u6765\uff0c\u60a8\u9700\u8981\u5c06USB\u8f6c\u4e32\u53e3\u7535\u7f06\u8fde\u63a5\u5230LinkIt Smart 7688\u7684UART\u5f15\u811a\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a\n\n\n\n\n\n\n\n\nUSB \u9002\u914d\u5668\u5f15\u811a\n\n\nLinkIt Smart 7688 \u5bf9\u5e94\u5f15\u811a\n\n\n\n\n\n\n\n\n\n\nPin RX\n\n\nPin 8\n\n\n\n\n\n\nPin TX\n\n\nPin 9\n\n\n\n\n\n\nPin GND\n\n\nPin GND\n\n\n\n\n\n\n\n\n\n\n5.\n \u8fde\u63a5\u4e32\u53e3-USB\u7535\u7f06\u540e\uff0c\u6253\u5f00\u8bbe\u5907\u7ba1\u7406\u5668\u5e76\u6ce8\u610fCOM\u7aef\u53e3\u53f7\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u8fd9\u4e2a\u6570\u5b57\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u800c\u5f02\u3002\n\n\n\n\n6.\n \u542f\u52a8PuTTY\u7ec8\u7aef\uff0c\u8f93\u5165\u8bbe\u5907\u7ba1\u7406\u5668\u4e2d\u627e\u5230\u7684USB\u8bbe\u5907\u7684COM\u7aef\u53e3\u53f7\uff0c\u5355\u51fb\u201cSerial\u201d\u6309\u94ae\uff0c\u5728\u201cSpeed\u201d\u6846\u4e2d\u952e\u516557600\uff0c\u5355\u51fb\u201cOpen\u201d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n7.\n \u73b0\u5728\uff0c\u60a8\u5c06\u770b\u5230Linux\u63a7\u5236\u53f0\u4e2d\u7684\u6253\u5370\u6587\u672c\n\n\n\u5bf9\u4e8eMac\u7cfb\u7edf\uff1a\n\n\n1.\n \u5982\u679c\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8bf7\u67e5\u9605\u7535\u7f06\u5236\u9020\u5546\u7684\u7f51\u7ad9\u4e86\u89e3Mac\u4e0a\u7684\u9a71\u52a8\u7a0b\u5e8f\u8981\u6c42\u548c\u5b89\u88c5\u8bf4\u660e\u3002\n\n\n2.\n \u5c06\u7535\u7f06\u63d2\u5165PC /\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e76\u5c06\u7535\u7f06\u8fde\u63a5\u5230LinkIt Smart 7688\u3002\n\n\n3.\n \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u3002\n\n\n4.\n \u5728\u7ec8\u7aef\u4e2d\u952e\u5165 \nls /dev/cu*\n \u3002\u60a8\u5e94\u8be5\u770b\u5230\u8bbe\u5907\u5217\u8868\u3002 \u5bfb\u627e\u7c7b\u4f3c\u4e8ecu.usbserial-XXXXXXXX\u7684\u4e1c\u897f\uff0c\u5176\u4e2dXXXXXXXX\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u6807\u8bc6\u7b26\u3002 \u8fd9\u662f\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u4e32\u884c\u8bbe\u5907\u3002 \u5982\u4e0b\u6240\u793a\uff1a\n\n$ls /dev/cu*\n\n/dev/cu.Bluetooth-Incoming-Port\n\n/dev/cu.Bluetooth-Modem\n\n/dev/cu.pablop-WirelessiAP\n\n/dev/cu.usbserial-A6YMCQBR\n\n\n\n5.\n \u4f7f\u7528screen utility\u8fde\u63a5\u5230\u4e32\u53e3\uff0c\u5e76\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a57600\uff0c\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u6ce2\u7279\u7387\u4e3a57600\u3002 \u5982\u4e0b\u6240\u793a\uff1a\n\n$screen /dev/cu.usbserial-XXXXXXXX 57600\n\n\n\n6.\n \u73b0\u5728\u60a8\u5e94\u8be5\u8fde\u63a5\u5230\u7cfb\u7edf\u63a7\u5236\u53f0\u3002 \u5728\u7ec8\u7aef\u4e2d\u6309ENTER\u952e\u663e\u793a\u63d0\u793a\u3002 \u60a8\u5c06\u6ce8\u610f\u5230\uff0c\u63d0\u793a\u4e0e\u60a8\u7684OS X\u7ec8\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e0d\u540c\uff0c\u5b83\u662fLinkIt Smart 7688\u63d0\u793a\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n  root@myLinkIt:/#\n\n\n\n7.\n \u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u63a7\u5236\u53f0\u66f4\u6539LinkIt Smart 7688\u7cfb\u7edf\u3002\n\n\n\u5bf9\u4e8e Linux \u7cfb\u7edf\uff1a\n\n\n1.\n \u5982\u679c\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8bf7\u67e5\u9605\u7535\u7f06\u5236\u9020\u5546\u7684\u7f51\u7ad9\u4e86\u89e3Mac\u4e0a\u7684\u9a71\u52a8\u7a0b\u5e8f\u8981\u6c42\u548c\u5b89\u88c5\u8bf4\u660e\u3002\n\n\n2.\n \u5c06\u7535\u7f06\u63d2\u5165PC /\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e76\u5c06\u7535\u7f06\u8fde\u63a5\u5230LinkIt Smart 7688\u3002\n\n\n3.\n \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u3002\n\n\n4.\n \u5728\u7ec8\u7aef\u4e2d\u952e\u5165 \nls /dev//ttyUSB*\n \u3002\u60a8\u5e94\u8be5\u770b\u5230\u8bbe\u5907\u5217\u8868\u3002 \u5bfb\u627e\u7c7b\u4f3c\u4e8ecu.usbserial-XXXXXXXX\u7684\u4e1c\u897f\uff0c\u5176\u4e2dXXXXXXXX\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u6807\u8bc6\u7b26\u3002 \u8fd9\u662f\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u4e32\u884c\u8bbe\u5907\u3002 \u5982\u4e0b\u6240\u793a\uff1a\n\n\n$ls /dev/ttyUSB*\n/dev/ttyUSB0\n\n\n\n5.\n \u4f7f\u7528**screen**\u5b9e\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u4e32\u884c\u7aef\u53e3\uff0c\u5e76\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a** 57600 **\u3002 \u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u6ce2\u7279\u7387\u4e3a57600\u3002 \u5982\u4e0b\u6240\u793a\uff1a\n\n\n$sudo screen /dev/ttyUSB0 57600\n\n\n\n6.\n \u73b0\u5728\u4f60\u5e94\u8be5\u8fde\u63a5\u5230\u7cfb\u7edf\u63a7\u5236\u53f0\u3002 \u5728\u7ec8\u7aef\u4e2d\u6309ENTER\u952e\u663e\u793a\u63d0\u793a\u3002 \u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u547d\u4ee4\u884c\u524d\u7684\u63d0\u793a\u7b26\u5df2\u7ecf\u4e0d\u4e00\u6837\u4e86\uff0c\u73b0\u5728\u662fLinkIt Smart 7688\u63d0\u793a\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\n  root@myLinkIt:/#\n\n\n\n7.\n \u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u63a7\u5236\u53f0\u66f4\u6539LinkIt Smart 7688\u7cfb\u7edf\u3002\n\n\n\u8fd0\u884cBlink \u4f8b\u7a0b\n\n\n\u6240\u9700\u6750\u6599\n\n\n\n\nLinkIt Smart 7688 \u00d7 1\n\n\nUSB \u6570\u636e\u7ebf (type A to micro type-B) \u00d7 2\n\n\nUSB \u8f6c\u4e32\u53e3\u9002\u914d\u5668\u00d7 1\n\n\n\u8df3\u7ebf \u00d7 3\n\n\n\n\n\u8fd0\u884cBlink\n\n\n1.\n \u4f7f\u7528micro-USB\u6570\u636e\u7ebf\u7ed9\u60a8\u7684\u5f00\u53d1\u677f\u4f9b\u7535\u3002 (\u8bf7\u6ce8\u610f\u9700\u8981\u8fde\u63a5\u4e0b\u65b9\u7684USB\u7535\u6e90\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u4e0a\u65b9\u7684USB\u6570\u636e\u63a5\u53e3\uff09\n\n\n\n2.\n \u542f\u52a8PuTTy\u5e76\u4f7f\u7528USB\u8f6c\u4e32\u53e3\u9002\u914d\u5668\u8fde\u63a5\u5230\u7cfb\u7edf\uff0c\u5982\u524d\u51e0\u8282\u6240\u793a\u3002\n\n\n3.\n \u952e\u5165 \npython /IoT/examples/blink-gpio44.py\n \u7136\u540e\u70b9\u51fb \nEnter\n \u6765\u8fd0\u884cBlink \u4f8b\u7a0b\u3002\n\n\n\n\nNote\n\n\n\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e00\u4e2a\u5355\u8bcd\u201cpython\u201d\u4e4b\u540e\u67091\u4e2a\u7a7a\u683c\uff0c\u5426\u5219\u5c06\u4e0d\u4f1a\u627e\u5230\u8be5\u793a\u4f8b\u3002\n\n\n\n\n4.\n \u5927\u7ea62\u79d2\u949f\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5230Wi-Fi LED\u7a33\u5b9a\u95ea\u70c1\u3002\n\n\n5.\n \u5728\u7cfb\u7edf\u63a7\u5236\u53f0\u4e2d\uff0c\u952e\u5165** CTRL + C **\uff0c\u8fd9\u5c06\u7ec8\u6b62\u8be5\u4f8b\u7a0b\u3002\n\n\n\u8fde\u63a5\u5230\u4e92\u8054\u7f51\uff08\u5207\u6362\u5230 station \u6a21\u5f0f\uff09\n\n\n\u6709\u4e24\u79cdWi-Fi\u6a21\u5f0f\uff1aAP\u6a21\u5f0f\u548cstation\u6a21\u5f0f\u3002 \u8bf7\u53c2\u8003\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u5f02--\n\u8fd9\u662f\u5dee\u5f02\n \u3002\n\n\n1.\n \u4f7f\u7528micro-USB\u7535\u7f06\u4e3a\u4e3b\u677f\u4e0a\u7535\u3002\n\n\n2.\n \u6253\u5f00\u8ba1\u7b97\u673a\u4e0a\u7684Wi-Fi\u8fde\u63a5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u8fde\u63a5\u5230\u540d\u4e3aLinkIt_Smart_7688_XXXXXX\u7684\u63a5\u5165\u70b9\u3002 XXXXXX\u662f\u4e00\u79cd\u786c\u4ef6\u6807\u8bc6\u7b26\uff0c\u56e0\u677f\u800c\u5f02\u3002\n\n\n\n\n3.\n \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u5728\u5730\u5740\u680f\u8f93\u5165\u4ee5\u4e0b\u94fe\u63a5 mylinkit.local/ \u6216\u8005 192.168.100.1, \u8bbe\u7f6eroot\u7528\u6237\u7684\u5bc6\u7801\u5e76\u767b\u5f55\u3002\u5355\u51fb\u53f3\u4e0a\u89d2\u7684\u201cNetwork\u201d\u3002\n\n\n\n\n4.\n \u9009\u62e9station mode\uff0c\u7136\u540e\u5355\u51fb\u53f3\u4fa7\u7684REFRESH\u6216\u5355\u51fb\u5411\u4e0b\u7bad\u5934\u627e\u5230\u8981\u8fde\u63a5\u7684AP\u3002 \u9009\u62e9AP\u540e\uff0c\u5982\u679c\u9700\u8981\uff0c\u8bf7\u8f93\u5165\u5bc6\u7801\u3002 \u5355\u51fbCONFIGURE \n RESTART \u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u7136\u540e\u7b49\u5f85\u7ea630\u79d2\u949f\u5207\u6362\u6a21\u5f0f\u3002\n\n\n\n5.\n \u542f\u52a8PuTTy\u5e76\u4f7f\u7528USB\u8f6c\u4e32\u53e3\u9002\u914d\u5668\u8fde\u63a5\u5230\u7cfb\u7edf\uff0c\u5982\u4e0a\u4e00\u8282\u6240\u793a\u3002\n\n\n6.\n \u952e\u5165ifconfig\u5e76\u627e\u5230inet addr\u7684IP\u5730\u5740\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\u91cd\u65b0\u542f\u52a8\u7cfb\u7edf\u540e\u4ecd\u5c06\u8fdb\u5165\u201cstation\u201d\u6a21\u5f0f\u3002 \u6309\u4f4fWi-Fi\u6309\u94ae\u81f3\u5c115\u79d2\u949f\u5207\u6362\u56deAP\u6a21\u5f0f\u3002 \u6ce8\u610f\uff1a\u9700\u8981\u4f7f\u7528reboot\u547d\u4ee4\u91cd\u542f\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002\n\n\n\n\n7.\n \u5728\u6d4f\u89c8\u5668\u7684\u65b0\u7f51\u9875\u4e2d\u952e\u5165IP\uff0c\u60a8\u53ef\u4ee5\u767b\u5f55\u5230Web\u7528\u6237\u754c\u9762\u6765\u914d\u7f6e\u7cfb\u7edf\u3002\n\n\n8.\n \u73b0\u5728\u4e3b\u673a\u548cLinkIt Smart 7688\u90fd\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u3002 \u5728\u63a7\u5236\u53f0\u4e2d\u952e\u5165ping ** \nwww.mediatek.com\n **\uff0c\u60a8\u5c06\u5f97\u5230\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\n\n9.\n \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e92\u8054\u7f51\u5728\u5f00\u53d1\u677f\u4e0a\u914d\u7f6e\u7cfb\u7edf\u3002\n\n\n\u4f8b\u7a0b: Hello world\n\n\n\n\n\n\nNote\n\n\n\n\n\u4e3a\u4e86\u907f\u514d\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u5185\u5b58\u4e0d\u8db3\uff0c\u60a8\u5e94\u8be5\u5728\u66f4\u5f3a\u5927\u7684\u4e3b\u673a\u73af\u5883\u4e2d\u8bbe\u7f6e\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u73af\u5883\uff0c\u4ece\u800c\u4f7f\u60a8\u80fd\u591f\u4ea4\u53c9\u7f16\u8bd1LinkIt Smart 7688\u76ee\u6807\u7684\u53ef\u6267\u884c\u683c\u5f0f\u3002 \u4e0b\u8868\u663e\u793a\u4e86LinkIt Smart 7688\u7f16\u7a0b\u8bed\u8a00\u548c\u4e3b\u673a\u4e0a\u76f8\u5173\u5f00\u53d1\u73af\u5883\u7684\u6982\u8ff0\u3002\n\n\n\n\n\n\n\n\n\u7f16\u7a0b\u8bed\u8a00\n\n\n\u5de5\u5177\u548c\u5e93\n\n\n\u5e94\u7528\u7a0b\u5e8f\n\n\n\u4e3b\u673a\u652f\u6301\u5e73\u53f0\n\n\n\n\n\n\n\n\n\n\nC/C++\n\n\nCross compilation toolchain\n\n\nSystem programming\n\n\nOS X Linux\n\n\n\n\n\n\nPython\n\n\nPython runtime on LinkIt Smart 7688\n\n\nPrototyping Network Arduino bridge library\n\n\nOS X Linux Windows\n\n\n\n\n\n\nNode.js\n\n\nNode.js runtime on LinkIt Smart 7688\n\n\nPrototyping Network\n\n\nOS X Linux  Windows\n\n\n\n\n\n\n\n\nA Hello world example in Python\n\n\n1.\n \u4f7f\u7528FileZilla \n\u53c2\u8003\u672c\u6559\u7a0b\n \u8fde\u63a5\uff0c\u670d\u52a1\u5668IP\u5730\u5740\u662f\u5148\u524d\u5207\u6362\u5230station\u6a21\u5f0f\u65f6\u7684inet addr\uff0c\u7528\u6237\u540d\u662froot\uff0c\u5bc6\u7801\u662f\u521a\u521a\u60a8\u8bbe\u7f6e\u7684\u5bc6\u7801\u3002\n\n\n2.\n \u6253\u5f00\u4e00\u4e2aTXT\u6587\u672c\u7f16\u8f91\u5668\uff0c\u590d\u5236\u5e76\u7c98\u8d34\u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u5e76\u5c06\u5176\u4fdd\u5b58\u4e3a** helloworld.py **\u3002\n\nprint \nHello World!\n\n\n\n\n3.\n \u4f7f\u7528FileZilla\u5c06\u6587\u4ef6** helloworld.py \n\u590d\u5236\u5230\u76ee\u6807\u5f00\u53d1\u73af\u5883\uff08LinkIt Smart 7688\uff09\u7684\u7cfb\u7edf\u4e2d\uff0c\u5c06\u5176\u653e\u5728\u6587\u4ef6\u5939\n root **\u4e0b\u3002\n\n\n4.\n \u542f\u52a8PuTTy\u5e76\u4f7f\u7528USB\u8f6c\u4e32\u53e3\u9002\u914d\u5668\u8fde\u63a5\u5230\u7cfb\u7edf\u3002\n\n\n5.\n \u4f7f\u7528CD\u547d\u4ee4\u5c06\u5de5\u4f5c\u76ee\u5f55\u8df3\u8f6c\u5230** / root \n\u5e76\u8f93\u5165\n python helloworld.py **\u6765\u6267\u884c\u3002\n\n\n6.\n \u73b0\u5728\u4f60\u53ef\u4ee5\u770b\u5230** Hello World **\uff01 \u6253\u5370\u5728\u63a7\u5236\u53f0\u3002\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Eagle]\n \nLinkIt_Smart_7688\n\n\n[PDF]\n \nLinkIt_Smart_7688 PCB\n\n\n[PDF]\n \nLinkIt_Smart_7688 Schematic\n\n\n[\u6587\u4ef6]\n \nManual\n\n\n[\u6587\u4ef6]\n \nOpenWrt\n\n\n[\u6587\u4ef6]\n \nMediaTek LinkIt? Smart 7688 Resources:\n\n\n[\u6587\u4ef6]\n  \nFirmware_upgrade_Instruction\n\n\n[\u6587\u4ef6]\n   \nCertificates", 
            "title": "LinkIt_Smart_7688"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_1", 
            "text": "\u5355\u8f93\u5165\u5355\u8f93\u51fa\uff081T1R\uff09Wi-Fi 802.11 b / g / n\u3002  GPIO\u5f15\u811a, I 2 C, I 2 S, SPI, UART, PWM \u4ee5\u53ca Ethernet \u63a5\u53e3.  580 MHz MIPS CPU.  32MB Flash and 128MB DDR2 RAM.  USB host.  Micro SD slot.", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_2", 
            "text": "\u4e30\u5bcc\u591a\u5f69\u7684\u667a\u80fd\u5bb6\u5c45\u7269\u8054\u7f51\u5e94\u7528  \u673a\u5668\u4eba", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_3", 
            "text": "\u5206\u7c7b   \u53c2\u6570  \u8be6\u60c5    MPU    \u82af\u7247\u96c6    MT7688AN    \u5185\u6838    MIPS24KEc    \u65f6\u949f\u9891\u7387   580MHz    \u5de5\u4f5c\u7535\u538b    3.3V    PCB \u89c4\u683c    \u5c3a\u5bf8    55.7 x 26 mm    \u5b58\u50a8      Flash    32MB     RAM   128MB DDR2    \u7535\u6e90     USB Power    5V (USB micro-B)     VCC    3.3V (Pin Breakout)    GPIO     \u5f15\u811a\u6570\u91cf    22 (MT7688AN)     \u7535\u538b    3.3V    PWM     \u5f15\u811a\u6570\u91cf   4 (MT7688AN)     \u7535\u538b    3.3V     \u6700\u5927\u5206\u8fa8\u7387    7 bits (customizable)   \u6700\u9ad8\u9891\u7387@\u5206\u8fa8\u7387    100kHz@1-bit,\n50kHz@2-bit,\n25kHz@3-bit,\n12.5kHz@4-bit,\n6.25kHz@5-bit,\n3.125kHz@6-bit,\n1.5625kHz@7-bit (\u6807\u51c6\u6a21\u5f0f)     40MHz@1-bit,\n20MHz@2-bit,\n10MHz@3-bit,\n5MHz@4-bit,\n2.5MHz@5-bit,\n1.25Mhz@6-bit,\n625kHz@7-bit\n(\u5feb\u901f\u6a21\u5f0f)     \u5916\u90e8\u4e2d\u65ad    \u5f15\u811a\u6570\u91cf    22 (MT7688AN)    SPI    Set count    1 (MT7688AN)     \u5f15\u811a\u7f16\u53f7    P22, P23, P24 (\u548c\u7247\u4e0a\u5b58\u50a8\u590d\u7528), P25     \u6700\u9ad8\u901f\u5ea6    25 MHz    SPI Slave    Set count    1 (MT7688AN)     \u5f15\u811a\u7f16\u53f7    P28, P29, P30, P31     \u6700\u9ad8\u901f\u5ea6    25 MHz    I 2 S    Set count    1 (MT7688AN)     \u5f15\u811a\u7f16\u53f7    P10, P11, P12, P13    I 2 C    Set count    1     \u5f15\u811a\u7f16\u53f7    P20, P21     \u901f\u5ea6    120K/400K    UART Lite    Set count    3 (MT7688AN)     \u5f15\u811a\u7f16\u53f7    P8, P9, P16, P17, P18, P19     \u6700\u9ad8\u901f\u5ea6    0.5Mbps    USB Host    Set count    1 (MT7688AN)     \u5f15\u811a\u7f16\u53f7    P6, P7     \u901f\u5ea6    Micro-AB    \u7f51\u7edc\u901a\u4fe1    Wi-Fi    1T1R 802.11 b/g/n (2.4G)     Ethernet    1-port 10/100 FE PHY    \u5f15\u811a\u7f16\u53f7    P2, P3, P4, P5    \u7528\u6237\u5b58\u50a8    SD Card    Micro SD\nSDXC", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_4", 
            "text": "", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_5", 
            "text": "\u9879\u76ee\u540d\u79f0      \u6570\u91cf    LinkIt TM  Smart 7688     1PC    \u6307\u5357    1PC", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_6", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_7", 
            "text": "Note    \u6ce8\u610f\u624b\u518c\u4e2d\u63cf\u8ff0\u4e86\u4e24\u79cd\u65b9\u6cd5\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u5c55\u793a\u4f3c\u4e4e\u6709\u70b9\u56f0\u96be\u7684\u9ad8\u7ea7\u65b9\u5f0f\uff08\u4f7f\u7528USB\u5230\u4e32\u884c\u9002\u914d\u5668\uff09\u3002 \u4f46\u662f\uff0c\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u60a8\u4f1a\u53d7\u76ca\u532a\u6d45\u3002", 
            "title": "\u8fde\u63a5\u5230\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_8", 
            "text": "LinkIt Smart 7688 \u00d7 1  USB \u6570\u636e\u7ebf (type A to micro type-B) \u00d7 2  USB \u8f6c\u4e32\u53e3\u9002\u914d\u5668\u00d7 1  \u8df3\u7ebf \u00d7 3", 
            "title": "\u6240\u9700\u6750\u6599"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#windows", 
            "text": "**1.**\u70b9\u51fb\u5b89\u88c5  PuTTy  \u3002 PuTTY\u53ef\u4ee5\u4f7f\u7528SSH\uff08Secure Socket Shell\uff09\u7684\u7cfb\u7edf\u63a7\u5236\u53f0\u73af\u5883\u6765\u8bbf\u95ee\u5f00\u53d1\u677f\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002  **2.**\u70b9\u51fb\u5b89\u88c5  Bonjour  \u6253\u5370\u670d\u52a1\uff08\u5bf9\u4e8eWindows 7\uff0cWindows 8\uff0cWindows 10\uff09\u3002  **3.**\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u57fa\u4e8eFTDI\u82af\u7247\u7684USB\u7535\u7f06\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u4e0b\u8f7d\u5e76\u5b89\u88c5\u5176\u9a71\u52a8\u7a0b\u5e8f\u3002 \u5982\u679c\u60a8\u9047\u5230\u6700\u65b0\u9a71\u52a8\u7a0b\u5e8f\u95ee\u9898\uff0c\u8bf7\u5c1d\u8bd5\u5b89\u88c5  \u65e7\u7248\u672c \u3002  4.  \u63a5\u4e0b\u6765\uff0c\u60a8\u9700\u8981\u5c06USB\u8f6c\u4e32\u53e3\u7535\u7f06\u8fde\u63a5\u5230LinkIt Smart 7688\u7684UART\u5f15\u811a\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a     USB \u9002\u914d\u5668\u5f15\u811a  LinkIt Smart 7688 \u5bf9\u5e94\u5f15\u811a      Pin RX  Pin 8    Pin TX  Pin 9    Pin GND  Pin GND      5.  \u8fde\u63a5\u4e32\u53e3-USB\u7535\u7f06\u540e\uff0c\u6253\u5f00\u8bbe\u5907\u7ba1\u7406\u5668\u5e76\u6ce8\u610fCOM\u7aef\u53e3\u53f7\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u8fd9\u4e2a\u6570\u5b57\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u800c\u5f02\u3002   6.  \u542f\u52a8PuTTY\u7ec8\u7aef\uff0c\u8f93\u5165\u8bbe\u5907\u7ba1\u7406\u5668\u4e2d\u627e\u5230\u7684USB\u8bbe\u5907\u7684COM\u7aef\u53e3\u53f7\uff0c\u5355\u51fb\u201cSerial\u201d\u6309\u94ae\uff0c\u5728\u201cSpeed\u201d\u6846\u4e2d\u952e\u516557600\uff0c\u5355\u51fb\u201cOpen\u201d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002  7.  \u73b0\u5728\uff0c\u60a8\u5c06\u770b\u5230Linux\u63a7\u5236\u53f0\u4e2d\u7684\u6253\u5370\u6587\u672c", 
            "title": "\u5bf9\u4e8eWindows\u7cfb\u7edf\uff1a"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#mac", 
            "text": "1.  \u5982\u679c\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8bf7\u67e5\u9605\u7535\u7f06\u5236\u9020\u5546\u7684\u7f51\u7ad9\u4e86\u89e3Mac\u4e0a\u7684\u9a71\u52a8\u7a0b\u5e8f\u8981\u6c42\u548c\u5b89\u88c5\u8bf4\u660e\u3002  2.  \u5c06\u7535\u7f06\u63d2\u5165PC /\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e76\u5c06\u7535\u7f06\u8fde\u63a5\u5230LinkIt Smart 7688\u3002  3.  \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u3002  4.  \u5728\u7ec8\u7aef\u4e2d\u952e\u5165  ls /dev/cu*  \u3002\u60a8\u5e94\u8be5\u770b\u5230\u8bbe\u5907\u5217\u8868\u3002 \u5bfb\u627e\u7c7b\u4f3c\u4e8ecu.usbserial-XXXXXXXX\u7684\u4e1c\u897f\uff0c\u5176\u4e2dXXXXXXXX\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u6807\u8bc6\u7b26\u3002 \u8fd9\u662f\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u4e32\u884c\u8bbe\u5907\u3002 \u5982\u4e0b\u6240\u793a\uff1a $ls /dev/cu*\n\n/dev/cu.Bluetooth-Incoming-Port\n\n/dev/cu.Bluetooth-Modem\n\n/dev/cu.pablop-WirelessiAP\n\n/dev/cu.usbserial-A6YMCQBR  5.  \u4f7f\u7528screen utility\u8fde\u63a5\u5230\u4e32\u53e3\uff0c\u5e76\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a57600\uff0c\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u6ce2\u7279\u7387\u4e3a57600\u3002 \u5982\u4e0b\u6240\u793a\uff1a $screen /dev/cu.usbserial-XXXXXXXX 57600  6.  \u73b0\u5728\u60a8\u5e94\u8be5\u8fde\u63a5\u5230\u7cfb\u7edf\u63a7\u5236\u53f0\u3002 \u5728\u7ec8\u7aef\u4e2d\u6309ENTER\u952e\u663e\u793a\u63d0\u793a\u3002 \u60a8\u5c06\u6ce8\u610f\u5230\uff0c\u63d0\u793a\u4e0e\u60a8\u7684OS X\u7ec8\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e0d\u540c\uff0c\u5b83\u662fLinkIt Smart 7688\u63d0\u793a\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a   root@myLinkIt:/#  7.  \u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u63a7\u5236\u53f0\u66f4\u6539LinkIt Smart 7688\u7cfb\u7edf\u3002", 
            "title": "\u5bf9\u4e8eMac\u7cfb\u7edf\uff1a"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#linux", 
            "text": "1.  \u5982\u679c\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8bf7\u67e5\u9605\u7535\u7f06\u5236\u9020\u5546\u7684\u7f51\u7ad9\u4e86\u89e3Mac\u4e0a\u7684\u9a71\u52a8\u7a0b\u5e8f\u8981\u6c42\u548c\u5b89\u88c5\u8bf4\u660e\u3002  2.  \u5c06\u7535\u7f06\u63d2\u5165PC /\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e76\u5c06\u7535\u7f06\u8fde\u63a5\u5230LinkIt Smart 7688\u3002  3.  \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u3002  4.  \u5728\u7ec8\u7aef\u4e2d\u952e\u5165  ls /dev//ttyUSB*  \u3002\u60a8\u5e94\u8be5\u770b\u5230\u8bbe\u5907\u5217\u8868\u3002 \u5bfb\u627e\u7c7b\u4f3c\u4e8ecu.usbserial-XXXXXXXX\u7684\u4e1c\u897f\uff0c\u5176\u4e2dXXXXXXXX\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u6807\u8bc6\u7b26\u3002 \u8fd9\u662f\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u4e32\u884c\u8bbe\u5907\u3002 \u5982\u4e0b\u6240\u793a\uff1a  $ls /dev/ttyUSB*\n/dev/ttyUSB0  5.  \u4f7f\u7528**screen**\u5b9e\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u4e32\u884c\u7aef\u53e3\uff0c\u5e76\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a** 57600 **\u3002 \u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u6ce2\u7279\u7387\u4e3a57600\u3002 \u5982\u4e0b\u6240\u793a\uff1a  $sudo screen /dev/ttyUSB0 57600  6.  \u73b0\u5728\u4f60\u5e94\u8be5\u8fde\u63a5\u5230\u7cfb\u7edf\u63a7\u5236\u53f0\u3002 \u5728\u7ec8\u7aef\u4e2d\u6309ENTER\u952e\u663e\u793a\u63d0\u793a\u3002 \u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u547d\u4ee4\u884c\u524d\u7684\u63d0\u793a\u7b26\u5df2\u7ecf\u4e0d\u4e00\u6837\u4e86\uff0c\u73b0\u5728\u662fLinkIt Smart 7688\u63d0\u793a\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a    root@myLinkIt:/#  7.  \u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u63a7\u5236\u53f0\u66f4\u6539LinkIt Smart 7688\u7cfb\u7edf\u3002", 
            "title": "\u5bf9\u4e8e Linux \u7cfb\u7edf\uff1a"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#blink", 
            "text": "", 
            "title": "\u8fd0\u884cBlink \u4f8b\u7a0b"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_9", 
            "text": "LinkIt Smart 7688 \u00d7 1  USB \u6570\u636e\u7ebf (type A to micro type-B) \u00d7 2  USB \u8f6c\u4e32\u53e3\u9002\u914d\u5668\u00d7 1  \u8df3\u7ebf \u00d7 3", 
            "title": "\u6240\u9700\u6750\u6599"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#blink_1", 
            "text": "1.  \u4f7f\u7528micro-USB\u6570\u636e\u7ebf\u7ed9\u60a8\u7684\u5f00\u53d1\u677f\u4f9b\u7535\u3002 (\u8bf7\u6ce8\u610f\u9700\u8981\u8fde\u63a5\u4e0b\u65b9\u7684USB\u7535\u6e90\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u4e0a\u65b9\u7684USB\u6570\u636e\u63a5\u53e3\uff09  2.  \u542f\u52a8PuTTy\u5e76\u4f7f\u7528USB\u8f6c\u4e32\u53e3\u9002\u914d\u5668\u8fde\u63a5\u5230\u7cfb\u7edf\uff0c\u5982\u524d\u51e0\u8282\u6240\u793a\u3002  3.  \u952e\u5165  python /IoT/examples/blink-gpio44.py  \u7136\u540e\u70b9\u51fb  Enter  \u6765\u8fd0\u884cBlink \u4f8b\u7a0b\u3002   Note    \u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e00\u4e2a\u5355\u8bcd\u201cpython\u201d\u4e4b\u540e\u67091\u4e2a\u7a7a\u683c\uff0c\u5426\u5219\u5c06\u4e0d\u4f1a\u627e\u5230\u8be5\u793a\u4f8b\u3002   4.  \u5927\u7ea62\u79d2\u949f\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5230Wi-Fi LED\u7a33\u5b9a\u95ea\u70c1\u3002  5.  \u5728\u7cfb\u7edf\u63a7\u5236\u53f0\u4e2d\uff0c\u952e\u5165** CTRL + C **\uff0c\u8fd9\u5c06\u7ec8\u6b62\u8be5\u4f8b\u7a0b\u3002", 
            "title": "\u8fd0\u884cBlink"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#station", 
            "text": "\u6709\u4e24\u79cdWi-Fi\u6a21\u5f0f\uff1aAP\u6a21\u5f0f\u548cstation\u6a21\u5f0f\u3002 \u8bf7\u53c2\u8003\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u5f02-- \u8fd9\u662f\u5dee\u5f02  \u3002  1.  \u4f7f\u7528micro-USB\u7535\u7f06\u4e3a\u4e3b\u677f\u4e0a\u7535\u3002  2.  \u6253\u5f00\u8ba1\u7b97\u673a\u4e0a\u7684Wi-Fi\u8fde\u63a5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u8fde\u63a5\u5230\u540d\u4e3aLinkIt_Smart_7688_XXXXXX\u7684\u63a5\u5165\u70b9\u3002 XXXXXX\u662f\u4e00\u79cd\u786c\u4ef6\u6807\u8bc6\u7b26\uff0c\u56e0\u677f\u800c\u5f02\u3002   3.  \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u5728\u5730\u5740\u680f\u8f93\u5165\u4ee5\u4e0b\u94fe\u63a5 mylinkit.local/ \u6216\u8005 192.168.100.1, \u8bbe\u7f6eroot\u7528\u6237\u7684\u5bc6\u7801\u5e76\u767b\u5f55\u3002\u5355\u51fb\u53f3\u4e0a\u89d2\u7684\u201cNetwork\u201d\u3002   4.  \u9009\u62e9station mode\uff0c\u7136\u540e\u5355\u51fb\u53f3\u4fa7\u7684REFRESH\u6216\u5355\u51fb\u5411\u4e0b\u7bad\u5934\u627e\u5230\u8981\u8fde\u63a5\u7684AP\u3002 \u9009\u62e9AP\u540e\uff0c\u5982\u679c\u9700\u8981\uff0c\u8bf7\u8f93\u5165\u5bc6\u7801\u3002 \u5355\u51fbCONFIGURE   RESTART \u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u7136\u540e\u7b49\u5f85\u7ea630\u79d2\u949f\u5207\u6362\u6a21\u5f0f\u3002  5.  \u542f\u52a8PuTTy\u5e76\u4f7f\u7528USB\u8f6c\u4e32\u53e3\u9002\u914d\u5668\u8fde\u63a5\u5230\u7cfb\u7edf\uff0c\u5982\u4e0a\u4e00\u8282\u6240\u793a\u3002  6.  \u952e\u5165ifconfig\u5e76\u627e\u5230inet addr\u7684IP\u5730\u5740\uff0c\u5982\u4e0b\u6240\u793a\uff1a    Note    \u91cd\u65b0\u542f\u52a8\u7cfb\u7edf\u540e\u4ecd\u5c06\u8fdb\u5165\u201cstation\u201d\u6a21\u5f0f\u3002 \u6309\u4f4fWi-Fi\u6309\u94ae\u81f3\u5c115\u79d2\u949f\u5207\u6362\u56deAP\u6a21\u5f0f\u3002 \u6ce8\u610f\uff1a\u9700\u8981\u4f7f\u7528reboot\u547d\u4ee4\u91cd\u542f\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002   7.  \u5728\u6d4f\u89c8\u5668\u7684\u65b0\u7f51\u9875\u4e2d\u952e\u5165IP\uff0c\u60a8\u53ef\u4ee5\u767b\u5f55\u5230Web\u7528\u6237\u754c\u9762\u6765\u914d\u7f6e\u7cfb\u7edf\u3002  8.  \u73b0\u5728\u4e3b\u673a\u548cLinkIt Smart 7688\u90fd\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u3002 \u5728\u63a7\u5236\u53f0\u4e2d\u952e\u5165ping **  www.mediatek.com  **\uff0c\u60a8\u5c06\u5f97\u5230\u5982\u4e0b\u6240\u793a\uff1a   9.  \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e92\u8054\u7f51\u5728\u5f00\u53d1\u677f\u4e0a\u914d\u7f6e\u7cfb\u7edf\u3002", 
            "title": "\u8fde\u63a5\u5230\u4e92\u8054\u7f51\uff08\u5207\u6362\u5230 station \u6a21\u5f0f\uff09"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#hello-world", 
            "text": "Note   \u4e3a\u4e86\u907f\u514d\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u5185\u5b58\u4e0d\u8db3\uff0c\u60a8\u5e94\u8be5\u5728\u66f4\u5f3a\u5927\u7684\u4e3b\u673a\u73af\u5883\u4e2d\u8bbe\u7f6e\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u73af\u5883\uff0c\u4ece\u800c\u4f7f\u60a8\u80fd\u591f\u4ea4\u53c9\u7f16\u8bd1LinkIt Smart 7688\u76ee\u6807\u7684\u53ef\u6267\u884c\u683c\u5f0f\u3002 \u4e0b\u8868\u663e\u793a\u4e86LinkIt Smart 7688\u7f16\u7a0b\u8bed\u8a00\u548c\u4e3b\u673a\u4e0a\u76f8\u5173\u5f00\u53d1\u73af\u5883\u7684\u6982\u8ff0\u3002     \u7f16\u7a0b\u8bed\u8a00  \u5de5\u5177\u548c\u5e93  \u5e94\u7528\u7a0b\u5e8f  \u4e3b\u673a\u652f\u6301\u5e73\u53f0      C/C++  Cross compilation toolchain  System programming  OS X Linux    Python  Python runtime on LinkIt Smart 7688  Prototyping Network Arduino bridge library  OS X Linux Windows    Node.js  Node.js runtime on LinkIt Smart 7688  Prototyping Network  OS X Linux  Windows", 
            "title": "\u4f8b\u7a0b: Hello world"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#a-hello-world-example-in-python", 
            "text": "1.  \u4f7f\u7528FileZilla  \u53c2\u8003\u672c\u6559\u7a0b  \u8fde\u63a5\uff0c\u670d\u52a1\u5668IP\u5730\u5740\u662f\u5148\u524d\u5207\u6362\u5230station\u6a21\u5f0f\u65f6\u7684inet addr\uff0c\u7528\u6237\u540d\u662froot\uff0c\u5bc6\u7801\u662f\u521a\u521a\u60a8\u8bbe\u7f6e\u7684\u5bc6\u7801\u3002  2.  \u6253\u5f00\u4e00\u4e2aTXT\u6587\u672c\u7f16\u8f91\u5668\uff0c\u590d\u5236\u5e76\u7c98\u8d34\u4ee5\u4e0b\u793a\u4f8b\u4ee3\u7801\u5e76\u5c06\u5176\u4fdd\u5b58\u4e3a** helloworld.py **\u3002 print  Hello World!   3.  \u4f7f\u7528FileZilla\u5c06\u6587\u4ef6** helloworld.py  \u590d\u5236\u5230\u76ee\u6807\u5f00\u53d1\u73af\u5883\uff08LinkIt Smart 7688\uff09\u7684\u7cfb\u7edf\u4e2d\uff0c\u5c06\u5176\u653e\u5728\u6587\u4ef6\u5939  root **\u4e0b\u3002  4.  \u542f\u52a8PuTTy\u5e76\u4f7f\u7528USB\u8f6c\u4e32\u53e3\u9002\u914d\u5668\u8fde\u63a5\u5230\u7cfb\u7edf\u3002  5.  \u4f7f\u7528CD\u547d\u4ee4\u5c06\u5de5\u4f5c\u76ee\u5f55\u8df3\u8f6c\u5230** / root  \u5e76\u8f93\u5165  python helloworld.py **\u6765\u6267\u884c\u3002  6.  \u73b0\u5728\u4f60\u53ef\u4ee5\u770b\u5230** Hello World **\uff01 \u6253\u5370\u5728\u63a7\u5236\u53f0\u3002", 
            "title": "A Hello world example in Python"
        }, 
        {
            "location": "/LinkIt_Smart_7688/#_10", 
            "text": "[Eagle]   LinkIt_Smart_7688  [PDF]   LinkIt_Smart_7688 PCB  [PDF]   LinkIt_Smart_7688 Schematic  [\u6587\u4ef6]   Manual  [\u6587\u4ef6]   OpenWrt  [\u6587\u4ef6]   MediaTek LinkIt? Smart 7688 Resources:  [\u6587\u4ef6]    Firmware_upgrade_Instruction  [\u6587\u4ef6]     Certificates", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/mbed/", 
            "text": "\u4ec0\u4e48\u662fmbed\uff1f mbed\u662f\u4e13\u4e3aARM\u8bbe\u8ba1\u7684\u539f\u578b\u5f00\u53d1\u5e73\u53f0\uff0c\u5b83\u51e0\u4e4e\u53ef\u4ee5\u63d0\u4f9b\u6240\u9700\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u4f8b\u5982\u514d\u8d39\u7684SDK\uff0cHDK\u548c\u57fa\u4e8eWeb\u7684IDE\u6765\u5f00\u53d1IoT\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u662f\u7f16\u7801\u548c\u786c\u4ef6\u7684\u521d\u5b66\u8005\uff0cmbed\u53ef\u4ee5\u52a0\u5feb\u60a8\u7684\u5b66\u4e60\u548c\u539f\u578b\u8bbe\u8ba1\u3002\u5982\u679c\u60a8\u6b63\u5904\u4e8e\u786c\u4ef6\u539f\u578b\u8bbe\u8ba1\u7684\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5f88\u96be\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u677f\u5361\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u60a8\u7684\u5de5\u4f5c\u66f4\u8f7b\u677e\u3002\n\n\n\u4e16\u754c\u4e0a\u5df2\u7ecf\u6709\u8bb8\u591a\u5f00\u6e90\u5e73\u53f0\u677f\uff0c\u6bcf\u4e2a\u677f\u90fd\u58f0\u79f0\u5b83\u4eec\u529f\u80fd\u5f3a\u5927\uff0c\u6613\u4e8e\u4f7f\u7528\uff0c\u4e0e\u5176\u4ed6\u5e73\u53f0\u533a\u522b\u5f00\u6765\u7684\u72ec\u7279\u529f\u80fd\u662f\u4ec0\u4e48\uff1f\u9996\u5148\uff0cmbed\u4f7f\u7528CMSIS\uff08Cortex\u5fae\u63a7\u5236\u5668\u8f6f\u4ef6\u63a5\u53e3\u6807\u51c6\uff09\u6765\u6807\u51c6\u5316\u4e0d\u540c\u82af\u7247\u5236\u9020\u5546\u4e4b\u95f4\u7684\u63a5\u53e3\u5dee\u5f02\u3002\u5176\u6b21\uff0c\u57fa\u4e8eWeb\u7684IDE\u7b80\u5316\u4e86\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u65e0\u8bba\u60a8\u4f7f\u7528\u4ec0\u4e48\u7cfb\u7edf\uff0c\u60a8\u90fd\u4e0d\u9700\u8981\u5b89\u88c5\u989d\u5916\u7684IDE\uff0c\u60a8\u53ea\u9700\u6253\u5f00Web\u6d4f\u89c8\u5668\u5e76\u5f00\u59cb\u7f16\u7801\u3002\n\n\nSeeed Studio\u662f\u751f\u4ea7mbed\u677f\u7684\u6210\u5458\u4e4b\u4e00\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u53ef\u4ee5\u4eceSeeed\u83b7\u5f97\u8d85\u8fc710\u4e2ambed\uff0c\u5982Arch Max\uff0cArch Link\u548cArch BLE\u3002\u5b83\u4eec\u5927\u591a\u96c6\u6210\u4e86Arduino\u548cmbed\u677f\u7684\u4f18\u52bf\uff0c\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86Grove\u8fde\u63a5\u5668\uff0c\u4f7f\u5176\u4e0eGrove\u7cfb\u5217\u4f20\u611f\u5668\u517c\u5bb9\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684mbed\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "mbed"
        }, 
        {
            "location": "/mbed/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684mbed\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Rephone/", 
            "text": "RePhone Kit\u662f\u4e00\u6b3e\u5f00\u6e90\u7684\u6a21\u5757\u5316\u624b\u673a\u5957\u4ef6\uff0c\u53ef\u4ee5\u6539\u53d8\u6211\u4eec\u5c06\u624b\u673a\u6295\u5165\u4f7f\u7528\u7684\u65b9\u5f0f\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u624b\u673a\u5b9a\u5236\u5f62\u5f0f\uff0c\u4e5f\u662f\u53ef\u7a7f\u6234/ IoT\u5f00\u53d1\u7684\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\n\n\u4f7f\u7528Rephone\uff0c\u60a8\u53ef\u4ee5\u5728\u51e0\u5206\u949f\u5185\u4f7f\u7528slim MODULES\uff0c\u53ef\u8bbf\u95ee\u7684\u8f6f\u4ef6\u548c\u53ef\u81ea\u5b9a\u4e49\u7684\u6a21\u5757\u521b\u5efa\u81ea\u5df1\u7684\u624b\u673a\u3002 \u60a8\u8fd8\u53ef\u4ee5\u52ab\u6301\u60a8\u5468\u56f4\u7684\u4e8b\u7269\uff0c\u4f7f\u65e0\u751f\u547d\u7269\u4f53\u6210\u4e3a\u8702\u7a9d\u901a\u4fe1\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u901a\u8fc7\u8702\u7a9d\u8fde\u63a5\u4e0e\u5ba0\u7269\uff0c\u690d\u7269\uff0c\u73a9\u5177\uff0c\u6469\u6258\u8f66\u5934\u76d4\uff0c\u673a\u5668\u4eba\u6216\u65e0\u4eba\u673a\u5bf9\u8bdd\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Rephone Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "Rephone"
        }, 
        {
            "location": "/Rephone/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Rephone Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Respeaker/", 
            "text": "ReSpeaker\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u6a21\u5757\u5316\u8bed\u97f3\u754c\u9762\uff0c\u7528\u4e8e\u8fde\u63a5\u4f60\u5468\u56f4\u7684\u4e8b\u7269\u3002 \u8ba9\u60a8\u4e0e\u60a8\u7684\u5bb6\u7528\u7535\u5668\uff0c\u60a8\u7684\u5de5\u5382\uff0c\u529e\u516c\u5ba4\uff0c\u4e92\u8054\u7f51\u8bbe\u5907\u6216\u60a8\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u8fdb\u884c\u4e92\u52a8\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Respeaker Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nRespeaker_4-Mics_Pi_HAT\n\n\nRespeaker_Core\n\n\nRespeaker_Mic_Array", 
            "title": "Respeaker"
        }, 
        {
            "location": "/Respeaker/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Respeaker Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Respeaker_4-Mics_Pi_HAT  Respeaker_Core  Respeaker_Mic_Array", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Respeaker_Mic_Array/", 
            "text": "\u4ea7\u54c1\u7b80\u4ecb\n\n\nReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u53ef\u4ee5\u5806\u53e0\uff08\u8fde\u63a5\uff09\u5230ReSpeaker Core\u7684\u9876\u90e8\uff0c\u4ee5\u663e\u7740\u63d0\u9ad8\u8bed\u97f3\u4ea4\u4e92\u4f53\u9a8c\u3002\u5b83\u662f\u57fa\u4e8eXMOS\u7684XVSM-2000\u667a\u80fd\u9ea6\u514b\u98ce\u5f00\u53d1\u7684\u3002\u8be5\u677f\u96c6\u6210\u4e867\u4e2aPDM\u9ea6\u514b\u98ce\uff0c\u4ee5\u5e2e\u52a9\u5c06ReSpeaker\u7684\u58f0\u5b66DSP\u6027\u80fd\u63d0\u5347\u5230\u66f4\u9ad8\u7684\u6c34\u5e73\u3002\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\u8fdc\u573a\u8bed\u97f3\u6355\u83b7\n\n\n\u58f0\u6e90\u5b9a\u4f4d\n\n\n\u6ce2\u675f\u6210\u5f62\n\n\n\u566a\u58f0\u6291\u5236\n\n\n\u6d88\u6df7\u54cd\n\n\n\u56de\u97f3\u6d88\u9664\n\n\n\n\n\u6280\u672f\u89c4\u683c\n\n\n\n\n\n\nXVSM-2000\u5185\u7f6e16\u4e2a\u5185\u6838:\n\n\n\u57282\u4e2axCore titles\u4e0a\u768416\u4e2a\u5b9e\u65f6\u903b\u8f91\u5185\u6838\n\n\n\u6838\u5728dual issue mode\u4e0b\u5171\u4eab2000 MIPS\n\n\n\u5185\u90e8single cycle 512KB SRAM\u548c2MB\u5185\u7f6e\u95ea\u5b58\n\n\n16KB\u5185\u90e8OTP\uff08\u6700\u59278KB\u6bcftile\uff09\n\n\nUSB PHY\uff0c\u5b8c\u5168\u7b26\u5408USB 2.0\u89c4\u8303\n\n\n\u53ef\u7f16\u7a0b I/O.\n\n\n\u63d0\u4f9bDFU\u6a21\u5f0f.\n\n\n\n\n\n\n7 \u6570\u5b57\u9ea6\u514b\u98ce:\n\n\n\u7528\u4e8e\u8fdc\u573a\u8bed\u97f3\u8bc6\u522b\u6216\u58f0\u97f3\u5b9a\u4f4d.\n\n\nST MP34DT01-M.\n\n\n-26 dBFS \u7075\u654f\u5ea6.\n\n\n120 dBSPL \u58f0\u5b66\u8fc7\u8f7d\u70b9.\n\n\n61 dB \u4fe1\u566a\u6bd4.\n\n\n\u5168\u5411\u7075\u654f\u5ea6.\n\n\nPDM \u8f93\u51fa.\n\n\n\n\n\n\n12 RGB LEDs:\n\n\n256\u7ea7\u4eae\u5ea6.\n\n\n800kHz\u7ebf\u6570\u636e\u4f20\u8f93.\n\n\n\n\n\n\n\u97f3\u9891\u8f93\u51fa:\n\n\n\u677f\u8f7d3.5mmAUX\u8f93\u51fa.\n\n\nWOLFSON WM8960.\n\n\n24 or 16bit 16kHz\u7acb\u4f53\u58f0\u8f93\u51fa.\n\n\n40 mW \u8f93\u51fa\u529f\u7387 16 \u2126 @ 3.3 V.\n\n\n\n\n\n\n\u65f6\u949f\u540c\u6b65\uff1a\n\n\n\u677f\u8f7d PLL.\n\n\n\u7528\u4e8e DAC,MIC\u7684\u53ef\u7f16\u7a0b\u91c7\u6837\u65f6\u949f.\n(\u5982\u679c\u5728XVSM-2000\u4e2d\u4f7f\u7528DSP\uff0c\u5219\u7981\u7528).\n\n\n\n\n\n\n\u7535\u6e90:\n\n\nMicro USB\u6216\u6269\u5c55\u63a5\u5934\u63d0\u4f9b5V\u7535\u6e90.\n\n\n\n\n\n\n\u5c3a\u5bf8:\n\n\n\u76f4\u5f84 70mm.\n\n\n\n\n\n\n\u91cd\u91cf:\n\n\n15.25g\n\n\n\n\n\n\n\n\nReSpeaker \u9ea6\u514b\u98ce\u9635\u5217\u9a71\u52a8\n\n\n\n\n\u5bf9\u4e8eWindows\u7528\u6237, \u8bf7\u5355\u51fb \n\u6b64\u5904\n \u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\n\n\n\u5bf9\u4e8eLinux\u6216Mac\u7528\u6237\uff0c\u4e0d\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\n\n\n\n\n\u7528ReSpeaker Core\u63d0\u53d6\u58f0\u97f3\n\n\n\u5f53\u9ea6\u514b\u98ce\u9635\u5217\u5806\u53e0\u5728ReSpeaker Core\u4e0a\u65f6\uff0c\u5c06\u81ea\u52a8\u68c0\u6d4b\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7aplay -l\u6765\u624b\u52a8\u68c0\u6d4b\uff09\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u53ef\u4ee5\u4f7f\u7528\nrespeaker_python_library\n\u6765\u5f00\u53d1\u8bed\u97f3\u4ea4\u4e92\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u60a8\u4e0d\u9700\u8981\u5173\u5fc3Mic Array\u662f\u5426\u6253\u5f00\u3002\u6211\u4eec\u7684\u5e93\u6587\u4ef6\u4f1a\u68c0\u67e5\u5e76\u9009\u62e9\u9ea6\u514b\u98ce\u9635\u5217\u3002\n\n\n\u6b64\u5916\uff0c\u5728\u8be5\u5e93\u4e2d\uff0c\u57fa\u4e8ePyaudio\u7684\u9ea6\u514b\u98ce\u7c7b\u5177\u6709\u540d\u4e3alisten\u7684\u65b9\u6cd5\u6765\u63d0\u53d6\u8bed\u97f3\u3002\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u793a\u4f8b\u4ee3\u7801\u4ee5\u4f9b\u4f7f\u7528\u3002\n\n\n\u6b64\u5916\uff0c\u5728\u8be5\u5e93\u4e2d\uff0c \nclass Microphone\n, \u57fa\u4e8e \nPyaudio\n, \u7528 \nlisten\n, \u6765\u63d0\u53d6\u58f0\u97f3. \u8bf7\u67e5\u9605 \nexample code\n \u5173\u4e8e\u5982\u4f55\u4f7f\u7528.\n\n\n\u5728PC\u6216Mac\u6216Linux\u6216Raspberry Pi\u4e0a\u63d0\u53d6\u8bed\u97f3\n\n\n\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8ePyaudio\u7684\u4f8b\u5b50\uff1a\n\n\n\u9996\u5148\uff0c\u60a8\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u811a\u672c\u6765\u83b7\u53d6Mic Array\u7684\u8bbe\u5907\u7d22\u5f15\u53f7\uff1a\n\n\nimport\n \npyaudio\n\n\n\np\n \n=\n \npyaudio\n.\nPyAudio\n()\n\n\ninfo\n \n=\n \np\n.\nget_host_api_info_by_index\n(\n0\n)\n\n\nnumdevices\n \n=\n \ninfo\n.\nget\n(\ndeviceCount\n)\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nnumdevices\n):\n\n        \nif\n \n(\np\n.\nget_device_info_by_host_api_device_index\n(\n0\n,\n \ni\n)\n.\nget\n(\nmaxInputChannels\n))\n \n \n0\n:\n\n            \nprint\n \nInput Device id \n,\n \ni\n,\n \n - \n,\n \np\n.\nget_device_info_by_host_api_device_index\n(\n0\n,\n \ni\n)\n.\nget\n(\nname\n)\n\n\n\n\n\n\u7136\u540e\uff0c\u66f4\u6539RESPEAKER_INDEX = 1\u4e3a\u60a8\u7684\u7d22\u5f15\u53f7\u3002\u8fd0\u884c\u811a\u672c\u6765\u5f55\u5236\u8bed\u97f3\u3002\n\n\nimport\n \npyaudio\n\n\nimport\n \nwave\n\n\n\nRESPEAKER_RATE\n \n=\n \n16000\n\n\nRESPEAKER_CHANNELS\n \n=\n \n2\n\n\nRESPEAKER_WIDTH\n \n=\n \n2\n\n\n# run getDeviceInfo.py to get index\n\n\nRESPEAKER_INDEX\n \n=\n \n1\n\n\nCHUNK\n \n=\n \n1024\n\n\nRECORD_SECONDS\n \n=\n \n5\n\n\nWAVE_OUTPUT_FILENAME\n \n=\n \noutput.wav\n\n\n\np\n \n=\n \npyaudio\n.\nPyAudio\n()\n\n\n\nstream\n \n=\n \np\n.\nopen\n(\n\n            \nrate\n=\nRESPEAKER_RATE\n,\n\n            \nformat\n=\np\n.\nget_format_from_width\n(\nRESPEAKER_WIDTH\n),\n\n            \nchannels\n=\nRESPEAKER_CHANNELS\n,\n\n            \ninput\n=\nTrue\n,\n\n            \ninput_device_index\n=\nRESPEAKER_INDEX\n,)\n\n\n\nprint\n(\n* recording\n)\n\n\n\nframes\n \n=\n \n[]\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nint\n(\nRESPEAKER_RATE\n \n/\n \nCHUNK\n \n*\n \nRECORD_SECONDS\n)):\n\n    \ndata\n \n=\n \nstream\n.\nread\n(\nCHUNK\n)\n\n    \nframes\n.\nappend\n(\ndata\n)\n\n\n\nprint\n(\n* done recording\n)\n\n\n\nstream\n.\nstop_stream\n()\n\n\nstream\n.\nclose\n()\n\n\np\n.\nterminate\n()\n\n\n\nwf\n \n=\n \nwave\n.\nopen\n(\nWAVE_OUTPUT_FILENAME\n,\n \nwb\n)\n\n\nwf\n.\nsetnchannels\n(\nRESPEAKER_CHANNELS\n)\n\n\nwf\n.\nsetsampwidth\n(\np\n.\nget_sample_size\n(\np\n.\nget_format_from_width\n(\nRESPEAKER_WIDTH\n)))\n\n\nwf\n.\nsetframerate\n(\nRESPEAKER_RATE\n)\n\n\nwf\n.\nwriteframes\n(\nb\n.\njoin\n(\nframes\n))\n\n\nwf\n.\nclose\n()\n\n\n\n\n\nReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u56fa\u4ef6\n\n\n\u60a8\u53ef\u4ee5\u5728\n\u8fd9\u91cc\n\u4e0b\u8f7d\u9002\u7528\u4e8eDFU\u7684ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u56fa\u4ef6\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7248\u672c\uff1a\n\n\n\n\nxvsm\u7248\u672c\n\uff1a\u521d\u59cb\u7248\u672c\uff0c\u652f\u6301dsp\u8f93\u51fa2\u901a\u9053\u6570\u636e\u3002\n\n\n\u539f\u59cb\u7248\u672c\n\uff1a\u8f93\u51fa8\u8def\u9ea6\u514b\u98ce\u539f\u59cb\u6570\u636e\uff0c\u6b64\u56fa\u4ef6\u4e0d\u652f\u6301xvsm dsp\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u67d0\u4e9b\u529f\u80fd\uff0c\u5982DOA\uff0cAEC\u7b49\u3002\n\n\n\n\n\u5173\u4e8e\u8bf7\u67e5\u9605\u5982\u4f55\u5728Mac\u6216Linux\u4e0a\u66f4\u65b0\u56fa\u4ef6\uff0c \u8bf7\u67e5\u9605 \n\u8fd9\u91cc\n \u3002\n\n\n\u7528\u4e8e\u63a7\u5236ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u7684HID\n\n\n\u7528\u6237\u53ef\u4ee5\u901a\u8fc7USB HID\u63a7\u5236ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u3002\u8bf7\u53c2\u9605\u6211\u4eec\u7684\n\u901a\u4fe1\u534f\u8bae\n.\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u4f7f\u7528 \n\u6700\u65b0\u7684\u539f\u59cb\u7248\u672c\n\uff0c\u5219\u53ea\u80fd\u63a7\u5236LED\u3002\n\n\n\u8fd9\u91cc\u662f\u4e00\u4e2apython\u4f8b\u5b50\uff1a\n\n\n#!/usr/bin/env python\n\n\n\nimport\n \nrespeaker.usb_hid\n \nas\n \nusb_hid\n\n\n\nclass\n \nMicArray\n:\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \nself\n.\nhid\n \n=\n \nusb_hid\n.\nget\n()\n\n\n    \ndef\n \nwrite\n(\nself\n,\n \naddress\n,\n \ndata\n):\n\n        \ndata\n \n=\n \nself\n.\nto_bytearray\n(\ndata\n)\n\n        \nlength\n \n=\n \nlen\n(\ndata\n)\n\n        \nif\n \nself\n.\nhid\n:\n\n            \npacket\n \n=\n \nbytearray\n([\naddress\n \n \n0xFF\n,\n \n(\naddress\n \n \n8\n)\n \n \n0x7F\n,\n \nlength\n \n \n0xFF\n,\n \n(\nlength\n \n \n8\n)\n \n \n0xFF\n])\n \n+\n \ndata\n\n            \npacket\n \n=\n \nlist\n(\npacket\n)\n\n            \nself\n.\nhid\n.\nwrite\n(\npacket\n)\n\n\n    \ndef\n \nread\n(\nself\n,\n \naddress\n,\n \nlength\n):\n\n        \nself\n.\nhid\n.\nwrite\n(\nlist\n(\nbytearray\n([\naddress\n \n \n0xFF\n,\n \n(\naddress\n \n \n8\n)\n \n \n0xFF\n \n|\n \n0x80\n,\n \nlength\n \n \n0xFF\n,\n \n(\nlength\n \n \n8\n)\n \n \n0xFF\n])))\n\n        \nfor\n \n_\n \nin\n \nrange\n(\n6\n):\n\n            \ndata\n \n=\n \nself\n.\nhid\n.\nread\n()\n\n            \n# print [int(x) for x in data]\n\n            \n# skip VAD data\n\n            \nif\n \nint\n(\ndata\n[\n0\n])\n \n!=\n \n0xFF\n \nand\n \nint\n(\ndata\n[\n1\n])\n \n!=\n \n0xFF\n:\n\n                \nreturn\n \ndata\n[\n4\n:(\n4\n \n+\n \nlength\n)]\n\n\n    \n@staticmethod\n\n    \ndef\n \nto_bytearray\n(\ndata\n):\n\n        \nif\n \ntype\n(\ndata\n)\n \nis\n \nint\n:\n\n            \narray\n \n=\n \nbytearray\n([\ndata\n \n \n0xFF\n])\n\n        \nelif\n \ntype\n(\ndata\n)\n \nis\n \nbytearray\n:\n\n            \narray\n \n=\n \ndata\n\n        \nelif\n \ntype\n(\ndata\n)\n \nis\n \nstr\n:\n\n            \narray\n \n=\n \nbytearray\n(\ndata\n)\n\n        \nelif\n \ntype\n(\ndata\n)\n \nis\n \nlist\n:\n\n            \narray\n \n=\n \nbytearray\n(\ndata\n)\n\n        \nelse\n:\n\n            \nraise\n \nTypeError\n(\n%s\n is not supported\n \n%\n \ntype\n(\ndata\n))\n\n        \nreturn\n \narray\n\n\n\ndef\n \nmain\n():\n\n    \nimport\n \nsys\n\n    \nimport\n \nstruct\n\n\n    \nmic\n \n=\n \nMicArray\n()\n\n\n    \nprint\n(\nUsing: \n%s\n \n%\n \nusb_hid\n.\nusb_backend\n)\n\n\n    \nif\n \nlen\n(\nsys\n.\nargv\n)\n \n \n3\n:\n\n        \nprint\n(\nUsage: python {} w 0x0 0x000003\n.\nformat\n(\nsys\n.\nargv\n[\n0\n]))\n\n        \nsys\n.\nexit\n(\n1\n)\n\n\n    \ntry\n:\n\n        \nif\n \nsys\n.\nargv\n[\n2\n]\n.\nstartswith\n(\n0x\n):\n\n            \naddress\n \n=\n \nint\n(\nsys\n.\nargv\n[\n2\n],\n \n16\n)\n\n        \nelse\n:\n\n            \naddress\n \n=\n \nint\n(\nsys\n.\nargv\n[\n2\n])\n\n\n        \nif\n \nsys\n.\nargv\n[\n1\n]\n \n==\n \nw\n:\n\n            \nif\n \nsys\n.\nargv\n[\n3\n]\n.\nstartswith\n(\n0x\n):\n\n                \ndata\n \n=\n \nint\n(\nsys\n.\nargv\n[\n3\n],\n \n16\n)\n\n            \nelse\n:\n\n                \ndata\n \n=\n \nint\n(\nsys\n.\nargv\n[\n3\n])\n\n\n            \nif\n \ndata\n \n \n0xFFFF\n:\n\n                \ndata\n \n=\n \nstruct\n.\npack\n(\nI\n,\n \ndata\n)\n\n            \nelif\n \ndata\n \n \n0xFF\n:\n\n                \ndata\n \n=\n \nstruct\n.\npack\n(\nH\n,\n \ndata\n)\n\n\n            \nmic\n.\nwrite\n(\naddress\n,\n \ndata\n)\n\n        \nelse\n:\n\n            \nprint\n \n[\nint\n(\nx\n)\n \nfor\n \nx\n \nin\n \nmic\n.\nread\n(\naddress\n,\n \n4\n)]\n\n    \nexcept\n \nException\n \nas\n \ne\n:\n\n        \nprint\n(\ne\n.\nmessage\n)\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nmain\n()\n\n\n\n\n\nFAQ\n\n\nQ1\uff1a Respeaker Mic Array\u9a71\u52a8\u5b89\u88c5\u95ee\u9898\uff1f\n\n\nWindows\u9700\u8981\u5b89\u88c5\u9a71\u52a8\uff0clinux\uff08Ubuntu,Raspberry,MAC\u7b49\uff09\u4e0d\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u3002\u70b9\u51fb\n\u8fd9\u91cc\n\u4e0b\u8f7d\u9a71\u52a8\u3002\u5728windows\u7cfb\u7edf\u7684\u8bbe\u5907\u7ba1\u7406\u5668\uff0c\u770b\u5230\u9ea6\u514b\u98ce\u9635\u5217\u4e0d\u80fd\u88ab\u8bc6\u522b\uff0c\u8bf7\u5b89\u88c5\u4ee5\u4e0b\u6d41\u7a0b\u6765\u64cd\u4f5c\u3002\n\n\n\n\n\n\n\u5b89\u88c5\u9a71\u52a8\n\n\n\n\n\n\n\u6362USB\u7ebf\n\n\n\n\n\n\n\u7981\u7528\u6570\u5b57\u7b7e\u540d\n\n\n\n\n\n\n\u6362\u5176\u4ed6\u7535\u8111\u5c1d\u8bd5\n\n\n\n\n\n\nQ2\uff1a Respeaker Mic Array\u5982\u4f55\u91c7\u96c6\u97f3\u9891\uff1f\n\n\n\n\n\u4e0b\u8f7d\nAudacity\n\u8f6f\u4ef6\u6765\u91c7\u96c6, \u5728windows\u4e0b\u5177\u4f53\u53c2\u6570\u8bbe\u7f6e\uff0c\u8bf7\u53c2\u5361\n \u3002\n\n\n\n\n\u5982\u679c\u6309\u7167\u4ee5\u4e0a\u8bbe\u7f6e\u91c7\u96c6\u6570\u636e\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u5b89\u88c5\u9a71\u52a8\u3002\n\n\n\n\n\n\n\u5229\u7528Python\u811a\u672c\u6765\u91c7\u96c6\u97f3\u9891\u6570\u636e\uff1a\n\n\n\n\n\n\nXVSM\u56fa\u4ef6\u91c7\u96c62\u901a\u9053\u97f3\u9891\uff1a \uff08\u652f\u6301Unbuntu/Raspberry/Mac\uff09\n\n\n\n\n\n\n\u9996\u5148\u7528\nXVSM_RecordAudio_Ubuntu_Raspberry_Mac_getDeviceInfo.py\n   \u68c0\u6d4b\u9ea6\u514b\u98ce\u9635\u5217\u7684\u8f93\u5165\u901a\u9053\u3002\n\n\n\n\n\n\n\u7136\u540e\u66f4\u6539\nXVSM_RecordAudio_Ubuntu_Raspberry_Mac_recordaudio.py\n \u7684 \nRESPEAKER_INDEX = 2\n \u7684 2\u4e3a\u68c0\u6d4b\u5230\u7684\u901a\u9053\uff0c \u8fd0\u884c\u7a0b\u5e8f\u6765\u91c7\u96c6\u97f3\u9891\u3002\n\n\n\n\n\n\n\n\n\n\nRAW\u56fa\u4ef6\u91c7\u96c68\u901a\u9053\u97f3\u9891\uff1a\uff08\u652f\u6301Unbuntu/Raspberry/Mac\uff09\n\n\n\n\n\n\n\u9996\u5148\u7528\nRaw_RecordAudio_Ubuntu_Raspberry_Mac_getDeviceInfo.py\n \u9ea6\u514b\u98ce\u9635\u5217\u7684\u8f93\u5165\u901a\u9053\u3002\n\n\n\n\n\n\n\u7136\u540e\u66f4\u6539\nRaw_RecordAudio_Ubuntu_Raspberry_Mac_recordaudio.py\n \u7684**RESPEAKER_INDEX = 2** \u7684 2\u4e3a\u68c0\u6d4b\u5230\u7684\u901a\u9053 \uff0c \u8fd0\u884c\u7a0b\u5e8f\u6765\u91c7\u96c6\u97f3\u9891\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQ3\uff1a Respeaker Mic Array\u5982\u4f55\u5b9a\u4f4d\uff1f\n\n\n\n\n\n\nXVSM\u56fa\u4ef6\u6765\u5b9a\u4f4d\uff1a \uff08\u652f\u6301Unbuntu/Raspberry/Mac\uff09\n\n\n\n\n\u8fd0\u884c\u811a\u672c\nXVSM_VAD_Ubuntu_Raspberry_Mac_get_direction.py\n \u6765\u5b9a\u4f4d\n\n\n\n\n\n\n\n\nRAW\u56fa\u4ef6\u6765\u5b9a\u4f4d\uff1a \uff08\u652f\u6301Unbuntu\uff09\n\n\n\n\n\u8fd0\u884c\u811a\u672c\nRaw_vad_doa_Ubuntu_get_direction.py\n \u6765\u5b9a\u4f4d\uff0c \u6ce8\u610f\u9700\u8981\u4e0b\u8f7d \ngcc_phat.py\n\uff0c \nmic_array.py\n\uff0c \npixel_ring.py\n3\u4e2a\u5e93\u6587\u4ef6\uff0c\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u3002 \n\n\n\n\n\n\n\n\nQ4\uff1a Respeaker Mic Array Python\u7a0b\u5e8f\u4e0b\u8f7d\uff1f\n\n\n\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u4e0b\u8f7dPython\u91c7\u96c6\u97f3\u9891\u548c\u5b9a\u4f4d\u7684\u5168\u90e8\u7a0b\u5e8f\u3002\n\n\nQ5\uff1a Respeaker Mic Array\u54aa\u5934\u7684\u7269\u7406\u4f4d\u7f6e\u548cAudacity\u7684\u901a\u9053\u4f4d\u7f6e\uff1f\n\n\n\n\n\n\n\u54aa\u5934\u4f4d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a\n\n\n\n\n\n\n\nAudacity\u7684\u901a\u9053\u4f4d\u7f6e\n\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[Eagle]\nReSpeaker Microphone Array SCH\n\n\n[Eagle]\nReSpeaker Microphone Array BRD\n\n\n[PDF]\n \nReSpeaker Microphone Array SCH\n\n\n[PDF]\n \nReSpeaker Microphone Array PCB", 
            "title": "Respeaker_Mic_Array"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#_1", 
            "text": "ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u53ef\u4ee5\u5806\u53e0\uff08\u8fde\u63a5\uff09\u5230ReSpeaker Core\u7684\u9876\u90e8\uff0c\u4ee5\u663e\u7740\u63d0\u9ad8\u8bed\u97f3\u4ea4\u4e92\u4f53\u9a8c\u3002\u5b83\u662f\u57fa\u4e8eXMOS\u7684XVSM-2000\u667a\u80fd\u9ea6\u514b\u98ce\u5f00\u53d1\u7684\u3002\u8be5\u677f\u96c6\u6210\u4e867\u4e2aPDM\u9ea6\u514b\u98ce\uff0c\u4ee5\u5e2e\u52a9\u5c06ReSpeaker\u7684\u58f0\u5b66DSP\u6027\u80fd\u63d0\u5347\u5230\u66f4\u9ad8\u7684\u6c34\u5e73\u3002", 
            "title": "\u4ea7\u54c1\u7b80\u4ecb"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#_2", 
            "text": "\u8fdc\u573a\u8bed\u97f3\u6355\u83b7  \u58f0\u6e90\u5b9a\u4f4d  \u6ce2\u675f\u6210\u5f62  \u566a\u58f0\u6291\u5236  \u6d88\u6df7\u54cd  \u56de\u97f3\u6d88\u9664", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#_3", 
            "text": "XVSM-2000\u5185\u7f6e16\u4e2a\u5185\u6838:  \u57282\u4e2axCore titles\u4e0a\u768416\u4e2a\u5b9e\u65f6\u903b\u8f91\u5185\u6838  \u6838\u5728dual issue mode\u4e0b\u5171\u4eab2000 MIPS  \u5185\u90e8single cycle 512KB SRAM\u548c2MB\u5185\u7f6e\u95ea\u5b58  16KB\u5185\u90e8OTP\uff08\u6700\u59278KB\u6bcftile\uff09  USB PHY\uff0c\u5b8c\u5168\u7b26\u5408USB 2.0\u89c4\u8303  \u53ef\u7f16\u7a0b I/O.  \u63d0\u4f9bDFU\u6a21\u5f0f.    7 \u6570\u5b57\u9ea6\u514b\u98ce:  \u7528\u4e8e\u8fdc\u573a\u8bed\u97f3\u8bc6\u522b\u6216\u58f0\u97f3\u5b9a\u4f4d.  ST MP34DT01-M.  -26 dBFS \u7075\u654f\u5ea6.  120 dBSPL \u58f0\u5b66\u8fc7\u8f7d\u70b9.  61 dB \u4fe1\u566a\u6bd4.  \u5168\u5411\u7075\u654f\u5ea6.  PDM \u8f93\u51fa.    12 RGB LEDs:  256\u7ea7\u4eae\u5ea6.  800kHz\u7ebf\u6570\u636e\u4f20\u8f93.    \u97f3\u9891\u8f93\u51fa:  \u677f\u8f7d3.5mmAUX\u8f93\u51fa.  WOLFSON WM8960.  24 or 16bit 16kHz\u7acb\u4f53\u58f0\u8f93\u51fa.  40 mW \u8f93\u51fa\u529f\u7387 16 \u2126 @ 3.3 V.    \u65f6\u949f\u540c\u6b65\uff1a  \u677f\u8f7d PLL.  \u7528\u4e8e DAC,MIC\u7684\u53ef\u7f16\u7a0b\u91c7\u6837\u65f6\u949f.\n(\u5982\u679c\u5728XVSM-2000\u4e2d\u4f7f\u7528DSP\uff0c\u5219\u7981\u7528).    \u7535\u6e90:  Micro USB\u6216\u6269\u5c55\u63a5\u5934\u63d0\u4f9b5V\u7535\u6e90.    \u5c3a\u5bf8:  \u76f4\u5f84 70mm.    \u91cd\u91cf:  15.25g", 
            "title": "\u6280\u672f\u89c4\u683c"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#respeaker", 
            "text": "\u5bf9\u4e8eWindows\u7528\u6237, \u8bf7\u5355\u51fb  \u6b64\u5904  \u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f  \u5bf9\u4e8eLinux\u6216Mac\u7528\u6237\uff0c\u4e0d\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f", 
            "title": "ReSpeaker \u9ea6\u514b\u98ce\u9635\u5217\u9a71\u52a8"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#respeaker-core", 
            "text": "\u5f53\u9ea6\u514b\u98ce\u9635\u5217\u5806\u53e0\u5728ReSpeaker Core\u4e0a\u65f6\uff0c\u5c06\u81ea\u52a8\u68c0\u6d4b\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7aplay -l\u6765\u624b\u52a8\u68c0\u6d4b\uff09\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u53ef\u4ee5\u4f7f\u7528 respeaker_python_library \u6765\u5f00\u53d1\u8bed\u97f3\u4ea4\u4e92\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u60a8\u4e0d\u9700\u8981\u5173\u5fc3Mic Array\u662f\u5426\u6253\u5f00\u3002\u6211\u4eec\u7684\u5e93\u6587\u4ef6\u4f1a\u68c0\u67e5\u5e76\u9009\u62e9\u9ea6\u514b\u98ce\u9635\u5217\u3002  \u6b64\u5916\uff0c\u5728\u8be5\u5e93\u4e2d\uff0c\u57fa\u4e8ePyaudio\u7684\u9ea6\u514b\u98ce\u7c7b\u5177\u6709\u540d\u4e3alisten\u7684\u65b9\u6cd5\u6765\u63d0\u53d6\u8bed\u97f3\u3002\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u793a\u4f8b\u4ee3\u7801\u4ee5\u4f9b\u4f7f\u7528\u3002  \u6b64\u5916\uff0c\u5728\u8be5\u5e93\u4e2d\uff0c  class Microphone , \u57fa\u4e8e  Pyaudio , \u7528  listen , \u6765\u63d0\u53d6\u58f0\u97f3. \u8bf7\u67e5\u9605  example code  \u5173\u4e8e\u5982\u4f55\u4f7f\u7528.", 
            "title": "\u7528ReSpeaker Core\u63d0\u53d6\u58f0\u97f3"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#pcmaclinuxraspberry-pi", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8ePyaudio\u7684\u4f8b\u5b50\uff1a  \u9996\u5148\uff0c\u60a8\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u811a\u672c\u6765\u83b7\u53d6Mic Array\u7684\u8bbe\u5907\u7d22\u5f15\u53f7\uff1a  import   pyaudio  p   =   pyaudio . PyAudio ()  info   =   p . get_host_api_info_by_index ( 0 )  numdevices   =   info . get ( deviceCount )  for   i   in   range ( 0 ,   numdevices ): \n         if   ( p . get_device_info_by_host_api_device_index ( 0 ,   i ) . get ( maxInputChannels ))     0 : \n             print   Input Device id  ,   i ,    -  ,   p . get_device_info_by_host_api_device_index ( 0 ,   i ) . get ( name )   \u7136\u540e\uff0c\u66f4\u6539RESPEAKER_INDEX = 1\u4e3a\u60a8\u7684\u7d22\u5f15\u53f7\u3002\u8fd0\u884c\u811a\u672c\u6765\u5f55\u5236\u8bed\u97f3\u3002  import   pyaudio  import   wave  RESPEAKER_RATE   =   16000  RESPEAKER_CHANNELS   =   2  RESPEAKER_WIDTH   =   2  # run getDeviceInfo.py to get index  RESPEAKER_INDEX   =   1  CHUNK   =   1024  RECORD_SECONDS   =   5  WAVE_OUTPUT_FILENAME   =   output.wav  p   =   pyaudio . PyAudio ()  stream   =   p . open ( \n             rate = RESPEAKER_RATE , \n             format = p . get_format_from_width ( RESPEAKER_WIDTH ), \n             channels = RESPEAKER_CHANNELS , \n             input = True , \n             input_device_index = RESPEAKER_INDEX ,)  print ( * recording )  frames   =   []  for   i   in   range ( 0 ,   int ( RESPEAKER_RATE   /   CHUNK   *   RECORD_SECONDS )): \n     data   =   stream . read ( CHUNK ) \n     frames . append ( data )  print ( * done recording )  stream . stop_stream ()  stream . close ()  p . terminate ()  wf   =   wave . open ( WAVE_OUTPUT_FILENAME ,   wb )  wf . setnchannels ( RESPEAKER_CHANNELS )  wf . setsampwidth ( p . get_sample_size ( p . get_format_from_width ( RESPEAKER_WIDTH )))  wf . setframerate ( RESPEAKER_RATE )  wf . writeframes ( b . join ( frames ))  wf . close ()", 
            "title": "\u5728PC\u6216Mac\u6216Linux\u6216Raspberry Pi\u4e0a\u63d0\u53d6\u8bed\u97f3"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#respeaker_1", 
            "text": "\u60a8\u53ef\u4ee5\u5728 \u8fd9\u91cc \u4e0b\u8f7d\u9002\u7528\u4e8eDFU\u7684ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u56fa\u4ef6\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e24\u4e2a\u7248\u672c\uff1a   xvsm\u7248\u672c \uff1a\u521d\u59cb\u7248\u672c\uff0c\u652f\u6301dsp\u8f93\u51fa2\u901a\u9053\u6570\u636e\u3002  \u539f\u59cb\u7248\u672c \uff1a\u8f93\u51fa8\u8def\u9ea6\u514b\u98ce\u539f\u59cb\u6570\u636e\uff0c\u6b64\u56fa\u4ef6\u4e0d\u652f\u6301xvsm dsp\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u67d0\u4e9b\u529f\u80fd\uff0c\u5982DOA\uff0cAEC\u7b49\u3002   \u5173\u4e8e\u8bf7\u67e5\u9605\u5982\u4f55\u5728Mac\u6216Linux\u4e0a\u66f4\u65b0\u56fa\u4ef6\uff0c \u8bf7\u67e5\u9605  \u8fd9\u91cc  \u3002", 
            "title": "ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u56fa\u4ef6"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#respeakerhid", 
            "text": "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7USB HID\u63a7\u5236ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u3002\u8bf7\u53c2\u9605\u6211\u4eec\u7684 \u901a\u4fe1\u534f\u8bae .  \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u4f7f\u7528  \u6700\u65b0\u7684\u539f\u59cb\u7248\u672c \uff0c\u5219\u53ea\u80fd\u63a7\u5236LED\u3002  \u8fd9\u91cc\u662f\u4e00\u4e2apython\u4f8b\u5b50\uff1a  #!/usr/bin/env python  import   respeaker.usb_hid   as   usb_hid  class   MicArray : \n     def   __init__ ( self ): \n         self . hid   =   usb_hid . get () \n\n     def   write ( self ,   address ,   data ): \n         data   =   self . to_bytearray ( data ) \n         length   =   len ( data ) \n         if   self . hid : \n             packet   =   bytearray ([ address     0xFF ,   ( address     8 )     0x7F ,   length     0xFF ,   ( length     8 )     0xFF ])   +   data \n             packet   =   list ( packet ) \n             self . hid . write ( packet ) \n\n     def   read ( self ,   address ,   length ): \n         self . hid . write ( list ( bytearray ([ address     0xFF ,   ( address     8 )     0xFF   |   0x80 ,   length     0xFF ,   ( length     8 )     0xFF ]))) \n         for   _   in   range ( 6 ): \n             data   =   self . hid . read () \n             # print [int(x) for x in data] \n             # skip VAD data \n             if   int ( data [ 0 ])   !=   0xFF   and   int ( data [ 1 ])   !=   0xFF : \n                 return   data [ 4 :( 4   +   length )] \n\n     @staticmethod \n     def   to_bytearray ( data ): \n         if   type ( data )   is   int : \n             array   =   bytearray ([ data     0xFF ]) \n         elif   type ( data )   is   bytearray : \n             array   =   data \n         elif   type ( data )   is   str : \n             array   =   bytearray ( data ) \n         elif   type ( data )   is   list : \n             array   =   bytearray ( data ) \n         else : \n             raise   TypeError ( %s  is not supported   %   type ( data )) \n         return   array  def   main (): \n     import   sys \n     import   struct \n\n     mic   =   MicArray () \n\n     print ( Using:  %s   %   usb_hid . usb_backend ) \n\n     if   len ( sys . argv )     3 : \n         print ( Usage: python {} w 0x0 0x000003 . format ( sys . argv [ 0 ])) \n         sys . exit ( 1 ) \n\n     try : \n         if   sys . argv [ 2 ] . startswith ( 0x ): \n             address   =   int ( sys . argv [ 2 ],   16 ) \n         else : \n             address   =   int ( sys . argv [ 2 ]) \n\n         if   sys . argv [ 1 ]   ==   w : \n             if   sys . argv [ 3 ] . startswith ( 0x ): \n                 data   =   int ( sys . argv [ 3 ],   16 ) \n             else : \n                 data   =   int ( sys . argv [ 3 ]) \n\n             if   data     0xFFFF : \n                 data   =   struct . pack ( I ,   data ) \n             elif   data     0xFF : \n                 data   =   struct . pack ( H ,   data ) \n\n             mic . write ( address ,   data ) \n         else : \n             print   [ int ( x )   for   x   in   mic . read ( address ,   4 )] \n     except   Exception   as   e : \n         print ( e . message )  if   __name__   ==   __main__ : \n     main ()", 
            "title": "\u7528\u4e8e\u63a7\u5236ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u7684HID"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#q1-respeaker-mic-array", 
            "text": "Windows\u9700\u8981\u5b89\u88c5\u9a71\u52a8\uff0clinux\uff08Ubuntu,Raspberry,MAC\u7b49\uff09\u4e0d\u9700\u8981\u5b89\u88c5\u9a71\u52a8\u3002\u70b9\u51fb \u8fd9\u91cc \u4e0b\u8f7d\u9a71\u52a8\u3002\u5728windows\u7cfb\u7edf\u7684\u8bbe\u5907\u7ba1\u7406\u5668\uff0c\u770b\u5230\u9ea6\u514b\u98ce\u9635\u5217\u4e0d\u80fd\u88ab\u8bc6\u522b\uff0c\u8bf7\u5b89\u88c5\u4ee5\u4e0b\u6d41\u7a0b\u6765\u64cd\u4f5c\u3002    \u5b89\u88c5\u9a71\u52a8    \u6362USB\u7ebf    \u7981\u7528\u6570\u5b57\u7b7e\u540d    \u6362\u5176\u4ed6\u7535\u8111\u5c1d\u8bd5", 
            "title": "Q1\uff1a Respeaker Mic Array\u9a71\u52a8\u5b89\u88c5\u95ee\u9898\uff1f"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#q2-respeaker-mic-array", 
            "text": "\u4e0b\u8f7d Audacity \u8f6f\u4ef6\u6765\u91c7\u96c6, \u5728windows\u4e0b\u5177\u4f53\u53c2\u6570\u8bbe\u7f6e\uff0c\u8bf7\u53c2\u5361  \u3002   \u5982\u679c\u6309\u7167\u4ee5\u4e0a\u8bbe\u7f6e\u91c7\u96c6\u6570\u636e\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u5b89\u88c5\u9a71\u52a8\u3002    \u5229\u7528Python\u811a\u672c\u6765\u91c7\u96c6\u97f3\u9891\u6570\u636e\uff1a    XVSM\u56fa\u4ef6\u91c7\u96c62\u901a\u9053\u97f3\u9891\uff1a \uff08\u652f\u6301Unbuntu/Raspberry/Mac\uff09    \u9996\u5148\u7528 XVSM_RecordAudio_Ubuntu_Raspberry_Mac_getDeviceInfo.py    \u68c0\u6d4b\u9ea6\u514b\u98ce\u9635\u5217\u7684\u8f93\u5165\u901a\u9053\u3002    \u7136\u540e\u66f4\u6539 XVSM_RecordAudio_Ubuntu_Raspberry_Mac_recordaudio.py  \u7684  RESPEAKER_INDEX = 2  \u7684 2\u4e3a\u68c0\u6d4b\u5230\u7684\u901a\u9053\uff0c \u8fd0\u884c\u7a0b\u5e8f\u6765\u91c7\u96c6\u97f3\u9891\u3002      RAW\u56fa\u4ef6\u91c7\u96c68\u901a\u9053\u97f3\u9891\uff1a\uff08\u652f\u6301Unbuntu/Raspberry/Mac\uff09    \u9996\u5148\u7528 Raw_RecordAudio_Ubuntu_Raspberry_Mac_getDeviceInfo.py  \u9ea6\u514b\u98ce\u9635\u5217\u7684\u8f93\u5165\u901a\u9053\u3002    \u7136\u540e\u66f4\u6539 Raw_RecordAudio_Ubuntu_Raspberry_Mac_recordaudio.py  \u7684**RESPEAKER_INDEX = 2** \u7684 2\u4e3a\u68c0\u6d4b\u5230\u7684\u901a\u9053 \uff0c \u8fd0\u884c\u7a0b\u5e8f\u6765\u91c7\u96c6\u97f3\u9891\u3002", 
            "title": "Q2\uff1a Respeaker Mic Array\u5982\u4f55\u91c7\u96c6\u97f3\u9891\uff1f"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#q3-respeaker-mic-array", 
            "text": "XVSM\u56fa\u4ef6\u6765\u5b9a\u4f4d\uff1a \uff08\u652f\u6301Unbuntu/Raspberry/Mac\uff09   \u8fd0\u884c\u811a\u672c XVSM_VAD_Ubuntu_Raspberry_Mac_get_direction.py  \u6765\u5b9a\u4f4d     RAW\u56fa\u4ef6\u6765\u5b9a\u4f4d\uff1a \uff08\u652f\u6301Unbuntu\uff09   \u8fd0\u884c\u811a\u672c Raw_vad_doa_Ubuntu_get_direction.py  \u6765\u5b9a\u4f4d\uff0c \u6ce8\u610f\u9700\u8981\u4e0b\u8f7d  gcc_phat.py \uff0c  mic_array.py \uff0c  pixel_ring.py 3\u4e2a\u5e93\u6587\u4ef6\uff0c\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u3002", 
            "title": "Q3\uff1a Respeaker Mic Array\u5982\u4f55\u5b9a\u4f4d\uff1f"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#q4-respeaker-mic-array-python", 
            "text": "\u8bf7\u70b9\u51fb \u8fd9\u91cc \u4e0b\u8f7dPython\u91c7\u96c6\u97f3\u9891\u548c\u5b9a\u4f4d\u7684\u5168\u90e8\u7a0b\u5e8f\u3002", 
            "title": "Q4\uff1a Respeaker Mic Array Python\u7a0b\u5e8f\u4e0b\u8f7d\uff1f"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#q5-respeaker-mic-arrayaudacity", 
            "text": "\u54aa\u5934\u4f4d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a    Audacity\u7684\u901a\u9053\u4f4d\u7f6e", 
            "title": "Q5\uff1a Respeaker Mic Array\u54aa\u5934\u7684\u7269\u7406\u4f4d\u7f6e\u548cAudacity\u7684\u901a\u9053\u4f4d\u7f6e\uff1f"
        }, 
        {
            "location": "/Respeaker_Mic_Array/#_4", 
            "text": "[Eagle] ReSpeaker Microphone Array SCH  [Eagle] ReSpeaker Microphone Array BRD  [PDF]   ReSpeaker Microphone Array SCH  [PDF]   ReSpeaker Microphone Array PCB", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Respeaker_Core/", 
            "text": "ReSpeaker\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u6a21\u5757\u5316\u8bed\u97f3\u63a5\u53e3\uff0c\u7528\u4e8e\u63a5\u5165\u60a8\u5468\u56f4\u7684\u5404\u79cd\u4e8b\u7269\u3002\u8ba9\u60a8\u901a\u8fc7\u8bed\u97f3\u4e0e\u60a8\u7684\u5bb6\u7528\u7535\u5668\uff0c\u60a8\u7684\u5de5\u5382\uff0c\u529e\u516c\u5ba4\uff0c\u4e92\u8054\u7f51\u8bbe\u5907\u6216\u60a8\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u5176\u4ed6\u4efb\u4f55\u4e8b\u7269\u8fdb\u884c\u4e92\u52a8\u3002\n\n\n\n\n\u5b83\u662f\u60a8\u5468\u56f4\u7269\u4ef6\u7684\u8bed\u97f3\u6269\u5c55\n\n\n\n\nReSpeaker\u652f\u6301\u5728\u7ebf\u8bed\u4e49\u8bc6\u522b\u670d\u52a1\u5e76\u4e14\u62e5\u6709\u79bb\u7ebf\u8f7b\u91cf\u7ea7\u8bed\u97f3\u8bc6\u522b\u5f15\u64ce\u3002\u60a8\u53ef\u4ee5\u5c06ReSpeaker\u6dfb\u52a0\u5230\u60a8\u5468\u56f4\u7684\u4e8b\u7269\u4e2d\uff0c\u4f7f\u5176\u53d8\u5f97\u667a\u80fd\u6216\u66f4\u52a0\u667a\u80fd\u3002\n\n\n\n\n\u5b83\u662f\u4e00\u4e2a\u97f3\u9891\u6d41\u8bbe\u5907\n\n\n\n\n\u8bed\u97f3\u4ea4\u4e92\u4ece\u672a\u4e0e\u97f3\u4e50\u5a31\u4e50\u533a\u5206\u5f00\uff0cReSpeaker\u4e5f\u662f\u5982\u6b64\u3002ReSpeaker\u652f\u6301Airplay / DLNA\u65e0\u7ebf\u97f3\u4e50\u6d41\u3002\u53ea\u9700\u4f7f\u7528AUX\u7535\u7f06\u5c06ReSpeaker\u8fde\u63a5\u5230\u4efb\u4f55\u666e\u901a\u7684\u626c\u58f0\u5668\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5f00\u59cb\u4eab\u53d7\u60a8\u6240\u7231\u7684\u97f3\u4e50\uff0c\u800c\u65e0\u9700\u6309\u4efb\u4f55\u4e00\u4e2a\u6309\u94ae\u3002\n\n\n\n\n\u5b83\u662f\u5b69\u5b50\u4eec\u5b66\u4e60\u7684\u5de5\u5177\n\n\n\n\nReSpeaker\u63a7\u5236\u6a21\u5757\u662f\u57fa\u4e8eATmega32u4\u82af\u7247\uff0c\u8be5\u82af\u7247\u5b8c\u5168\u517c\u5bb9Arduino\u9a71\u52a8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ReSpeaker\u4f5c\u4e3a\u5f3a\u5927\u7684Arduino\u5b66\u4e60\u677f\uff0c\u5e76\u505a\u4e86\u8bb8\u591a\u201cArduino\u201d\u5f00\u53d1\u677f\u80fd\u505a\u7684\u4e8b\u60c5\u3002\u8fd9\u662f\u4e3a\u4e86\u5b66\u4e60\uff0c\u8fd9\u662f\u4e3a\u4e86\u7ec3\u4e60\uff0c\u8fd9\u662f\u4e50\u8da3\uff01\uff01\uff01\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\n\n\u89e3\u653e\u60a8\u7684\u53cc\u624b\uff1a\u79bb\u7ebf\u6216\u5728\u7ebf\u6a21\u5f0f\u4e0b\u7684\u8bed\u97f3\u8bc6\u522b\n\n\n\u65e0\u7ebf\u97f3\u9891\u6d41\u4f20\u8f93\uff1a \u901a\u8fc7Airplay/DLNA\u4f20\u8f93\u97f3\u9891\u6d41\n\n\n\u6613\u4e8e\u4f7f\u7528\u7684SDK\uff1a\u9002\u7528\u4e8ePython\u548cC / C ++\u5f00\u53d1\u4eba\u5458\n\n\n\u65e5\u76ca\u589e\u957f\u7684\u529f\u80fd\uff1a\u4e0b\u8f7d\u548c\u63d2\u4ef6\u4e0d\u65ad\u4e30\u5bcc\u5176\u529f\u80fd\u4e0e\u5e94\u7528\n\n\n\u5373\u63d2\u5373\u7528\u63d2\u4ef6\uff1a\u53ef\u6269\u5c55\u4f7f\u7528\u9ea6\u514b\u98ce\u9635\u5217\uff0cGrove\u6269\u5c55\u677f\uff0cGrove\u6a21\u5757\n\n\n\u514d\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\uff1a\u53ef\u57fa\u4e8eWeb\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u6240\u6709\u529f\u80fd\u3001\u53c2\u6570\uff08\u6682\u65f6\u4e0d\u53ef\u7528\uff09\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\u6280\u672f\u89c4\u683c\n\n\n\n\n\n\nAI7688 Wi-Fi \u6a21\u5757:\n\n\n\n\n\u64cd\u4f5c\u7cfb\u7edf: \u57fa\u4e8eGNU/Linux \u7684 OpenWrt\n\n\nwifi\u652f\u6301: \u652f\u6301802.11b/g and HT 802.11n \u6a21\u5f0f\n\n\n\u6269\u5c55\u6027:\u4e24\u6392\u6269\u5c55\u63a5\u53e3\uff0c\u62e5\u6709 I2C, GPIO \u548c USB 2.0\n\n\n\u63a5\u53e3: 3.5mm AUX \u97f3\u9891\u63a5\u53e3, Micro USB \u548c SD card \u5361\u69fd\n\n\n\n\n\n\n\n\nATMega32U4 \u5904\u7406\u5668:\n\n\n\n\nLinnux\u5e73\u53f0\u4e0b\u7684 USB CDC \u8f6f\u4e32\u53e3\n\n\n12\u4e2a\u53ef\u7f16\u7a0bLED \u6307\u793a\u706f\n\n\n8 \u4e2a\u7247\u4e0a\u89e6\u70b9\u63a5\u53e3\n\n\n\n\n\n\n\n\nCodec WM8960:\n\n\n\n\nDAC SNR 98dB (\u2018A\u2019 weighted), THD -84dB at 48kHz, 3.3V  \n\n\nADC SNR 94dB (\u2018A\u2019 weighted), THD -82dB at 48kHz, 3.3V  \n\n\nStereo Class D Speaker Driver with 87% efficiency (1W output)  \n\n\nOn-chip Headphone Driver  \n\n\n40mW output power into 16\u03a9 at 3.3V  \n\n\nTHD -75dB at 20mW, SNR 90dB with 16\u03a9 load  \n\n\nOn-chip PLL provides flexible clocking scheme  \n\n\nSample rates: 8, 11.025, 12, 16, 22.05, 24, 32, 44.1, 48 kHz\n\n\n\n\n\n\n\n\n\u4f9b\u7535\u7535\u538b: 5V DC  \n\n\n\n\n\n\n\u5c3a\u5bf8: \u76f4\u5f84 70mm   \n\n\n\n\n\n\n\u91cd\u91cf: 17g\n\n\n\n\n\n\n\u7ba1\u811a\u56fe\n\n\n\n\n\n\nGPIO0 / I2S_ADC\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0cADC\u4fe1\u53f7\n\n\nGPIO1 / I2S_DAC\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0cDAC\u4fe1\u53f7\n\n\nGPIO2 / I2S_LRCLK\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0c\u5de6/\u53f3\u901a\u9053\u91c7\u6837\u65f6\u949f\n\n\nGPIO3 / I2S_BCLK\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0c\u4f4d\u65f6\u949f\n\n\nMCLK_OUT\uff1a\u5916\u90e8\u8bbe\u5907\u7684\u4e3b\u65f6\u949f\n\n\nHP_SEL\uff1a\u8033\u673a\u9891\u9053\u9009\u62e9\u3002\u5982\u679c\u4f7f\u7528ReSpeaker Mic Array\u8f93\u51fa\u97f3\u9891\uff0c\u8bf7\u5c06HP_SEL\u8bbe\u7f6e\u4e3a\u9ad8\u7535\u5e73\n\n\nHP_L\uff1aReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u7684\u6a21\u62df\u97f3\u9891\u5de6\u58f0\u9053\n\n\nHP_R\uff1aReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u7684\u6a21\u62df\u97f3\u9891\u53f3\u58f0\u9053\n\n\nAGND\uff1a\u97f3\u9891\u6a21\u62df\u5730\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u7b2c\u4e00\u6b21\u62ff\u5230Respeaker_Core\u4ece\u54ea\u91cc\u5f00\u59cb\uff1f\n\n\n1. \u51c6\u5907\n\n\n\n\nReSpeaker\u6838\u5fc3\u677f\n\n\nPC\u6216Mac\n\n\nWi-Fi\u7f51\u7edc\n\n\nSD\u5361\n\n\n\n\n2. \u8fde\u63a5\u5230\u4e32\u884c\u63a7\u5236\u53f0\n\n\n\n\n\n\n\u5bf9\u4e8ewindow, \u63a8\u8350\u4f7f\u7528 \nputty\n\u3002\n\n\n\n\n\u901a\u8fc7USB\u5c06ReSpeaker\u8fde\u63a5\u5230PC\uff0c\u52fe\u9009COM\u8bbe\u5907\u7ba1\u7406\u5668\u3002\u8fd9\u91cc\u6211\u4eec\u7684ReSpeaker COM\u7aef\u53e3\u662fCOM31\u3002\n\n\n\n\n\n\n\n\n\u5728\u8fde\u63a5\u7c7b\u578b\u4e0b\u9009\u62e9Serial ,\u5728Serial line\u4e2d\uff0c\u8f93\u5165\u60a8\u7684ReSpeaker\u7684COM\u7aef\u53e3\u53f7\uff0c\u5728\u6ce2\u7279\u7387\u9009\u9879\u4e2d\uff0c\u952e\u516557600\u3002\n\n\n\n\n\n\n\n\n\u70b9\u51fb Open.\u7136\u540e\u60a8\u5c06\u770b\u5230\u4e00\u4e2a\u9ed1\u8272\u7684\u5c4f\u5e55\u754c\u9762\uff0c\u70b9\u51fb\u56de\u8f66\u952e\u3002\n\n\n\n\n\n\n\n\n\n\n\u5bf9\u4e8e Linux/Mac\n\n\n\n\n\n\n\u901a\u8fc7USB\u5c06ReSpeaker\u8fde\u63a5\u5230PC\n\n\n\n\n\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\n\n\n\u5728\u7ec8\u7aef\u4e2d\u952e\u5165ls /dev/tty.usb*  \u6211\u4eec\u5e94\u8be5\u770b\u5230\u8bbe\u5907\u5217\u8868\u3002\u5bfb\u627e\u7c7b\u4f3ctty.usbmodemXXXXX\u7684\u4e1c\u897f\uff0c\u5176\u4e2dXXXXX\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u6807\u8bc6\u7b26\u3002\u8fd9\u662f\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u4e32\u884c\u8bbe\u5907\u3002\u7136\u540e\u4f7f\u7528\u5c4f\u5e55\u5b9e\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u4e32\u53e3\uff0c\u5e76\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a57600\uff0c\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u6ce2\u7279\u7387\u4e3a57600\n\n\n\n\n$ ls /dev/tty.usb*\n/dev/tty.usbmodem14221\n$ screen /dev/tty.usbmodem14221 57600\n\n\n\n\n3. \u8bbe\u7f6e Wi-Fi\n\n\nReSpeaker\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u4e2d\u7ee7\u6a21\u5f0f\uff0c\u60a8\u5fc5\u987b\u5c06\u5176\u8fde\u63a5\u5230\u73b0\u6709\u7684\u65e0\u7ebfwifi\u7f51\u7edc\uff0c\u7136\u540e\u624d\u80fd\u4f7f\u7528Internet\u8fdb\u884c\u8bed\u97f3\u8bc6\u522b\u3002\n\n\n\u5f53\u60a8\u9996\u6b21\u63a5\u901aReSpeaker\u7535\u6e90\u65f6\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cReSpeakerXXXXXX\u201d\u7684Wi-Fi\u7f51\u7edc\u3002\u8fd9\u91cc\u201cXXXXXX\u201d\u662f\u60a8\u7684ReSpeaker MAC\u5730\u5740\u7684\u6700\u540e6\u4f4d\u3002\u5c06\u60a8\u7684\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u6b64\u7f51\u7edc\u3002\n\n\n\n\n\n\nNote\n\n\n\u5982\u679c\u201cReSpeakerXXXXXX\u201d\u672a\u51fa\u73b0\uff0c\u4f46\u627e\u5230\u201cLinkIt_Smart_7688_XXXXXX\u201d\u3002\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n.\n\n\n\n\n\u83b7\u53d6IP\u5730\u5740\u540e\uff0c\u6253\u5f00Web\u6d4f\u89c8\u5668\uff0c\u7136\u540e\u5728\u5730\u5740\u680f\u4e2d\u8f93\u5165192.168.100.1\u3002\u51e0\u79d2\u949f\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0b\u56fe\u6240\u793a\u7f51\u9875\uff0c\u9700\u8981\u60a8\u8f93\u5165\u73b0\u6709Wi-Fi\u7f51\u7edc\u7684ssid\u548c\u5bc6\u7801\u3002\n\n\n\n\n\u9009\u62e9\u8981\u8fde\u63a5\u7684Wi-Fi\u5e76\u8f93\u5165\u5bc6\u7801\u3002\u5f53\u60a8\u6309OK\u6309\u94ae\u65f6\uff0cReSpeaker\u5c06\u52a0\u5165\u6307\u5b9a\u7684\u7f51\u7edc\u3002\n\n\n\u73b0\u5728\u60a8\u7684ReSpeaker\u80fd\u591f\u8bbf\u95ee\u4e92\u8054\u7f51\u3002\n\n\n\u5982\u679c\u60a8\u6ca1\u6709\u5f39\u51fawifi\u767b\u9646\u9875\u9762\uff0c\u53ef\u4ee5\u4f7f\u7528putty\u4e32\u53e3\u6a21\u5f0f\u4e0b\u8fde\u63a5Respeaker_Core, \u5e76\u4e14\u5728putty\u4e2d\u4f7f\u7528wictl\u626b\u63cfwifi\u5e76\u8fde\u63a5\n\n\nroot@mylinkit:~# wictl\n0, SEEED-MKT\n1, Xiaomi_Youth\n2, ChinaNet-Z5C4\n3, STU-EE\n4, EMBEST_WIFI\n5, SEEED-MKT\n6, nobody\n7, SEEED-MKT\n8, se.VPN\n9, Moovent_HK_2G\n10, LinkIt_Smart_7688_1D917A\n11, SEEED-MKT\n12, SEEED-MKT\n13, zhongrixing\nPlease choose your wifi: 8\nPlease input the wifi password: 88888888\nudhcpc (v1.23.2) started\nSending discover...\nSending discover...\nSending select for 192.168.199.153...\nLease of 192.168.199.153 obtained, lease time 43200\nudhcpc: ifconfig apcli0 192.168.199.153 netmask 255.255.255.0 broadcast 192.168.199.255\nudhcpc: setting default routers: 192.168.199.1\nsuccess\nroot@mylinkit:~#\n\n\n\n\n!!!\u6ce8\u610f\n    \u5982\u679c\u60a8\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u8fde\u63a5Wifi\uff0c\u8bf7\u901a\u8fc7\u8f93\u5165firstboot\u547d\u4ee4\u8fdb\u884c\u51fa\u5382\u8bbe\u7f6e\u3002\n\n\n\u542f\u7528Wifi\u529f\u80fd\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528SSH\u6a21\u5f0f\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u8fde\u63a5Respeaker\u3002\u6211\u4eec\u53ef\u4ee5\u4ecehttp://192.168.100.1/#!/overview WAN IP\u83b7\u53d6Respeaker IP\u5730\u5740\u3002\u5bc6\u7801\u662froot\u3002\n\n\nssh root@ssh *.*.*.*\n\n\n\n\n4. \u4f7f\u7528SD\u5361\u6765\u6269\u5c55\u5b58\u50a8\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5d4c\u5165\u5f0f\u8bbe\u5907\u53ef\u4ee5\u4f7f\u7528\u6709\u9650\u7684\u5b58\u50a8\u7a7a\u95f4\uff08ReSpeaker\u4ec5\u4e3a\u7528\u6237\u63d0\u4f9b\u4e865M\u7684\u677f\u8f7dFlash\u5b58\u50a8\u7a7a\u95f4\uff09\u3002\u4e3a\u5e94\u7528\u6216\u8005\u6570\u636e\u63d0\u4f9b\u66f4\u5927\u7684\u5b58\u50a8\u7a7a\u95f4\u53ef\u4ee5\u6fc0\u53d1ReSpeaker\u7684\u6f5c\u529b\uff0c\u6240\u4ee5\u4f7f\u7528SD\u5361\u6269\u5c55\u5b58\u50a8\u4f5c\u4e3aextroot\u662f\u4e00\u4e2a\u770b\u8d77\u6765\u8fd8\u4e0d\u9519\u7684\u9009\u62e9\u54df\u3002\n\n\n\u901a\u8fc7\u4f7f\u7528extroot\uff0c\u6dfb\u52a0\u5916\u90e8SD\u5361\u5b58\u50a8\u8bbe\u5907\u6765\u5b9e\u73b0\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u5b58\u50a8\u5bb9\u91cf\u7684\u6269\u5c55\u3002\u5728\u5f15\u5bfc\u8fc7\u7a0b\u4e2d\uff0c\u5916\u90e8\u5b58\u50a8\u7a7a\u95f4\u4f5c\u4e3a\u6839\u6587\u4ef6\u7cfb\u7edf\u542f\u52a8\uff0c\u6216\u8005\u4ee5\u539f\u59cb\u6587\u4ef6\u7cfb\u7edf\u7684\u8986\u76d6\u914d\u7f6e\u8fdb\u884c\u542f\u52a8\u3002\n\n\n\n\n\u786e\u4fdd\u60a8\u7684SD\u5361\u5df2\u63d2\u5165ReSpeaker\uff0c\u5e76\u4e14/ dev / mmcblk0p1\u53ef\u4ee5\u901a\u8fc7df -h\u6216ls / dev\u8fdb\u884c\u68c0\u6d4b\u3002\n\n\n\n\nroot@ReSpeaker:/# df -h\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                    1.8M    832.0K    960.0K  46% /\n/dev/root                29.0M     29.0M         0 100% /rom\ntmpfs                    61.7M    276.0K     61.5M   0% /tmp\n/dev/mtdblock6            1.8M    832.0K    960.0K  46% /overlay\noverlayfs:/overlay        1.8M    832.0K    960.0K  46% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n/dev/mmcblk0p1            7.4G      2.5M      7.4G   0% /tmp/run/mountd/mmcblk0p1\n\n\n\n\n\n\n\u5c06SD\u5361\u683c\u5f0f\u5316\u4e3a\u4e24\u4e2a\u5206\u533a\uff0c\u4e00\u4e2a\u662fFAT32\uff0c\u53e6\u4e00\u4e2a\u662fEXT4\u3002EXT4\u6587\u4ef6\u7cfb\u7edf\u5c06\u4f5c\u4e3a\u4e00\u4e2a\u5916\u63a5\u7a0b\u5e8f\uff0c\u800cFAT32\u5c06\u4f5c\u4e3a\u6b63\u5e38\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u53ef\u4ee5\u5728ReSpeaker\u548cPC\u4e4b\u95f4\u4f20\u8f93\u6587\u4ef6\u3002\n\n\n\n\n    umount /dev/mmcblk0p1\n    fdisk /dev/mmcblk0\n     ------------------ fdisk ------------------------\n    \nCommand (m for help):o\n    \nCreated a new DOS disklabel\n    \nCommand (m for help):n\n    \nPartition type\n    p   primary (0 primary, 0 extended, 4 free)\n    e   extended (container for logical partitions)\n    \nSelect (default p):p\n    \nPartition number (1-4, default 1):1\n    \nFirst sector (2048-15523839, default 2048):\n    \nLast sector, +sectors or +size{K,M,G,T,P} (2048-15523839, default 15523839): +2G\n    \nCommand (m for help):n\n    \nPartition type\n    p   primary (1 primary, 0 extended, 3 free)\n    e   extended (container for logical partitions)\n    \nSelect (default p):p\n    \nPartition number (1-4, default 2):2\n    \nFirst sector (4196352-15523839, default 4196352):\n    \nLast sector, +sectors or +size{K,M,G,T,P} (4196352-15523839, default 15523839):\n    \nCommand (m for help):w\n    \nThe partition table has been altered.\n    \nCalling i[  292.010000]  mmcblk0: p1 p2\n    \noctl() to re-read partition table.\n    \nSyncing disks.\n     ------------------ end ------------------------\n\n    mkfs.fat /dev/mmcblk0p1\n    mkfs.ext4 /dev/mmcblk0p2\n\n    # reload mtk_sd kernel module\n    rmmod mtk_sd\n    insmod mtk_sd\n\n\n\n\n\n\n\u51c6\u5907\u60a8\u7684\u5916\u90e8\u5b58\u50a8root overlay\u3002\n\n\n\n\nmount /dev/mmcblk0p2 /mnt ; tar -C /overlay -cvf - . | tar -C /mnt -xf - ; umount /mnt\n\n\n\n\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efafstab\u3002\u6b64\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a\u542f\u7528\u6240\u6709\u5206\u533a\u5e76\u5c06'/ mnt / mmcblk0p2'\u5206\u533a\u8bbe\u7f6e\u4e3a'/ overlay'\u5206\u533a\u7684fstab\u6a21\u677f\n\n\n\n\n    block detect \n /etc/config/fstab;\n    sed -i s/option$\n\\t\nenabled$\n\\t\n\\\n0\\\n/option$\n\\t\nenabled$\n\\t\n\\\n1\\\n/ /etc/config/fstab;\n    sed -i s#/mnt/mmcblk0p2#/overlay# /etc/config/fstab;\n    cat /etc/config/fstab;\n\n\n\n\n\n\n\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u5230 overlay.\n\n\n\n\n    root@mylinkit:/# mount /dev/mmcblk0p2 /overlay/\n    root@ReSpeaker:/# df -h\n  Filesystem                Size      Used Available Use% Mounted on\n  rootfs                    1.8M    832.0K    960.0K  46% /\n  /dev/root                29.0M     29.0M         0 100% /rom\n  tmpfs                    61.7M    276.0K     61.5M   0% /tmp\n  /dev/mtdblock6            5.2G     11.8M      4.9G   0% /overlay\n  overlayfs:/overlay        1.8M    832.0K    960.0K  46% /\n  tmpfs                   512.0K         0    512.0K   0% /dev\n  /dev/mmcblk0p2            5.2G     11.8M      4.9G   0% /tmp/run/mountd/mmcblk0p2\n  /dev/mmcblk0p1            2.0G      4.0K      2.0G   0% /tmp/run/mountd/mmcblk0p1\n  /dev/mmcblk0p2            5.2G     11.8M      4.9G   0% /overlay\n\n\n\n\n\n\n\u91cd\u542fReSpeaker\u5e76\u91cd\u65b0\u68c0\u67e5\u3002\u5982\u679cSD\u5361\u81ea\u52a8\u5b89\u88c5\uff0c\u5c31\u5b8c\u6210\u4e86\u3002\u66f4\u591a\u5173\u4e8eextroot\u7684\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n.\n\n\n\n\n5. \u5728ReSpeaker\u4e0a\u5b89\u88c5\u8f6f\u4ef6\n\n\n\u4f7f\u7528SD\u5361\u6269\u5c55\u5b58\u50a8\u540e\uff0c\u6709\u8db3\u591f\u7684\u5b58\u50a8\u7a7a\u95f4\u53ef\u4ee5\u5728ReSpeaker\u4e0a\u5b89\u88c5\u8f6f\u4ef6\u3002\n\n\n\u5b89\u88c5git\n\n\n    opkg update\n    opkg install git git-http\n\n\n\n\n6. \u66f4\u65b0 Python \u5e93\n\n\ngit clone https://github.com/respeaker/respeaker_python_library.git\ncd respeaker_python_library\npython setup.py install\n\n\n\n\n\u4e0eRespeaker\u7684\u7b2c\u4e00\u6b21\u4e92\u52a8 - ReSpeaker, play music!\n\n\n\u4f7f\u7528Bing Speech API\uff0cReSpeaker\u53ef\u4ee5\u5b9e\u65f6\u6253\u5f00\u5e76\u8bc6\u522b\u6765\u81ea\u9ea6\u514b\u98ce\u7684\u97f3\u9891\uff0c\u6216\u4ece\u6587\u4ef6\u8bc6\u522b\u97f3\u9891\u3002\n\n\n\u8981\u4f7f\u7528Bing Speech API\uff0c\u9996\u5148\u5fc5\u987b\u4ece \n\u8fd9\u91cc\n \u83b7\u53d6Microsoft Cognitive Services\u7684\u5bc6\u94a5\uff0c\u5e76\u5c06\u5176\u590d\u5236\u5230BING_KEY =\u201c'\uff0c\u7136\u540e\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u5728playmusic.py\u4e2d\u5e76\u8fd0\u884c\n\n\n//stop mopidy and alexa to avoid USB device occupation\n/etc/init.d/mopidy stop\n/etc/init.d/alexa stop\npython playmusic.py\n\n\n\n\n\n\nimport logging\nimport time\nimport os\nfrom threading import Thread, Event\nfrom respeaker import Microphone\nfrom respeaker.bing_speech_api import BingSpeechAPI\n\n# use madplay to play mp3 file     \nos.system(\nmadplay\n)               \n\n# get a key from https://www.microsoft.com/cognitive-services/en-us/speech-api\nBING_KEY = \n      \n\n\ndef task(quit_event):                                                         \n    mic = Microphone(quit_event=quit_event)                                   \n    bing = BingSpeechAPI(key=BING_KEY)                                        \n\n    while not quit_event.is_set():\n        if mic.wakeup(\nrespeaker\n):        \n            print(\nWake up\n)               \n            data = mic.listen()            \n            try:                      \n                text = bing.recognize(data)\n                if text:           \n                    print(\nRecognized %s\n % text)\n                    if \nplay music\n in text:\n                        print(\nI will play music!\n)\n                        os.system(\nmadplay Tchaikovsky_Concerto_No.1p.mp3\n)\n            except Exception as e:               \n                print(e.message)                 \n\ndef main():                                                              \n    logging.basicConfig(level=logging.DEBUG)                                                           \n    quit_event = Event()        \n    thread = Thread(target=task, args=(quit_event,))\n    thread.start()                          \n    while True:                             \n        try:                                \n            time.sleep(1)                           \n        except KeyboardInterrupt:                   \n            print(\nQuit\n)                           \n            quit_event.set()\n            break        \n    thread.join()                \n\nif __name__ == \n__main__\n:       \n    main()                  \n\n\n\n\n\u5728\"INFO:mic:Start Detecting\" \u51fa\u6765\u4e4b\u540e\uff0c\u5c1d\u8bd5\u8bf4\u201cReSpeaker\u201d\u5524\u9192\u7a0b\u5e8f\uff0c\u5524\u9192\u540e\u8bf4\u201cplaymusic\u201d\u8ba9\u5b83\u64ad\u653e\u97f3\u4e50\u3002\u7136\u540eReSpeaker\u5c06\u4f7f\u7528madplay\u5de5\u5177\u5728\u5f53\u524d\u8def\u5f84\u4e2d\u64ad\u653e\u201cTchaikovsky_Concerto_No.1p.mp3\u201d\n\n\n\n\n\u5982\u679c\u60a8\u770b\u5230\u4ee5\u4e0b\u9519\u8bef\u4ee3\u7801\uff0c\u90a3\u4e48mopidy\u6b63\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u5e76\u4e14\u6b63\u5728\u5360\u7528USB\u8bbe\u5907\u3002\u6240\u4ee5\u5c1d\u8bd5\u8fd0\u884c /etc/init.d/mopidy\uff0c\u505c\u6b62mopidy\uff0c\u7136\u540e\u518d\u91cd\u65b0\u8fd0\u884c\u547d\u4ee4\u3002\n\n\nroot@ReSpeaker:~# python playmusic.py\nUsage: madplay [OPTIONS] FILE [...]\nTry `madplay --help\n for more information.\nException in thread Thread-2:\nTraceback (most recent call last):\nFile \n/usr/lib/python2.7/threading.py\n, line 810, in __bootstrap_inner\n\n\n\n\n\u5e94\u7528\u5b9e\u4f8b\n\n\n\n\n\u6c34\u679c\u94a2\u7434\n\n\n\n\nReSpeaker\u63a7\u5236\u6a21\u5757\u662f\u57fa\u4e8eATmega32u4\u82af\u7247\uff0c\u8be5\u82af\u7247\u5b8c\u5168\u517c\u5bb9Arduino\u9a71\u52a8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ReSpeaker\u4f5c\u4e3a\u5f3a\u5927\u7684Arduino\u5b66\u4e60\u677f\uff0c\u5e76\u505a\u4e86\u8bb8\u591a\u201cArduino\u201d\u5f00\u53d1\u677f\u80fd\u505a\u7684\u4e8b\u60c5\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Arduino IDE\u5bf9\u5176\u8fdb\u884c\u7f16\u7a0b\uff0c\u6765\u5b9e\u73b0\u521b\u610fDIY\u94a2\u7434\uff0c\u8be5\u94a2\u7434\u642d\u914d8\u4e2a\u6a31\u6843\u897f\u7ea2\u67ff\u8fde\u63a5\u5230ReSpeaker\u76848\u4e2a\u89e6\u6478\u4f20\u611f\u5668\u3002\n\n\n\n\n\n\n\n\n\n\n\u5728respeaker\u4e0a\u8f93\u5165 git clone \nhttps://github.com/respeaker/piano.git\n      \u4e0b\u8f7d\u5e93\n\n\n\n\n\n\n\n\n\n\n\u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e2d\u4e0b\u8f7d\nReSpeaker Arduino Library\n\n\n\n\n\n\n\n\n\n\n\u4e0a\u4f20piano.ino\u5230ReSpeaker\u7684Arduino Leonardo\uff08ATmega32U4\uff09\n\n\n\n\n\n\n\n\n\n\n\u5728ReSpeaker\u7684\u4e32\u884c\u63a7\u5236\u53f0\u4e0a\u8fd0\u884cpython piano.py\n\n\n\n\n\n\n\n\n\u5929\u6c14\u4e91\n\n\n\n\n\u5929\u6c14\u4e91\u662f\u5f88\u68d2\u7684\u4e00\u4e2aReSpeaker\u9879\u76ee\u3002\u8fd9\u4e2a\u5f88\u9177\u7684\u521b\u610f\u5c06ReSpeaker\u53d8\u6210\u4e86\u4e00\u4e2a\u5929\u6c14\u4e91\uff0c\u5b83\u80fd\u591f\u663e\u793a\u51fa\u751f\u52a8\u7684\u5149\u7ebf\u548c\u58f0\u97f3\u3002\n\n\n\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\uff0cOpenwrt\u8d1f\u8d23\u4ece\u4e92\u8054\u7f51\u83b7\u53d6\u5b9e\u65f6\u5929\u6c14\u4fe1\u606f\uff0c\u8fdb\u884c\u8bed\u97f3\u4ea4\u4e92\u548c\u97f3\u9891\u8f93\u51fa\uff0c\u800cArduino\u8d1f\u8d23\u63a7\u5236\u5f69\u8272RGB LED\u3002\n\n\n\n\n\u5728respeaker\u4e0a\u8f93\u5165 git clone \nhttps://github.com/jerryyip/WeatherCloud.git\n, \u4e0b\u8f7d\u9879\u76ee\u5e93\u6587\u4ef6\u3002\n\n\n\u70b9\u51fb\u4e0b\u8f7d \nReSpeaker Arduino Library\n \u5230\u60a8\u7684\u7535\u8111\u4e0a\uff0c\u5e76\u5b89\u88c5\u3002\n\n\n\u901a\u8fc7Arduino IDE\u5c06 \npixels_pattern.ino\n \u4e0a\u4f20\u5230respeaker\u3002\n\n\n\n\n\u4ece\u8fd9\u91cc\u83b7\u53d6OpenWeatherMap appid \uff0c\u5e76\u5c06\u5176\u590d\u5236\u5230main.py\u4e2d\u7684appID =\u201c\u201d\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5c06\u60a8\u7684\u57ce\u5e02\u6dfb\u52a0\u5230city =\u201c\u201d\n\n\n\n\n\n\n\u5728\u4f7f\u7528SPI\u4e4b\u524d\u8bf7\u7ec8\u6b62mopidy service\u5728OpenWrt\u4e2d\u7684\u8fdb\u7a0b\uff0crespeaker\u5728\u63a7\u5236\u53f0\u4e0a\u952e\u5165\n/etc/init.d/mopidy stop\n\n\n\n\n\u8fd0\u884cpython main.py \u7136\u540e\u5bf9\u7740\u5b83\u558a \"ReSpeaker, what is the weather like?\"\n\n\n\u6709\u5173\u5982\u4f55\u5236\u4f5c\u5929\u6c14\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n.\n\n\n\n\nReSpeaker Mic Array\uff08ReSpeaker \u9ea6\u514b\u98ce\u9635\u5217\uff09\n\n\n\n\nReSpeaker Mic Array\n\n\nReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u53ef\u4ee5\u5806\u53e0\uff08\u8fde\u63a5\uff09\u5230ReSpeaker Core\u7684\u9876\u90e8\uff0c\u4ee5\u663e\u7740\u63d0\u9ad8\u8bed\u97f3\u4ea4\u4e92\u4f53\u9a8c\u3002\u5b83\u662f\u57fa\u4e8eXMOS\u7684XVSM-2000\u667a\u80fd\u9ea6\u514b\u98ce\u5f00\u53d1\u7684\u3002\u8be5\u677f\u96c6\u6210\u4e867\u4e2aPDM\u9ea6\u514b\u98ce\uff0c\u4ee5\u5e2e\u52a9\u5c06ReSpeaker\u7684\u58f0\u5b66DSP\u6027\u80fd\u63d0\u5347\u5230\u66f4\u9ad8\u7684\u6c34\u5e73\n\n\n\u5173\u4e8e\u8f6f\u4ef6\n\n\n\n\n\u60a8\u53ef\u9875\u9762\u4ee5\u70b9\u51fb\u4e0b\u5217\u6807\u9898\u6765\u8df3\u8f6c\u5230\u5bf9\u5e94\n\n\nReSpeaker Arduino \u5e93\n\n\nReSpeaker Arudino\u5e93\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a\n\n\n\n\n\u652f\u6301\u7535\u5bb9\u5f0f\u89e6\u6478\u611f\u5e94\n\n\n\u5b9e\u73b0\u4e86WS2812 RGB LED\u9a71\u52a8\n\n\n\u6784\u5efa\u4e86\u4eceArduino (ATmega32U4)\u5230\u57fa\u4e8eLinux\u7684OpenWrt (MT7688)\u4e4b\u95f4\u7684USB\u5230\u4e32\u53e3\u548cUSB\u5230SPI\u901a\u9053\u3002                           \n\n\n\n\nReSpeaker Python \u5e93\n\n\nReSpeaker\u662f\u4e00\u4e2a\u652f\u6301\u8bed\u97f3\u4ea4\u4e92\u7684\u5f00\u653e\u9879\u76ee\u3002ReSpeaker python\u5e93\u662f\u4e00\u4e2a\u5f00\u6e90\u7684python\u5e93\uff0c\u7528\u4e8e\u63d0\u4f9b\u8bed\u97f3\u4ea4\u4e92\u7684\u57fa\u672c\u529f\u80fd\u3002\n\u5b83\u4f7f\u7528PocketSphinx\u8fdb\u884c\u5173\u952e\u5b57\u67e5\u627e\uff0c\u5e76\u4f7f\u7528webrtcvad\u8fdb\u884c\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\u3002\n\n\n\u66f4\u591a\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb\u8fd9\u91cc\u67e5\u770b\u6211\u4eec\u7684github\u8d44\u6599\u5e93\n\n\nFAQ\n\n\n\n\nQ1: \u5982\u4f55\u6062\u590d\u51fa\u5382\u8bbe\u7f6e?\n\n\n\n\n\u6253\u5f00\u4e32\u884c\u63a7\u5236\u53f0\u6216ssh\u4f1a\u8bdd\u5e76\u8fd0\u884c firstboot. \n\u66f4\u591a\u7ec6\u8282\u70b9\u51fb\u8fd9\u91cc\n.\n\n\n\n\nQ2: \u5982\u679c\u5347\u7ea7\u5931\u8d25\u4e86\uff0c\u600e\u4e48\u62a2\u6551?\n\n\n\n\n\u5347\u7ea7\u5931\u8d25\u540e\uff0c\u5f53\u91cd\u65b0\u542f\u52a8\u8fdb\u5165openwrt\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u7f51\u7edc\u7ec8\u7aef\uff0cssh\u6216\u4e32\u884c\u63a7\u5236\u53f0\u8bbf\u95ee\u7cfb\u7edf\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u7167\n\n\n\n\nRescue instruction\n \u6307\u4ee4\u8fdb\u884c\u6062\u590d\u3002\n\n\nQ3: ReSpeaker\u627e\u4e0d\u5230\u6211\u7684Wi-Fi\n\n\n\n\n\u8bf7\u5148\u5c1d\u8bd5 \n\u6062\u590d\u51fa\u5382\u8bbe\u7f6e\n \u3002\n\n\nReSpeaker\u4e0d\u652f\u6301Wi-Fi\u9891\u905312\u3002\u786e\u4fdd\u60a8\u7684\u8def\u7531\u5668\u6ca1\u6709\u4f7f\u7528\u8be5\u901a\u9053\u3002.\n\n\n\n\nQ4: \u5982\u4f55\u8fdb\u884cWifi\u914d\u7f6e\n\n\n\n\n\u6211\u4eec\u5efa\u8bae\u60a8\u901a\u8fc7\nWEB-UI\n\u914d\u7f6eWi-Fi \uff0c\u5982\u679c\u65e0\u6cd5\u4f7f\u7528\uff0c\u8bf7\u5728\u63a7\u5236\u53f0\u4e0a\u5c1d\u8bd5\u547d\u4ee4\u884c\u5de5\u5177\nwictl\n \u3002\n\n\n\n\nQ5: \u5982\u4f55\u6539\u53d8BING Speech api \u7684\u8bc6\u522b\u8bed\u8a00\n\n\n\n\n\u5982\u679c\u60a8\u4e0d\u9700\u8981\u66f4\u6539\u5524\u9192\u5b57\uff0c\u53ea\u9700\u5c06text = bing.recognize\uff08data\uff09\u66f4\u6539\u4e3atext = bing.recognize\uff08data\uff0clanguage =\u201czh-CN\u201d\uff09\u5c31\u53ef\u4ee5\u4e86\u3002 \n\u66f4\u591a\u4fe1\u606f\u8bf7\u70b9\u51fb\u8fd9\u91cc\n.\n\n\n\n\nQ6: \u6536\u5230SD\u5361\u8b66\u544a\u6d88\u606f\u201c\u5377\u672a\u6b63\u786e\u5378\u8f7d\u3002\u67d0\u4e9b\u6570\u636e\u53ef\u80fd\u5df2\u635f\u574f\u3002\u8bf7\u8fd0\u884cfsck\u201d\n\n\n\n\n\u5982\u679cSD\u5361\u4e0a\u7684\u6587\u4ef6\u6b63\u5e38\uff0c\u8bf7\u5ffd\u7565\u5b83\u3002\u5426\u5219\uff0c\u5c1d\u8bd5\u4f7f\u7528\nsd\u5361\u683c\u5f0f\u5316\u7a0b\u5e8f\u8fdb\u884c\u683c\u5f0f\u5316\n.\n\n\n\n\nQ7: \u9519\u8bef\u63d0\u793a \u201cBad flash from Arduino\u201d\n\n\n\n\n\u6309\u7167\u4e0b\u9762\u4ee3\u7801\uff0c\u5728openwrt\u4e2d\u91cd\u65b0\u70e7\u5199 bootloade\u3002\n\n\n\n\n/etc/init.d/mopidy stop  # stop mopidy if it\ns running, mopidy-hallo plugin will use SPI\n/etc/init.d/alexa stop      # stop alexa if it\ns running\nmt7688_pinmux set ephy gpio\ncd /etc/arduino\navrdude -c linuxgpio -p m32u4 -e -U lfuse:w:0xFF:m -U hfuse:w:0xD8:m -U efuse:w:0xCB:m  -U flash:w:Caterina-ReSpeaker.hex -u -U lock:w:0xEF:m\n\n\n\n\nQ8: \u5fd8\u8bb0\u4e86WebUI\u7684\u5bc6\u7801\n\n\n\n\n\u91cd\u7f6e juci \u5bc6\u7801\n\n\n\n\norangectl passwd root 12345678  //replace 12345678 with the password you want to set\n\n\n\n\nQ9: \u5982\u4f55\u652f\u6301\u8c37\u6b4c\u8bed\u97f3\u6216\u5176\u4ed6Speach to Text\uff08STT\uff09\u5f15\u64ce?\n\n\n\n\n\u6309\u7167\n\u6307\u5357\n\u5b89\u88c5speech_recognition\u5e93\n\n\n\n\nQ10: \u8fd0\u884cAlexa \u9519\u8bef\uff0c\u63d0\u793a\"IOError: [Errno -9998] Invalid number of channels\"\n\n\n\n\n\u8fd8\u6709\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6216alexa\u5b9e\u4f8b\u4f7f\u7528\u97f3\u9891\u8f93\u5165\u8bbe\u5907\u3002\u8fd0\u884c/etc/init.d/alexa stop\u548c/etc/init.d/mopidy stop \u505c\u6b62\u5b83\u4eec\u3002\u8981\u7981\u7528mopidy\u542f\u52a8\uff0c\u8bf7\u8fd0\u884c/etc/init.d/mopidy disable\u3002\n\n\n\n\nQ11: \u65e0\u6cd5\u8fd0\u884cpython playmusic.py\n\n\n\n\n\u5e94\u8be5\u662fmopidy\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u5e76\u4e14\u6b63\u5728\u4f7f\u7528USB\u8bbe\u5907\u3002\u5c1d\u8bd5\u8fd0\u884c/etc/init.d/mopidy stop, \u505c\u6b62mopidy\u5e76\u518d\u6b21\u8fd0\u884c\u60a8\u7684\u547d\u4ee4\u3002\n\n\n\n\nQ12: \u6ca1\u6709RPC\u8fde\u63a5\n\n\n\n\n\u60a8\u9700\u8981\u91cd\u65b0\u5237\u56fa\u4ef6\uff0c\u70b9\u51fb\u67e5\u770b \n\u6307\u5357\n\n\n\n\nQ13: SFTP \n FTP\n\n\n\n\n\u6211\u4eec\u6ca1\u6709FTP\uff0c\u53ea\u6709SFTP\u3002\n\n\n\n\nQ14: \u4e32\u53e3\u63a7\u5236\u53f0\u88ab\u9501\u5b9a\n\n\n\n\n\u5c1d\u8bd5\u66f4\u65b0 \narduino code\n\u3002\n\n\n\n\nQ15:\u5982\u4f55\u7981\u7528'ap'\u6a21\u5f0f\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u5728vi / etc / config / wireless \u4e2d\u4fee\u6539\u5982\u4e0b 'ssid' flag of the 'ap' interface to '' \u3002\u4e5f\u5c31\u662f\u5c06'ap'\u6539\u4e3a''\u3002\u7136\u540e\u5c31\u4f1a\u9690\u85cfap\u3002\n\n\n\n\nQ16: I2C\u58f0\u5361\u95ee\u9898\n\n\n\n\n\u6211\u4eec\u9700\u8981\u68c0\u67e5\u7f16\u89e3\u7801\u5668\u9a71\u52a8\u7a0b\u5e8f\u517c\u5bb9\u540d\u4ee5\u53ca\u7f16\u89e3\u7801\u5668i2c\u5730\u5740 \u7136\u540e\u91cd\u5efaimage\u56fa\u4ef6\u3002\n\n\n\n\nQ17: \u5373\u4f7f\u6ca1\u6709\u58f0\u97f3\uff0cRespeaker\u4e5f\u7ecf\u5e38\u88ab\u5524\u9192\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0keyword.txt\u4e2d\u7684\u9608\u503c\u6765\u51cf\u5c11\u8bef\u8bc6\u522b\u7387\uff0c\u4f46\u4e5f\u4f1a\u964d\u4f4e\u654f\u611f\u5ea6\u3002\n\n\n\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u60a8\u7684\u58f0\u97f3\u4e0e\u5f53\u524d\u7684\u58f0\u5b66\u6a21\u5757\u8fdb\u884c\u5339\u914d\uff0c\u66f4\u591a\u7684\u7ec6\u8282\u53c2\u8003\u8fd9\u91cc \nhttp://cmusphinx.sourceforge.net/wiki/tutorialadapt\n\u3002\n\n\n\u8fd9\u79cd\u65b9\u6cd5\u5c06\u6709\u6548\u63d0\u9ad8\u4e2a\u4eba\u5173\u952e\u5b57\u8bc6\u522b\u7387\uff0c\u4f46\u53ef\u80fd\u8ba9\u5176\u4ed6\u4eba\u4e0d\u88ab\u8bc6\u522b\u3002\n\n\n\n\nQ18: \u5982\u4f55\u63a7\u5236Respeaker\u7684GPIO\u5f15\u811a\uff1f\n\n\n\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4ee3\u7801 \nhttps://github.com/respeaker/respeaker_python_library/blob/master/respeaker/gpio.py\n\n\n\u4ee5\u53ca\u7528\u8fd9\u91cc\u7684\u4f8b\u7a0b\u6765\u901a\u8fc7GPIO\u6a21\u62dfSPI \nhttps://github.com/respeaker/respeaker_python_library/blob/master/respeaker/spi.py\n\n\n\n\nQ19: \u5982\u4f55\u6539\u53d8\u5524\u9192\u8bcd\uff1f\n\n\n\n\n\n\n\u5728respeaker\u7684 /usr/lib/python2.7/site-packages/respeaker-0.6.0-py2.7.egg/respeaker/pocketsphinx-data  \u76ee\u5f55\u4e0b\u627e\u5230\u5e76\u6253\u5f00\nkeywords.txt\n\n\nrespeaker /1e-30/\nalexa /1e-30/\nplay music /1e-40/\n\n\n\n\nrespeaker \u662f\u5173\u952e\u8bcd, 1e-30 \u662f\u5176\u9608\u503c\u3002\u4e3a\u4e86\u63d0\u9ad8\u654f\u611f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u964d\u4f4e\u9608\u503c\uff0c\u4f8b\u59821e-20\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u63d0\u9ad8\u7075\u654f\u5ea6\u800c\u964d\u4f4e\u9608\u503c\u540c\u65f6\u4f1a\u589e\u52a0\u9519\u8bef\u63a5\u53d7\u7387\u3002\n\n\n\n\n\n\n\u5982\u679c\u8981\u6dfb\u52a0\u65b0\u7684\u5173\u952e\u5b57\uff0c\u5e94\u8be5\u9996\u5148\u5c06\u5173\u952e\u5b57\u6dfb\u52a0\u5230 \ndictionary.txt\n \u3002dictionary.txt \u91cc\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a\n\n\n```\nrespeaker   R IY S P IY K ER\nalexa   AH L EH K S AH\nplay    P L EY\nmusic   M Y UW Z IH K\n```\n\n\u6bcf\u884c\u7684\u7b2c\u4e00\u90e8\u5206\u662f\u5173\u952e\u8bcd\u7684\u540d\u5b57 (respeaker, alexa or music), \u7b2c\u4e8c\u90e8\u5206\u662f\u5b83\u7684\u97f3\u7d20\u3002\u4f60\u53ef\u4ee5\u5728 [\u8fd9\u91cc](https://github.com/respeaker/pocketsphinx-data/blob/master/dictionary.txt) \u7684\u5b57\u5178\u4e2d\u627e\u5230\u5355\u8bcd\u3002\n\n\n\n\n\n\n\n\n\n\u7136\u540e\u66f4\u6539\u4ee3\u7801\uff1a .\n\n\nif mic.wakeup(\nrespeaker\n):\n\n\n\n\n\n\n\n\n\u5c0f\u7ed3:\u5982\u679c\u60a8\u60f3\u8981\u6dfb\u52a0\u5173\u952e\u8bcd\uff0c\u6309\u7167\u4e0b\u9762\u76843\u6b65\u3002\u6bd4\u5982\u6dfb\u52a0good morning  \n\n\n-  1\u3001\u5728[\u5b98\u65b9\u5b57\u5178](https://github.com/respeaker/pocketsphinx-data/blob/master/dictionary.txt)\u4e2d\u67e5\u627e\u5e76\u6dfb\u52a0\u5173\u952e\u8bcd\uff0c\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u97f3\u7d20\u3002\n-  2\u3001\u5728keyword.txt\u4e2d\u7ed9 good morning\u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c\n-  3\u3001\u5728\u60a8\u7684python\u4ee3\u7801\u4e2d\u6dfb\u52a0\u8c03\u7528if mic.wakeup(\ngood morning\n):\n\n\n\n\n\nQ20: \u901a\u8fc7\u51fa\u5382\u56fa\u4ef6\u6062\u590d\u7cfb\u7edf\n\n\n\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u65e0\u6cd5\u901a\u8fc7\u7f51\u7edc\u66f4\u65b0\u60a8\u7684ReSpeaker\u6216\u65e0\u6cd5\u8bbf\u95eehttp://192.168.100.1/home.html \uff0c\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n \u3002\u8981\u5c06\u7535\u8111\u4e0a\u6700\u65b0\u7684\u56fa\u4ef6\u4e0b\u8f7d\u5230SD\u5361\u4e0a\uff0c\u5e76\u5c06SD\u5361\u63d2\u5165ReSpeaker\u3002\n\n\n\u8fde\u63a5\u5230respeaker\u7684 \n\u4e32\u884c\u63a7\u5236\u53f0\n \uff0c\u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\u884c\u6765\u66f4\u65b0\u56fa\u4ef6\uff1a\n\n\nmount /dev/mmcblk0p1 /mnt\ncd /mnt\nsysupgrade -n -F ramips-openwrt-latest-LinkIt7688-squashfs-sysupgrade.bin\n\n\nReSpeaker\u5b89\u88c5\u56fa\u4ef6\u548c\u91cd\u542f\u5927\u7ea6\u9700\u89813\u5206\u949f\uff0c\u66f4\u65b0\u65f6**\u8bf7\u52ff\u5173\u95ed** ReSpeaker\u3002\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Eagle\u539f\u7406\u56fe]\n \nReSpeaker Core v1.0 SCH\n\n\n[Eagle PCB\u56fe]\n \nReSpeaker Core v1.0 BRD\n\n\n[PDF \u539f\u7406\u56fe]\n \nReSpeaker Core v1.0 Schematic(pdf)\n\n\n[PDF PCB\u5e95\u677f\u56fe]\n \nReSpeaker Core v1.0 PCB bottom(pdf)\n\n\n[PDF PCB\u9876\u677f\u56fe]\n \nReSpeaker Core v1.0 PCB top(pdf)", 
            "title": "Respeaker_Core"
        }, 
        {
            "location": "/Respeaker_Core/#_1", 
            "text": "\u89e3\u653e\u60a8\u7684\u53cc\u624b\uff1a\u79bb\u7ebf\u6216\u5728\u7ebf\u6a21\u5f0f\u4e0b\u7684\u8bed\u97f3\u8bc6\u522b  \u65e0\u7ebf\u97f3\u9891\u6d41\u4f20\u8f93\uff1a \u901a\u8fc7Airplay/DLNA\u4f20\u8f93\u97f3\u9891\u6d41  \u6613\u4e8e\u4f7f\u7528\u7684SDK\uff1a\u9002\u7528\u4e8ePython\u548cC / C ++\u5f00\u53d1\u4eba\u5458  \u65e5\u76ca\u589e\u957f\u7684\u529f\u80fd\uff1a\u4e0b\u8f7d\u548c\u63d2\u4ef6\u4e0d\u65ad\u4e30\u5bcc\u5176\u529f\u80fd\u4e0e\u5e94\u7528  \u5373\u63d2\u5373\u7528\u63d2\u4ef6\uff1a\u53ef\u6269\u5c55\u4f7f\u7528\u9ea6\u514b\u98ce\u9635\u5217\uff0cGrove\u6269\u5c55\u677f\uff0cGrove\u6a21\u5757  \u514d\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\uff1a\u53ef\u57fa\u4e8eWeb\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u6240\u6709\u529f\u80fd\u3001\u53c2\u6570\uff08\u6682\u65f6\u4e0d\u53ef\u7528\uff09", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Respeaker_Core/#_2", 
            "text": "", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Respeaker_Core/#_3", 
            "text": "AI7688 Wi-Fi \u6a21\u5757:   \u64cd\u4f5c\u7cfb\u7edf: \u57fa\u4e8eGNU/Linux \u7684 OpenWrt  wifi\u652f\u6301: \u652f\u6301802.11b/g and HT 802.11n \u6a21\u5f0f  \u6269\u5c55\u6027:\u4e24\u6392\u6269\u5c55\u63a5\u53e3\uff0c\u62e5\u6709 I2C, GPIO \u548c USB 2.0  \u63a5\u53e3: 3.5mm AUX \u97f3\u9891\u63a5\u53e3, Micro USB \u548c SD card \u5361\u69fd     ATMega32U4 \u5904\u7406\u5668:   Linnux\u5e73\u53f0\u4e0b\u7684 USB CDC \u8f6f\u4e32\u53e3  12\u4e2a\u53ef\u7f16\u7a0bLED \u6307\u793a\u706f  8 \u4e2a\u7247\u4e0a\u89e6\u70b9\u63a5\u53e3     Codec WM8960:   DAC SNR 98dB (\u2018A\u2019 weighted), THD -84dB at 48kHz, 3.3V    ADC SNR 94dB (\u2018A\u2019 weighted), THD -82dB at 48kHz, 3.3V    Stereo Class D Speaker Driver with 87% efficiency (1W output)    On-chip Headphone Driver    40mW output power into 16\u03a9 at 3.3V    THD -75dB at 20mW, SNR 90dB with 16\u03a9 load    On-chip PLL provides flexible clocking scheme    Sample rates: 8, 11.025, 12, 16, 22.05, 24, 32, 44.1, 48 kHz     \u4f9b\u7535\u7535\u538b: 5V DC      \u5c3a\u5bf8: \u76f4\u5f84 70mm       \u91cd\u91cf: 17g", 
            "title": "\u6280\u672f\u89c4\u683c"
        }, 
        {
            "location": "/Respeaker_Core/#_4", 
            "text": "GPIO0 / I2S_ADC\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0cADC\u4fe1\u53f7  GPIO1 / I2S_DAC\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0cDAC\u4fe1\u53f7  GPIO2 / I2S_LRCLK\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0c\u5de6/\u53f3\u901a\u9053\u91c7\u6837\u65f6\u949f  GPIO3 / I2S_BCLK\uff1a\u9a71\u52a8\u5916\u90e8\u7f16\u7801\u5668/\u89e3\u7801\u5668\uff0c\u4f4d\u65f6\u949f  MCLK_OUT\uff1a\u5916\u90e8\u8bbe\u5907\u7684\u4e3b\u65f6\u949f  HP_SEL\uff1a\u8033\u673a\u9891\u9053\u9009\u62e9\u3002\u5982\u679c\u4f7f\u7528ReSpeaker Mic Array\u8f93\u51fa\u97f3\u9891\uff0c\u8bf7\u5c06HP_SEL\u8bbe\u7f6e\u4e3a\u9ad8\u7535\u5e73  HP_L\uff1aReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u7684\u6a21\u62df\u97f3\u9891\u5de6\u58f0\u9053  HP_R\uff1aReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u7684\u6a21\u62df\u97f3\u9891\u53f3\u58f0\u9053  AGND\uff1a\u97f3\u9891\u6a21\u62df\u5730", 
            "title": "\u7ba1\u811a\u56fe"
        }, 
        {
            "location": "/Respeaker_Core/#_5", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Respeaker_Core/#respeaker_core", 
            "text": "", 
            "title": "\u7b2c\u4e00\u6b21\u62ff\u5230Respeaker_Core\u4ece\u54ea\u91cc\u5f00\u59cb\uff1f"
        }, 
        {
            "location": "/Respeaker_Core/#1", 
            "text": "ReSpeaker\u6838\u5fc3\u677f  PC\u6216Mac  Wi-Fi\u7f51\u7edc  SD\u5361", 
            "title": "1. \u51c6\u5907"
        }, 
        {
            "location": "/Respeaker_Core/#2", 
            "text": "\u5bf9\u4e8ewindow, \u63a8\u8350\u4f7f\u7528  putty \u3002   \u901a\u8fc7USB\u5c06ReSpeaker\u8fde\u63a5\u5230PC\uff0c\u52fe\u9009COM\u8bbe\u5907\u7ba1\u7406\u5668\u3002\u8fd9\u91cc\u6211\u4eec\u7684ReSpeaker COM\u7aef\u53e3\u662fCOM31\u3002     \u5728\u8fde\u63a5\u7c7b\u578b\u4e0b\u9009\u62e9Serial ,\u5728Serial line\u4e2d\uff0c\u8f93\u5165\u60a8\u7684ReSpeaker\u7684COM\u7aef\u53e3\u53f7\uff0c\u5728\u6ce2\u7279\u7387\u9009\u9879\u4e2d\uff0c\u952e\u516557600\u3002     \u70b9\u51fb Open.\u7136\u540e\u60a8\u5c06\u770b\u5230\u4e00\u4e2a\u9ed1\u8272\u7684\u5c4f\u5e55\u754c\u9762\uff0c\u70b9\u51fb\u56de\u8f66\u952e\u3002      \u5bf9\u4e8e Linux/Mac    \u901a\u8fc7USB\u5c06ReSpeaker\u8fde\u63a5\u5230PC   \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u4f1a\u8bdd  \u5728\u7ec8\u7aef\u4e2d\u952e\u5165ls /dev/tty.usb*  \u6211\u4eec\u5e94\u8be5\u770b\u5230\u8bbe\u5907\u5217\u8868\u3002\u5bfb\u627e\u7c7b\u4f3ctty.usbmodemXXXXX\u7684\u4e1c\u897f\uff0c\u5176\u4e2dXXXXX\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u6807\u8bc6\u7b26\u3002\u8fd9\u662f\u7528\u4e8e\u8bbf\u95ee\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u4e32\u884c\u8bbe\u5907\u3002\u7136\u540e\u4f7f\u7528\u5c4f\u5e55\u5b9e\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u4e32\u53e3\uff0c\u5e76\u5c06\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a57600\uff0c\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7cfb\u7edf\u63a7\u5236\u53f0\u7684\u6ce2\u7279\u7387\u4e3a57600   $ ls /dev/tty.usb*\n/dev/tty.usbmodem14221\n$ screen /dev/tty.usbmodem14221 57600", 
            "title": "2. \u8fde\u63a5\u5230\u4e32\u884c\u63a7\u5236\u53f0"
        }, 
        {
            "location": "/Respeaker_Core/#3-wi-fi", 
            "text": "ReSpeaker\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u4e2d\u7ee7\u6a21\u5f0f\uff0c\u60a8\u5fc5\u987b\u5c06\u5176\u8fde\u63a5\u5230\u73b0\u6709\u7684\u65e0\u7ebfwifi\u7f51\u7edc\uff0c\u7136\u540e\u624d\u80fd\u4f7f\u7528Internet\u8fdb\u884c\u8bed\u97f3\u8bc6\u522b\u3002  \u5f53\u60a8\u9996\u6b21\u63a5\u901aReSpeaker\u7535\u6e90\u65f6\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cReSpeakerXXXXXX\u201d\u7684Wi-Fi\u7f51\u7edc\u3002\u8fd9\u91cc\u201cXXXXXX\u201d\u662f\u60a8\u7684ReSpeaker MAC\u5730\u5740\u7684\u6700\u540e6\u4f4d\u3002\u5c06\u60a8\u7684\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u6b64\u7f51\u7edc\u3002    Note  \u5982\u679c\u201cReSpeakerXXXXXX\u201d\u672a\u51fa\u73b0\uff0c\u4f46\u627e\u5230\u201cLinkIt_Smart_7688_XXXXXX\u201d\u3002\u8bf7\u70b9\u51fb  \u8fd9\u91cc .   \u83b7\u53d6IP\u5730\u5740\u540e\uff0c\u6253\u5f00Web\u6d4f\u89c8\u5668\uff0c\u7136\u540e\u5728\u5730\u5740\u680f\u4e2d\u8f93\u5165192.168.100.1\u3002\u51e0\u79d2\u949f\u540e\uff0c\u4f1a\u51fa\u73b0\u4e0b\u56fe\u6240\u793a\u7f51\u9875\uff0c\u9700\u8981\u60a8\u8f93\u5165\u73b0\u6709Wi-Fi\u7f51\u7edc\u7684ssid\u548c\u5bc6\u7801\u3002   \u9009\u62e9\u8981\u8fde\u63a5\u7684Wi-Fi\u5e76\u8f93\u5165\u5bc6\u7801\u3002\u5f53\u60a8\u6309OK\u6309\u94ae\u65f6\uff0cReSpeaker\u5c06\u52a0\u5165\u6307\u5b9a\u7684\u7f51\u7edc\u3002  \u73b0\u5728\u60a8\u7684ReSpeaker\u80fd\u591f\u8bbf\u95ee\u4e92\u8054\u7f51\u3002  \u5982\u679c\u60a8\u6ca1\u6709\u5f39\u51fawifi\u767b\u9646\u9875\u9762\uff0c\u53ef\u4ee5\u4f7f\u7528putty\u4e32\u53e3\u6a21\u5f0f\u4e0b\u8fde\u63a5Respeaker_Core, \u5e76\u4e14\u5728putty\u4e2d\u4f7f\u7528wictl\u626b\u63cfwifi\u5e76\u8fde\u63a5  root@mylinkit:~# wictl\n0, SEEED-MKT\n1, Xiaomi_Youth\n2, ChinaNet-Z5C4\n3, STU-EE\n4, EMBEST_WIFI\n5, SEEED-MKT\n6, nobody\n7, SEEED-MKT\n8, se.VPN\n9, Moovent_HK_2G\n10, LinkIt_Smart_7688_1D917A\n11, SEEED-MKT\n12, SEEED-MKT\n13, zhongrixing\nPlease choose your wifi: 8\nPlease input the wifi password: 88888888\nudhcpc (v1.23.2) started\nSending discover...\nSending discover...\nSending select for 192.168.199.153...\nLease of 192.168.199.153 obtained, lease time 43200\nudhcpc: ifconfig apcli0 192.168.199.153 netmask 255.255.255.0 broadcast 192.168.199.255\nudhcpc: setting default routers: 192.168.199.1\nsuccess\nroot@mylinkit:~#  !!!\u6ce8\u610f\n    \u5982\u679c\u60a8\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u8fde\u63a5Wifi\uff0c\u8bf7\u901a\u8fc7\u8f93\u5165firstboot\u547d\u4ee4\u8fdb\u884c\u51fa\u5382\u8bbe\u7f6e\u3002  \u542f\u7528Wifi\u529f\u80fd\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528SSH\u6a21\u5f0f\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u8fde\u63a5Respeaker\u3002\u6211\u4eec\u53ef\u4ee5\u4ecehttp://192.168.100.1/#!/overview WAN IP\u83b7\u53d6Respeaker IP\u5730\u5740\u3002\u5bc6\u7801\u662froot\u3002  ssh root@ssh *.*.*.*", 
            "title": "3. \u8bbe\u7f6e Wi-Fi"
        }, 
        {
            "location": "/Respeaker_Core/#4-sd", 
            "text": "\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5d4c\u5165\u5f0f\u8bbe\u5907\u53ef\u4ee5\u4f7f\u7528\u6709\u9650\u7684\u5b58\u50a8\u7a7a\u95f4\uff08ReSpeaker\u4ec5\u4e3a\u7528\u6237\u63d0\u4f9b\u4e865M\u7684\u677f\u8f7dFlash\u5b58\u50a8\u7a7a\u95f4\uff09\u3002\u4e3a\u5e94\u7528\u6216\u8005\u6570\u636e\u63d0\u4f9b\u66f4\u5927\u7684\u5b58\u50a8\u7a7a\u95f4\u53ef\u4ee5\u6fc0\u53d1ReSpeaker\u7684\u6f5c\u529b\uff0c\u6240\u4ee5\u4f7f\u7528SD\u5361\u6269\u5c55\u5b58\u50a8\u4f5c\u4e3aextroot\u662f\u4e00\u4e2a\u770b\u8d77\u6765\u8fd8\u4e0d\u9519\u7684\u9009\u62e9\u54df\u3002  \u901a\u8fc7\u4f7f\u7528extroot\uff0c\u6dfb\u52a0\u5916\u90e8SD\u5361\u5b58\u50a8\u8bbe\u5907\u6765\u5b9e\u73b0\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u5b58\u50a8\u5bb9\u91cf\u7684\u6269\u5c55\u3002\u5728\u5f15\u5bfc\u8fc7\u7a0b\u4e2d\uff0c\u5916\u90e8\u5b58\u50a8\u7a7a\u95f4\u4f5c\u4e3a\u6839\u6587\u4ef6\u7cfb\u7edf\u542f\u52a8\uff0c\u6216\u8005\u4ee5\u539f\u59cb\u6587\u4ef6\u7cfb\u7edf\u7684\u8986\u76d6\u914d\u7f6e\u8fdb\u884c\u542f\u52a8\u3002   \u786e\u4fdd\u60a8\u7684SD\u5361\u5df2\u63d2\u5165ReSpeaker\uff0c\u5e76\u4e14/ dev / mmcblk0p1\u53ef\u4ee5\u901a\u8fc7df -h\u6216ls / dev\u8fdb\u884c\u68c0\u6d4b\u3002   root@ReSpeaker:/# df -h\nFilesystem                Size      Used Available Use% Mounted on\nrootfs                    1.8M    832.0K    960.0K  46% /\n/dev/root                29.0M     29.0M         0 100% /rom\ntmpfs                    61.7M    276.0K     61.5M   0% /tmp\n/dev/mtdblock6            1.8M    832.0K    960.0K  46% /overlay\noverlayfs:/overlay        1.8M    832.0K    960.0K  46% /\ntmpfs                   512.0K         0    512.0K   0% /dev\n/dev/mmcblk0p1            7.4G      2.5M      7.4G   0% /tmp/run/mountd/mmcblk0p1   \u5c06SD\u5361\u683c\u5f0f\u5316\u4e3a\u4e24\u4e2a\u5206\u533a\uff0c\u4e00\u4e2a\u662fFAT32\uff0c\u53e6\u4e00\u4e2a\u662fEXT4\u3002EXT4\u6587\u4ef6\u7cfb\u7edf\u5c06\u4f5c\u4e3a\u4e00\u4e2a\u5916\u63a5\u7a0b\u5e8f\uff0c\u800cFAT32\u5c06\u4f5c\u4e3a\u6b63\u5e38\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u53ef\u4ee5\u5728ReSpeaker\u548cPC\u4e4b\u95f4\u4f20\u8f93\u6587\u4ef6\u3002       umount /dev/mmcblk0p1\n    fdisk /dev/mmcblk0\n     ------------------ fdisk ------------------------\n     Command (m for help):o\n     Created a new DOS disklabel\n     Command (m for help):n\n     Partition type\n    p   primary (0 primary, 0 extended, 4 free)\n    e   extended (container for logical partitions)\n     Select (default p):p\n     Partition number (1-4, default 1):1\n     First sector (2048-15523839, default 2048):\n     Last sector, +sectors or +size{K,M,G,T,P} (2048-15523839, default 15523839): +2G\n     Command (m for help):n\n     Partition type\n    p   primary (1 primary, 0 extended, 3 free)\n    e   extended (container for logical partitions)\n     Select (default p):p\n     Partition number (1-4, default 2):2\n     First sector (4196352-15523839, default 4196352):\n     Last sector, +sectors or +size{K,M,G,T,P} (4196352-15523839, default 15523839):\n     Command (m for help):w\n     The partition table has been altered.\n     Calling i[  292.010000]  mmcblk0: p1 p2\n     octl() to re-read partition table.\n     Syncing disks.\n     ------------------ end ------------------------\n\n    mkfs.fat /dev/mmcblk0p1\n    mkfs.ext4 /dev/mmcblk0p2\n\n    # reload mtk_sd kernel module\n    rmmod mtk_sd\n    insmod mtk_sd   \u51c6\u5907\u60a8\u7684\u5916\u90e8\u5b58\u50a8root overlay\u3002   mount /dev/mmcblk0p2 /mnt ; tar -C /overlay -cvf - . | tar -C /mnt -xf - ; umount /mnt   \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efafstab\u3002\u6b64\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a\u542f\u7528\u6240\u6709\u5206\u533a\u5e76\u5c06'/ mnt / mmcblk0p2'\u5206\u533a\u8bbe\u7f6e\u4e3a'/ overlay'\u5206\u533a\u7684fstab\u6a21\u677f       block detect   /etc/config/fstab;\n    sed -i s/option$ \\t enabled$ \\t \\ 0\\ /option$ \\t enabled$ \\t \\ 1\\ / /etc/config/fstab;\n    sed -i s#/mnt/mmcblk0p2#/overlay# /etc/config/fstab;\n    cat /etc/config/fstab;   \u68c0\u67e5\u662f\u5426\u5b89\u88c5\u5230 overlay.       root@mylinkit:/# mount /dev/mmcblk0p2 /overlay/\n    root@ReSpeaker:/# df -h\n  Filesystem                Size      Used Available Use% Mounted on\n  rootfs                    1.8M    832.0K    960.0K  46% /\n  /dev/root                29.0M     29.0M         0 100% /rom\n  tmpfs                    61.7M    276.0K     61.5M   0% /tmp\n  /dev/mtdblock6            5.2G     11.8M      4.9G   0% /overlay\n  overlayfs:/overlay        1.8M    832.0K    960.0K  46% /\n  tmpfs                   512.0K         0    512.0K   0% /dev\n  /dev/mmcblk0p2            5.2G     11.8M      4.9G   0% /tmp/run/mountd/mmcblk0p2\n  /dev/mmcblk0p1            2.0G      4.0K      2.0G   0% /tmp/run/mountd/mmcblk0p1\n  /dev/mmcblk0p2            5.2G     11.8M      4.9G   0% /overlay   \u91cd\u542fReSpeaker\u5e76\u91cd\u65b0\u68c0\u67e5\u3002\u5982\u679cSD\u5361\u81ea\u52a8\u5b89\u88c5\uff0c\u5c31\u5b8c\u6210\u4e86\u3002\u66f4\u591a\u5173\u4e8eextroot\u7684\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc .", 
            "title": "4. \u4f7f\u7528SD\u5361\u6765\u6269\u5c55\u5b58\u50a8"
        }, 
        {
            "location": "/Respeaker_Core/#5-respeaker", 
            "text": "\u4f7f\u7528SD\u5361\u6269\u5c55\u5b58\u50a8\u540e\uff0c\u6709\u8db3\u591f\u7684\u5b58\u50a8\u7a7a\u95f4\u53ef\u4ee5\u5728ReSpeaker\u4e0a\u5b89\u88c5\u8f6f\u4ef6\u3002  \u5b89\u88c5git      opkg update\n    opkg install git git-http", 
            "title": "5. \u5728ReSpeaker\u4e0a\u5b89\u88c5\u8f6f\u4ef6"
        }, 
        {
            "location": "/Respeaker_Core/#6-python", 
            "text": "git clone https://github.com/respeaker/respeaker_python_library.git\ncd respeaker_python_library\npython setup.py install", 
            "title": "6. \u66f4\u65b0 Python \u5e93"
        }, 
        {
            "location": "/Respeaker_Core/#respeaker-respeaker-play-music", 
            "text": "\u4f7f\u7528Bing Speech API\uff0cReSpeaker\u53ef\u4ee5\u5b9e\u65f6\u6253\u5f00\u5e76\u8bc6\u522b\u6765\u81ea\u9ea6\u514b\u98ce\u7684\u97f3\u9891\uff0c\u6216\u4ece\u6587\u4ef6\u8bc6\u522b\u97f3\u9891\u3002  \u8981\u4f7f\u7528Bing Speech API\uff0c\u9996\u5148\u5fc5\u987b\u4ece  \u8fd9\u91cc  \u83b7\u53d6Microsoft Cognitive Services\u7684\u5bc6\u94a5\uff0c\u5e76\u5c06\u5176\u590d\u5236\u5230BING_KEY =\u201c'\uff0c\u7136\u540e\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u5728playmusic.py\u4e2d\u5e76\u8fd0\u884c  //stop mopidy and alexa to avoid USB device occupation\n/etc/init.d/mopidy stop\n/etc/init.d/alexa stop\npython playmusic.py   import logging\nimport time\nimport os\nfrom threading import Thread, Event\nfrom respeaker import Microphone\nfrom respeaker.bing_speech_api import BingSpeechAPI\n\n# use madplay to play mp3 file     \nos.system( madplay )               \n\n# get a key from https://www.microsoft.com/cognitive-services/en-us/speech-api\nBING_KEY =        \n\n\ndef task(quit_event):                                                         \n    mic = Microphone(quit_event=quit_event)                                   \n    bing = BingSpeechAPI(key=BING_KEY)                                        \n\n    while not quit_event.is_set():\n        if mic.wakeup( respeaker ):        \n            print( Wake up )               \n            data = mic.listen()            \n            try:                      \n                text = bing.recognize(data)\n                if text:           \n                    print( Recognized %s  % text)\n                    if  play music  in text:\n                        print( I will play music! )\n                        os.system( madplay Tchaikovsky_Concerto_No.1p.mp3 )\n            except Exception as e:               \n                print(e.message)                 \n\ndef main():                                                              \n    logging.basicConfig(level=logging.DEBUG)                                                           \n    quit_event = Event()        \n    thread = Thread(target=task, args=(quit_event,))\n    thread.start()                          \n    while True:                             \n        try:                                \n            time.sleep(1)                           \n        except KeyboardInterrupt:                   \n            print( Quit )                           \n            quit_event.set()\n            break        \n    thread.join()                \n\nif __name__ ==  __main__ :       \n    main()                    \u5728\"INFO:mic:Start Detecting\" \u51fa\u6765\u4e4b\u540e\uff0c\u5c1d\u8bd5\u8bf4\u201cReSpeaker\u201d\u5524\u9192\u7a0b\u5e8f\uff0c\u5524\u9192\u540e\u8bf4\u201cplaymusic\u201d\u8ba9\u5b83\u64ad\u653e\u97f3\u4e50\u3002\u7136\u540eReSpeaker\u5c06\u4f7f\u7528madplay\u5de5\u5177\u5728\u5f53\u524d\u8def\u5f84\u4e2d\u64ad\u653e\u201cTchaikovsky_Concerto_No.1p.mp3\u201d   \u5982\u679c\u60a8\u770b\u5230\u4ee5\u4e0b\u9519\u8bef\u4ee3\u7801\uff0c\u90a3\u4e48mopidy\u6b63\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u5e76\u4e14\u6b63\u5728\u5360\u7528USB\u8bbe\u5907\u3002\u6240\u4ee5\u5c1d\u8bd5\u8fd0\u884c /etc/init.d/mopidy\uff0c\u505c\u6b62mopidy\uff0c\u7136\u540e\u518d\u91cd\u65b0\u8fd0\u884c\u547d\u4ee4\u3002  root@ReSpeaker:~# python playmusic.py\nUsage: madplay [OPTIONS] FILE [...]\nTry `madplay --help  for more information.\nException in thread Thread-2:\nTraceback (most recent call last):\nFile  /usr/lib/python2.7/threading.py , line 810, in __bootstrap_inner", 
            "title": "\u4e0eRespeaker\u7684\u7b2c\u4e00\u6b21\u4e92\u52a8 - ReSpeaker, play music!"
        }, 
        {
            "location": "/Respeaker_Core/#_6", 
            "text": "", 
            "title": "\u5e94\u7528\u5b9e\u4f8b"
        }, 
        {
            "location": "/Respeaker_Core/#_7", 
            "text": "ReSpeaker\u63a7\u5236\u6a21\u5757\u662f\u57fa\u4e8eATmega32u4\u82af\u7247\uff0c\u8be5\u82af\u7247\u5b8c\u5168\u517c\u5bb9Arduino\u9a71\u52a8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ReSpeaker\u4f5c\u4e3a\u5f3a\u5927\u7684Arduino\u5b66\u4e60\u677f\uff0c\u5e76\u505a\u4e86\u8bb8\u591a\u201cArduino\u201d\u5f00\u53d1\u677f\u80fd\u505a\u7684\u4e8b\u60c5\u3002  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Arduino IDE\u5bf9\u5176\u8fdb\u884c\u7f16\u7a0b\uff0c\u6765\u5b9e\u73b0\u521b\u610fDIY\u94a2\u7434\uff0c\u8be5\u94a2\u7434\u642d\u914d8\u4e2a\u6a31\u6843\u897f\u7ea2\u67ff\u8fde\u63a5\u5230ReSpeaker\u76848\u4e2a\u89e6\u6478\u4f20\u611f\u5668\u3002      \u5728respeaker\u4e0a\u8f93\u5165 git clone  https://github.com/respeaker/piano.git       \u4e0b\u8f7d\u5e93      \u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e2d\u4e0b\u8f7d ReSpeaker Arduino Library      \u4e0a\u4f20piano.ino\u5230ReSpeaker\u7684Arduino Leonardo\uff08ATmega32U4\uff09      \u5728ReSpeaker\u7684\u4e32\u884c\u63a7\u5236\u53f0\u4e0a\u8fd0\u884cpython piano.py", 
            "title": "\u6c34\u679c\u94a2\u7434"
        }, 
        {
            "location": "/Respeaker_Core/#_8", 
            "text": "\u5929\u6c14\u4e91\u662f\u5f88\u68d2\u7684\u4e00\u4e2aReSpeaker\u9879\u76ee\u3002\u8fd9\u4e2a\u5f88\u9177\u7684\u521b\u610f\u5c06ReSpeaker\u53d8\u6210\u4e86\u4e00\u4e2a\u5929\u6c14\u4e91\uff0c\u5b83\u80fd\u591f\u663e\u793a\u51fa\u751f\u52a8\u7684\u5149\u7ebf\u548c\u58f0\u97f3\u3002  \u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\uff0cOpenwrt\u8d1f\u8d23\u4ece\u4e92\u8054\u7f51\u83b7\u53d6\u5b9e\u65f6\u5929\u6c14\u4fe1\u606f\uff0c\u8fdb\u884c\u8bed\u97f3\u4ea4\u4e92\u548c\u97f3\u9891\u8f93\u51fa\uff0c\u800cArduino\u8d1f\u8d23\u63a7\u5236\u5f69\u8272RGB LED\u3002   \u5728respeaker\u4e0a\u8f93\u5165 git clone  https://github.com/jerryyip/WeatherCloud.git , \u4e0b\u8f7d\u9879\u76ee\u5e93\u6587\u4ef6\u3002  \u70b9\u51fb\u4e0b\u8f7d  ReSpeaker Arduino Library  \u5230\u60a8\u7684\u7535\u8111\u4e0a\uff0c\u5e76\u5b89\u88c5\u3002  \u901a\u8fc7Arduino IDE\u5c06  pixels_pattern.ino  \u4e0a\u4f20\u5230respeaker\u3002   \u4ece\u8fd9\u91cc\u83b7\u53d6OpenWeatherMap appid \uff0c\u5e76\u5c06\u5176\u590d\u5236\u5230main.py\u4e2d\u7684appID =\u201c\u201d\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5c06\u60a8\u7684\u57ce\u5e02\u6dfb\u52a0\u5230city =\u201c\u201d    \u5728\u4f7f\u7528SPI\u4e4b\u524d\u8bf7\u7ec8\u6b62mopidy service\u5728OpenWrt\u4e2d\u7684\u8fdb\u7a0b\uff0crespeaker\u5728\u63a7\u5236\u53f0\u4e0a\u952e\u5165\n/etc/init.d/mopidy stop   \u8fd0\u884cpython main.py \u7136\u540e\u5bf9\u7740\u5b83\u558a \"ReSpeaker, what is the weather like?\"  \u6709\u5173\u5982\u4f55\u5236\u4f5c\u5929\u6c14\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc .", 
            "title": "\u5929\u6c14\u4e91"
        }, 
        {
            "location": "/Respeaker_Core/#respeaker-mic-arrayrespeaker", 
            "text": "", 
            "title": "ReSpeaker Mic Array\uff08ReSpeaker \u9ea6\u514b\u98ce\u9635\u5217\uff09"
        }, 
        {
            "location": "/Respeaker_Core/#respeaker-mic-array", 
            "text": "ReSpeaker\u9ea6\u514b\u98ce\u9635\u5217\u53ef\u4ee5\u5806\u53e0\uff08\u8fde\u63a5\uff09\u5230ReSpeaker Core\u7684\u9876\u90e8\uff0c\u4ee5\u663e\u7740\u63d0\u9ad8\u8bed\u97f3\u4ea4\u4e92\u4f53\u9a8c\u3002\u5b83\u662f\u57fa\u4e8eXMOS\u7684XVSM-2000\u667a\u80fd\u9ea6\u514b\u98ce\u5f00\u53d1\u7684\u3002\u8be5\u677f\u96c6\u6210\u4e867\u4e2aPDM\u9ea6\u514b\u98ce\uff0c\u4ee5\u5e2e\u52a9\u5c06ReSpeaker\u7684\u58f0\u5b66DSP\u6027\u80fd\u63d0\u5347\u5230\u66f4\u9ad8\u7684\u6c34\u5e73", 
            "title": "ReSpeaker Mic Array"
        }, 
        {
            "location": "/Respeaker_Core/#_9", 
            "text": "\u60a8\u53ef\u9875\u9762\u4ee5\u70b9\u51fb\u4e0b\u5217\u6807\u9898\u6765\u8df3\u8f6c\u5230\u5bf9\u5e94", 
            "title": "\u5173\u4e8e\u8f6f\u4ef6"
        }, 
        {
            "location": "/Respeaker_Core/#respeaker-arduino", 
            "text": "ReSpeaker Arudino\u5e93\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a   \u652f\u6301\u7535\u5bb9\u5f0f\u89e6\u6478\u611f\u5e94  \u5b9e\u73b0\u4e86WS2812 RGB LED\u9a71\u52a8  \u6784\u5efa\u4e86\u4eceArduino (ATmega32U4)\u5230\u57fa\u4e8eLinux\u7684OpenWrt (MT7688)\u4e4b\u95f4\u7684USB\u5230\u4e32\u53e3\u548cUSB\u5230SPI\u901a\u9053\u3002", 
            "title": "ReSpeaker Arduino \u5e93"
        }, 
        {
            "location": "/Respeaker_Core/#respeaker-python", 
            "text": "ReSpeaker\u662f\u4e00\u4e2a\u652f\u6301\u8bed\u97f3\u4ea4\u4e92\u7684\u5f00\u653e\u9879\u76ee\u3002ReSpeaker python\u5e93\u662f\u4e00\u4e2a\u5f00\u6e90\u7684python\u5e93\uff0c\u7528\u4e8e\u63d0\u4f9b\u8bed\u97f3\u4ea4\u4e92\u7684\u57fa\u672c\u529f\u80fd\u3002\n\u5b83\u4f7f\u7528PocketSphinx\u8fdb\u884c\u5173\u952e\u5b57\u67e5\u627e\uff0c\u5e76\u4f7f\u7528webrtcvad\u8fdb\u884c\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\u3002", 
            "title": "ReSpeaker Python \u5e93"
        }, 
        {
            "location": "/Respeaker_Core/#github", 
            "text": "", 
            "title": "\u66f4\u591a\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb\u8fd9\u91cc\u67e5\u770b\u6211\u4eec\u7684github\u8d44\u6599\u5e93"
        }, 
        {
            "location": "/Respeaker_Core/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/Respeaker_Core/#q1", 
            "text": "\u6253\u5f00\u4e32\u884c\u63a7\u5236\u53f0\u6216ssh\u4f1a\u8bdd\u5e76\u8fd0\u884c firstboot.  \u66f4\u591a\u7ec6\u8282\u70b9\u51fb\u8fd9\u91cc .", 
            "title": "Q1: \u5982\u4f55\u6062\u590d\u51fa\u5382\u8bbe\u7f6e?"
        }, 
        {
            "location": "/Respeaker_Core/#q2", 
            "text": "\u5347\u7ea7\u5931\u8d25\u540e\uff0c\u5f53\u91cd\u65b0\u542f\u52a8\u8fdb\u5165openwrt\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u7f51\u7edc\u7ec8\u7aef\uff0cssh\u6216\u4e32\u884c\u63a7\u5236\u53f0\u8bbf\u95ee\u7cfb\u7edf\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u7167   Rescue instruction  \u6307\u4ee4\u8fdb\u884c\u6062\u590d\u3002", 
            "title": "Q2: \u5982\u679c\u5347\u7ea7\u5931\u8d25\u4e86\uff0c\u600e\u4e48\u62a2\u6551?"
        }, 
        {
            "location": "/Respeaker_Core/#q3-respeakerwi-fi", 
            "text": "\u8bf7\u5148\u5c1d\u8bd5  \u6062\u590d\u51fa\u5382\u8bbe\u7f6e  \u3002  ReSpeaker\u4e0d\u652f\u6301Wi-Fi\u9891\u905312\u3002\u786e\u4fdd\u60a8\u7684\u8def\u7531\u5668\u6ca1\u6709\u4f7f\u7528\u8be5\u901a\u9053\u3002.", 
            "title": "Q3: ReSpeaker\u627e\u4e0d\u5230\u6211\u7684Wi-Fi"
        }, 
        {
            "location": "/Respeaker_Core/#q4-wifi", 
            "text": "\u6211\u4eec\u5efa\u8bae\u60a8\u901a\u8fc7 WEB-UI \u914d\u7f6eWi-Fi \uff0c\u5982\u679c\u65e0\u6cd5\u4f7f\u7528\uff0c\u8bf7\u5728\u63a7\u5236\u53f0\u4e0a\u5c1d\u8bd5\u547d\u4ee4\u884c\u5de5\u5177 wictl  \u3002", 
            "title": "Q4: \u5982\u4f55\u8fdb\u884cWifi\u914d\u7f6e"
        }, 
        {
            "location": "/Respeaker_Core/#q5-bing-speech-api", 
            "text": "\u5982\u679c\u60a8\u4e0d\u9700\u8981\u66f4\u6539\u5524\u9192\u5b57\uff0c\u53ea\u9700\u5c06text = bing.recognize\uff08data\uff09\u66f4\u6539\u4e3atext = bing.recognize\uff08data\uff0clanguage =\u201czh-CN\u201d\uff09\u5c31\u53ef\u4ee5\u4e86\u3002  \u66f4\u591a\u4fe1\u606f\u8bf7\u70b9\u51fb\u8fd9\u91cc .", 
            "title": "Q5: \u5982\u4f55\u6539\u53d8BING Speech api \u7684\u8bc6\u522b\u8bed\u8a00"
        }, 
        {
            "location": "/Respeaker_Core/#q6-sdfsck", 
            "text": "\u5982\u679cSD\u5361\u4e0a\u7684\u6587\u4ef6\u6b63\u5e38\uff0c\u8bf7\u5ffd\u7565\u5b83\u3002\u5426\u5219\uff0c\u5c1d\u8bd5\u4f7f\u7528 sd\u5361\u683c\u5f0f\u5316\u7a0b\u5e8f\u8fdb\u884c\u683c\u5f0f\u5316 .", 
            "title": "Q6: \u6536\u5230SD\u5361\u8b66\u544a\u6d88\u606f\u201c\u5377\u672a\u6b63\u786e\u5378\u8f7d\u3002\u67d0\u4e9b\u6570\u636e\u53ef\u80fd\u5df2\u635f\u574f\u3002\u8bf7\u8fd0\u884cfsck\u201d"
        }, 
        {
            "location": "/Respeaker_Core/#q7-bad-flash-from-arduino", 
            "text": "\u6309\u7167\u4e0b\u9762\u4ee3\u7801\uff0c\u5728openwrt\u4e2d\u91cd\u65b0\u70e7\u5199 bootloade\u3002   /etc/init.d/mopidy stop  # stop mopidy if it s running, mopidy-hallo plugin will use SPI\n/etc/init.d/alexa stop      # stop alexa if it s running\nmt7688_pinmux set ephy gpio\ncd /etc/arduino\navrdude -c linuxgpio -p m32u4 -e -U lfuse:w:0xFF:m -U hfuse:w:0xD8:m -U efuse:w:0xCB:m  -U flash:w:Caterina-ReSpeaker.hex -u -U lock:w:0xEF:m", 
            "title": "Q7: \u9519\u8bef\u63d0\u793a \u201cBad flash from Arduino\u201d"
        }, 
        {
            "location": "/Respeaker_Core/#q8-webui", 
            "text": "\u91cd\u7f6e juci \u5bc6\u7801   orangectl passwd root 12345678  //replace 12345678 with the password you want to set", 
            "title": "Q8: \u5fd8\u8bb0\u4e86WebUI\u7684\u5bc6\u7801"
        }, 
        {
            "location": "/Respeaker_Core/#q9-speach-to-textstt", 
            "text": "\u6309\u7167 \u6307\u5357 \u5b89\u88c5speech_recognition\u5e93", 
            "title": "Q9: \u5982\u4f55\u652f\u6301\u8c37\u6b4c\u8bed\u97f3\u6216\u5176\u4ed6Speach to Text\uff08STT\uff09\u5f15\u64ce?"
        }, 
        {
            "location": "/Respeaker_Core/#q10-alexa-ioerror-errno-9998-invalid-number-of-channels", 
            "text": "\u8fd8\u6709\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6216alexa\u5b9e\u4f8b\u4f7f\u7528\u97f3\u9891\u8f93\u5165\u8bbe\u5907\u3002\u8fd0\u884c/etc/init.d/alexa stop\u548c/etc/init.d/mopidy stop \u505c\u6b62\u5b83\u4eec\u3002\u8981\u7981\u7528mopidy\u542f\u52a8\uff0c\u8bf7\u8fd0\u884c/etc/init.d/mopidy disable\u3002", 
            "title": "Q10: \u8fd0\u884cAlexa \u9519\u8bef\uff0c\u63d0\u793a\"IOError: [Errno -9998] Invalid number of channels\""
        }, 
        {
            "location": "/Respeaker_Core/#q11-python-playmusicpy", 
            "text": "\u5e94\u8be5\u662fmopidy\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u5e76\u4e14\u6b63\u5728\u4f7f\u7528USB\u8bbe\u5907\u3002\u5c1d\u8bd5\u8fd0\u884c/etc/init.d/mopidy stop, \u505c\u6b62mopidy\u5e76\u518d\u6b21\u8fd0\u884c\u60a8\u7684\u547d\u4ee4\u3002", 
            "title": "Q11: \u65e0\u6cd5\u8fd0\u884cpython playmusic.py"
        }, 
        {
            "location": "/Respeaker_Core/#q12-rpc", 
            "text": "\u60a8\u9700\u8981\u91cd\u65b0\u5237\u56fa\u4ef6\uff0c\u70b9\u51fb\u67e5\u770b  \u6307\u5357", 
            "title": "Q12: \u6ca1\u6709RPC\u8fde\u63a5"
        }, 
        {
            "location": "/Respeaker_Core/#q13-sftp-ftp", 
            "text": "\u6211\u4eec\u6ca1\u6709FTP\uff0c\u53ea\u6709SFTP\u3002", 
            "title": "Q13: SFTP &amp; FTP"
        }, 
        {
            "location": "/Respeaker_Core/#q14", 
            "text": "\u5c1d\u8bd5\u66f4\u65b0  arduino code \u3002", 
            "title": "Q14: \u4e32\u53e3\u63a7\u5236\u53f0\u88ab\u9501\u5b9a"
        }, 
        {
            "location": "/Respeaker_Core/#q15ap", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u5728vi / etc / config / wireless \u4e2d\u4fee\u6539\u5982\u4e0b 'ssid' flag of the 'ap' interface to '' \u3002\u4e5f\u5c31\u662f\u5c06'ap'\u6539\u4e3a''\u3002\u7136\u540e\u5c31\u4f1a\u9690\u85cfap\u3002", 
            "title": "Q15:\u5982\u4f55\u7981\u7528'ap'\u6a21\u5f0f"
        }, 
        {
            "location": "/Respeaker_Core/#q16-i2c", 
            "text": "\u6211\u4eec\u9700\u8981\u68c0\u67e5\u7f16\u89e3\u7801\u5668\u9a71\u52a8\u7a0b\u5e8f\u517c\u5bb9\u540d\u4ee5\u53ca\u7f16\u89e3\u7801\u5668i2c\u5730\u5740 \u7136\u540e\u91cd\u5efaimage\u56fa\u4ef6\u3002", 
            "title": "Q16: I2C\u58f0\u5361\u95ee\u9898"
        }, 
        {
            "location": "/Respeaker_Core/#q17-respeaker", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0keyword.txt\u4e2d\u7684\u9608\u503c\u6765\u51cf\u5c11\u8bef\u8bc6\u522b\u7387\uff0c\u4f46\u4e5f\u4f1a\u964d\u4f4e\u654f\u611f\u5ea6\u3002  \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u60a8\u7684\u58f0\u97f3\u4e0e\u5f53\u524d\u7684\u58f0\u5b66\u6a21\u5757\u8fdb\u884c\u5339\u914d\uff0c\u66f4\u591a\u7684\u7ec6\u8282\u53c2\u8003\u8fd9\u91cc  http://cmusphinx.sourceforge.net/wiki/tutorialadapt \u3002  \u8fd9\u79cd\u65b9\u6cd5\u5c06\u6709\u6548\u63d0\u9ad8\u4e2a\u4eba\u5173\u952e\u5b57\u8bc6\u522b\u7387\uff0c\u4f46\u53ef\u80fd\u8ba9\u5176\u4ed6\u4eba\u4e0d\u88ab\u8bc6\u522b\u3002", 
            "title": "Q17: \u5373\u4f7f\u6ca1\u6709\u58f0\u97f3\uff0cRespeaker\u4e5f\u7ecf\u5e38\u88ab\u5524\u9192"
        }, 
        {
            "location": "/Respeaker_Core/#q18-respeakergpio", 
            "text": "\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4ee3\u7801  https://github.com/respeaker/respeaker_python_library/blob/master/respeaker/gpio.py  \u4ee5\u53ca\u7528\u8fd9\u91cc\u7684\u4f8b\u7a0b\u6765\u901a\u8fc7GPIO\u6a21\u62dfSPI  https://github.com/respeaker/respeaker_python_library/blob/master/respeaker/spi.py", 
            "title": "Q18: \u5982\u4f55\u63a7\u5236Respeaker\u7684GPIO\u5f15\u811a\uff1f"
        }, 
        {
            "location": "/Respeaker_Core/#q19", 
            "text": "\u5728respeaker\u7684 /usr/lib/python2.7/site-packages/respeaker-0.6.0-py2.7.egg/respeaker/pocketsphinx-data  \u76ee\u5f55\u4e0b\u627e\u5230\u5e76\u6253\u5f00 keywords.txt  respeaker /1e-30/\nalexa /1e-30/\nplay music /1e-40/  respeaker \u662f\u5173\u952e\u8bcd, 1e-30 \u662f\u5176\u9608\u503c\u3002\u4e3a\u4e86\u63d0\u9ad8\u654f\u611f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u964d\u4f4e\u9608\u503c\uff0c\u4f8b\u59821e-20\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u63d0\u9ad8\u7075\u654f\u5ea6\u800c\u964d\u4f4e\u9608\u503c\u540c\u65f6\u4f1a\u589e\u52a0\u9519\u8bef\u63a5\u53d7\u7387\u3002    \u5982\u679c\u8981\u6dfb\u52a0\u65b0\u7684\u5173\u952e\u5b57\uff0c\u5e94\u8be5\u9996\u5148\u5c06\u5173\u952e\u5b57\u6dfb\u52a0\u5230  dictionary.txt  \u3002dictionary.txt \u91cc\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a  ```\nrespeaker   R IY S P IY K ER\nalexa   AH L EH K S AH\nplay    P L EY\nmusic   M Y UW Z IH K\n```\n\n\u6bcf\u884c\u7684\u7b2c\u4e00\u90e8\u5206\u662f\u5173\u952e\u8bcd\u7684\u540d\u5b57 (respeaker, alexa or music), \u7b2c\u4e8c\u90e8\u5206\u662f\u5b83\u7684\u97f3\u7d20\u3002\u4f60\u53ef\u4ee5\u5728 [\u8fd9\u91cc](https://github.com/respeaker/pocketsphinx-data/blob/master/dictionary.txt) \u7684\u5b57\u5178\u4e2d\u627e\u5230\u5355\u8bcd\u3002    \u7136\u540e\u66f4\u6539\u4ee3\u7801\uff1a .  if mic.wakeup( respeaker ):    \u5c0f\u7ed3:\u5982\u679c\u60a8\u60f3\u8981\u6dfb\u52a0\u5173\u952e\u8bcd\uff0c\u6309\u7167\u4e0b\u9762\u76843\u6b65\u3002\u6bd4\u5982\u6dfb\u52a0good morning    -  1\u3001\u5728[\u5b98\u65b9\u5b57\u5178](https://github.com/respeaker/pocketsphinx-data/blob/master/dictionary.txt)\u4e2d\u67e5\u627e\u5e76\u6dfb\u52a0\u5173\u952e\u8bcd\uff0c\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u97f3\u7d20\u3002\n-  2\u3001\u5728keyword.txt\u4e2d\u7ed9 good morning\u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c\n-  3\u3001\u5728\u60a8\u7684python\u4ee3\u7801\u4e2d\u6dfb\u52a0\u8c03\u7528if mic.wakeup( good morning ):", 
            "title": "Q19: \u5982\u4f55\u6539\u53d8\u5524\u9192\u8bcd\uff1f"
        }, 
        {
            "location": "/Respeaker_Core/#q20", 
            "text": "\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u65e0\u6cd5\u901a\u8fc7\u7f51\u7edc\u66f4\u65b0\u60a8\u7684ReSpeaker\u6216\u65e0\u6cd5\u8bbf\u95eehttp://192.168.100.1/home.html \uff0c\u8bf7\u70b9\u51fb \u8fd9\u91cc  \u3002\u8981\u5c06\u7535\u8111\u4e0a\u6700\u65b0\u7684\u56fa\u4ef6\u4e0b\u8f7d\u5230SD\u5361\u4e0a\uff0c\u5e76\u5c06SD\u5361\u63d2\u5165ReSpeaker\u3002  \u8fde\u63a5\u5230respeaker\u7684  \u4e32\u884c\u63a7\u5236\u53f0  \uff0c\u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\u884c\u6765\u66f4\u65b0\u56fa\u4ef6\uff1a  mount /dev/mmcblk0p1 /mnt\ncd /mnt\nsysupgrade -n -F ramips-openwrt-latest-LinkIt7688-squashfs-sysupgrade.bin \nReSpeaker\u5b89\u88c5\u56fa\u4ef6\u548c\u91cd\u542f\u5927\u7ea6\u9700\u89813\u5206\u949f\uff0c\u66f4\u65b0\u65f6**\u8bf7\u52ff\u5173\u95ed** ReSpeaker\u3002", 
            "title": "Q20: \u901a\u8fc7\u51fa\u5382\u56fa\u4ef6\u6062\u590d\u7cfb\u7edf"
        }, 
        {
            "location": "/Respeaker_Core/#_10", 
            "text": "[Eagle\u539f\u7406\u56fe]   ReSpeaker Core v1.0 SCH  [Eagle PCB\u56fe]   ReSpeaker Core v1.0 BRD  [PDF \u539f\u7406\u56fe]   ReSpeaker Core v1.0 Schematic(pdf)  [PDF PCB\u5e95\u677f\u56fe]   ReSpeaker Core v1.0 PCB bottom(pdf)  [PDF PCB\u9876\u677f\u56fe]   ReSpeaker Core v1.0 PCB top(pdf)", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/", 
            "text": "\u57fa\u4e8eRaspberry Pi\u7684ReSpeaker 4-Mic\u9635\u5217\u662f\u4e00\u6b3e\u9002\u7528\u4e8eAI\u548c\u8bed\u97f3\u5e94\u7528\u7684Raspberry Pi\u7684\u56db\u901a\u9053\u9ea6\u514b\u98ce\u6269\u5c55\u677f\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u501f\u52a9\u5b83\u6784\u5efa\u4e00\u4e2a\u96c6\u6210Amazon Alexa\u8bed\u97f3\u670d\u52a1\uff0cGoogle\u52a9\u624b\u7b49\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\uff0c\u66f4\u7075\u6d3b\u7684\u8bed\u97f3\u4ea7\u54c1\u3002\n\n\n\u533a\u522b\u4e8e \nReSpeaker 2-Mics Pi HAT\n, \u8be5\u677f\u662f\u57fa\u4e8eAC108\u5f00\u53d1\u7684\uff0c\u8fd9\u662f\u4e00\u6b3e\u9ad8\u5ea6\u96c6\u6210\u56db\u901a\u9053ADC\uff0c\u5177\u6709\u7528\u4e8e\u9ad8\u6e05\u6670\u5ea6\u8bed\u97f3\u6355\u83b7\uff0cI2S / TDM\u8f93\u51fa\uff0c\u62fe\u53d63\u7c73\u534a\u5f84\u7684\u58f0\u97f3\u7684\u8bed\u97f3\u8bbe\u5907\u3002 \u6b64\u5916\uff0c\u8fd9\u6b3e4-Mics\u7248\u672c\u63d0\u4f9b\u4e86\u8d85\u9177LED\u73af\uff0c\u5176\u4e2d\u5305\u542b12\u4e2aAPA102\u53ef\u7f16\u7a0bLED\u3002 \u5c31\u50cfAmazon Echo\u6216 Google assist\u4e00\u6837\uff0c \u4f7f\u75284\u4e2a\u9ea6\u514b\u98ce\u548cLED\u73af\uff0cRaspberry Pi\u5177\u6709VAD\uff08\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff09\uff0cDOA\uff08\u5230\u8fbe\u65b9\u5411\uff09\uff0cKWS\uff08\u5173\u952e\u5b57\u641c\u7d22\uff09\uff0c\u5e76\u901a\u8fc7LED\u73af\u663e\u793a\u65b9\u5411\u706f\u529f\u80fd\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u5f81\n\n\n\n\nRaspberry Pi\u517c\u5bb9\uff08\u652f\u6301Raspberry Pi Zero\u548cZero W\uff0cRaspberry Pi B +\uff0cRaspberry Pi 2 B\u548cRaspberry Pi 3 B\uff09\n\n\n4\u4e2a\u9ea6\u514b\u98ce\n\n\n3\u7c73\u534a\u5f84\u7684\u8bed\u97f3\u6355\u6349\n\n\n2\u4e2aGrove\u63a5\u53e3\n\n\n12\u4e2aAPA102\u677f\u8f7d\u6307\u793a\u706f\n\n\n\u8f6f\u4ef6\u7b97\u6cd5\uff1aVAD\uff08\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff09\uff0cDOA\uff08\u5230\u8fbe\u65b9\u5411\uff09\u548cKWS\uff08\u5173\u952e\u8bcd\u641c\u7d22\uff09\n\n\n\n\n\n\nNote\nReSpeaker 4-Mic Array\u6ca1\u6709\u4efb\u4f55\u97f3\u9891\u8f93\u51fa\u63a5\u53e3, \u5b83\u53ea\u7528\u4e8e\u8bed\u97f3\u6355\u83b7\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528Raspberry Pi\u4e0a\u7684\n\u8033\u673a\u63d2\u5b54\n\u8fdb\u884c\u97f3\u9891\u8f93\u51fa\u3002\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u58f0\u97f3\u4ea4\u4e92\u5e94\u7528\n\n\nAI\u52a9\u624b\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\nMIC\uff1a4\u4e2a\u6a21\u62df\u9ea6\u514b\u98ce\n\n\nLED\uff1a12\u4e2aAPA102\u53ef\u7f16\u7a0bRGB LED\uff0c\u8fde\u63a5\u5230SPI\u63a5\u53e3\n\n\nRaspberry Pi 40\u9488\u5934\uff1a\u652f\u6301Raspberry Pi Zero\uff0cRaspberry Pi 1 B +\uff0cRaspberry Pi 2 B\u548cRaspberry Pi 3 B\n\n\nAC108\uff1a\u5177\u6709I2S / TDM\u8f93\u51fa\u8f6c\u6362\u529f\u80fd\u7684\u9ad8\u5ea6\u96c6\u6210\u7684\u56db\u901a\u9053ADC\n\n\nI2C\uff1aGrove I2C\u7aef\u53e3\uff0c\u8fde\u63a5\u5230I2C-1\n\n\nGPIO12\uff1aGrove\u6570\u5b57\u7aef\u53e3\uff0c\u8fde\u63a5\u5230GPIO12\u548cGPIO13\n\n\n\n\n\n\nNote\n\u5982\u679c\u8981\u4f7f\u7528APA102 RGB LED\uff0c\u8bf7\u5148\u5c06\u9ad8\u7535\u5e73\u5199\u5165\u201cGPIO5\u201d\uff0c\u7ed9LED\u7684VCC\u4f9b\u7535\u3002\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u628a ReSpeaker 4-Mic Array \u63d2\u5165\u5230 Raspberry Pi\n\n\n\u628a ReSpeaker 4-Mic Array \u63d2\u5165\u5230 Raspberry Pi, \u786e\u4fdd\u63d2\u5165Raspberry Pi\u7684\u65f6\u5019\u9488\u811a\u5bf9\u9f50\u3002\n\n\n\n\nNote\n\u4e0d\u8981\u5728\u4e0a\u7535\u7684\u65f6\u5019\uff0c\u70ed\u63d2\u62d4ReSpeaker 4-Mic Array\n\n\n\n\n\n\n\n\n\n\n\u5b89\u88c5\u9a71\u52a8\n\n\n\u56e0\u4e3a\u5f53\u524d\u7684Pi\u5185\u6838\u76ee\u524d\u4e0d\u652f\u6301AC108\u7f16\u89e3\u7801\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u624b\u52a8\u6784\u5efa\u3002\n\n\n1. \u786e\u4fdd\u60a8\u6b63\u5728\u60a8\u7684Pi\u4e0a\u8fd0\u884c\n\u6700\u65b0\u7684Raspbian\u64cd\u4f5c\u7cfb\u7edf\uff08debian 9\uff09\n\u3002 \n\uff08\u66f4\u65b0\u4e8e2017.09.15\uff09\n\n\n2. \u6839\u636e\u4ee5\u4e0b\u6d41\u7a0b\u5b89\u88c5\u9a71\u52a8\uff1a\n\n\ngit clone https://github.com/respeaker/seeed-voicecard.git\ncd seeed-voicecard\nsudo ./install.sh 4mic\nreboot\n\n\n\n\n3. \u9009\u62e9Raspberry Pi\u4e0a\u7684\u8033\u673a\u63d2\u5b54\u8fdb\u884c\u97f3\u9891\u8f93\u51fa\uff1a\n\n\nsudo raspi-config\n# Select 7 Advanced Options\n# Select A4 Audio\n# Select 1 Force 3.5mm (\nheadphone\n) jack\n# Select Finish\n\n\n\n\n4. \u68c0\u67e5\u58f0\u5361\u540d\u79f0\u5982\u4e0b\u6240\u793a\uff1a\n\n\npi@raspberrypi:~/seeed-voicecard $ arecord -L\nnull\n    Discard all samples (playback) or generate zero samples (capture)\nplayback\ncapture\ndmixed\narray\nac108\ndefault:CARD=seeed4micvoicec\n    seeed-4mic-voicecard,\n    Default Audio Device\nsysdefault:CARD=seeed4micvoicec\n    seeed-4mic-voicecard,\n    Default Audio Device\ndmix:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Direct sample mixing device\ndsnoop:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Direct sample snooping device\nhw:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Direct hardware device without any conversions\nplughw:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Hardware device with all software conversions\n\n\n\n\n\u5982\u679c\u8981\u66f4\u6539alsa\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528\nsudo alsactl --file=ac108_asound.state store\n\u4fdd\u5b58\u3002 \u5f53\u4f60\u9700\u8981\u518d\u6b21\u4f7f\u7528\u8fd9\u4e9b\u8bbe\u7f6e\u65f6\uff0c\u5c06\u5b83\u590d\u5236\u5230\uff1a\nsudo cp ./ac108_asound.state /var/lib/alsa/asound.state\n\n\n5. \u6253\u5f00Audacity\uff0c\u9009\u62e9 \nAC108\u548c4\u901a\u9053\n \u4f5c\u4e3a\u8f93\u5165\uff0c\nbcm2835 alsa: - (hw\uff1a0\uff0c0)\n \u4f5c\u4e3a\u8f93\u51fa\u6765\u6d4b\u8bd5\uff1a\n\n\n$ sudo apt update\n$ sudo apt install audacity\n$ audacity                      // \u8fd0\u884c audacity\n\n\n\n\n\n\n6. \u6216\u8005\u4f60\u53ef\u4ee5\u7528\narecord\n\u5f55\u5236\uff0c\u7136\u540e\u7528\naplay\n\u64ad\u653e\uff1a\n\n\narecord -Dac108 -f S32_LE -r 16000 -c 4 hello.wav    // \u53ea\u652f\u63014\u901a\u9053\naplay hello.wav                                      // \u786e\u4fdd\u9009\u62e9\u9ed8\u8ba4\u8bbe\u5907\n                                                     // \u58f0\u97f3\u901a\u8fc7\u6811\u8393\u6d3e\u7684aux\u8f93\u51fa\n\n\n\n\n\u5982\u4f55\u4f7f\u7528\u677f\u8f7dAPA102 LED\n\n\n\u6bcf\u4e2a\u677f\u8f7dAPA102 LED\u90fd\u6709\u4e00\u4e2a\u989d\u5916\u7684\u9a71\u52a8\u82af\u7247\uff0c\u9a71\u52a8\u82af\u7247\u8bbe\u7f6eLED\u7684\u989c\u8272\uff0c\u7136\u540e\u4fdd\u6301\u8be5\u989c\u8272\uff0c\u76f4\u5230\u63a5\u6536\u5230\u65b0\u7684\u547d\u4ee4\u3002\n\n\n\n\n1. \u6253\u5f00SPI:\n\n\n- \u8f93\u5165\uff1a `sudo raspi-config`; \n- \u9009\u62e9 \nInterfacing Options\n; \n- \u9009\u62e9 \nSPI\n; \n- \u9009\u62e9 \u201cYes\u201d  \n- \u9009\u62e9 \u201cOK\u201d\n- \u9009\u62e9 \u201cFinish\u201d\n\n\n\n\n\n2. \u63a7\u5236APA102 LED\u7684\u793a\u4f8b\n\n\npi@raspberrypi:~ $ cd /home/pi\npi@raspberrypi:~ $ git clone https://github.com/respeaker/4mics_hat.git\npi@raspberrypi:~ $ cd /home/pi/4mics_hat\npi@raspberrypi:~ $ sudo apt install python-virtualenv          # \u5b89\u88c5 python \u865a\u62df\u73af\u5883\npi@raspberrypi:~ $ virtualenv --system-site-packages ~/env     # \u521b\u5efa python \u865a\u62df\u73af\u5883\npi@raspberrypi:~ $ source ~/env/bin/activate                   # \u6fc0\u6d3b python \u865a\u62df\u73af\u5883\n(env) pi@raspberrypi:~ $ pip install spidev gpiozero           # \u5b89\u88c5 spidev \u548c gpiozero\n\n\n\n\n\n\n\u5728\u865a\u62df\u73af\u5883\u4e0b\u8fd0\u884c \npython pixels.py\n, \u4f60\u53ef\u4ee5\u770b\u5230LED\u50cfGoogle Assistant\u706f\u5149\u4e00\u6837\u95ea\u70c1\u3002\n\n\n\n\nReSpeaker 4-Mic Array\u7684DOA\u529f\u80fd\n\n\n\u4f7f\u7528DoA\uff08\u5230\u8fbe\u65b9\u5411\uff09\u529f\u80fd\uff0cReSpeaker 4-Mic Array\u80fd\u591f\u627e\u5230\u58f0\u6e90\u6240\u5728\u7684\u65b9\u5411\u3002\n\n\n1. \u914d\u7f6eVoice engine\n\n\npi@raspberrypi:~ $ source ~/env/bin/activate                    # \u6fc0\u6d3bPython\u865a\u62df\u73af\u5883, \u5982\u679c\u5df2\u7ecf\u6fc0\u6d3b\uff0c\u8c03\u5230\u4e0b\u4e00\u6b65\u3002\n(env) pi@raspberrypi:~ $ cd ~/4mics_hat\n(env) pi@raspberrypi:~ $ sudo apt install libatlas-base-dev     # \u5b89\u88c5 snowboy dependencies\n(env) pi@raspberrypi:~ $ sudo apt install python-pyaudio\n(env) pi@raspberrypi:~ $ pip install ./snowboy*.whl             # \u5b89\u88c5 snowboy for KWS\n(env) pi@raspberrypi:~ $ pip install ./webrtc*.whl              # \u5b89\u88c5 webrtc for DoA\n(env) pi@raspberrypi:~ $ cd ~/\n(env) pi@raspberrypi:~ $ git clone https://github.com/voice-engine/voice-engine\n(env) pi@raspberrypi:~ $ cd voice-engine/\n(env) pi@raspberrypi:~ $ python setup.py install\n(env) pi@raspberrypi:~ $ cd examples\n(env) pi@raspberrypi:~ $ nano kws_doa.py\n\n\n\n\n2. \u4fee\u6539\nkws_doa.py\n\u7684\u7b2c14-21\u884c\uff0c\u4ee5\u9002\u5e944-Mics\uff1a\n\n\nfrom voice_engine.doa_respeaker_4mic_array import DOA\n\n\ndef main():\n    src = Source(rate=16000, channels=4)\n    ch1 = ChannelPicker(channels=4, pick=1)\n    kws = KWS()\n    doa = DOA(rate=16000)\n\n\n\n\n3. \u4fdd\u5b58\uff0c\u9000\u51fa\uff0c\u7136\u540e\u5728\u865a\u62df\u73af\u5883\u4e0b\u8fd0\u884c \npython kws_doa.py\n\u3002\u8bf7\u7528snowboy\u6765\u5524\u9192\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u5230\u65b9\u4f4d\u7684\u4fe1\u606f\u3002\n\n\n\u7528\u767e\u5ea6\u6765\u8fdb\u884c\u8bed\u97f3\u4e92\u52a8\n\n\n1. \u767e\u5ea6\u6388\u6743\n\n\npi@raspberrypi:~ $ source ~/env/bin/activate                    # activate the virtual, if we have already activated, skip this step\n(env) pi@raspberrypi:~ $ cd ~/\n(env) pi@raspberrypi:~ $ git clone https://github.com/respeaker/avs\n(env) pi@raspberrypi:~ $ cd avs                                 # install Requirements\n(env) pi@raspberrypi:~ $ python setup.py install                               \n(env) pi@raspberrypi:~/avs $ sudo apt install gstreamer1.0 gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly\n(env) pi@raspberrypi:~/avs $ sudo apt install python-gi gir1.2-gstreamer-1.0\n(env) pi@raspberrypi:~/avs $ pip install tornado\n\n\n\u7528 \nVNC\n\u8fde\u63a5\u6811\u8393\u6d3e, \u5728\u7ec8\u7aef\u8fd0\u884c \nalexa-auth\n \uff0c\u7136\u540e\u767b\u9646\u83b7\u53d6alexa\u7684\u6388\u6743\uff0c \u6216\u8005\u8fd0\u884c \ndueros-auth\n \u83b7\u53d6\u767e\u5ea6\u7684\u6388\u6743\u3002 \u6388\u6743\u7684\u6587\u4ef6\u4fdd\u5b58\u5728\n/home/pi/.avs.json\n\u3002\n\n\n\n\n\n\nNote\n\n\n\u5982\u679c\u6211\u4eec\u5728 \nalexa-auth\n \u548c \ndueros-auth\n\u4e4b\u95f4\u5207\u6362, \u8bf7\u5148\u5220\u9664 \n/home/pi/.avs.json\n \u3002 \u8fd9\u4e2a\u662f\u9690\u85cf\u6587\u4ef6\uff0c\u8bf7\u7528 \nls -la\n \u663e\u793a\u6587\u4ef6\u3002\n\n\n\n\n2. \u914d\u7f6e\n\n\n(env) pi@raspberrypi:~ $ cd /home/pi\n(env) pi@raspberrypi:~ $ git clone https://github.com/respeaker/respeaker_v2_eval.git\n(env) pi@raspberrypi:~ $ cd respeaker_v2_eval/alexa\n(env) pi@raspberrypi:~/respeaker_v2_eval/alexa $ cp ~/4mics_hat/pixels.py ./pixels.py\n(env) pi@raspberrypi:~/respeaker_v2_eval/alexa $ nano ns_kws_doa_alexa.py\n\n\n\u6309\u7167\u4e0b\u9762\u7684\u4fe1\u606f\u66f4\u65b0\u7b2c15-50\u884c\u7684\u8bbe\u7f6e:\n\n\n    from voice_engine.kws import KWS\n    #from voice_engine.ns import NS\n    #from voice_engine.doa_respeaker_4mic_array import DOA\n    from avs.alexa import Alexa\n    from pixels import pixels\n\n    def main():\n        logging.basicConfig(level=logging.DEBUG)\n\n        src = Source(rate=16000, channels=4, frames_size=800)\n        ch1 = ChannelPicker(channels=4, pick=1)\n        #ns = NS(rate=16000, channels=1)\n        kws = KWS(model=\nsnowboy\n)\n        #doa = DOA(rate=16000)\n        alexa = Alexa()\n\n        alexa.state_listener.on_listening = pixels.listen\n        alexa.state_listener.on_thinking = pixels.think\n        alexa.state_listener.on_speaking = pixels.speak\n        alexa.state_listener.on_finished = pixels.off\n\n        src.link(ch1)\n        ch1.link(kws)\n        #ch1.link(ns)\n        #ns.link(kws)\n        kws.link(alexa)\n\n        #src.link(doa)\n        def on_detected(keyword):\n            #logging.info(\ndetected {} at direction {}\n.format(keyword, doa.get_direction()))\n            logging.info(\ndetected {}\n.format(keyword))\n            alexa.listen()\n\n        kws.set_callback(on_detected)\n\n\n\n\n\n3. \u8ba9\u6211\u4eecHigh\u8d77\u6765!\n\n\n\u73b0\u5728\u8bf7\u5728\u865a\u62df\u73af\u5883\u4e0b\u8fd0\u884c \npython ns_kws_doa_alexa.py\n , \u6211\u4eec\u4f1a\u5728\u7ec8\u7aef\u770b\u5230\u5f88\u591adebug\u7684\u6d88\u606f. \u5f53\u6211\u4eec\u770b\u5230 **status code: 204**\u7684\u65f6\u5019, \u8bf7\u8bf4 \nsnowboy\n\u6765\u5524\u9192respeaker\u3002\u63a5\u4e0b\u6765respeaker\u4e0a\u7684led\u706f\u4eae\u8d77\u6765, \u6211\u4eec\u53ef\u4ee5\u8ddf\u4ed6\u5bf9\u8bdd, \u6bd4\u5982\u95ee\uff0c\"\u8c01\u662f\u6700\u5e05\u7684?\" \u6216\u8005 \"\u64ad\u653e\u5218\u5fb7\u534e\u7684\u7537\u4eba\u54ed\u5427\u54ed\u5427\u4e0d\u662f\u7f6a\"\u3002\u5c0f\u4f19\u4f34\uff0c\u5c3d\u60c5\u7684High\u8d77\u6765\u5427\u3002\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[PDF \u539f\u7406\u56fe]\n \nReSpeaker 4-Mic Array for Raspberry Pi(PDF)", 
            "title": "Respeaker_4-Mics_Pi_HAT"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_1", 
            "text": "Raspberry Pi\u517c\u5bb9\uff08\u652f\u6301Raspberry Pi Zero\u548cZero W\uff0cRaspberry Pi B +\uff0cRaspberry Pi 2 B\u548cRaspberry Pi 3 B\uff09  4\u4e2a\u9ea6\u514b\u98ce  3\u7c73\u534a\u5f84\u7684\u8bed\u97f3\u6355\u6349  2\u4e2aGrove\u63a5\u53e3  12\u4e2aAPA102\u677f\u8f7d\u6307\u793a\u706f  \u8f6f\u4ef6\u7b97\u6cd5\uff1aVAD\uff08\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff09\uff0cDOA\uff08\u5230\u8fbe\u65b9\u5411\uff09\u548cKWS\uff08\u5173\u952e\u8bcd\u641c\u7d22\uff09    Note ReSpeaker 4-Mic Array\u6ca1\u6709\u4efb\u4f55\u97f3\u9891\u8f93\u51fa\u63a5\u53e3, \u5b83\u53ea\u7528\u4e8e\u8bed\u97f3\u6355\u83b7\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528Raspberry Pi\u4e0a\u7684 \u8033\u673a\u63d2\u5b54 \u8fdb\u884c\u97f3\u9891\u8f93\u51fa\u3002", 
            "title": "\u4ea7\u54c1\u7279\u5f81"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_2", 
            "text": "\u58f0\u97f3\u4ea4\u4e92\u5e94\u7528  AI\u52a9\u624b", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_3", 
            "text": "MIC\uff1a4\u4e2a\u6a21\u62df\u9ea6\u514b\u98ce  LED\uff1a12\u4e2aAPA102\u53ef\u7f16\u7a0bRGB LED\uff0c\u8fde\u63a5\u5230SPI\u63a5\u53e3  Raspberry Pi 40\u9488\u5934\uff1a\u652f\u6301Raspberry Pi Zero\uff0cRaspberry Pi 1 B +\uff0cRaspberry Pi 2 B\u548cRaspberry Pi 3 B  AC108\uff1a\u5177\u6709I2S / TDM\u8f93\u51fa\u8f6c\u6362\u529f\u80fd\u7684\u9ad8\u5ea6\u96c6\u6210\u7684\u56db\u901a\u9053ADC  I2C\uff1aGrove I2C\u7aef\u53e3\uff0c\u8fde\u63a5\u5230I2C-1  GPIO12\uff1aGrove\u6570\u5b57\u7aef\u53e3\uff0c\u8fde\u63a5\u5230GPIO12\u548cGPIO13    Note \u5982\u679c\u8981\u4f7f\u7528APA102 RGB LED\uff0c\u8bf7\u5148\u5c06\u9ad8\u7535\u5e73\u5199\u5165\u201cGPIO5\u201d\uff0c\u7ed9LED\u7684VCC\u4f9b\u7535\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_4", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#respeaker-4-mic-array-raspberry-pi", 
            "text": "\u628a ReSpeaker 4-Mic Array \u63d2\u5165\u5230 Raspberry Pi, \u786e\u4fdd\u63d2\u5165Raspberry Pi\u7684\u65f6\u5019\u9488\u811a\u5bf9\u9f50\u3002   Note \u4e0d\u8981\u5728\u4e0a\u7535\u7684\u65f6\u5019\uff0c\u70ed\u63d2\u62d4ReSpeaker 4-Mic Array", 
            "title": "\u628a ReSpeaker 4-Mic Array \u63d2\u5165\u5230 Raspberry Pi"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_5", 
            "text": "\u56e0\u4e3a\u5f53\u524d\u7684Pi\u5185\u6838\u76ee\u524d\u4e0d\u652f\u6301AC108\u7f16\u89e3\u7801\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u624b\u52a8\u6784\u5efa\u3002", 
            "title": "\u5b89\u88c5\u9a71\u52a8"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#1-piraspbiandebian-9-20170915", 
            "text": "", 
            "title": "1. \u786e\u4fdd\u60a8\u6b63\u5728\u60a8\u7684Pi\u4e0a\u8fd0\u884c\u6700\u65b0\u7684Raspbian\u64cd\u4f5c\u7cfb\u7edf\uff08debian 9\uff09\u3002 \uff08\u66f4\u65b0\u4e8e2017.09.15\uff09"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#2", 
            "text": "git clone https://github.com/respeaker/seeed-voicecard.git\ncd seeed-voicecard\nsudo ./install.sh 4mic\nreboot", 
            "title": "2. \u6839\u636e\u4ee5\u4e0b\u6d41\u7a0b\u5b89\u88c5\u9a71\u52a8\uff1a"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#3-raspberry-pi", 
            "text": "sudo raspi-config\n# Select 7 Advanced Options\n# Select A4 Audio\n# Select 1 Force 3.5mm ( headphone ) jack\n# Select Finish", 
            "title": "3. \u9009\u62e9Raspberry Pi\u4e0a\u7684\u8033\u673a\u63d2\u5b54\u8fdb\u884c\u97f3\u9891\u8f93\u51fa\uff1a"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#4", 
            "text": "pi@raspberrypi:~/seeed-voicecard $ arecord -L\nnull\n    Discard all samples (playback) or generate zero samples (capture)\nplayback\ncapture\ndmixed\narray\nac108\ndefault:CARD=seeed4micvoicec\n    seeed-4mic-voicecard,\n    Default Audio Device\nsysdefault:CARD=seeed4micvoicec\n    seeed-4mic-voicecard,\n    Default Audio Device\ndmix:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Direct sample mixing device\ndsnoop:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Direct sample snooping device\nhw:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Direct hardware device without any conversions\nplughw:CARD=seeed4micvoicec,DEV=0\n    seeed-4mic-voicecard,\n    Hardware device with all software conversions  \u5982\u679c\u8981\u66f4\u6539alsa\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 sudo alsactl --file=ac108_asound.state store \u4fdd\u5b58\u3002 \u5f53\u4f60\u9700\u8981\u518d\u6b21\u4f7f\u7528\u8fd9\u4e9b\u8bbe\u7f6e\u65f6\uff0c\u5c06\u5b83\u590d\u5236\u5230\uff1a sudo cp ./ac108_asound.state /var/lib/alsa/asound.state", 
            "title": "4. \u68c0\u67e5\u58f0\u5361\u540d\u79f0\u5982\u4e0b\u6240\u793a\uff1a"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#5-audacity-ac1084-bcm2835-alsa-hw00", 
            "text": "$ sudo apt update\n$ sudo apt install audacity\n$ audacity                      // \u8fd0\u884c audacity", 
            "title": "5. \u6253\u5f00Audacity\uff0c\u9009\u62e9 AC108\u548c4\u901a\u9053 \u4f5c\u4e3a\u8f93\u5165\uff0cbcm2835 alsa: - (hw\uff1a0\uff0c0) \u4f5c\u4e3a\u8f93\u51fa\u6765\u6d4b\u8bd5\uff1a"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#6-arecordaplay", 
            "text": "arecord -Dac108 -f S32_LE -r 16000 -c 4 hello.wav    // \u53ea\u652f\u63014\u901a\u9053\naplay hello.wav                                      // \u786e\u4fdd\u9009\u62e9\u9ed8\u8ba4\u8bbe\u5907\n                                                     // \u58f0\u97f3\u901a\u8fc7\u6811\u8393\u6d3e\u7684aux\u8f93\u51fa", 
            "title": "6. \u6216\u8005\u4f60\u53ef\u4ee5\u7528arecord\u5f55\u5236\uff0c\u7136\u540e\u7528aplay\u64ad\u653e\uff1a"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#apa102-led", 
            "text": "\u6bcf\u4e2a\u677f\u8f7dAPA102 LED\u90fd\u6709\u4e00\u4e2a\u989d\u5916\u7684\u9a71\u52a8\u82af\u7247\uff0c\u9a71\u52a8\u82af\u7247\u8bbe\u7f6eLED\u7684\u989c\u8272\uff0c\u7136\u540e\u4fdd\u6301\u8be5\u989c\u8272\uff0c\u76f4\u5230\u63a5\u6536\u5230\u65b0\u7684\u547d\u4ee4\u3002", 
            "title": "\u5982\u4f55\u4f7f\u7528\u677f\u8f7dAPA102 LED"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#1-spi", 
            "text": "- \u8f93\u5165\uff1a `sudo raspi-config`; \n- \u9009\u62e9  Interfacing Options ; \n- \u9009\u62e9  SPI ; \n- \u9009\u62e9 \u201cYes\u201d  \n- \u9009\u62e9 \u201cOK\u201d\n- \u9009\u62e9 \u201cFinish\u201d", 
            "title": "1. \u6253\u5f00SPI:"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#2-apa102-led", 
            "text": "pi@raspberrypi:~ $ cd /home/pi\npi@raspberrypi:~ $ git clone https://github.com/respeaker/4mics_hat.git\npi@raspberrypi:~ $ cd /home/pi/4mics_hat\npi@raspberrypi:~ $ sudo apt install python-virtualenv          # \u5b89\u88c5 python \u865a\u62df\u73af\u5883\npi@raspberrypi:~ $ virtualenv --system-site-packages ~/env     # \u521b\u5efa python \u865a\u62df\u73af\u5883\npi@raspberrypi:~ $ source ~/env/bin/activate                   # \u6fc0\u6d3b python \u865a\u62df\u73af\u5883\n(env) pi@raspberrypi:~ $ pip install spidev gpiozero           # \u5b89\u88c5 spidev \u548c gpiozero   \u5728\u865a\u62df\u73af\u5883\u4e0b\u8fd0\u884c  python pixels.py , \u4f60\u53ef\u4ee5\u770b\u5230LED\u50cfGoogle Assistant\u706f\u5149\u4e00\u6837\u95ea\u70c1\u3002", 
            "title": "2. \u63a7\u5236APA102 LED\u7684\u793a\u4f8b"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#respeaker-4-mic-arraydoa", 
            "text": "\u4f7f\u7528DoA\uff08\u5230\u8fbe\u65b9\u5411\uff09\u529f\u80fd\uff0cReSpeaker 4-Mic Array\u80fd\u591f\u627e\u5230\u58f0\u6e90\u6240\u5728\u7684\u65b9\u5411\u3002", 
            "title": "ReSpeaker 4-Mic Array\u7684DOA\u529f\u80fd"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#1-voice-engine", 
            "text": "pi@raspberrypi:~ $ source ~/env/bin/activate                    # \u6fc0\u6d3bPython\u865a\u62df\u73af\u5883, \u5982\u679c\u5df2\u7ecf\u6fc0\u6d3b\uff0c\u8c03\u5230\u4e0b\u4e00\u6b65\u3002\n(env) pi@raspberrypi:~ $ cd ~/4mics_hat\n(env) pi@raspberrypi:~ $ sudo apt install libatlas-base-dev     # \u5b89\u88c5 snowboy dependencies\n(env) pi@raspberrypi:~ $ sudo apt install python-pyaudio\n(env) pi@raspberrypi:~ $ pip install ./snowboy*.whl             # \u5b89\u88c5 snowboy for KWS\n(env) pi@raspberrypi:~ $ pip install ./webrtc*.whl              # \u5b89\u88c5 webrtc for DoA\n(env) pi@raspberrypi:~ $ cd ~/\n(env) pi@raspberrypi:~ $ git clone https://github.com/voice-engine/voice-engine\n(env) pi@raspberrypi:~ $ cd voice-engine/\n(env) pi@raspberrypi:~ $ python setup.py install\n(env) pi@raspberrypi:~ $ cd examples\n(env) pi@raspberrypi:~ $ nano kws_doa.py", 
            "title": "1. \u914d\u7f6eVoice engine"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#2-kws_doapy14-214-mics", 
            "text": "from voice_engine.doa_respeaker_4mic_array import DOA\n\n\ndef main():\n    src = Source(rate=16000, channels=4)\n    ch1 = ChannelPicker(channels=4, pick=1)\n    kws = KWS()\n    doa = DOA(rate=16000)", 
            "title": "2. \u4fee\u6539kws_doa.py\u7684\u7b2c14-21\u884c\uff0c\u4ee5\u9002\u5e944-Mics\uff1a"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#3-python-kws_doapysnowboy", 
            "text": "", 
            "title": "3. \u4fdd\u5b58\uff0c\u9000\u51fa\uff0c\u7136\u540e\u5728\u865a\u62df\u73af\u5883\u4e0b\u8fd0\u884c python kws_doa.py\u3002\u8bf7\u7528snowboy\u6765\u5524\u9192\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u5230\u65b9\u4f4d\u7684\u4fe1\u606f\u3002"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_6", 
            "text": "", 
            "title": "\u7528\u767e\u5ea6\u6765\u8fdb\u884c\u8bed\u97f3\u4e92\u52a8"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#1", 
            "text": "pi@raspberrypi:~ $ source ~/env/bin/activate                    # activate the virtual, if we have already activated, skip this step\n(env) pi@raspberrypi:~ $ cd ~/\n(env) pi@raspberrypi:~ $ git clone https://github.com/respeaker/avs\n(env) pi@raspberrypi:~ $ cd avs                                 # install Requirements\n(env) pi@raspberrypi:~ $ python setup.py install                               \n(env) pi@raspberrypi:~/avs $ sudo apt install gstreamer1.0 gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly\n(env) pi@raspberrypi:~/avs $ sudo apt install python-gi gir1.2-gstreamer-1.0\n(env) pi@raspberrypi:~/avs $ pip install tornado \n\u7528  VNC \u8fde\u63a5\u6811\u8393\u6d3e, \u5728\u7ec8\u7aef\u8fd0\u884c  alexa-auth  \uff0c\u7136\u540e\u767b\u9646\u83b7\u53d6alexa\u7684\u6388\u6743\uff0c \u6216\u8005\u8fd0\u884c  dueros-auth  \u83b7\u53d6\u767e\u5ea6\u7684\u6388\u6743\u3002 \u6388\u6743\u7684\u6587\u4ef6\u4fdd\u5b58\u5728 /home/pi/.avs.json \u3002    Note  \u5982\u679c\u6211\u4eec\u5728  alexa-auth  \u548c  dueros-auth \u4e4b\u95f4\u5207\u6362, \u8bf7\u5148\u5220\u9664  /home/pi/.avs.json  \u3002 \u8fd9\u4e2a\u662f\u9690\u85cf\u6587\u4ef6\uff0c\u8bf7\u7528  ls -la  \u663e\u793a\u6587\u4ef6\u3002", 
            "title": "1. \u767e\u5ea6\u6388\u6743"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#2_1", 
            "text": "(env) pi@raspberrypi:~ $ cd /home/pi\n(env) pi@raspberrypi:~ $ git clone https://github.com/respeaker/respeaker_v2_eval.git\n(env) pi@raspberrypi:~ $ cd respeaker_v2_eval/alexa\n(env) pi@raspberrypi:~/respeaker_v2_eval/alexa $ cp ~/4mics_hat/pixels.py ./pixels.py\n(env) pi@raspberrypi:~/respeaker_v2_eval/alexa $ nano ns_kws_doa_alexa.py \n\u6309\u7167\u4e0b\u9762\u7684\u4fe1\u606f\u66f4\u65b0\u7b2c15-50\u884c\u7684\u8bbe\u7f6e:      from voice_engine.kws import KWS\n    #from voice_engine.ns import NS\n    #from voice_engine.doa_respeaker_4mic_array import DOA\n    from avs.alexa import Alexa\n    from pixels import pixels\n\n    def main():\n        logging.basicConfig(level=logging.DEBUG)\n\n        src = Source(rate=16000, channels=4, frames_size=800)\n        ch1 = ChannelPicker(channels=4, pick=1)\n        #ns = NS(rate=16000, channels=1)\n        kws = KWS(model= snowboy )\n        #doa = DOA(rate=16000)\n        alexa = Alexa()\n\n        alexa.state_listener.on_listening = pixels.listen\n        alexa.state_listener.on_thinking = pixels.think\n        alexa.state_listener.on_speaking = pixels.speak\n        alexa.state_listener.on_finished = pixels.off\n\n        src.link(ch1)\n        ch1.link(kws)\n        #ch1.link(ns)\n        #ns.link(kws)\n        kws.link(alexa)\n\n        #src.link(doa)\n        def on_detected(keyword):\n            #logging.info( detected {} at direction {} .format(keyword, doa.get_direction()))\n            logging.info( detected {} .format(keyword))\n            alexa.listen()\n\n        kws.set_callback(on_detected)", 
            "title": "2. \u914d\u7f6e"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#3-high", 
            "text": "\u73b0\u5728\u8bf7\u5728\u865a\u62df\u73af\u5883\u4e0b\u8fd0\u884c  python ns_kws_doa_alexa.py  , \u6211\u4eec\u4f1a\u5728\u7ec8\u7aef\u770b\u5230\u5f88\u591adebug\u7684\u6d88\u606f. \u5f53\u6211\u4eec\u770b\u5230 **status code: 204**\u7684\u65f6\u5019, \u8bf7\u8bf4  snowboy \u6765\u5524\u9192respeaker\u3002\u63a5\u4e0b\u6765respeaker\u4e0a\u7684led\u706f\u4eae\u8d77\u6765, \u6211\u4eec\u53ef\u4ee5\u8ddf\u4ed6\u5bf9\u8bdd, \u6bd4\u5982\u95ee\uff0c\"\u8c01\u662f\u6700\u5e05\u7684?\" \u6216\u8005 \"\u64ad\u653e\u5218\u5fb7\u534e\u7684\u7537\u4eba\u54ed\u5427\u54ed\u5427\u4e0d\u662f\u7f6a\"\u3002\u5c0f\u4f19\u4f34\uff0c\u5c3d\u60c5\u7684High\u8d77\u6765\u5427\u3002", 
            "title": "3. \u8ba9\u6211\u4eecHigh\u8d77\u6765!"
        }, 
        {
            "location": "/Respeaker_4-Mics_Pi_HAT/#_7", 
            "text": "[PDF \u539f\u7406\u56fe]   ReSpeaker 4-Mic Array for Raspberry Pi(PDF)", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Shield/", 
            "text": "\u672c\u8282\u5305\u62ec\u7531Seeed\u521b\u5efa\u7684\u6269\u5c55\u677f\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u6269\u5c55\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nBase_Shield_V2\n\n\nCAN-BUS_Shield_V1.2\n\n\nCAN-BUS_Shield_V2.0\n\n\nHow_to_edit_Wiki", 
            "title": "Shield"
        }, 
        {
            "location": "/Shield/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u6269\u5c55\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Base_Shield_V2  CAN-BUS_Shield_V1.2  CAN-BUS_Shield_V2.0  How_to_edit_Wiki", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Base_Shield_V2/", 
            "text": "\u4f5c\u4e3a\u6269\u5c55\u677f\uff0cBase Shield v2\u6709\u8bb8\u591aGrove\u8fde\u63a5\u63a5\u53e3\uff0c\u65b9\u4fbf\u60a8\u5c06\u591a\u4e2aGrove\u4ea7\u54c1\u4e00\u8d77\u4f7f\u7528\u3002\u5b83\u4e0e\u4e00\u7cfb\u5217Arduino\u4ea7\u54c1\u517c\u5bb9\u3002\n\n\n\n\nNote\n\n\n\n\n\u70b9\u51fb\u83b7\u53d6\u66f4\u591a\u4fe1\u606f \nGrove System\n.\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u7535\u6e90\u517c\u5bb9\uff1a\u6bcf\u4e2aGrove\u8fde\u63a5\u5668\u90fd\u6709\u56db\u6839\u7535\u7ebf\uff0c\u5176\u4e2d\u4e00\u6839\u662fVcc\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u5fae\u63a7\u5236\u5668\u4e3b\u677f\u90fd\u9700\u89815V\u7684\u7535\u6e90\u7535\u538b\uff0c\u6709\u4e9b\u9700\u89813.3V\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728Base Shield v2\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u7535\u6e90\u5f00\u5173\u3002\u8fd9\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8be5\u5f00\u5173\u8c03\u8282Vcc\u7684\u7535\u538b\uff0c\u786e\u4fddVcc\u7684\u7535\u538b\u4e0e\u4e3b\u677f\u7684\u7535\u6e90\u76f8\u540c\u3002\n\n\n\u6240\u4ee5\u5728\u4f7f\u7528Arduino UNO\u4e0eBase Shield v2\u65f6\uff0c\u8bf7\u5c06\u5f00\u5173\u8f6c\u52305v\u4f4d\u7f6e; \u5728\u4f7f\u7528\u5e26\u6709Base Shield v2\u7684Seeeduino Arch\u65f6\uff0c\u8bf7\u5c06\u5f00\u5173\u8f6c\u52303.3v\u3002\n\n\n\n\n\n\n\u5f00\u53d1\u677f\u517c\u5bb9\uff1a\u5f15\u811a\u6570\u4e0eArduino UNO R3\u76f8\u540c\u3002\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\u5982\u679c\u4f7f\u7528\u5e26\u6709Seeeduino V3\u7684Base Shield v2\uff0c\u8bf7\u710a\u63a5P1\uff0cP2\u3002\n\n\n\n\n\n\nGrove \u8fde\u63a5\u5668: Base Shield v2 \u670916\u4e2aGrove \u8fde\u63a5\u5934.\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u540d\u79f0\n\n\n\u6570\u91cf\n\n\n\n\n\n\n\n\n\n\nAnalog port\n\n\nA0/A1/A2/A3\n\n\n4\n\n\n\n\n\n\nDigital port\n\n\nD2/D3/D4/D5/D6/D7/D8\n\n\n7\n\n\n\n\n\n\nUART port\n\n\nUART\n\n\n1\n\n\n\n\n\n\n2C port\n\n\nI2C\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\u5c3a\u5bf8: 2.1 * 2.7 \u82f1\u5bf8\n\n\nLED \u6307\u793a: \u4f9b\u7535\u65f6\u7eff\u8272LED\u6307\u793a\u706f\u4eae\u8d77\u3002\n\n\n\n\n\u517c\u5bb9\u6027\n\n\n\u6211\u4eec\u5df2\u7ecf\u751f\u4ea7\u4e86\u5927\u91cf\u7684\u6269\u5c55\u677f\uff0c\u53ef\u4ee5\u4f7f\u60a8\u7684\u5e73\u53f0\u677f\u66f4\u52a0\u5f3a\u5927\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6269\u5c55\u677f\u90fd\u4e0e\u6240\u6709\u7684\u5e73\u53f0\u677f\u517c\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8868\u683c\u6765\u8bf4\u660e\u8fd9\u4e9b\u677f\u4e0e\u5e73\u53f0\u677f\u7684\u517c\u5bb9\u6027\u3002\n\n\n\n\nNote\n\n\n\u8bf7\u6ce8\u610f\uff0c\u4e0b\u8868\u4e2d\u6807\u8bc6\u7684\"Not recommended\"\u5e76\u4e0d\u4ee3\u8868\u4e00\u5b9a\u5c31\u4e0d\u80fd\u517c\u5bb9\uff0c\u53ef\u80fd\u60a8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8df3\u7ebf\u3001\u710a\u63a5\u3002\u5982\u6b64\uff0c\u90e8\u5206\u6807\u8bc6\u4e0d\u517c\u5bb9\u7684\u4e5f\u662f\u53ef\u80fd\u6b63\u5e38\u4f7f\u7528\u7684\u3002\u66f4\u591a\u517c\u5bb9\u6027\u4fe1\u606f\u8bf7\u8054\u7cfb\u6211\u4eec\u7684\u6280\u672f\u652f\u6301\n\u3002\n\n\n\n\n\u70b9\u51fb\u67e5\u770b\u5927\u56fe\n\n\n\n\n\u5e94\u7528\n\n\n\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86Grove - LED\u548cGrove - Button\u4e0eBase Shield v2\u3002\u6240\u6709Grove\u4ea7\u54c1\u90fd\u6709Grove\u8fde\u63a5\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165Base Shield\u3002\n\n\n\n\n/*\n The circuit:\n* LED attached from pin 3 to ground\n* Button attached to pin 2 from +5V\n* 10K resistor attached to pin 2 from ground\n* Button Control An LED\n*/\n\nconst int button = 2;       // the Grove port No. you attached a button to\nconst int LED    = 3;       // the Grove port No. you attached an LED to\nvoid setup()\n{\n    pinMode(button, INPUT); //set button as an INPUT device\n    pinMode(LED, OUTPUT);   //set LED as an OUTPUT device\n}\nvoid loop()\n{\n    int btn = digitalRead(button); //read the status of the button\n    digitalWrite(LED, btn);\n    delay(10);\n}\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[Easyeda\u539f\u7406\u56fe]\n \nSchematic at Easyeda\n\n\n[Base Shield\u539f\u7406\u56fe]\n \nSchematic of Base Shield v2\n\n\n[Base Shield\u539f\u7406\u56fe pdf\u7248]\n \nSchematics PDF of Base Shield V2", 
            "title": "Base_Shield_V2"
        }, 
        {
            "location": "/Base_Shield_V2/#_1", 
            "text": "\u7535\u6e90\u517c\u5bb9\uff1a\u6bcf\u4e2aGrove\u8fde\u63a5\u5668\u90fd\u6709\u56db\u6839\u7535\u7ebf\uff0c\u5176\u4e2d\u4e00\u6839\u662fVcc\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u5fae\u63a7\u5236\u5668\u4e3b\u677f\u90fd\u9700\u89815V\u7684\u7535\u6e90\u7535\u538b\uff0c\u6709\u4e9b\u9700\u89813.3V\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728Base Shield v2\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u7535\u6e90\u5f00\u5173\u3002\u8fd9\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8be5\u5f00\u5173\u8c03\u8282Vcc\u7684\u7535\u538b\uff0c\u786e\u4fddVcc\u7684\u7535\u538b\u4e0e\u4e3b\u677f\u7684\u7535\u6e90\u76f8\u540c\u3002  \u6240\u4ee5\u5728\u4f7f\u7528Arduino UNO\u4e0eBase Shield v2\u65f6\uff0c\u8bf7\u5c06\u5f00\u5173\u8f6c\u52305v\u4f4d\u7f6e; \u5728\u4f7f\u7528\u5e26\u6709Base Shield v2\u7684Seeeduino Arch\u65f6\uff0c\u8bf7\u5c06\u5f00\u5173\u8f6c\u52303.3v\u3002    \u5f00\u53d1\u677f\u517c\u5bb9\uff1a\u5f15\u811a\u6570\u4e0eArduino UNO R3\u76f8\u540c\u3002     Note   \u5982\u679c\u4f7f\u7528\u5e26\u6709Seeeduino V3\u7684Base Shield v2\uff0c\u8bf7\u710a\u63a5P1\uff0cP2\u3002    Grove \u8fde\u63a5\u5668: Base Shield v2 \u670916\u4e2aGrove \u8fde\u63a5\u5934.     \u53c2\u6570  \u540d\u79f0  \u6570\u91cf      Analog port  A0/A1/A2/A3  4    Digital port  D2/D3/D4/D5/D6/D7/D8  7    UART port  UART  1    2C port  I2C  1      \u5c3a\u5bf8: 2.1 * 2.7 \u82f1\u5bf8  LED \u6307\u793a: \u4f9b\u7535\u65f6\u7eff\u8272LED\u6307\u793a\u706f\u4eae\u8d77\u3002", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Base_Shield_V2/#_2", 
            "text": "\u6211\u4eec\u5df2\u7ecf\u751f\u4ea7\u4e86\u5927\u91cf\u7684\u6269\u5c55\u677f\uff0c\u53ef\u4ee5\u4f7f\u60a8\u7684\u5e73\u53f0\u677f\u66f4\u52a0\u5f3a\u5927\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6269\u5c55\u677f\u90fd\u4e0e\u6240\u6709\u7684\u5e73\u53f0\u677f\u517c\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8868\u683c\u6765\u8bf4\u660e\u8fd9\u4e9b\u677f\u4e0e\u5e73\u53f0\u677f\u7684\u517c\u5bb9\u6027\u3002   Note  \u8bf7\u6ce8\u610f\uff0c\u4e0b\u8868\u4e2d\u6807\u8bc6\u7684\"Not recommended\"\u5e76\u4e0d\u4ee3\u8868\u4e00\u5b9a\u5c31\u4e0d\u80fd\u517c\u5bb9\uff0c\u53ef\u80fd\u60a8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8df3\u7ebf\u3001\u710a\u63a5\u3002\u5982\u6b64\uff0c\u90e8\u5206\u6807\u8bc6\u4e0d\u517c\u5bb9\u7684\u4e5f\u662f\u53ef\u80fd\u6b63\u5e38\u4f7f\u7528\u7684\u3002\u66f4\u591a\u517c\u5bb9\u6027\u4fe1\u606f\u8bf7\u8054\u7cfb\u6211\u4eec\u7684\u6280\u672f\u652f\u6301 \u3002   \u70b9\u51fb\u67e5\u770b\u5927\u56fe", 
            "title": "\u517c\u5bb9\u6027"
        }, 
        {
            "location": "/Base_Shield_V2/#_3", 
            "text": "\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86Grove - LED\u548cGrove - Button\u4e0eBase Shield v2\u3002\u6240\u6709Grove\u4ea7\u54c1\u90fd\u6709Grove\u8fde\u63a5\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165Base Shield\u3002   /*\n The circuit:\n* LED attached from pin 3 to ground\n* Button attached to pin 2 from +5V\n* 10K resistor attached to pin 2 from ground\n* Button Control An LED\n*/\n\nconst int button = 2;       // the Grove port No. you attached a button to\nconst int LED    = 3;       // the Grove port No. you attached an LED to\nvoid setup()\n{\n    pinMode(button, INPUT); //set button as an INPUT device\n    pinMode(LED, OUTPUT);   //set LED as an OUTPUT device\n}\nvoid loop()\n{\n    int btn = digitalRead(button); //read the status of the button\n    digitalWrite(LED, btn);\n    delay(10);\n}", 
            "title": "\u5e94\u7528"
        }, 
        {
            "location": "/Base_Shield_V2/#_4", 
            "text": "[Easyeda\u539f\u7406\u56fe]   Schematic at Easyeda  [Base Shield\u539f\u7406\u56fe]   Schematic of Base Shield v2  [Base Shield\u539f\u7406\u56fe pdf\u7248]   Schematics PDF of Base Shield V2", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/", 
            "text": "CAN-BUS\n \u662f\u4e00\u79cd\u666e\u901a\u7684\u5de5\u4e1a\u603b\u7ebf\uff0c\u7531\u4e8e\u5176\u957f\u8ddd\u79bb\uff0c\u4e2d\u7b49\u901a\u4fe1\u901f\u5ea6\u548c\u9ad8\u53ef\u9760\u6027\u3002\u5b83\u901a\u5e38\u5728\u73b0\u4ee3\u673a\u5e8a\u4e0a\u5e94\u7528\uff0c\u4f8b\u5982\u6c7d\u8f66\u8bca\u65ad\u603b\u7ebf\u3002\n\n\n\u8be5CAN\u603b\u7ebf\u6269\u5c55\u677f\u91c7\u7528MCP2515 CAN\u603b\u7ebf\u63a7\u5236\u5668\u4e0eSPI\u63a5\u53e3\u548cMCP2551 CAN\u6536\u53d1\u5668\uff0c\u4e3a\u60a8\u63d0\u4f9bArduino / Seeeduino CAN-BUS\u51fd\u6570\u3002\u901a\u8fc7\u6dfb\u52a0OBD-II\u8f6c\u6362\u5668\u7535\u7f06\u5e76\u5bfc\u5165OBD-II\u5e93\uff0c\u5c31\u53ef\u4ee5\u6784\u5efa\u677f\u8f7d\u8bca\u65ad\u8bbe\u5907\u6216\u6570\u636e\u8bb0\u5f55\u5668\u3002\n\n\n\u7248\u672c\n\n\n\u672c\u6587\u6863\u9002\u7528\u4e8e\u4ee5\u4e0b\u7248\u672c\u7684\u4ea7\u54c1\uff1a:\n\n\n\n\n\n\n\n\n\u7248\u672c\n\n\n\u53d1\u5e03\u65e5\u671f\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\nCAN BUS Shield V1.0\n\n\nOct 14, 2012\n\n\n \u4e0d\u518d\u9500\u552e\n\n\n\n\n\n\nCAN BUS Shield V1.1\n\n\nAug 10, 2013\n\n\n \u4e0d\u518d\u9500\u552e\n\n\n\n\n\n\nCAN BUS Shield V1.2\n\n\nJan 5, 2015\n\n\n\u70b9\u51fb\u8d2d\u4e70\n\n\n\n\n\n\n\n\nCAN BUS Shield V1.2\u7684\u65b0\u7279\u6027\n\n\n\n\n\u5728PCB\u80cc\u9762\u710a\u63a5\n\n\n\u5c06\u7aef\u5b50\u7535\u963b\u66f4\u6539\u4e3a120\u6b27\u59c6\n\n\n\n\n\u5982\u679c\u6211\u60f3\u5c06\u8fd9\u4e2a\u6269\u5c55\u677f\u8fde\u63a5\u5230\u6211\u7684\u8f66\uff0c\u8be5\u600e\u4e48\u529e\uff1f\n\n\n\u5982\u679c\u60a8\u60f3\u8981\u8bfb\u53d6\u6570\u636e\u6216\u63a7\u5236\u6c7d\u8f66\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528OBD\n DB9\u7535\u7f06\uff0c\u8be5\u7535\u7f06\u5c06\u8f7b\u677e\u5b8c\u6210OBD\u8fde\u63a5\u5668\u5230DB9\u8fde\u63a5\u5668\u7684\u8f6c\u6362\u3002\u8be5\u7535\u7f06\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u5177\u6709OBD\u8fde\u63a5\u5668\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u6211\u4eec\u5728\u7535\u7f06\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5f00\u5173\uff0c\u65b9\u4fbf\u60a8\u7684\u63a7\u5236\u3002\u60a8\u53ef\u4ee5\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u6807\u8d2d\u4e70\u8be5\u7535\u7f06\u3002\n\n\n\n\nUSB-CAN\u5206\u6790\u4eea\n\n\n\u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2aCAN\u603b\u7ebf\u5206\u6790\u4eea\u6765\u68c0\u6d4b\u60a8\u7684CAN\u603b\u7ebf\uff0c\u6211\u4eec\u63a8\u8350\u4e0b\u9762\u7684 \nUSB-CAN Analyzer\n \u3002(\u540c\u6837\u60a8\u53ef\u4ee5\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u7247\u8d2d\u4e70)\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\nCAN V2.0B\u901f\u5ea6\u9ad8\u8fbe1 Mb / s\n\n\nSPI\u63a5\u53e3\u901f\u5ea6\u9ad8\u8fbe10 MHz\n\n\n\u652f\u6301\u6807\u51c6\uff0811\u4f4d\uff09\u548c\u6269\u5c55\uff0829\u4f4d\uff09\u6570\u636e\u4ee5\u53ca\u8fdc\u7a0b\u5e27\n\n\n\u4e24\u4e2a\u5177\u6709\u4f18\u5148\u6d88\u606f\u5b58\u50a8\u7684\u63a5\u6536\u7f13\u51b2\u533a\n\n\n\u5de5\u4e1a\u6807\u51c6DB-9\u8fde\u63a5\u5668\n\n\nLED\u6307\u793a\u706f\n\n\n\n\n\n\nNote\n\n\nCAN BUS \u53ef\u4ee5\u826f\u597d\u5730\u517c\u5bb9Arduino UNO (ATmega328), Arduino Mega (ATmega1280/2560) \u3001 Arduino Leonardo (ATmega32U4).\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\n\nDB9 Interface\n - to connect to OBDII Interface via a DBG-OBD Cable.\n\n\nV_OBD\n - It gets power from OBDII Interface (from DB9)\n\n\nLed Indicator\n:\n\n\nPWR\n: power\n\n\nTX\n: blink when the data is sending\n\n\nRX\n: blink when there's data receiving\n\n\nINT\n: data interrupt\n\n\n\n\n\n\nTerminal\n - CAN_H and CAN_L\n\n\nArduino UNO pin out\n\n\nSerial Grove connector\n\n\nI2C Grove connector\n\n\nICSP pins\n\n\nIC\n - MCP2551, a high-speed CAN transceiver (\ndatasheet\n)\n\n\nIC\n - MCP2515, stand-alone CAN controller with SPI interface (\ndatasheet\n)\n\n\n\n\n\n\nWarning\n\n\n\n\n\u5f53\u60a8\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u4f7f\u7528\u4e24\u4e2a\u4ee5\u4e0a\u7684CAN\u603b\u7ebf\u6269\u5c55\u677f\u65f6\uff0c\u5e94\u8003\u8651\u963b\u6297\u3002\u60a8\u5e94\u8be5\u7528\u5200\u5207\u5272PCB\u4e2d\u7684P1\uff0c\u6216\u8005\u5e72\u8106\u53d6\u4e0bPCB\u4e0a\u7684R3\u3002\n\n\n\n\n\n\n\u7ba1\u811a\u56fe\n\n\n\n\n\n\nNote\n\n\n\n\n\u7a7a\u95f2\u9488\u53ef\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u3002\n\n\n\n\n\n\nDB9\nOBDii \u63a5\u53e3\n\n\n\n\nCS \u5f15\u811a\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cV1.2\u7684SPI_CS\u5f15\u811a\u8fde\u63a5\u5230D9\u3002\u5982\u679c\u8981\u66f4\u6539\u4e3aD10\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\n\n\u6b65\u9aa41\uff1a\u67e5\u770bPCB\u7684\u80cc\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u540d\u4e3aCS\u7684\u710a\u76d8\u3002\n\n\n\n\n\n\n\n\n\u6b65\u9aa42: \u5272\u65ad\u710a\u76d89\u548c\u4e2d\u95f4\u710a\u76d8\u4e4b\u95f4\u7684\u5bfc\u7ebf\n\n\n\n\n\n\n\n\n\u6b65\u9aa43: \u5c06\u4e2d\u95f4\u710a\u76d8\u548c\u710a\u76d810\u710a\u63a5\u5728\u4e00\u8d77\u3002\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002\n\n\n\n\n\n\nSPI \u5f15\u811a\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSPI\u5f15\u811a\uff08SCK\uff0cMISO\uff0cMOSI\uff09\u88ab\u8fde\u63a5\u5230ICSP\u5f15\u811a\u3002\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u6838\u5fc3\u677f\uff0cSPI\u5f15\u811a\u4f4d\u4e8eD11\u301cD13\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u9700\u8981\u5bf9PCB\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u770b\u770bPCB\u7684\u80cc\u9762\uff0c\u6709\u4e09\u4e2a\u710a\u76d8\uff0cMOSI\uff0cMISO\u548cSCK\uff0c\u5b83\u4eec\u9ed8\u8ba4\u8fde\u63a5\u5230A\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u66f4\u6539\u4e3aB\u3002\n\n\n\n\nNote\n\n\n\n\n\u5bf9\u4e8eArduino UNO, Arduino Mega, Arduino Leonardo \u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u57fa\u4e8eAVR \u7684Arduino \u6838\u5fc3\u677f, \u6211\u4eec\u63a8\u8350\u521d\u59cb\u8bbe\u7f6e\u3002\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5357\n\n\n\n\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660eCAN-BUS Shield\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u89812\u5757CAN-BUS\u6269\u5c55\u677f\u4ee5\u53caArduino\u6216Seeeduino\u3002\n\n\n\n\nNote\n\n\n\u6b64\u793a\u4f8b\u57fa\u4e8e \nArduino IDE version 1.6.9\n.\n\n\n\n\n\u6b65\u9aa41: \u6211\u4eec\u9700\u8981\u51c6\u5907\u4e9b\u5565\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u529f\u80fd\n\n\n\u6570\u91cf\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\nCAN-BUS Shield\n\n\nCAN \u603b\u7ebf\u901a\u4fe1\n\n\n2\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\nSeeeduino V4.2\n\n\n\u63a7\u5236\u5668\n\n\n2\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\u8df3\u7ebf\n\n\n\u8fde\u63a5\n\n\n2\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\u6b65\u9aa42: \u786c\u4ef6\u8fde\u63a5\n\n\n\u5c06\u6bcf\u5757CAN-BUS \u6269\u5c55\u677f\u90fd\u63d2\u5728Seeeduino V4.2\u4e0a\uff0c\u7136\u540e\u5982\u4e0b\u56fe\u6240\u793a\u4f7f\u7528\u4e24\u6839\u8df3\u7ebf\u5c06\u4e24\u5757CAN-BUS \u6269\u5c55\u677f\u8fde\u63a5\u8d77\u6765\u3002\n\n\n\n\n\n\nNote\n\n\n\n\nCAN_H \u8fde\u63a5\u5230 CAN_H, CAN_L \u8fde\u63a5\u5230 CAN_L\n\n\n\n\n\n\n\u6b65\u9aa43: \u8f6f\u4ef6\n\n\n\u8bf7\u9075\u5faa \n\u5982\u4f55\u5b89\u88c5Arduino\u5e93\n \u6765\u5b89\u88c5 CAN BUS shield library.\n\n\n\u70b9\u51fb\u4e0b\u9762\u56fe\u6807\u6765\u4e0b\u8f7dCAN BUS shield library\n\n\n\n\n\u4e0b\u8f7d\u5b8c\u6210\u540e\u5b89\u88c5\u5e93\u6587\u4ef6\u5230\u60a8\u7684Arduino\u3002\n\n\n\u4e00\u4e2a\u8282\u70b9(\u6b64\u5904\u4ee3\u8868Seeeduino + CAN_BUS \u6269\u5c55\u677f) \u4f5c\u4e3a\u4e3b\u673a\uff0c\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4ece\u673a\u3002 \u4e3b\u673a\u5c06\u6301\u7eed\u5730\u5411\u4ece\u673a\u53d1\u9001\u6570\u636e\u3002\n\n\n\n\nNote\n\n\n\u5728\u4e0a\u4f20\u4ee3\u7801\u524d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u673a\u3002\n\n\n\n\n\u6253\u5f00\u53d1\u9001\u793a\u4f8b\uff08\u6587\u4ef6\n\u793a\u4f8b\n CAN_BUS_Shield-master\n\u53d1\u9001\uff09\u5e76\u4e0a\u4f20\u5230\u4e3b\u673a\u3002\n\n\n\n\n\u6253\u5f00receive_check\u793a\u4f8b\uff08\u6587\u4ef6\n\u793a\u4f8b\n CAN_BUS_Shield-master\n receive_check\uff09\u5e76\u4e0a\u4f20\u5230\u4ece\u673a\u3002\n\n\n\n\n\u6b65\u9aa44: \u67e5\u770b\u7ed3\u679c\n\n\n\u6253\u5f00Arduino IDE\uff08\u4ece\u673a\uff09\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u60a8\u5c06\u83b7\u5f97\u4ece\u4e3b\u673a\u53d1\u9001\u7684\u6570\u636e\u3002\n\n\n\n\nAPIs\n\n\n\n\n1. \u8bbe\u7f6e\u6ce2\u7279\u7387\n\n\n\u8be5\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316CAN\u603b\u7ebf\u7cfb\u7edf\u7684\u6ce2\u7279\u7387\u3002\n\n\n\u53ef\u7528\u7684\u6ce2\u7279\u7387\u5217\u8868\u5982\u4e0b\uff1a\n\n\n#define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31K25BPS 5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83K3BPS  10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666kbps  17\n#define CAN_1000KBPS 18\n\n\n\n\n\n2. \u8bbe\u7f6e\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u8fc7\u6ee4\u5bc4\u5b58\u5668\n\n\n\u63a7\u5236\u5668\u82af\u7247\u4e0a\u67092\u4e2a\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c5\u4e2a\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1\u4ece\u76ee\u6807\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002\u5b83\u4eec\u7279\u522b\u9002\u7528\u4e8e\u7531\u8bb8\u591a\u8282\u70b9\u7ec4\u6210\u7684\u5927\u578b\u7f51\u7edc\u3002\n\n\n\u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u51fd\u6570\u6765\u5229\u7528\u8fd9\u4e9b\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\u3002\u4ed6\u4eec\u662f\uff1a\n\n\nMask:\n\n\ninit_Mask(unsigned char num, unsigned char ext, unsigned char ulData);\n\n\n\n\n\nFilter:\n\n\ninit_Filt(unsigned char num, unsigned char ext, unsigned char ulData);\n\n\n\n\n\n\n\nnum\n num\u8868\u793a\u8981\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668\u3002\u60a8\u53ef\u4ee5\u8bbe\u7f6e0\u62161\u9009\u62e9\u5c4f\u853d\u5bc4\u5b58\u5668\uff0c0\u81f35\u9009\u62e9\u8fc7\u6ee4\u5bc4\u5b58\u5668\u3002\n\n\next\n \u8868\u793a\u5e27\u7684\u72b6\u6001\u30020\u8868\u793a\u5b83\u662f\u6807\u51c6\u5e27\u30021\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u6269\u5c55\u5e27\u3002\n\n\nulData\n \u4ee3\u8868\u5c4f\u853d\u5e27\u6216\u8fc7\u6ee4\u5e27\u7684\u5185\u5bb9\u3002\n\n\n\n\n3. \u6821\u9a8c\u63a5\u6536\n\n\nMCP2515\u53ef\u4ee5\u5728\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u5176\u4e2d\u8f6f\u4ef6\u68c0\u67e5\u63a5\u6536\u5230\u7684\u5e27\uff0c\u6216\u4f7f\u7528\u9644\u52a0\u5f15\u811a\u6765\u53d1\u4fe1\u53f7\u901a\u77e5\u5e27\u5df2\u88ab\u63a5\u6536\u6216\u53d1\u9001\u5b8c\u6210\u3002\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u8f6e\u8be2\u63a5\u6536\u5230\u7684\u5e27\u3002\n\n\nINT8U MCP_CAN::checkReceive(void);\n\n\n\n\n\n\u5982\u679c\u5e27\u5230\u8fbe\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de1\uff0c\u5982\u679c\u6ca1\u6709\u5230\u8fbe\uff0c\u5219\u8fd4\u56de0\u3002\n\n\n4. \u83b7\u53d6 CAN ID\n\n\n\u5f53\u67d0\u4e9b\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u83b7\u53d6\u201c\u53d1\u9001\u201d\u8282\u70b9\u7684CAN ID\u3002\n\n\nINT32U MCP_CAN::getCanId(void)\n\n\n\n\n\n5. \u53d1\u9001\u6570\u636e\n\n\nCAN.sendMsgBuf(INT8U id, INT8U ext, INT8U len, data_buf);\n\n\n\n\n\n\u8fd9\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230\u603b\u7ebf\u4e0a\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff1a\n* \nid\n \u8868\u793a\u6570\u636e\u6765\u6e90\n* \next\n \u8868\u793a\u5e27\u7684\u72b6\u6001\u3002'0'\u8868\u793a\u6807\u51c6\u5e27\u3002'1'\u8868\u793a\u6269\u5c55\u5e27\u3002\n* \nlen\n \u8868\u793a\u6b64\u5e27\u7684\u957f\u5ea6\u3002\n* \ndata_buf\n \u662f\u6b64\u6d88\u606f\u7684\u5185\u5bb9\u3002\n\n\n\u4f8b\u5982\uff0c\u5728\u201c\u53d1\u9001\u201d\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\uff1a\n\n\nunsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\nCAN.sendMsgBuf(0x00, 0, 8, stmp); //send out the message \nstmp\n to the bus and tell other devices this is a standard frame from 0x00.\n\n\n\n\n\n6. \u63a5\u6536\u6570\u636e\n\n\n\u4ee5\u4e0b\u51fd\u6570\u7528\u4e8e\u5728\u201c\u63a5\u6536\u201d\u8282\u70b9\u4e0a\u63a5\u6536\u6570\u636e\uff1a\n\n\nCAN.readMsgBuf(unsigned char len, unsigned char buf);\n\n\n\n\n\n\u5728\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u90fd\u8bbe\u7f6e\u597d\u7684\u6761\u4ef6\u4e0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u4f1a\u63a5\u6536\u6ee1\u8db3\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u7b5b\u9009\u6761\u4ef6\u7684\u6570\u636e\u5e27\u3002\n\n\n\n\nlen\n \u8868\u793a\u6570\u636e\u957f\u5ea6\u3002\n\n\nbuf\n \u662f\u5b58\u50a8\u6570\u636e\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6ce2\u7279\u7387\n\n\n\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u9891\u7e41\u4f7f\u7528\u7684\u6ce2\u7279\u7387\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\n#define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31KBPS   5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83KBPS   10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666KBPS  17\n#define CAN_1000KBPS 18\n\n\n\n\n\n\u7136\u800c\uff0c\u60a8\u4ecd\u7136\u53ef\u80fd\u627e\u4e0d\u5230\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u8f6f\u4ef6\u6765\u5e2e\u52a9\u60a8\u8ba1\u7b97\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\n\n\n\u70b9\u51fb \n\u8fd9\u91cc\n \u6765\u4e0b\u8f7d\u8be5\u8f6f\u4ef6\u3002\n\n\n\n\n\n\nNote\n\n\n\u8fd9\u4e2a\u8f6f\u4ef6\u4ec5\u4ec5\u652f\u6301Windows\u7cfb\u7edf\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u6253\u5f00\u5b83\uff0c\u6b22\u8fce\u968f\u65f6\u901a\u8fc7\u90ae\u4ef6\u8054\u7cfb \n \u6765\u83b7\u53d6\u6280\u672f\u652f\u6301\u3002\n\n\n\n\n\u6253\u5f00\u8f6f\u4ef6\uff0c\u4f60\u9700\u8981\u505a\u7684\u5c31\u662f\u8bbe\u7f6e\u4f60\u60f3\u8981\u7684\u6ce2\u7279\u7387\uff0c\u7136\u540e\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u70b9\u51fb\u8ba1\u7b97\u3002\n\n\n\u7136\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e9b\u6570\u636e\uff0ccfg1\uff0ccfg2\u548ccfg3\u3002\n\n\n\u60a8\u9700\u8981\u5728\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u3002\n\n\n\u6253\u5f00 \nmcp_can_dfs.h\n, \u4f60\u9700\u8981\u5c06\u4e0b\u5217\u4ee3\u7801\u6dfb\u52a0\u5230\u7b2c272\u884c\u5de6\u53f3\u3002\n\n\n#define MCP_16MHz_xxxkBPS_CFG1 (cfg1)    // xxx is the baud rate you need\n#define MCP_16MHz_xxxkBPS_CFG2 (cfg2)\n#define MCP_16MHz_xxxkBPS_CFG3 (cfg2)\n\n\n\n\n\n\u7136\u540e\u8ba9\u6211\u4eec\u8df3\u8f6c\u5230\u7b2c390\u884c, \u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a\n\n\n#define CAN_xxxKBPS NUM       // xxx is the baudrate you need, and NUM is a number, you need to get a different from the other rates.\n\n\n\n\n\n\u6253\u5f00 \nmcp_can.cpp\n, \u8df3\u8f6c\u5230\u51fd\u6570**mcp2515_configRate**(\u5927\u81f4\u5728\u7b2c190\u884c), \u7136\u540e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801:\n\n\ncase (CAN_xxxKBPS):\n    cfg1 = MCP_16MHz_xxxkBPS_CFG1;\n    cfg2 = MCP_16MHz_xxxkBPS_CFG2;\n    cfg3 = MCP_16MHz_xxxkBPS_CFG3;\n    break;\n\n\n\n\n\n\u7136\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u60a8\u9700\u8981\u7684\u6ce2\u7279\u7387\u4e86\u3002\u5f53\u60a8\u4f7f\u7528\u7684\u6ce2\u7279\u7387\u65f6\uff0c\u8bf7\u7ed9\u6211\u4eec\u4e00\u4e2agithub\u7684\u8bf7\u6c42\uff0c\u8fd9\u6837\u6211\u53ef\u4ee5\u6dfb\u52a0\u5230\u5e93\u6765\u5e2e\u52a9\u5176\u4ed6\u4eba\u3002\u611f\u8c22\uff01\n\n\n\u9879\u76ee\u5de5\u7a0b\n\n\n\n\n\u5982\u679c\u60a8\u60f3\u4f7f\u7528CAN-BUS \u6269\u5f20\u677f\u505a\u4e00\u4e9b\u9177\u70ab\u7684\u9879\u76ee\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u53ef\u4f9b\u53c2\u8003\u3002\n\n\n\u5927\u4f17 CAN BUS \u6e38\u620f\n\n\n\n\nEver wanted to play a car/truck simulator with a real dashboard on your PC? Me too! I'm trying to control a VW Polo 6R dashboard via CAN Bus with an Arduino Uno and a Seeed CAN Bus Shield. Inspired by Silas Parker. Thanks Sepp and Is0-Mick for their great support!\n\n\n\n\n\u9ed1\u8fdb\u8f66\u8f7d CAN-BUS\n\n\n\n\nModern Vehicles all come equipped with a CAN-BUS Controller Area Network, Instead of having a million wires running back and forth from various devices in your car to the battery, its making use of a more clever system.\n\n\nAll electronic functions are connected to the TIPM, (Totally integrated Power Module), such as solenoids/relays to lock the doors or mini motors to wind the windows etc.\n\n\nFrom each node (IE Switch pod that controls your windows or electric door locks) it broadcasts a message across the CAN. When the TIPM detects a valid message it will react accordingly like, lock the doors, switch on lights and so on.\n\n\n\n\nFAQ\n\n\n\n\nQ1: \u6211\u65e0\u6cd5\u4ece\u5176\u4ed6CAN\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002\n\n\n\n\n\u68c0\u67e5\u8fde\u63a5\u662f\u5426\u6b63\u786e\n\n\n\u68c0\u67e5\u6ce2\u7279\u7387\u8bbe\u7f6e\u662f\u5426\u6b63\u786e\n\n\n\n\nQ2: \u4e32\u884c\u76d1\u89c6\u5668\u6253\u5370\u5931\u8d25\u3002\n\n\n*\u68c0\u67e5CS\u5f15\u811a\u8bbe\u7f6e\u662f\u5426\u4e0e\u4ee3\u7801\u5339\u914d\u3002\u5bf9\u4e8eCAN\u603b\u7ebf\u6269\u5c55\u677fV1.1 / 1.2\uff0cCS\u5f15\u811a\u8fde\u63a5\u5230D9\uff0c\u5176\u4ed6\u5219\u4e3aD10\u3002\n\n\nQ3. \u5982\u679c\u6211\u6709\u5176\u4ed6\u95ee\u9898\uff0c\u6211\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u6280\u672f\u652f\u6301\u3002\n\n\n\n\n\u60a8\u53ef\u4ee5\u5728 Seeed \u8bba\u575b \nSeeed Forum\n \u7559\u8a00\u6216\u8005or \u7ed9\u4e0b\u5217\u90ae\u7bb1\u53d1\u9001\u90ae\u4ef6\u81f3 \n.\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n\u3010PDF\u3011\nCAN-BUS Shield V1.2 Schmatics\n\n\n\u3010Eagle\u539f\u7406\u56fe\u3011\nSchematic of CAN-BUS Shield V1.2\n\n\n\u3010CAN_BUS_Shield\u5e93\u3011\nArduino Library for CAN-BUS Shield\n\n\n\u3010MCP2515\u6570\u636e\u624b\u518c\u3011\nMCP2515 datasheet\n\n\n\u3010MCP2551\u6570\u636e\u624b\u518c\u3011\nMCP2551 datasheet\n\n\n\u3010\u793a\u4f8b\u7a0b\u5e8f\u3011\nAn OBD Demo\n\n\n\u3010MCP2515\u6ce2\u7279\u7387\u8ba1\u7b97\u5de5\u5177\u3011\nMCP2515 Baud Rate Tool\n\n\n\u3010USB-CAN\u5206\u6790\u5668\u3011\nUSB-CAN Analyzer\n\n\n\u3010\u7ebf\u7f06DB9\u8f6cOBD2\u3011\nDB9 to OBD2 Cable", 
            "title": "CAN-BUS_Shield_V1.2"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#_1", 
            "text": "CAN V2.0B\u901f\u5ea6\u9ad8\u8fbe1 Mb / s  SPI\u63a5\u53e3\u901f\u5ea6\u9ad8\u8fbe10 MHz  \u652f\u6301\u6807\u51c6\uff0811\u4f4d\uff09\u548c\u6269\u5c55\uff0829\u4f4d\uff09\u6570\u636e\u4ee5\u53ca\u8fdc\u7a0b\u5e27  \u4e24\u4e2a\u5177\u6709\u4f18\u5148\u6d88\u606f\u5b58\u50a8\u7684\u63a5\u6536\u7f13\u51b2\u533a  \u5de5\u4e1a\u6807\u51c6DB-9\u8fde\u63a5\u5668  LED\u6307\u793a\u706f    Note  CAN BUS \u53ef\u4ee5\u826f\u597d\u5730\u517c\u5bb9Arduino UNO (ATmega328), Arduino Mega (ATmega1280/2560) \u3001 Arduino Leonardo (ATmega32U4).", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#_2", 
            "text": "DB9 Interface  - to connect to OBDII Interface via a DBG-OBD Cable.  V_OBD  - It gets power from OBDII Interface (from DB9)  Led Indicator :  PWR : power  TX : blink when the data is sending  RX : blink when there's data receiving  INT : data interrupt    Terminal  - CAN_H and CAN_L  Arduino UNO pin out  Serial Grove connector  I2C Grove connector  ICSP pins  IC  - MCP2551, a high-speed CAN transceiver ( datasheet )  IC  - MCP2515, stand-alone CAN controller with SPI interface ( datasheet )    Warning   \u5f53\u60a8\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u4f7f\u7528\u4e24\u4e2a\u4ee5\u4e0a\u7684CAN\u603b\u7ebf\u6269\u5c55\u677f\u65f6\uff0c\u5e94\u8003\u8651\u963b\u6297\u3002\u60a8\u5e94\u8be5\u7528\u5200\u5207\u5272PCB\u4e2d\u7684P1\uff0c\u6216\u8005\u5e72\u8106\u53d6\u4e0bPCB\u4e0a\u7684R3\u3002    \u7ba1\u811a\u56fe    Note   \u7a7a\u95f2\u9488\u53ef\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u3002    DB9 OBDii \u63a5\u53e3   CS \u5f15\u811a  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cV1.2\u7684SPI_CS\u5f15\u811a\u8fde\u63a5\u5230D9\u3002\u5982\u679c\u8981\u66f4\u6539\u4e3aD10\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002   \u6b65\u9aa41\uff1a\u67e5\u770bPCB\u7684\u80cc\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u540d\u4e3aCS\u7684\u710a\u76d8\u3002     \u6b65\u9aa42: \u5272\u65ad\u710a\u76d89\u548c\u4e2d\u95f4\u710a\u76d8\u4e4b\u95f4\u7684\u5bfc\u7ebf     \u6b65\u9aa43: \u5c06\u4e2d\u95f4\u710a\u76d8\u548c\u710a\u76d810\u710a\u63a5\u5728\u4e00\u8d77\u3002     Warning   \u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002    SPI \u5f15\u811a  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSPI\u5f15\u811a\uff08SCK\uff0cMISO\uff0cMOSI\uff09\u88ab\u8fde\u63a5\u5230ICSP\u5f15\u811a\u3002\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u6838\u5fc3\u677f\uff0cSPI\u5f15\u811a\u4f4d\u4e8eD11\u301cD13\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u9700\u8981\u5bf9PCB\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u770b\u770bPCB\u7684\u80cc\u9762\uff0c\u6709\u4e09\u4e2a\u710a\u76d8\uff0cMOSI\uff0cMISO\u548cSCK\uff0c\u5b83\u4eec\u9ed8\u8ba4\u8fde\u63a5\u5230A\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u66f4\u6539\u4e3aB\u3002   Note   \u5bf9\u4e8eArduino UNO, Arduino Mega, Arduino Leonardo \u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u57fa\u4e8eAVR \u7684Arduino \u6838\u5fc3\u677f, \u6211\u4eec\u63a8\u8350\u521d\u59cb\u8bbe\u7f6e\u3002     Warning   \u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#_3", 
            "text": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660eCAN-BUS Shield\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u89812\u5757CAN-BUS\u6269\u5c55\u677f\u4ee5\u53caArduino\u6216Seeeduino\u3002   Note  \u6b64\u793a\u4f8b\u57fa\u4e8e  Arduino IDE version 1.6.9 .   \u6b65\u9aa41: \u6211\u4eec\u9700\u8981\u51c6\u5907\u4e9b\u5565     \u540d\u79f0  \u529f\u80fd  \u6570\u91cf  \u8d2d\u4e70\u94fe\u63a5      CAN-BUS Shield  CAN \u603b\u7ebf\u901a\u4fe1  2  \u8d2d\u4e70\u94fe\u63a5    Seeeduino V4.2  \u63a7\u5236\u5668  2  \u8d2d\u4e70\u94fe\u63a5    \u8df3\u7ebf  \u8fde\u63a5  2  \u8d2d\u4e70\u94fe\u63a5     \u6b65\u9aa42: \u786c\u4ef6\u8fde\u63a5  \u5c06\u6bcf\u5757CAN-BUS \u6269\u5c55\u677f\u90fd\u63d2\u5728Seeeduino V4.2\u4e0a\uff0c\u7136\u540e\u5982\u4e0b\u56fe\u6240\u793a\u4f7f\u7528\u4e24\u6839\u8df3\u7ebf\u5c06\u4e24\u5757CAN-BUS \u6269\u5c55\u677f\u8fde\u63a5\u8d77\u6765\u3002    Note   CAN_H \u8fde\u63a5\u5230 CAN_H, CAN_L \u8fde\u63a5\u5230 CAN_L    \u6b65\u9aa43: \u8f6f\u4ef6  \u8bf7\u9075\u5faa  \u5982\u4f55\u5b89\u88c5Arduino\u5e93  \u6765\u5b89\u88c5 CAN BUS shield library.  \u70b9\u51fb\u4e0b\u9762\u56fe\u6807\u6765\u4e0b\u8f7dCAN BUS shield library   \u4e0b\u8f7d\u5b8c\u6210\u540e\u5b89\u88c5\u5e93\u6587\u4ef6\u5230\u60a8\u7684Arduino\u3002  \u4e00\u4e2a\u8282\u70b9(\u6b64\u5904\u4ee3\u8868Seeeduino + CAN_BUS \u6269\u5c55\u677f) \u4f5c\u4e3a\u4e3b\u673a\uff0c\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4ece\u673a\u3002 \u4e3b\u673a\u5c06\u6301\u7eed\u5730\u5411\u4ece\u673a\u53d1\u9001\u6570\u636e\u3002   Note  \u5728\u4e0a\u4f20\u4ee3\u7801\u524d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u673a\u3002   \u6253\u5f00\u53d1\u9001\u793a\u4f8b\uff08\u6587\u4ef6 \u793a\u4f8b  CAN_BUS_Shield-master \u53d1\u9001\uff09\u5e76\u4e0a\u4f20\u5230\u4e3b\u673a\u3002   \u6253\u5f00receive_check\u793a\u4f8b\uff08\u6587\u4ef6 \u793a\u4f8b  CAN_BUS_Shield-master  receive_check\uff09\u5e76\u4e0a\u4f20\u5230\u4ece\u673a\u3002   \u6b65\u9aa44: \u67e5\u770b\u7ed3\u679c  \u6253\u5f00Arduino IDE\uff08\u4ece\u673a\uff09\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u60a8\u5c06\u83b7\u5f97\u4ece\u4e3b\u673a\u53d1\u9001\u7684\u6570\u636e\u3002", 
            "title": "\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#apis", 
            "text": "", 
            "title": "APIs"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#1", 
            "text": "\u8be5\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316CAN\u603b\u7ebf\u7cfb\u7edf\u7684\u6ce2\u7279\u7387\u3002  \u53ef\u7528\u7684\u6ce2\u7279\u7387\u5217\u8868\u5982\u4e0b\uff1a  #define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31K25BPS 5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83K3BPS  10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666kbps  17\n#define CAN_1000KBPS 18", 
            "title": "1. \u8bbe\u7f6e\u6ce2\u7279\u7387"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#2", 
            "text": "\u63a7\u5236\u5668\u82af\u7247\u4e0a\u67092\u4e2a\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c5\u4e2a\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1\u4ece\u76ee\u6807\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002\u5b83\u4eec\u7279\u522b\u9002\u7528\u4e8e\u7531\u8bb8\u591a\u8282\u70b9\u7ec4\u6210\u7684\u5927\u578b\u7f51\u7edc\u3002  \u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u51fd\u6570\u6765\u5229\u7528\u8fd9\u4e9b\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\u3002\u4ed6\u4eec\u662f\uff1a  Mask:  init_Mask(unsigned char num, unsigned char ext, unsigned char ulData);  Filter:  init_Filt(unsigned char num, unsigned char ext, unsigned char ulData);   num  num\u8868\u793a\u8981\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668\u3002\u60a8\u53ef\u4ee5\u8bbe\u7f6e0\u62161\u9009\u62e9\u5c4f\u853d\u5bc4\u5b58\u5668\uff0c0\u81f35\u9009\u62e9\u8fc7\u6ee4\u5bc4\u5b58\u5668\u3002  ext  \u8868\u793a\u5e27\u7684\u72b6\u6001\u30020\u8868\u793a\u5b83\u662f\u6807\u51c6\u5e27\u30021\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u6269\u5c55\u5e27\u3002  ulData  \u4ee3\u8868\u5c4f\u853d\u5e27\u6216\u8fc7\u6ee4\u5e27\u7684\u5185\u5bb9\u3002", 
            "title": "2. \u8bbe\u7f6e\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u8fc7\u6ee4\u5bc4\u5b58\u5668"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#3", 
            "text": "MCP2515\u53ef\u4ee5\u5728\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u5176\u4e2d\u8f6f\u4ef6\u68c0\u67e5\u63a5\u6536\u5230\u7684\u5e27\uff0c\u6216\u4f7f\u7528\u9644\u52a0\u5f15\u811a\u6765\u53d1\u4fe1\u53f7\u901a\u77e5\u5e27\u5df2\u88ab\u63a5\u6536\u6216\u53d1\u9001\u5b8c\u6210\u3002  \u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u8f6e\u8be2\u63a5\u6536\u5230\u7684\u5e27\u3002  INT8U MCP_CAN::checkReceive(void);  \u5982\u679c\u5e27\u5230\u8fbe\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de1\uff0c\u5982\u679c\u6ca1\u6709\u5230\u8fbe\uff0c\u5219\u8fd4\u56de0\u3002", 
            "title": "3. \u6821\u9a8c\u63a5\u6536"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#4-can-id", 
            "text": "\u5f53\u67d0\u4e9b\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u83b7\u53d6\u201c\u53d1\u9001\u201d\u8282\u70b9\u7684CAN ID\u3002  INT32U MCP_CAN::getCanId(void)", 
            "title": "4. \u83b7\u53d6 CAN ID"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#5", 
            "text": "CAN.sendMsgBuf(INT8U id, INT8U ext, INT8U len, data_buf);  \u8fd9\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230\u603b\u7ebf\u4e0a\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff1a\n*  id  \u8868\u793a\u6570\u636e\u6765\u6e90\n*  ext  \u8868\u793a\u5e27\u7684\u72b6\u6001\u3002'0'\u8868\u793a\u6807\u51c6\u5e27\u3002'1'\u8868\u793a\u6269\u5c55\u5e27\u3002\n*  len  \u8868\u793a\u6b64\u5e27\u7684\u957f\u5ea6\u3002\n*  data_buf  \u662f\u6b64\u6d88\u606f\u7684\u5185\u5bb9\u3002  \u4f8b\u5982\uff0c\u5728\u201c\u53d1\u9001\u201d\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\uff1a  unsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\nCAN.sendMsgBuf(0x00, 0, 8, stmp); //send out the message  stmp  to the bus and tell other devices this is a standard frame from 0x00.", 
            "title": "5. \u53d1\u9001\u6570\u636e"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#6", 
            "text": "\u4ee5\u4e0b\u51fd\u6570\u7528\u4e8e\u5728\u201c\u63a5\u6536\u201d\u8282\u70b9\u4e0a\u63a5\u6536\u6570\u636e\uff1a  CAN.readMsgBuf(unsigned char len, unsigned char buf);  \u5728\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u90fd\u8bbe\u7f6e\u597d\u7684\u6761\u4ef6\u4e0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u4f1a\u63a5\u6536\u6ee1\u8db3\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u7b5b\u9009\u6761\u4ef6\u7684\u6570\u636e\u5e27\u3002   len  \u8868\u793a\u6570\u636e\u957f\u5ea6\u3002  buf  \u662f\u5b58\u50a8\u6570\u636e\u7684\u4f4d\u7f6e\u3002", 
            "title": "6. \u63a5\u6536\u6570\u636e"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#_4", 
            "text": "\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u9891\u7e41\u4f7f\u7528\u7684\u6ce2\u7279\u7387\uff0c\u5982\u4e0b\u6240\u793a\uff1a  #define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31KBPS   5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83KBPS   10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666KBPS  17\n#define CAN_1000KBPS 18  \u7136\u800c\uff0c\u60a8\u4ecd\u7136\u53ef\u80fd\u627e\u4e0d\u5230\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u8f6f\u4ef6\u6765\u5e2e\u52a9\u60a8\u8ba1\u7b97\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002  \u70b9\u51fb  \u8fd9\u91cc  \u6765\u4e0b\u8f7d\u8be5\u8f6f\u4ef6\u3002    Note  \u8fd9\u4e2a\u8f6f\u4ef6\u4ec5\u4ec5\u652f\u6301Windows\u7cfb\u7edf\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u6253\u5f00\u5b83\uff0c\u6b22\u8fce\u968f\u65f6\u901a\u8fc7\u90ae\u4ef6\u8054\u7cfb   \u6765\u83b7\u53d6\u6280\u672f\u652f\u6301\u3002   \u6253\u5f00\u8f6f\u4ef6\uff0c\u4f60\u9700\u8981\u505a\u7684\u5c31\u662f\u8bbe\u7f6e\u4f60\u60f3\u8981\u7684\u6ce2\u7279\u7387\uff0c\u7136\u540e\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u70b9\u51fb\u8ba1\u7b97\u3002  \u7136\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e9b\u6570\u636e\uff0ccfg1\uff0ccfg2\u548ccfg3\u3002  \u60a8\u9700\u8981\u5728\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u3002  \u6253\u5f00  mcp_can_dfs.h , \u4f60\u9700\u8981\u5c06\u4e0b\u5217\u4ee3\u7801\u6dfb\u52a0\u5230\u7b2c272\u884c\u5de6\u53f3\u3002  #define MCP_16MHz_xxxkBPS_CFG1 (cfg1)    // xxx is the baud rate you need\n#define MCP_16MHz_xxxkBPS_CFG2 (cfg2)\n#define MCP_16MHz_xxxkBPS_CFG3 (cfg2)  \u7136\u540e\u8ba9\u6211\u4eec\u8df3\u8f6c\u5230\u7b2c390\u884c, \u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a  #define CAN_xxxKBPS NUM       // xxx is the baudrate you need, and NUM is a number, you need to get a different from the other rates.  \u6253\u5f00  mcp_can.cpp , \u8df3\u8f6c\u5230\u51fd\u6570**mcp2515_configRate**(\u5927\u81f4\u5728\u7b2c190\u884c), \u7136\u540e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801:  case (CAN_xxxKBPS):\n    cfg1 = MCP_16MHz_xxxkBPS_CFG1;\n    cfg2 = MCP_16MHz_xxxkBPS_CFG2;\n    cfg3 = MCP_16MHz_xxxkBPS_CFG3;\n    break;  \u7136\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u60a8\u9700\u8981\u7684\u6ce2\u7279\u7387\u4e86\u3002\u5f53\u60a8\u4f7f\u7528\u7684\u6ce2\u7279\u7387\u65f6\uff0c\u8bf7\u7ed9\u6211\u4eec\u4e00\u4e2agithub\u7684\u8bf7\u6c42\uff0c\u8fd9\u6837\u6211\u53ef\u4ee5\u6dfb\u52a0\u5230\u5e93\u6765\u5e2e\u52a9\u5176\u4ed6\u4eba\u3002\u611f\u8c22\uff01", 
            "title": "\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6ce2\u7279\u7387"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#_5", 
            "text": "\u5982\u679c\u60a8\u60f3\u4f7f\u7528CAN-BUS \u6269\u5f20\u677f\u505a\u4e00\u4e9b\u9177\u70ab\u7684\u9879\u76ee\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u53ef\u4f9b\u53c2\u8003\u3002", 
            "title": "\u9879\u76ee\u5de5\u7a0b"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#can-bus", 
            "text": "Ever wanted to play a car/truck simulator with a real dashboard on your PC? Me too! I'm trying to control a VW Polo 6R dashboard via CAN Bus with an Arduino Uno and a Seeed CAN Bus Shield. Inspired by Silas Parker. Thanks Sepp and Is0-Mick for their great support!", 
            "title": "\u5927\u4f17 CAN BUS \u6e38\u620f"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#can-bus_1", 
            "text": "Modern Vehicles all come equipped with a CAN-BUS Controller Area Network, Instead of having a million wires running back and forth from various devices in your car to the battery, its making use of a more clever system.  All electronic functions are connected to the TIPM, (Totally integrated Power Module), such as solenoids/relays to lock the doors or mini motors to wind the windows etc.  From each node (IE Switch pod that controls your windows or electric door locks) it broadcasts a message across the CAN. When the TIPM detects a valid message it will react accordingly like, lock the doors, switch on lights and so on.", 
            "title": "\u9ed1\u8fdb\u8f66\u8f7d CAN-BUS"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#faq", 
            "text": "Q1: \u6211\u65e0\u6cd5\u4ece\u5176\u4ed6CAN\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002   \u68c0\u67e5\u8fde\u63a5\u662f\u5426\u6b63\u786e  \u68c0\u67e5\u6ce2\u7279\u7387\u8bbe\u7f6e\u662f\u5426\u6b63\u786e   Q2: \u4e32\u884c\u76d1\u89c6\u5668\u6253\u5370\u5931\u8d25\u3002  *\u68c0\u67e5CS\u5f15\u811a\u8bbe\u7f6e\u662f\u5426\u4e0e\u4ee3\u7801\u5339\u914d\u3002\u5bf9\u4e8eCAN\u603b\u7ebf\u6269\u5c55\u677fV1.1 / 1.2\uff0cCS\u5f15\u811a\u8fde\u63a5\u5230D9\uff0c\u5176\u4ed6\u5219\u4e3aD10\u3002  Q3. \u5982\u679c\u6211\u6709\u5176\u4ed6\u95ee\u9898\uff0c\u6211\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u6280\u672f\u652f\u6301\u3002   \u60a8\u53ef\u4ee5\u5728 Seeed \u8bba\u575b  Seeed Forum  \u7559\u8a00\u6216\u8005or \u7ed9\u4e0b\u5217\u90ae\u7bb1\u53d1\u9001\u90ae\u4ef6\u81f3  .", 
            "title": "FAQ"
        }, 
        {
            "location": "/CAN-BUS_Shield_V1.2/#_6", 
            "text": "\u3010PDF\u3011 CAN-BUS Shield V1.2 Schmatics  \u3010Eagle\u539f\u7406\u56fe\u3011 Schematic of CAN-BUS Shield V1.2  \u3010CAN_BUS_Shield\u5e93\u3011 Arduino Library for CAN-BUS Shield  \u3010MCP2515\u6570\u636e\u624b\u518c\u3011 MCP2515 datasheet  \u3010MCP2551\u6570\u636e\u624b\u518c\u3011 MCP2551 datasheet  \u3010\u793a\u4f8b\u7a0b\u5e8f\u3011 An OBD Demo  \u3010MCP2515\u6ce2\u7279\u7387\u8ba1\u7b97\u5de5\u5177\u3011 MCP2515 Baud Rate Tool  \u3010USB-CAN\u5206\u6790\u5668\u3011 USB-CAN Analyzer  \u3010\u7ebf\u7f06DB9\u8f6cOBD2\u3011 DB9 to OBD2 Cable", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/", 
            "text": "CAN-BUS\n \u662f\u4e00\u79cd\u666e\u901a\u7684\u5de5\u4e1a\u603b\u7ebf\uff0c\u7531\u4e8e\u5176\u957f\u8ddd\u79bb\uff0c\u4e2d\u7b49\u901a\u4fe1\u901f\u5ea6\u548c\u9ad8\u53ef\u9760\u6027\u3002\u5b83\u901a\u5e38\u5728\u73b0\u4ee3\u673a\u5e8a\u4e0a\u5e94\u7528\uff0c\u4f8b\u5982\u6c7d\u8f66\u8bca\u65ad\u603b\u7ebf\u3002\n\n\n\u8be5CAN\u603b\u7ebf\u6269\u5c55\u677f\u91c7\u7528MCP2515 CAN\u603b\u7ebf\u63a7\u5236\u5668\u4e0eSPI\u63a5\u53e3\u548cMCP2551 CAN\u6536\u53d1\u5668\uff0c\u4e3a\u60a8\u63d0\u4f9bArduino / Seeeduino CAN-BUS\u51fd\u6570\u3002\u901a\u8fc7\u6dfb\u52a0OBD-II\u8f6c\u6362\u5668\u7535\u7f06\u5e76\u5bfc\u5165OBD-II\u5e93\uff0c\u5c31\u53ef\u4ee5\u6784\u5efa\u677f\u8f7d\u8bca\u65ad\u8bbe\u5907\u6216\u6570\u636e\u8bb0\u5f55\u5668\u3002\n\n\n\u4e4b\u524d\uff0c\u6211\u4eec\u5236\u4f5c\u4e86\u4e24\u4e2a\u7248\u672c\u7684CAN-BUS Shield\uff0c\u5373V1.0\u548cV1.2\u3002 \u5b83\u4eec\u90fd\u5e7f\u53d7\u6211\u4eec\u7528\u6237\u7684\u597d\u8bc4\u3002 \u4e3a\u4e86\u505a\u5f97\u66f4\u597d\uff0c\u51e0\u4e2a\u6708\u524d\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u5173\u4e8eCAN-BUS Shield V1.2\u7684\u8c03\u7814\uff0c\u6536\u5230\u4e86\u8bb8\u591a\u6709\u4ef7\u503c\u7684\u5efa\u8bae\uff08\u611f\u8c22\u6240\u6709\u53cd\u9988\u7ed9\u6211\u4eec\u7684\u7528\u6237\uff09\u3002\u6211\u4eec\u5341\u5206\u91cd\u89c6\u8fd9\u4e9b\u7528\u6237\u7684\u610f\u89c1\uff0c\u6211\u4eec\u51b3\u5b9a\u8fdb\u884c\u66f4\u65b0\u3002\u4e8e\u662f\uff0c\u65b0\u4e00\u4ee3\u4ea7\u54c1\u5c31\u6b64\u5b55\u80b2\u800c\u751f \u2014\u2014 \nCAN-BUS Shield V2\n\n\n\u7248\u672c\n\n\n\u672c\u6587\u6863\u9002\u7528\u4e8e\u4ee5\u4e0b\u7248\u672c\u7684\u4ea7\u54c1\uff1a:\n\n\n\n\n\n\n\n\n\u7248\u672c\n\n\n\u53d1\u5e03\u65e5\u671f\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\nCAN BUS Shield V1.0\n\n\n2012 11\u6708 14\u53f7\n\n\n \u4e0d\u518d\u9500\u552e\n\n\n\n\n\n\nCAN BUS Shield V1.1\n\n\n2013 8\u670810\u53f7\n\n\n \u4e0d\u518d\u9500\u552e\n\n\n\n\n\n\nCAN BUS Shield V1.2\n\n\n2015 2\u67085\u53f7\n\n\n  \u70b9\u51fb\u8d2d\u4e70\n\n\n\n\n\n\nCAN BUS Shield V2.0\n\n\n2017 8\u67081\u53f7\n\n\n  \u70b9\u51fb\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\u7248\u672c\u5bf9\u6bd4\n\n\n\n\n\n\n\n\n\u7279\u6027\n\n\nV1.2\n\n\nV2.0\n\n\n\n\n\n\n\n\n\n\nCAN-BUS \u63a7\u5236\u82af\u7247\n\n\nMCP2515\n\n\nMCP2515\n\n\n\n\n\n\nCAN \u6536\u53d1\u82af\u7247\n\n\nMCP2551\n\n\nMCP2551\n\n\n\n\n\n\n\u9ed8\u8ba4 OBD \u5f15\u811a\u63a5\u53e3\n\n\n\u6807\u51c6 OBD-II\n\n\n\u6807\u51c6 OBD-II\n\n\n\n\n\n\n\u6807\u51c6 CAN \u5f15\u811a\u63a5\u53e3\n\n\n\u4e0d\u517c\u5bb9\n\n\n\u517c\u5bb9 (\u8df3\u7ebf)\n\n\n\n\n\n\nINT Pin\n\n\n\u4e0d\u53ef\u6539\u53d8\n\n\nD2 \u6216\u8005 D3 (\u8df3\u7ebf)\n\n\n\n\n\n\nTF card \u5957\u7684CS\u5f15\u811a\n\n\n\u6ca1\u6709 TF card \u5361\u5957\n\n\nD4 \u6216\u8005 D5 (\u8df3\u7ebf)\n\n\n\n\n\n\nGrove \u4e32\u884c\u63a5\u53e3\n\n\nD0/D1\n\n\nA0/A1\n\n\n\n\n\n\nI2C Grove\n\n\nA4/A5\n\n\nSDA/SCL\n\n\n\n\n\n\nGrove \u63a5\u53e3\u65b9\u5411\n\n\n\u5782\u76f4\n\n\n\u6c34\u5e73\n\n\n\n\n\n\nP1 \u710a\u76d8\n\n\n\u6269\u5c55\u677f\u6b63\u9762\n\n\n\u6269\u5c55\u677f\u53cd\u9762\n\n\n\n\n\n\n\n\nCAN BUS Shield V2.0 \u7684\u65b0\u7279\u6027\n\n\n\u786c\u4ef6\n\n\n\n\n\u539f\u672cDB9\u63a5\u53e3\u662fOBD\u6807\u51c6\uff0c\u901a\u8fc7\u589e\u52a0\u8df3\u7ebf\uff0c\u517c\u5bb9CAN OPEN\u6807\u51c6\n\n\nINT\u901a\u8fc7\u4e00\u4e2a\u8df3\u7ebf\u9009\u62e9D2\u6216\u8005D3\n\n\n\u589e\u52a0SD\u5361\u5ea7\u5b50\uff0cCS\u9ed8\u8ba4\u63a5\u5230D4\uff0c\u53ef\u4ee5\u901a\u8fc7\u8df3\u7ebf\u5230D5\uff08\u4f7f\u7528stalker\u7684sd\u5ea7\u5b50\uff09\n\n\nSerial\u7684Grove\u5ea7\u5b50\u6539\u5230A0/A1 \uff08\u8003\u8651\u5230D0/D1\u901a\u5e38\u9700\u8981\u7528\u6765\u4e0b\u8f7d\u4ee3\u7801\uff0c\u6ca1\u6709\u529e\u6cd5\u63a5\u5176\u4ed6\u6a21\u5757\uff0cA0/A1\u65e2\u53ef\u4ee5\u5f53\u505a\u6a21\u62df\u53e3\uff0c\u4e5f\u53ef\u4ee5\u5f53\u505a\u6570\u5b57\u53e3\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\uff09\n\n\nI2C\u7684\u8fde\u7ebf\u4e0d\u518d\u63a5\u5230A4/A5\uff0c\u6539\u5230\u6807\u51c6\u5f15\u811a\u7684SDA/SCL\n\n\n\u4e24\u4e2aGrove\u5ea7\u5b50\u8eba\u7740\uff0cICSP\u4e24\u8fb9\u5404\u4e00\u4e2a\n\n\nP1\u653e\u5230\u677f\u5b50\u5e95\u4e0b\uff0c\u65b9\u4fbf\u5207\u5272\u548c\u710a\u63a5\n\n\n\u5176\u4ed6\u57fa\u4e8e\u7535\u5b50/\u6210\u672c\u65b9\u9762\u7684\u4f18\u5316\n\n\n\n\n\u8f6f\u4ef6\n\n\n\n\n\u589e\u52a0\u8bfb\u53d6\u6c7d\u8f66\u6570\u636e\u7684\u51fd\u6570\u53caexamples\n\n\n\u589e\u52a0SD\u5361\u7684\u8bfb\u53d6\n\n\n\u5176\u4ed6bug\u4fee\u590d\u4ee5\u53ca\u4f18\u5316\n\n\n\u589e\u52a0\u628a\u6c7d\u8f66\u6570\u636e\u5b58\u50a8\u5230SD\u5361\u7684example\n\n\n\n\nD-Sub CANbus \u5f15\u811a\u63a5\u53e3\n\n\n\n\n\n\n\n\npin#\n\n\n\u4fe1\u53f7\u540d\u79f0\n\n\n\u4fe1\u53f7\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n1\n\n\nReserved\n\n\nUpgrade Path\n\n\n\n\n\n\n2\n\n\nCAN_L\n\n\nDominant Low\n\n\n\n\n\n\n3\n\n\nCAN_GND\n\n\n\u5730\n\n\n\n\n\n\n4\n\n\nReserved\n\n\nUpgrade Path\n\n\n\n\n\n\n5\n\n\nCAN_SHLD\n\n\n\u6269\u5c55\u677f, \u53ef\u9009\n\n\n\n\n\n\n6\n\n\nGND\n\n\n\u5730\uff0c\u53ef\u9009\n\n\n\n\n\n\n7\n\n\nCAN_H\n\n\nDominant High\n\n\n\n\n\n\n8\n\n\nReserved\n\n\nUpgrade Path\n\n\n\n\n\n\n9\n\n\nCAN_V+\n\n\nPower, \u53ef\u9009\n\n\n\n\n\n\n\n\n\u66ff\u4ee3\u65b9\u6848\n\n\n\u5982\u679c\u60a8\u7684\u9879\u76ee\u662f\u7a7a\u95f4\u6709\u9650\u7684\uff0c\u9664\u4e86CAN-BUS \u4e4b\u5916\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u529f\u80fd\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2aGrove CAN-BUS\u6a21\u5757\uff0c\u4e0eArduino\u517c\u5bb9\uff0c\u66f4\u7d27\u51d1\uff0c\u6027\u4ef7\u6bd4\u66f4\u9ad8\uff0c\u53c2\u8003\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u3002\n\n\n\n\n\u5982\u679c\u6211\u60f3\u5c06\u8fd9\u4e2a\u6269\u5c55\u677f\u8fde\u63a5\u5230\u6211\u7684\u8f66\uff0c\u8be5\u600e\u4e48\u529e\uff1f\n\n\n\u5982\u679c\u60a8\u60f3\u8981\u8bfb\u53d6\u6570\u636e\u6216\u63a7\u5236\u6c7d\u8f66\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528OBD\n DB9\u7535\u7f06\uff0c\u8be5\u7535\u7f06\u5c06\u8f7b\u677e\u5b8c\u6210OBD\u8fde\u63a5\u5668\u5230DB9\u8fde\u63a5\u5668\u7684\u8f6c\u6362\u3002\u8be5\u7535\u7f06\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u5177\u6709OBD\u8fde\u63a5\u5668\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u6211\u4eec\u5728\u7535\u7f06\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5f00\u5173\uff0c\u65b9\u4fbf\u60a8\u7684\u63a7\u5236\u3002\u60a8\u53ef\u4ee5\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u6807\u8d2d\u4e70\u8be5\u7535\u7f06\u3002\n\n\n\n\nUSB-CAN\u5206\u6790\u4eea\n\n\n\u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2aCAN\u603b\u7ebf\u5206\u6790\u4eea\u6765\u68c0\u6d4b\u60a8\u7684CAN\u603b\u7ebf\uff0c\u6211\u4eec\u63a8\u8350\u4e0b\u9762\u7684 \nUSB-CAN Analyzer\n \u3002(\u540c\u6837\u60a8\u53ef\u4ee5\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u7247\u8d2d\u4e70)\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\nCAN V2.0 \u901f\u5ea6\u9ad8\u8fbe1 Mb / s\n\n\nSPI\u63a5\u53e3\u901f\u5ea6\u9ad8\u8fbe10 MHz\n\n\n\u652f\u6301\u6807\u51c6\uff0811\u4f4d\uff09\u548c\u6269\u5c55\uff0829\u4f4d\uff09\u6570\u636e\u4ee5\u53ca\u8fdc\u7a0b\u5e27\n\n\n\u4e24\u4e2a\u5177\u6709\u4f18\u5148\u6d88\u606f\u5b58\u50a8\u7684\u63a5\u6536\u7f13\u51b2\u533a\n\n\n\u5de5\u4e1a\u6807\u51c6DB-9\u8fde\u63a5\u5668\n\n\nOBD-II\u548c\u6807\u51c6CAN\u5f15\u811a\u517c\u5bb9\u53ef\u9009\n\n\n\u53ef\u9009TF card CS\u5f15\u811a\n\n\n\u53ef\u9009\u62e9INT\u5f15\u811a\n\n\n\u65b0\u578b\u6309\u538b\u63a5\u7ebf\u7aef\u5b50\u6613\u4e8e\u8fde\u63a5CAN_H \u548c CAN_L\n\n\n\u4e24\u4e2aGrove\u8fde\u63a5\u5668\uff08I2C\u548cUART\uff09\n\n\nLED\u6307\u793a\u706f\n\n\n\n\n\n\nNote\n\n\nCAN BUS \u53ef\u4ee5\u826f\u597d\u5730\u517c\u5bb9Arduino UNO (ATmega328), Arduino Mega (ATmega1280/2560) \u3001 Arduino Leonardo (ATmega32U4).\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\n\nDB9 \u63a5\u53e3\n - \u901a\u8fc7DBG-OBD\u7ebf\u7f06\u6765\u8fde\u63a5OBDII \u63a5\u53e3\u3002\n\n\nV_OBD\n - \u901a\u8fc7OBDII \u63a5\u53e3\u83b7\u53d6\u7535\u6e90 (\u6765\u7740 DB9)\n\n\nLed \u6307\u793a\u5668\n:\n\n\nPWR\n: \u7535\u6e90\n\n\nTX\n: \u53d1\u9001\u6570\u636e\u65f6\u95ea\u70c1\n\n\nRX\n: \u63a5\u6536\u6570\u636e\u65f6\u95ea\u70c1\n\n\nINT\n: \u6570\u636e\u4e2d\u65ad\n\n\n\n\n\n\n\u63a5\u7ebf\u7aef\u5b50\n - CAN_H \u548c CAN_L\n\n\nArduino UNO \u5f15\u811a\u63a5\u53e3\n\n\nGrove \u4e32\u884c\u8fde\u63a5\u5668\n\n\n**Grove I2C\u8fde\u63a5\u5668 **\n\n\nICSP \u5f15\u811a\n\n\n\u82af\u7247\n - MCP2551, \u9ad8\u901f CAN \u6536\u53d1\u5668 (\ndatasheet\n)\n\n\n\u82af\u7247\n - MCP2515, \u5e26\u6709 SPI \u63a5\u53e3\u7684\u6807\u51c6 CAN \u603b\u7ebf\u63a7\u5236\u5668 (\ndatasheet\n)\n\n\nSD\u5361\u5361\u5ea7\n\n\n\n\n\n\nWarning\n\n\n\n\n\u5f53\u60a8\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u4f7f\u7528\u4e24\u4e2a\u4ee5\u4e0a\u7684CAN\u603b\u7ebf\u6269\u5c55\u677f\u65f6\uff0c\u5e94\u8003\u8651\u963b\u6297\u3002\u60a8\u5e94\u8be5\u7528\u5200\u5207\u5272PCB\u4e2d\u7684P1\uff0c\u6216\u8005\u5e72\u8106\u53d6\u4e0bPCB\u4e0a\u7684R3\u3002\n\n\n\n\n\n\n\u7ba1\u811a\u56fe\n\n\n\n\n\n\nNote\n\n\n\n\n\u7a7a\u95f2\u9488\u53ef\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u3002\n\n\n\n\n\n\nDB9\nOBDii \u63a5\u53e3\n\n\n\n\nCS_CAN \u5f15\u811a\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cV2.0\u7684SPI_CS\u5f15\u811a\u8fde\u63a5\u5230 \nD9\n\u3002\u5982\u679c\u8981\u66f4\u6539\u4e3a \nD10\n \uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\n\n\u6b65\u9aa41\uff1a\u67e5\u770bPCB\u7684\u80cc\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u540d\u4e3a CS_CAN \u7684\u710a\u76d8\u3002\n\n\n\n\n\n\n\n\n\u6b65\u9aa42: \u5272\u65ad\u710a\u76d89\u548c\u4e2d\u95f4\u710a\u76d8\u4e4b\u95f4\u7684\u5bfc\u7ebf\n\n\n\n\n\n\n\n\n\u6b65\u9aa43: \u5c06\u4e2d\u95f4\u710a\u76d8\u548c\u710a\u76d810\u710a\u63a5\u5728\u4e00\u8d77\u3002\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002\n\n\n\n\n\n\nINT pin \u5f15\u811a\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cV2.0\u7684INT\u5f15\u811a\u8fde\u63a5\u5230**D2**\u3002\u5982\u679c\u8981\u66f4\u6539\u4e3a**D3**\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n- \u6b65\u9aa41\uff1a\u67e5\u770bPCB\u7684\u80cc\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u540d\u4e3a INT \u7684\u710a\u76d8\u3002\n\n\n\n\n\n\n\n - \u6b65\u9aa42: \u5272\u65ad\u710a\u76d82\u548c\u4e2d\u95f4\u710a\u76d8\u4e4b\u95f4\u7684\u5bfc\u7ebf\n\n\n\n\n\n\n\n - \u6b65\u9aa43: \u5c06\u4e2d\u95f4\u710a\u76d8\u548c\u710a\u76d83\u710a\u63a5\u5728\u4e00\u8d77\u3002\n\n\n\n\n\n\n\nSPI \u5f15\u811a\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSPI\u5f15\u811a\uff08SCK\uff0cMISO\uff0cMOSI\uff09\u88ab\u8fde\u63a5\u5230ICSP\u5f15\u811a\u3002\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u6838\u5fc3\u677f\uff0cSPI\u5f15\u811a\u4f4d\u4e8eD11\u301cD13\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u9700\u8981\u5bf9PCB\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u770b\u770bPCB\u7684\u80cc\u9762\uff0c\u6709\u4e09\u4e2a\u710a\u76d8\uff0cMOSI\uff0cMISO\u548cSCK\uff0c\u5b83\u4eec\u9ed8\u8ba4\u8fde\u63a5\u5230A\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u66f4\u6539\u4e3aB\u3002\n\n\n\n\nNote\n\n\n\n\n\u5bf9\u4e8eArduino UNO, Arduino Mega, Arduino Leonardo \u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u57fa\u4e8eAVR \u7684Arduino \u6838\u5fc3\u677f, \u6211\u4eec\u63a8\u8350\u521d\u59cb\u8bbe\u7f6e\u3002\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5357\n\n\n\n\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660eCAN-BUS Shield\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u89812\u5757CAN-BUS\u6269\u5c55\u677f\u4ee5\u53caArduino\u6216Seeeduino\u3002\n\n\n\n\nNote\n\n\n\u6b64\u793a\u4f8b\u57fa\u4e8e \nArduino IDE version 1.6.9\n.\n\n\n\n\n\u6b65\u9aa41: \u6211\u4eec\u9700\u8981\u51c6\u5907\u4e9b\u5565\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u529f\u80fd\n\n\n\u6570\u91cf\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\nCAN-BUS Shield\n\n\nCAN \u603b\u7ebf\u901a\u4fe1\n\n\n2\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\nSeeeduino V4.2\n\n\n\u63a7\u5236\u5668\n\n\n2\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\u8df3\u7ebf\n\n\n\u8fde\u63a5\n\n\n2\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\u6b65\u9aa42: \u786c\u4ef6\u8fde\u63a5\n\n\n\u5c06\u6bcf\u5757CAN-BUS \u6269\u5c55\u677f\u90fd\u63d2\u5728Seeeduino V4.2\u4e0a\uff0c\u7136\u540e\u5982\u4e0b\u56fe\u6240\u793a\u4f7f\u7528\u4e24\u6839\u8df3\u7ebf\u5c06\u4e24\u5757CAN-BUS \u6269\u5c55\u677f\u8fde\u63a5\u8d77\u6765\u3002\n\n\n\n\n\n\nNote\n\n\n\n\nCAN_H \u8fde\u63a5\u5230 CAN_H, CAN_L \u8fde\u63a5\u5230 CAN_L\n\n\n\n\n\n\n\u6b65\u9aa43: \u8f6f\u4ef6\n\n\n\u8bf7\u9075\u5faa \n\u5982\u4f55\u5b89\u88c5Arduino\u5e93\n \u6765\u5b89\u88c5 CAN BUS shield library.\n\n\n\u70b9\u51fb\u4e0b\u9762\u56fe\u6807\u6765\u4e0b\u8f7dCAN BUS shield library\n\n\n\n\n\u4e0b\u8f7d\u5b8c\u6210\u540e\u5b89\u88c5\u5e93\u6587\u4ef6\u5230\u60a8\u7684Arduino\u3002\n\n\n\u4e00\u4e2a\u8282\u70b9(\u6b64\u5904\u4ee3\u8868Seeeduino + CAN_BUS \u6269\u5c55\u677f) \u4f5c\u4e3a\u4e3b\u673a\uff0c\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4ece\u673a\u3002 \u4e3b\u673a\u5c06\u6301\u7eed\u5730\u5411\u4ece\u673a\u53d1\u9001\u6570\u636e\u3002\n\n\n\n\nNote\n\n\n\u5728\u4e0a\u4f20\u4ee3\u7801\u524d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u673a\u3002\n\n\n\n\n\u6253\u5f00\u53d1\u9001\u793a\u4f8b\uff08\u6587\u4ef6\n\u793a\u4f8b\n CAN_BUS_Shield-master\n\u53d1\u9001\uff09\u5e76\u4e0a\u4f20\u5230\u4e3b\u673a\u3002\n\n\n\n\n\u6253\u5f00receive_check\u793a\u4f8b\uff08\u6587\u4ef6\n\u793a\u4f8b\n CAN_BUS_Shield-master\n receive_check\uff09\u5e76\u4e0a\u4f20\u5230\u4ece\u673a\u3002\n\n\n\n\n\u6b65\u9aa44: \u67e5\u770b\u7ed3\u679c\n\n\n\u6253\u5f00Arduino IDE\uff08\u4ece\u673a\uff09\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u60a8\u5c06\u83b7\u5f97\u4ece\u4e3b\u673a\u53d1\u9001\u7684\u6570\u636e\u3002\n\n\n\n\nAPIs\n\n\n\n\n1. \u8bbe\u7f6e\u6ce2\u7279\u7387\n\n\n\u8be5\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316CAN\u603b\u7ebf\u7cfb\u7edf\u7684\u6ce2\u7279\u7387\u3002\n\n\n\u53ef\u7528\u7684\u6ce2\u7279\u7387\u5217\u8868\u5982\u4e0b\uff1a\n\n\n#define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31K25BPS 5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83K3BPS  10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666kbps  17\n#define CAN_1000KBPS 18\n\n\n\n\n\n2. \u8bbe\u7f6e\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u8fc7\u6ee4\u5bc4\u5b58\u5668\n\n\n\u63a7\u5236\u5668\u82af\u7247\u4e0a\u67092\u4e2a\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c5\u4e2a\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1\u4ece\u76ee\u6807\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002\u5b83\u4eec\u7279\u522b\u9002\u7528\u4e8e\u7531\u8bb8\u591a\u8282\u70b9\u7ec4\u6210\u7684\u5927\u578b\u7f51\u7edc\u3002\n\n\n\u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u51fd\u6570\u6765\u5229\u7528\u8fd9\u4e9b\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\u3002\u4ed6\u4eec\u662f\uff1a\n\n\nMask:\n\n\ninit_Mask(unsigned char num, unsigned char ext, unsigned char ulData);\n\n\n\n\n\nFilter:\n\n\ninit_Filt(unsigned char num, unsigned char ext, unsigned char ulData);\n\n\n\n\n\n\n\nnum\n num\u8868\u793a\u8981\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668\u3002\u60a8\u53ef\u4ee5\u8bbe\u7f6e0\u62161\u9009\u62e9\u5c4f\u853d\u5bc4\u5b58\u5668\uff0c0\u81f35\u9009\u62e9\u8fc7\u6ee4\u5bc4\u5b58\u5668\u3002\n\n\next\n \u8868\u793a\u5e27\u7684\u72b6\u6001\u30020\u8868\u793a\u5b83\u662f\u6807\u51c6\u5e27\u30021\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u6269\u5c55\u5e27\u3002\n\n\nulData\n \u4ee3\u8868\u5c4f\u853d\u5e27\u6216\u8fc7\u6ee4\u5e27\u7684\u5185\u5bb9\u3002\n\n\n\n\n3. \u6821\u9a8c\u63a5\u6536\n\n\nMCP2515\u53ef\u4ee5\u5728\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u5176\u4e2d\u8f6f\u4ef6\u68c0\u67e5\u63a5\u6536\u5230\u7684\u5e27\uff0c\u6216\u4f7f\u7528\u9644\u52a0\u5f15\u811a\u6765\u53d1\u4fe1\u53f7\u901a\u77e5\u5e27\u5df2\u88ab\u63a5\u6536\u6216\u53d1\u9001\u5b8c\u6210\u3002\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u8f6e\u8be2\u63a5\u6536\u5230\u7684\u5e27\u3002\n\n\nINT8U MCP_CAN::checkReceive(void);\n\n\n\n\n\n\u5982\u679c\u5e27\u5230\u8fbe\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de1\uff0c\u5982\u679c\u6ca1\u6709\u5230\u8fbe\uff0c\u5219\u8fd4\u56de0\u3002\n\n\n4. \u83b7\u53d6 CAN ID\n\n\n\u5f53\u67d0\u4e9b\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u83b7\u53d6\u201c\u53d1\u9001\u201d\u8282\u70b9\u7684CAN ID\u3002\n\n\nINT32U MCP_CAN::getCanId(void)\n\n\n\n\n\n5. \u53d1\u9001\u6570\u636e\n\n\nCAN.sendMsgBuf(INT8U id, INT8U ext, INT8U len, data_buf);\n\n\n\n\n\n\u8fd9\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230\u603b\u7ebf\u4e0a\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff1a\n* \nid\n \u8868\u793a\u6570\u636e\u6765\u6e90\n* \next\n \u8868\u793a\u5e27\u7684\u72b6\u6001\u3002'0'\u8868\u793a\u6807\u51c6\u5e27\u3002'1'\u8868\u793a\u6269\u5c55\u5e27\u3002\n* \nlen\n \u8868\u793a\u6b64\u5e27\u7684\u957f\u5ea6\u3002\n* \ndata_buf\n \u662f\u6b64\u6d88\u606f\u7684\u5185\u5bb9\u3002\n\n\n\u4f8b\u5982\uff0c\u5728\u201c\u53d1\u9001\u201d\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\uff1a\n\n\nunsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\nCAN.sendMsgBuf(0x00, 0, 8, stmp); //send out the message \nstmp\n to the bus and tell other devices this is a standard frame from 0x00.\n\n\n\n\n\n6. \u63a5\u6536\u6570\u636e\n\n\n\u4ee5\u4e0b\u51fd\u6570\u7528\u4e8e\u5728\u201c\u63a5\u6536\u201d\u8282\u70b9\u4e0a\u63a5\u6536\u6570\u636e\uff1a\n\n\nCAN.readMsgBuf(unsigned char len, unsigned char buf);\n\n\n\n\n\n\u5728\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u90fd\u8bbe\u7f6e\u597d\u7684\u6761\u4ef6\u4e0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u4f1a\u63a5\u6536\u6ee1\u8db3\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u7b5b\u9009\u6761\u4ef6\u7684\u6570\u636e\u5e27\u3002\n\n\n\n\nlen\n \u8868\u793a\u6570\u636e\u957f\u5ea6\u3002\n\n\nbuf\n \u662f\u5b58\u50a8\u6570\u636e\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6ce2\u7279\u7387\n\n\n\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u9891\u7e41\u4f7f\u7528\u7684\u6ce2\u7279\u7387\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\n#define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31KBPS   5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83KBPS   10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666KBPS  17\n#define CAN_1000KBPS 18\n\n\n\n\n\n\u7136\u800c\uff0c\u60a8\u4ecd\u7136\u53ef\u80fd\u627e\u4e0d\u5230\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u8f6f\u4ef6\u6765\u5e2e\u52a9\u60a8\u8ba1\u7b97\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\n\n\n\u70b9\u51fb \n\u8fd9\u91cc\n \u6765\u4e0b\u8f7d\u8be5\u8f6f\u4ef6\u3002\n\n\n\n\n\n\nNote\n\n\n\u8fd9\u4e2a\u8f6f\u4ef6\u4ec5\u4ec5\u652f\u6301Windows\u7cfb\u7edf\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u6253\u5f00\u5b83\uff0c\u6b22\u8fce\u968f\u65f6\u901a\u8fc7\u90ae\u4ef6\u8054\u7cfb \n \u6765\u83b7\u53d6\u6280\u672f\u652f\u6301\u3002\n\n\n\n\n\u6253\u5f00\u8f6f\u4ef6\uff0c\u4f60\u9700\u8981\u505a\u7684\u5c31\u662f\u8bbe\u7f6e\u4f60\u60f3\u8981\u7684\u6ce2\u7279\u7387\uff0c\u7136\u540e\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u70b9\u51fb\u8ba1\u7b97\u3002\n\n\n\u7136\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e9b\u6570\u636e\uff0ccfg1\uff0ccfg2\u548ccfg3\u3002\n\n\n\u60a8\u9700\u8981\u5728\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u3002\n\n\n\u6253\u5f00 \nmcp_can_dfs.h\n, \u4f60\u9700\u8981\u5c06\u4e0b\u5217\u4ee3\u7801\u6dfb\u52a0\u5230\u7b2c272\u884c\u5de6\u53f3\u3002\n\n\n#define MCP_16MHz_xxxkBPS_CFG1 (cfg1)    // xxx is the baud rate you need\n#define MCP_16MHz_xxxkBPS_CFG2 (cfg2)\n#define MCP_16MHz_xxxkBPS_CFG3 (cfg2)\n\n\n\n\n\n\u7136\u540e\u8ba9\u6211\u4eec\u8df3\u8f6c\u5230\u7b2c390\u884c, \u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a\n\n\n#define CAN_xxxKBPS NUM       // xxx is the baudrate you need, and NUM is a number, you need to get a different from the other rates.\n\n\n\n\n\n\u6253\u5f00 \nmcp_can.cpp\n, \u8df3\u8f6c\u5230\u51fd\u6570**mcp2515_configRate**(\u5927\u81f4\u5728\u7b2c190\u884c), \u7136\u540e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801:\n\n\ncase (CAN_xxxKBPS):\n    cfg1 = MCP_16MHz_xxxkBPS_CFG1;\n    cfg2 = MCP_16MHz_xxxkBPS_CFG2;\n    cfg3 = MCP_16MHz_xxxkBPS_CFG3;\n    break;\n\n\n\n\n\n\u7136\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u60a8\u9700\u8981\u7684\u6ce2\u7279\u7387\u4e86\u3002\u5f53\u60a8\u4f7f\u7528\u7684\u6ce2\u7279\u7387\u65f6\uff0c\u8bf7\u7ed9\u6211\u4eec\u4e00\u4e2agithub\u7684\u8bf7\u6c42\uff0c\u8fd9\u6837\u6211\u53ef\u4ee5\u6dfb\u52a0\u5230\u5e93\u6765\u5e2e\u52a9\u5176\u4ed6\u4eba\u3002\u611f\u8c22\uff01\n\n\n\u9879\u76ee\u5de5\u7a0b\n\n\n\n\n\u5982\u679c\u60a8\u60f3\u4f7f\u7528CAN-BUS \u6269\u5c55\u677f\u505a\u4e00\u4e9b\u9177\u70ab\u7684\u9879\u76ee\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u53ef\u4f9b\u53c2\u8003\u3002\n\n\n\u5927\u4f17 CAN BUS \u5c0f\u6e38\u620f\n\n\n\n\nEver wanted to play a car/truck simulator with a real dashboard on your PC? Me too! I'm trying to control a VW Polo 6R dashboard via CAN Bus with an Arduino Uno and a Seeed CAN Bus Shield. Inspired by Silas Parker. Thanks Sepp and Is0-Mick for their great support!\n\n\n\n\n\u9ed1\u8fdb\u8f66\u8f7d CAN-BUS\n\n\n\n\nModern Vehicles all come equipped with a CAN-BUS Controller Area Network, Instead of having a million wires running back and forth from various devices in your car to the battery, its making use of a more clever system.\n\n\nAll electronic functions are connected to the TIPM, (Totally integrated Power Module), such as solenoids/relays to lock the doors or mini motors to wind the windows etc.\n\n\nFrom each node (IE Switch pod that controls your windows or electric door locks) it broadcasts a message across the CAN. When the TIPM detects a valid message it will react accordingly like, lock the doors, switch on lights and so on.\n\n\n\n\nFAQ\n\n\n\n\nQ1: \u6211\u65e0\u6cd5\u4ece\u5176\u4ed6CAN\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002\n\n\n\n\n\u68c0\u67e5\u8fde\u63a5\u662f\u5426\u6b63\u786e\n\n\n\u68c0\u67e5\u6ce2\u7279\u7387\u8bbe\u7f6e\u662f\u5426\u6b63\u786e\n\n\n\n\nQ2: \u4e32\u884c\u76d1\u89c6\u5668\u6253\u5370\u5931\u8d25\u3002\n\n\n*\u68c0\u67e5CS\u5f15\u811a\u8bbe\u7f6e\u662f\u5426\u4e0e\u4ee3\u7801\u5339\u914d\u3002\u5bf9\u4e8eCAN\u603b\u7ebf\u6269\u5c55\u677fV1.1 / 1.2 /2.0 CS \u5f15\u811a\u9ed8\u8ba4\u8fde\u63a5\u5230 D9\uff0c\u5176\u4ed6\u5219\u4e3a D10\u3002\n\n\nQ3. \u5982\u679c\u6211\u6709\u5176\u4ed6\u95ee\u9898\uff0c\u6211\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u6280\u672f\u652f\u6301\u3002\n\n\n\n\n\u60a8\u53ef\u4ee5\u5728 Seeed \u8bba\u575b \nSeeed Forum\n \u7559\u8a00\u6216\u8005or \u7ed9\u4e0b\u5217\u90ae\u7bb1\u53d1\u9001\u90ae\u4ef6\u81f3 \n.\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n\u3010PDF\u3011\nCAN-BUS Shield V2.0 Schmatics\n\n\n\u3010Eagle\u539f\u7406\u56fe\u3011\nSchematic \n PCB of CAN-BUS Shield V2.0\n\n\n\u3010CAN_BUS_Shield\u5e93\u3011\nArduino Library for CAN-BUS Shield\n\n\n\u3010MCP2515\u6570\u636e\u624b\u518c\u3011\nMCP2515 datasheet\n\n\n\u3010MCP2551\u6570\u636e\u624b\u518c\u3011\nMCP2551 datasheet\n\n\n\u3010\u793a\u4f8b\u7a0b\u5e8f\u3011\nAn OBD Demo\n\n\n\u3010MCP2515\u6ce2\u7279\u7387\u8ba1\u7b97\u5de5\u5177\u3011\nMCP2515 Baud Rate Tool\n\n\n\u3010USB-CAN\u5206\u6790\u5668\u3011\nUSB-CAN Analyzer\n\n\n\u3010\u7ebf\u7f06DB9\u8f6cOBD2\u3011\nDB9 to OBD2 Cable", 
            "title": "CAN-BUS_Shield_V2.0"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_1", 
            "text": "\u539f\u672cDB9\u63a5\u53e3\u662fOBD\u6807\u51c6\uff0c\u901a\u8fc7\u589e\u52a0\u8df3\u7ebf\uff0c\u517c\u5bb9CAN OPEN\u6807\u51c6  INT\u901a\u8fc7\u4e00\u4e2a\u8df3\u7ebf\u9009\u62e9D2\u6216\u8005D3  \u589e\u52a0SD\u5361\u5ea7\u5b50\uff0cCS\u9ed8\u8ba4\u63a5\u5230D4\uff0c\u53ef\u4ee5\u901a\u8fc7\u8df3\u7ebf\u5230D5\uff08\u4f7f\u7528stalker\u7684sd\u5ea7\u5b50\uff09  Serial\u7684Grove\u5ea7\u5b50\u6539\u5230A0/A1 \uff08\u8003\u8651\u5230D0/D1\u901a\u5e38\u9700\u8981\u7528\u6765\u4e0b\u8f7d\u4ee3\u7801\uff0c\u6ca1\u6709\u529e\u6cd5\u63a5\u5176\u4ed6\u6a21\u5757\uff0cA0/A1\u65e2\u53ef\u4ee5\u5f53\u505a\u6a21\u62df\u53e3\uff0c\u4e5f\u53ef\u4ee5\u5f53\u505a\u6570\u5b57\u53e3\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\uff09  I2C\u7684\u8fde\u7ebf\u4e0d\u518d\u63a5\u5230A4/A5\uff0c\u6539\u5230\u6807\u51c6\u5f15\u811a\u7684SDA/SCL  \u4e24\u4e2aGrove\u5ea7\u5b50\u8eba\u7740\uff0cICSP\u4e24\u8fb9\u5404\u4e00\u4e2a  P1\u653e\u5230\u677f\u5b50\u5e95\u4e0b\uff0c\u65b9\u4fbf\u5207\u5272\u548c\u710a\u63a5  \u5176\u4ed6\u57fa\u4e8e\u7535\u5b50/\u6210\u672c\u65b9\u9762\u7684\u4f18\u5316", 
            "title": "\u786c\u4ef6"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_2", 
            "text": "\u589e\u52a0\u8bfb\u53d6\u6c7d\u8f66\u6570\u636e\u7684\u51fd\u6570\u53caexamples  \u589e\u52a0SD\u5361\u7684\u8bfb\u53d6  \u5176\u4ed6bug\u4fee\u590d\u4ee5\u53ca\u4f18\u5316  \u589e\u52a0\u628a\u6c7d\u8f66\u6570\u636e\u5b58\u50a8\u5230SD\u5361\u7684example   D-Sub CANbus \u5f15\u811a\u63a5\u53e3     pin#  \u4fe1\u53f7\u540d\u79f0  \u4fe1\u53f7\u63cf\u8ff0      1  Reserved  Upgrade Path    2  CAN_L  Dominant Low    3  CAN_GND  \u5730    4  Reserved  Upgrade Path    5  CAN_SHLD  \u6269\u5c55\u677f, \u53ef\u9009    6  GND  \u5730\uff0c\u53ef\u9009    7  CAN_H  Dominant High    8  Reserved  Upgrade Path    9  CAN_V+  Power, \u53ef\u9009     \u66ff\u4ee3\u65b9\u6848  \u5982\u679c\u60a8\u7684\u9879\u76ee\u662f\u7a7a\u95f4\u6709\u9650\u7684\uff0c\u9664\u4e86CAN-BUS \u4e4b\u5916\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u529f\u80fd\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2aGrove CAN-BUS\u6a21\u5757\uff0c\u4e0eArduino\u517c\u5bb9\uff0c\u66f4\u7d27\u51d1\uff0c\u6027\u4ef7\u6bd4\u66f4\u9ad8\uff0c\u53c2\u8003\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u3002   \u5982\u679c\u6211\u60f3\u5c06\u8fd9\u4e2a\u6269\u5c55\u677f\u8fde\u63a5\u5230\u6211\u7684\u8f66\uff0c\u8be5\u600e\u4e48\u529e\uff1f  \u5982\u679c\u60a8\u60f3\u8981\u8bfb\u53d6\u6570\u636e\u6216\u63a7\u5236\u6c7d\u8f66\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528OBD  DB9\u7535\u7f06\uff0c\u8be5\u7535\u7f06\u5c06\u8f7b\u677e\u5b8c\u6210OBD\u8fde\u63a5\u5668\u5230DB9\u8fde\u63a5\u5668\u7684\u8f6c\u6362\u3002\u8be5\u7535\u7f06\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u5177\u6709OBD\u8fde\u63a5\u5668\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u6211\u4eec\u5728\u7535\u7f06\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5f00\u5173\uff0c\u65b9\u4fbf\u60a8\u7684\u63a7\u5236\u3002\u60a8\u53ef\u4ee5\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u6807\u8d2d\u4e70\u8be5\u7535\u7f06\u3002   USB-CAN\u5206\u6790\u4eea  \u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2aCAN\u603b\u7ebf\u5206\u6790\u4eea\u6765\u68c0\u6d4b\u60a8\u7684CAN\u603b\u7ebf\uff0c\u6211\u4eec\u63a8\u8350\u4e0b\u9762\u7684  USB-CAN Analyzer  \u3002(\u540c\u6837\u60a8\u53ef\u4ee5\u70b9\u51fb\u4e0b\u9762\u7684\u56fe\u7247\u8d2d\u4e70)", 
            "title": "\u8f6f\u4ef6"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_3", 
            "text": "CAN V2.0 \u901f\u5ea6\u9ad8\u8fbe1 Mb / s  SPI\u63a5\u53e3\u901f\u5ea6\u9ad8\u8fbe10 MHz  \u652f\u6301\u6807\u51c6\uff0811\u4f4d\uff09\u548c\u6269\u5c55\uff0829\u4f4d\uff09\u6570\u636e\u4ee5\u53ca\u8fdc\u7a0b\u5e27  \u4e24\u4e2a\u5177\u6709\u4f18\u5148\u6d88\u606f\u5b58\u50a8\u7684\u63a5\u6536\u7f13\u51b2\u533a  \u5de5\u4e1a\u6807\u51c6DB-9\u8fde\u63a5\u5668  OBD-II\u548c\u6807\u51c6CAN\u5f15\u811a\u517c\u5bb9\u53ef\u9009  \u53ef\u9009TF card CS\u5f15\u811a  \u53ef\u9009\u62e9INT\u5f15\u811a  \u65b0\u578b\u6309\u538b\u63a5\u7ebf\u7aef\u5b50\u6613\u4e8e\u8fde\u63a5CAN_H \u548c CAN_L  \u4e24\u4e2aGrove\u8fde\u63a5\u5668\uff08I2C\u548cUART\uff09  LED\u6307\u793a\u706f    Note  CAN BUS \u53ef\u4ee5\u826f\u597d\u5730\u517c\u5bb9Arduino UNO (ATmega328), Arduino Mega (ATmega1280/2560) \u3001 Arduino Leonardo (ATmega32U4).", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_4", 
            "text": "DB9 \u63a5\u53e3  - \u901a\u8fc7DBG-OBD\u7ebf\u7f06\u6765\u8fde\u63a5OBDII \u63a5\u53e3\u3002  V_OBD  - \u901a\u8fc7OBDII \u63a5\u53e3\u83b7\u53d6\u7535\u6e90 (\u6765\u7740 DB9)  Led \u6307\u793a\u5668 :  PWR : \u7535\u6e90  TX : \u53d1\u9001\u6570\u636e\u65f6\u95ea\u70c1  RX : \u63a5\u6536\u6570\u636e\u65f6\u95ea\u70c1  INT : \u6570\u636e\u4e2d\u65ad    \u63a5\u7ebf\u7aef\u5b50  - CAN_H \u548c CAN_L  Arduino UNO \u5f15\u811a\u63a5\u53e3  Grove \u4e32\u884c\u8fde\u63a5\u5668  **Grove I2C\u8fde\u63a5\u5668 **  ICSP \u5f15\u811a  \u82af\u7247  - MCP2551, \u9ad8\u901f CAN \u6536\u53d1\u5668 ( datasheet )  \u82af\u7247  - MCP2515, \u5e26\u6709 SPI \u63a5\u53e3\u7684\u6807\u51c6 CAN \u603b\u7ebf\u63a7\u5236\u5668 ( datasheet )  SD\u5361\u5361\u5ea7    Warning   \u5f53\u60a8\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u4f7f\u7528\u4e24\u4e2a\u4ee5\u4e0a\u7684CAN\u603b\u7ebf\u6269\u5c55\u677f\u65f6\uff0c\u5e94\u8003\u8651\u963b\u6297\u3002\u60a8\u5e94\u8be5\u7528\u5200\u5207\u5272PCB\u4e2d\u7684P1\uff0c\u6216\u8005\u5e72\u8106\u53d6\u4e0bPCB\u4e0a\u7684R3\u3002    \u7ba1\u811a\u56fe    Note   \u7a7a\u95f2\u9488\u53ef\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u3002    DB9 OBDii \u63a5\u53e3   CS_CAN \u5f15\u811a  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cV2.0\u7684SPI_CS\u5f15\u811a\u8fde\u63a5\u5230  D9 \u3002\u5982\u679c\u8981\u66f4\u6539\u4e3a  D10  \uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002   \u6b65\u9aa41\uff1a\u67e5\u770bPCB\u7684\u80cc\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u540d\u4e3a CS_CAN \u7684\u710a\u76d8\u3002     \u6b65\u9aa42: \u5272\u65ad\u710a\u76d89\u548c\u4e2d\u95f4\u710a\u76d8\u4e4b\u95f4\u7684\u5bfc\u7ebf     \u6b65\u9aa43: \u5c06\u4e2d\u95f4\u710a\u76d8\u548c\u710a\u76d810\u710a\u63a5\u5728\u4e00\u8d77\u3002     Warning   \u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002    INT pin \u5f15\u811a  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cV2.0\u7684INT\u5f15\u811a\u8fde\u63a5\u5230**D2**\u3002\u5982\u679c\u8981\u66f4\u6539\u4e3a**D3**\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002  - \u6b65\u9aa41\uff1a\u67e5\u770bPCB\u7684\u80cc\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u540d\u4e3a INT \u7684\u710a\u76d8\u3002    - \u6b65\u9aa42: \u5272\u65ad\u710a\u76d82\u548c\u4e2d\u95f4\u710a\u76d8\u4e4b\u95f4\u7684\u5bfc\u7ebf    - \u6b65\u9aa43: \u5c06\u4e2d\u95f4\u710a\u76d8\u548c\u710a\u76d83\u710a\u63a5\u5728\u4e00\u8d77\u3002   SPI \u5f15\u811a  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSPI\u5f15\u811a\uff08SCK\uff0cMISO\uff0cMOSI\uff09\u88ab\u8fde\u63a5\u5230ICSP\u5f15\u811a\u3002\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u6838\u5fc3\u677f\uff0cSPI\u5f15\u811a\u4f4d\u4e8eD11\u301cD13\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u9700\u8981\u5bf9PCB\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u3002\u770b\u770bPCB\u7684\u80cc\u9762\uff0c\u6709\u4e09\u4e2a\u710a\u76d8\uff0cMOSI\uff0cMISO\u548cSCK\uff0c\u5b83\u4eec\u9ed8\u8ba4\u8fde\u63a5\u5230A\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u66f4\u6539\u4e3aB\u3002   Note   \u5bf9\u4e8eArduino UNO, Arduino Mega, Arduino Leonardo \u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u57fa\u4e8eAVR \u7684Arduino \u6838\u5fc3\u677f, \u6211\u4eec\u63a8\u8350\u521d\u59cb\u8bbe\u7f6e\u3002     Warning   \u5207\u5272\u7684\u65f6\u5019\u8bf7\u60a8\u5c0f\u5fc3\uff0c\u4e0d\u8981\u4f24\u5230\u81ea\u5df1\u6216\u8005\u5272\u574fPCB\u677f\u5b50\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_5", 
            "text": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660eCAN-BUS Shield\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u89812\u5757CAN-BUS\u6269\u5c55\u677f\u4ee5\u53caArduino\u6216Seeeduino\u3002   Note  \u6b64\u793a\u4f8b\u57fa\u4e8e  Arduino IDE version 1.6.9 .   \u6b65\u9aa41: \u6211\u4eec\u9700\u8981\u51c6\u5907\u4e9b\u5565     \u540d\u79f0  \u529f\u80fd  \u6570\u91cf  \u8d2d\u4e70\u94fe\u63a5      CAN-BUS Shield  CAN \u603b\u7ebf\u901a\u4fe1  2  \u8d2d\u4e70\u94fe\u63a5    Seeeduino V4.2  \u63a7\u5236\u5668  2  \u8d2d\u4e70\u94fe\u63a5    \u8df3\u7ebf  \u8fde\u63a5  2  \u8d2d\u4e70\u94fe\u63a5     \u6b65\u9aa42: \u786c\u4ef6\u8fde\u63a5  \u5c06\u6bcf\u5757CAN-BUS \u6269\u5c55\u677f\u90fd\u63d2\u5728Seeeduino V4.2\u4e0a\uff0c\u7136\u540e\u5982\u4e0b\u56fe\u6240\u793a\u4f7f\u7528\u4e24\u6839\u8df3\u7ebf\u5c06\u4e24\u5757CAN-BUS \u6269\u5c55\u677f\u8fde\u63a5\u8d77\u6765\u3002    Note   CAN_H \u8fde\u63a5\u5230 CAN_H, CAN_L \u8fde\u63a5\u5230 CAN_L    \u6b65\u9aa43: \u8f6f\u4ef6  \u8bf7\u9075\u5faa  \u5982\u4f55\u5b89\u88c5Arduino\u5e93  \u6765\u5b89\u88c5 CAN BUS shield library.  \u70b9\u51fb\u4e0b\u9762\u56fe\u6807\u6765\u4e0b\u8f7dCAN BUS shield library   \u4e0b\u8f7d\u5b8c\u6210\u540e\u5b89\u88c5\u5e93\u6587\u4ef6\u5230\u60a8\u7684Arduino\u3002  \u4e00\u4e2a\u8282\u70b9(\u6b64\u5904\u4ee3\u8868Seeeduino + CAN_BUS \u6269\u5c55\u677f) \u4f5c\u4e3a\u4e3b\u673a\uff0c\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4ece\u673a\u3002 \u4e3b\u673a\u5c06\u6301\u7eed\u5730\u5411\u4ece\u673a\u53d1\u9001\u6570\u636e\u3002   Note  \u5728\u4e0a\u4f20\u4ee3\u7801\u524d\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u673a\u3002   \u6253\u5f00\u53d1\u9001\u793a\u4f8b\uff08\u6587\u4ef6 \u793a\u4f8b  CAN_BUS_Shield-master \u53d1\u9001\uff09\u5e76\u4e0a\u4f20\u5230\u4e3b\u673a\u3002   \u6253\u5f00receive_check\u793a\u4f8b\uff08\u6587\u4ef6 \u793a\u4f8b  CAN_BUS_Shield-master  receive_check\uff09\u5e76\u4e0a\u4f20\u5230\u4ece\u673a\u3002   \u6b65\u9aa44: \u67e5\u770b\u7ed3\u679c  \u6253\u5f00Arduino IDE\uff08\u4ece\u673a\uff09\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u60a8\u5c06\u83b7\u5f97\u4ece\u4e3b\u673a\u53d1\u9001\u7684\u6570\u636e\u3002", 
            "title": "\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#apis", 
            "text": "", 
            "title": "APIs"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#1", 
            "text": "\u8be5\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316CAN\u603b\u7ebf\u7cfb\u7edf\u7684\u6ce2\u7279\u7387\u3002  \u53ef\u7528\u7684\u6ce2\u7279\u7387\u5217\u8868\u5982\u4e0b\uff1a  #define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31K25BPS 5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83K3BPS  10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666kbps  17\n#define CAN_1000KBPS 18", 
            "title": "1. \u8bbe\u7f6e\u6ce2\u7279\u7387"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#2", 
            "text": "\u63a7\u5236\u5668\u82af\u7247\u4e0a\u67092\u4e2a\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c5\u4e2a\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1\u4ece\u76ee\u6807\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002\u5b83\u4eec\u7279\u522b\u9002\u7528\u4e8e\u7531\u8bb8\u591a\u8282\u70b9\u7ec4\u6210\u7684\u5927\u578b\u7f51\u7edc\u3002  \u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u51fd\u6570\u6765\u5229\u7528\u8fd9\u4e9b\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u6ee4\u6ce2\u5668\u5bc4\u5b58\u5668\u3002\u4ed6\u4eec\u662f\uff1a  Mask:  init_Mask(unsigned char num, unsigned char ext, unsigned char ulData);  Filter:  init_Filt(unsigned char num, unsigned char ext, unsigned char ulData);   num  num\u8868\u793a\u8981\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668\u3002\u60a8\u53ef\u4ee5\u8bbe\u7f6e0\u62161\u9009\u62e9\u5c4f\u853d\u5bc4\u5b58\u5668\uff0c0\u81f35\u9009\u62e9\u8fc7\u6ee4\u5bc4\u5b58\u5668\u3002  ext  \u8868\u793a\u5e27\u7684\u72b6\u6001\u30020\u8868\u793a\u5b83\u662f\u6807\u51c6\u5e27\u30021\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u6269\u5c55\u5e27\u3002  ulData  \u4ee3\u8868\u5c4f\u853d\u5e27\u6216\u8fc7\u6ee4\u5e27\u7684\u5185\u5bb9\u3002", 
            "title": "2. \u8bbe\u7f6e\u63a5\u6536\u5c4f\u853d\u5bc4\u5b58\u5668\u548c\u8fc7\u6ee4\u5bc4\u5b58\u5668"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#3", 
            "text": "MCP2515\u53ef\u4ee5\u5728\u8f6e\u8be2\u6a21\u5f0f\u4e0b\u5de5\u4f5c\uff0c\u5176\u4e2d\u8f6f\u4ef6\u68c0\u67e5\u63a5\u6536\u5230\u7684\u5e27\uff0c\u6216\u4f7f\u7528\u9644\u52a0\u5f15\u811a\u6765\u53d1\u4fe1\u53f7\u901a\u77e5\u5e27\u5df2\u88ab\u63a5\u6536\u6216\u53d1\u9001\u5b8c\u6210\u3002  \u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u8f6e\u8be2\u63a5\u6536\u5230\u7684\u5e27\u3002  INT8U MCP_CAN::checkReceive(void);  \u5982\u679c\u5e27\u5230\u8fbe\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de1\uff0c\u5982\u679c\u6ca1\u6709\u5230\u8fbe\uff0c\u5219\u8fd4\u56de0\u3002", 
            "title": "3. \u6821\u9a8c\u63a5\u6536"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#4-can-id", 
            "text": "\u5f53\u67d0\u4e9b\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u83b7\u53d6\u201c\u53d1\u9001\u201d\u8282\u70b9\u7684CAN ID\u3002  INT32U MCP_CAN::getCanId(void)", 
            "title": "4. \u83b7\u53d6 CAN ID"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#5", 
            "text": "CAN.sendMsgBuf(INT8U id, INT8U ext, INT8U len, data_buf);  \u8fd9\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230\u603b\u7ebf\u4e0a\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff1a\n*  id  \u8868\u793a\u6570\u636e\u6765\u6e90\n*  ext  \u8868\u793a\u5e27\u7684\u72b6\u6001\u3002'0'\u8868\u793a\u6807\u51c6\u5e27\u3002'1'\u8868\u793a\u6269\u5c55\u5e27\u3002\n*  len  \u8868\u793a\u6b64\u5e27\u7684\u957f\u5ea6\u3002\n*  data_buf  \u662f\u6b64\u6d88\u606f\u7684\u5185\u5bb9\u3002  \u4f8b\u5982\uff0c\u5728\u201c\u53d1\u9001\u201d\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\uff1a  unsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\nCAN.sendMsgBuf(0x00, 0, 8, stmp); //send out the message  stmp  to the bus and tell other devices this is a standard frame from 0x00.", 
            "title": "5. \u53d1\u9001\u6570\u636e"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#6", 
            "text": "\u4ee5\u4e0b\u51fd\u6570\u7528\u4e8e\u5728\u201c\u63a5\u6536\u201d\u8282\u70b9\u4e0a\u63a5\u6536\u6570\u636e\uff1a  CAN.readMsgBuf(unsigned char len, unsigned char buf);  \u5728\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u90fd\u8bbe\u7f6e\u597d\u7684\u6761\u4ef6\u4e0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u4f1a\u63a5\u6536\u6ee1\u8db3\u5c4f\u853d\u5668\u548c\u8fc7\u6ee4\u5668\u7b5b\u9009\u6761\u4ef6\u7684\u6570\u636e\u5e27\u3002   len  \u8868\u793a\u6570\u636e\u957f\u5ea6\u3002  buf  \u662f\u5b58\u50a8\u6570\u636e\u7684\u4f4d\u7f6e\u3002", 
            "title": "6. \u63a5\u6536\u6570\u636e"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_6", 
            "text": "\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u9891\u7e41\u4f7f\u7528\u7684\u6ce2\u7279\u7387\uff0c\u5982\u4e0b\u6240\u793a\uff1a  #define CAN_5KBPS    1\n#define CAN_10KBPS   2\n#define CAN_20KBPS   3\n#define CAN_25KBPS   4\n#define CAN_31KBPS   5\n#define CAN_33KBPS   6\n#define CAN_40KBPS   7\n#define CAN_50KBPS   8\n#define CAN_80KBPS   9\n#define CAN_83KBPS   10\n#define CAN_95KBPS   11\n#define CAN_100KBPS  12\n#define CAN_125KBPS  13\n#define CAN_200KBPS  14\n#define CAN_250KBPS  15\n#define CAN_500KBPS  16\n#define CAN_666KBPS  17\n#define CAN_1000KBPS 18  \u7136\u800c\uff0c\u60a8\u4ecd\u7136\u53ef\u80fd\u627e\u4e0d\u5230\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u8f6f\u4ef6\u6765\u5e2e\u52a9\u60a8\u8ba1\u7b97\u6240\u9700\u7684\u6ce2\u7279\u7387\u3002  \u70b9\u51fb  \u8fd9\u91cc  \u6765\u4e0b\u8f7d\u8be5\u8f6f\u4ef6\u3002    Note  \u8fd9\u4e2a\u8f6f\u4ef6\u4ec5\u4ec5\u652f\u6301Windows\u7cfb\u7edf\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u6253\u5f00\u5b83\uff0c\u6b22\u8fce\u968f\u65f6\u901a\u8fc7\u90ae\u4ef6\u8054\u7cfb   \u6765\u83b7\u53d6\u6280\u672f\u652f\u6301\u3002   \u6253\u5f00\u8f6f\u4ef6\uff0c\u4f60\u9700\u8981\u505a\u7684\u5c31\u662f\u8bbe\u7f6e\u4f60\u60f3\u8981\u7684\u6ce2\u7279\u7387\uff0c\u7136\u540e\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u70b9\u51fb\u8ba1\u7b97\u3002  \u7136\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e9b\u6570\u636e\uff0ccfg1\uff0ccfg2\u548ccfg3\u3002  \u60a8\u9700\u8981\u5728\u5e93\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\u3002  \u6253\u5f00  mcp_can_dfs.h , \u4f60\u9700\u8981\u5c06\u4e0b\u5217\u4ee3\u7801\u6dfb\u52a0\u5230\u7b2c272\u884c\u5de6\u53f3\u3002  #define MCP_16MHz_xxxkBPS_CFG1 (cfg1)    // xxx is the baud rate you need\n#define MCP_16MHz_xxxkBPS_CFG2 (cfg2)\n#define MCP_16MHz_xxxkBPS_CFG3 (cfg2)  \u7136\u540e\u8ba9\u6211\u4eec\u8df3\u8f6c\u5230\u7b2c390\u884c, \u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a  #define CAN_xxxKBPS NUM       // xxx is the baudrate you need, and NUM is a number, you need to get a different from the other rates.  \u6253\u5f00  mcp_can.cpp , \u8df3\u8f6c\u5230\u51fd\u6570**mcp2515_configRate**(\u5927\u81f4\u5728\u7b2c190\u884c), \u7136\u540e\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801:  case (CAN_xxxKBPS):\n    cfg1 = MCP_16MHz_xxxkBPS_CFG1;\n    cfg2 = MCP_16MHz_xxxkBPS_CFG2;\n    cfg3 = MCP_16MHz_xxxkBPS_CFG3;\n    break;  \u7136\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u60a8\u9700\u8981\u7684\u6ce2\u7279\u7387\u4e86\u3002\u5f53\u60a8\u4f7f\u7528\u7684\u6ce2\u7279\u7387\u65f6\uff0c\u8bf7\u7ed9\u6211\u4eec\u4e00\u4e2agithub\u7684\u8bf7\u6c42\uff0c\u8fd9\u6837\u6211\u53ef\u4ee5\u6dfb\u52a0\u5230\u5e93\u6765\u5e2e\u52a9\u5176\u4ed6\u4eba\u3002\u611f\u8c22\uff01", 
            "title": "\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6ce2\u7279\u7387"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_7", 
            "text": "\u5982\u679c\u60a8\u60f3\u4f7f\u7528CAN-BUS \u6269\u5c55\u677f\u505a\u4e00\u4e9b\u9177\u70ab\u7684\u9879\u76ee\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u53ef\u4f9b\u53c2\u8003\u3002", 
            "title": "\u9879\u76ee\u5de5\u7a0b"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#can-bus", 
            "text": "Ever wanted to play a car/truck simulator with a real dashboard on your PC? Me too! I'm trying to control a VW Polo 6R dashboard via CAN Bus with an Arduino Uno and a Seeed CAN Bus Shield. Inspired by Silas Parker. Thanks Sepp and Is0-Mick for their great support!", 
            "title": "\u5927\u4f17 CAN BUS \u5c0f\u6e38\u620f"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#can-bus_1", 
            "text": "Modern Vehicles all come equipped with a CAN-BUS Controller Area Network, Instead of having a million wires running back and forth from various devices in your car to the battery, its making use of a more clever system.  All electronic functions are connected to the TIPM, (Totally integrated Power Module), such as solenoids/relays to lock the doors or mini motors to wind the windows etc.  From each node (IE Switch pod that controls your windows or electric door locks) it broadcasts a message across the CAN. When the TIPM detects a valid message it will react accordingly like, lock the doors, switch on lights and so on.", 
            "title": "\u9ed1\u8fdb\u8f66\u8f7d CAN-BUS"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#faq", 
            "text": "Q1: \u6211\u65e0\u6cd5\u4ece\u5176\u4ed6CAN\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002   \u68c0\u67e5\u8fde\u63a5\u662f\u5426\u6b63\u786e  \u68c0\u67e5\u6ce2\u7279\u7387\u8bbe\u7f6e\u662f\u5426\u6b63\u786e   Q2: \u4e32\u884c\u76d1\u89c6\u5668\u6253\u5370\u5931\u8d25\u3002  *\u68c0\u67e5CS\u5f15\u811a\u8bbe\u7f6e\u662f\u5426\u4e0e\u4ee3\u7801\u5339\u914d\u3002\u5bf9\u4e8eCAN\u603b\u7ebf\u6269\u5c55\u677fV1.1 / 1.2 /2.0 CS \u5f15\u811a\u9ed8\u8ba4\u8fde\u63a5\u5230 D9\uff0c\u5176\u4ed6\u5219\u4e3a D10\u3002  Q3. \u5982\u679c\u6211\u6709\u5176\u4ed6\u95ee\u9898\uff0c\u6211\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u6280\u672f\u652f\u6301\u3002   \u60a8\u53ef\u4ee5\u5728 Seeed \u8bba\u575b  Seeed Forum  \u7559\u8a00\u6216\u8005or \u7ed9\u4e0b\u5217\u90ae\u7bb1\u53d1\u9001\u90ae\u4ef6\u81f3  .", 
            "title": "FAQ"
        }, 
        {
            "location": "/CAN-BUS_Shield_V2.0/#_8", 
            "text": "\u3010PDF\u3011 CAN-BUS Shield V2.0 Schmatics  \u3010Eagle\u539f\u7406\u56fe\u3011 Schematic   PCB of CAN-BUS Shield V2.0  \u3010CAN_BUS_Shield\u5e93\u3011 Arduino Library for CAN-BUS Shield  \u3010MCP2515\u6570\u636e\u624b\u518c\u3011 MCP2515 datasheet  \u3010MCP2551\u6570\u636e\u624b\u518c\u3011 MCP2551 datasheet  \u3010\u793a\u4f8b\u7a0b\u5e8f\u3011 An OBD Demo  \u3010MCP2515\u6ce2\u7279\u7387\u8ba1\u7b97\u5de5\u5177\u3011 MCP2515 Baud Rate Tool  \u3010USB-CAN\u5206\u6790\u5668\u3011 USB-CAN Analyzer  \u3010\u7ebf\u7f06DB9\u8f6cOBD2\u3011 DB9 to OBD2 Cable", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Essentials/", 
            "text": "\u672c\u90e8\u5206\u5305\u62ec\u7531Seeed\u521b\u5efa\u7684Essentials\u677f\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Essentials\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "Essentials"
        }, 
        {
            "location": "/Essentials/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Essentials\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Wireless/", 
            "text": "\u672c\u8282\u5305\u62ec\u7531Seeed\u521b\u5efa\u7684\u65e0\u7ebf\u7535\u8def\u677f\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u65e0\u7ebf\u63a7\u5236\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "Wireless"
        }, 
        {
            "location": "/Wireless/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u65e0\u7ebf\u63a7\u5236\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Grove_System/", 
            "text": "\u4ec0\u4e48\u662fGrove\u7cfb\u7edf?\n\n\nGrove\u662f\u4e00\u4e2a\u6a21\u5757\u5316\u7684\u6807\u51c6\u8fde\u63a5\u5668\u539f\u578b\u7cfb\u7edf\u3002Grove\u91c7\u7528\u79ef\u6728\u5f0f\u7ec4\u88c5\u7535\u5b50\u6280\u672f\u3002\u4e0e\u57fa\u4e8e\u8df3\u7ebf\u6216\u710a\u63a5\u7684\u7cfb\u7edf\u76f8\u6bd4\uff0c\u8fde\u63a5\uff0c\u8bd5\u9a8c\u548c\u6784\u5efa\u66f4\u5bb9\u6613\uff0c\u5e76\u7b80\u5316\u4e86\u5b66\u4e60\u7cfb\u7edf\u3002Grove\u7cfb\u7edf\u5141\u8bb8\u4f60\u6784\u5efa\u771f\u6b63\u7684\u7cfb\u7edf\u3002\u56e0\u800c\u5b83\u9700\u8981\u4e00\u4e9b\u5b66\u4e60\u548c\u4e13\u4e1a\u77e5\u8bc6\u624d\u80fd\u6b63\u786e\u5730\u5c06\u7269\u4ef6\u8054\u63a5\u8d77\u6765\u3002\n\n\nGrove\u7cfb\u7edf\u7531\u57fa\u672c\u5904\u7406\u5355\u5143\uff08\u6811\u5e72\uff09\u548c\u5177\u6709\u6807\u51c6\u5316\u8fde\u63a5\u5668\u7684\u5404\u79cd\u6a21\u5757\uff08\u6811\u679d\uff09\u7ec4\u6210\u3002Grove\u7cfb\u7edf\u7684\u521b\u59cb\u4eba\u4eec\uff08seeediuno\u56e2\u961f\uff09\u66fe\u7ecf\u8bd5\u56fe\u7528\u201c\u6811\u5e72\u201d\u548c\u201c\u6811\u679d\u201d\u6765\u547d\u540d\u8fd9\u4e9b\u5355\u5143\u548c\u6a21\u5757\uff0c\u7136\u800c\u77ed\u6682\u7684\u7ea0\u7ed3\u4e4b\u540e\u4ed6\u4eec\u679c\u65ad\u653e\u5f03\uff0c\u4e3a\u4e86\u4e0d\u7ed9\u60a8\u9020\u6210\u56f0\u60d1\uff0cseeed\u5c06\u4efb\u4f55\u53ef\u80fd\u9020\u6210\u6df7\u6dc6\u7684\u4e1c\u897f\u90fd\u5f03\u82e5\u655d\u5c63\u3002\n\n\n\u57fa\u672c\u5355\u5143\uff08\u901a\u5e38\u4e3a\u5fae\u5904\u7406\u5668\uff09\u5141\u8bb8\u4eceGrove\u6a21\u5757\u8f7b\u677e\u8fde\u63a5\u4efb\u4f55\u8f93\u5165\u6216\u8f93\u51fa\u3002\u6bcf\u4e2aGrove\u6a21\u5757\u901a\u5e38\u90fd\u53ef\u4ee5\u5904\u7406\u5355\u4e2a\u529f\u80fd\uff0c\u4f8b\u5982\u7b80\u5355\u7684\u6309\u94ae\u6216\u66f4\u590d\u6742\u7684\u5fc3\u7387\u4f20\u611f\u5668\u3002\n\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u5904\u7406\u5355\u5143\u6ca1\u6709Grove\u63a5\u53e3\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528Grove \u8f6cPin Header \u8f6c\u63a5\u7ebf\uff0c\u4eceRaspberry Pi\u6216Arduino\u7684\u9488\u811a\u8fde\u63a5\u5230Grove\u6a21\u5757\u3002\n\n\nGrove \u9879\u76ee\n\n\n\u4ee5\u4e0b\u662f\u4f7f\u7528Grove\u8fdb\u884c\u7684\u4e00\u4e9b\u9879\u76ee\u4f9b\u60a8\u53c2\u8003\uff0c\u66f4\u591a\u9879\u76ee\u8bf7\u70b9\u51fb \n\u793a\u4f8b\n \u6216\u8005 \n\u6307\u5357\n.\n\n\n\n\n\n\n\n\nDIY a Humidifier\n\n\nPersonal Voice Assistant\n\n\nAcrylic Monitor Stand\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSensor hub \n Win10 IoT\n\n\nSteam-punk Style Award\n\n\nPlant Watering Device\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWi-Fi Speaker\n\n\nDIY a toy car\n\n\nRetro Wooden Lamp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPokemon Go SAFETY BADGE\n\n\nMake a Wooden Gun\n\n\nQuality of Life Meter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHackable RGB ornament\n\n\nThe Internet Of Led Wall\n\n\nPI Game Box\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\nMAKE IT NOW!\n\n\n\n\n\n\n\n\nGrove \u6a21\u5757\u7684\u5c3a\u5bf8\n\n\n\u4e00\u5171\u6709\u4e94\u79cd\u5c3a\u5bf8\u7684Grove\u6a21\u5757\n\n\n\n\n\n\n\n\n1X1\n\n\n1X2\n\n\n1X3\n\n\n2X2\n\n\n2X3\n\n\n\n\n\n\n\n\n\n\n20x20mm\n\n\n20x40mm\n\n\n20x60mm\n\n\n40x40mm\n\n\n40x60mm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5982\u4f55\u5c06Grove\u8fde\u63a5\u5230\u60a8\u7684\u63a7\u5236\u677f\n\n\n\u5982\u679c\u60a8\u7684\u63a7\u5236\u677f\u4e0a\u6ca1\u6709Grove\u8fde\u63a5\u5668\uff0c\u5219\u9700\u8981\u4e00\u4e2aGrove\u6269\u5c55\u677f\u6765\u8fde\u63a5Grove\u6a21\u5757\u3002Grove\u6269\u5c55\u677f\u63d0\u4f9b\u5904\u7406\u80fd\u529b\uff0c\u53ef\u63a5\u6536\u4f20\u611f\u5668\u8f93\u5165\uff0c\u4e5f\u53ef\u4ee5\u8f93\u51fa\u7ed9\u6267\u884c\u5668\u3002\u73b0\u5728\u6211\u4eec\u5df2\u6709\u4e13\u4e3a\u5404\u79cd\u5e73\u53f0\u7684\u8bbe\u8ba1\u7684\u591a\u6b3eGrove\u6269\u5c55\u677f\uff0c\u5305\u62ecArduino UNO\uff0cParticle Phone\uff0cBeagleBone\u7b49\u3002\n\n\n\n\n\n\n\n\nArduino \u6269\u5c55\u677f\n\n\nBeagleBone board \u6269\u5c55\u677f\n\n\nArduino Mega \u6269\u5c55\u677f\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIOIO-OTG\n\n\nParticle Photon\n\n\nNodeMCU\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\n\n\n!!!\u6ce8\u610f\n     Arduino Base Shield \u9002\u7528\u4e8e\u4e0b\u5217\u6838\u5fc3\u677f:\n\n\n* Arduino UNO/Leonardo\n* Seeeduino V3/4/4.1/Lite/Clio/Lotus/Stalker\n* LinkIt ONE\n\n\n\n\n\nGrove\u6a21\u5757\u63a5\u53e3\n\n\n\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230Grove\u7535\u7f06\u67094\u79cd\u989c\u8272\u3002\n\n\n\n\npin 1\n - \u9ec4\u8272 (\u4f8b\u5982, I2C Grove Connectors\u4e0a\u7684SCL)\n\n\npin 2\n - \u767d\u8272 (\u4f8b\u5982, I2C Grove Connectors\u4e0a\u7684SDA)\n\n\npin 3\n - \u7ea2\u8272 - VCC \uff08\u6240\u6709\u7684Grove\u63a5\u53e3\u7ea2\u8272\u90fd\u662fVCC\uff09\n\n\npin 4\n - \u9ed1\u8272 - GND \uff08\u6240\u6709\u7684Grove\u63a5\u53e3\u7ea2\u8272\u90fd\u662fGND\uff09\n\n\n\n\nGrove\u6a21\u5757\u4e3b\u8981\u67094\u79cd\u63a5\u53e3\u3002\n\n\nGrove Digital \u6570\u5b57\u63a5\u53e3\n\n\nGrove\u6570\u5b57\u63a5\u53e3\u7531Grove\u63d2\u5934\u7684\u56db\u6761\u6807\u51c6\u7ebf\u7ec4\u6210\u3002\u4e24\u6761\u4fe1\u53f7\u7ebf\u901a\u5e38\u79f0\u4e3aD0\u548cD1\u3002\u5927\u591a\u6570\u6a21\u5757\u53ea\u4f7f\u7528D0\uff0c\u4f46\u6709\u4e9b\uff08\u50cfLED Bar Grove\u663e\u793a\u5c4f\uff09\u4f7f\u7528\u4e24\u8005\u3002\u901a\u5e38\u6838\u5fc3\u677f\u4f1a\u5c06\u677f\u5361\u4e0a\u7684\u7b2c\u4e00\u4e2aGrove\u8fde\u63a5\u5934\u79f0\u4e3aD0\uff0c\u7b2c\u4e8c\u4e2a\u79f0\u4e3aD1\u3002\u7b2c\u4e00\u4e2a\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684DO/D1\u7ba1\u811a\uff0c\u7b2c\u4e8c\u4e2a\u8fde\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684D1/D2\u5f15\u811a\uff0c\u540e\u9762\u7684\u8fde\u63a5\u5934\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\n\n\n\n\n\n\npin\n\n\nFunction\n\n\nNote\n\n\n\n\n\n\n\n\n\n\npin1\n\n\nDn\n\n\n\u7b2c\u4e00\u4e2a\u6570\u5b57\u8f93\u5165\n\n\n\n\n\n\npin2\n\n\nDn+1\n\n\n\u7b2c\u4e8c\u4e2a\u6570\u5b57\u8f93\u5165\n\n\n\n\n\n\npin3\n\n\nVCC\n\n\n\u4f9b\u7535\u5f15\u811a 5V/3.3V\n\n\n\n\n\n\npin4\n\n\nGND\n\n\n\u5730\n\n\n\n\n\n\n\n\nGrove Analog \u6a21\u62df\u63a5\u53e3\n\n\nGrove\u6a21\u62df\u63a5\u53e3\u7531Grove\u63d2\u5934\u7684\u56db\u6761\u6807\u51c6\u7ebf\u7ec4\u6210\u3002\u4e24\u6761\u4fe1\u53f7\u7ebf\u901a\u5e38\u79f0\u4e3aA0\u548cA1\u3002\u5927\u591a\u6570\u6a21\u5757\u53ea\u4f7f\u7528A0\uff0c\u4f46\u6709\u4e9b\uff08\u50cfLED Bar Grove\u663e\u793a\u5c4f\uff09\u4f7f\u7528\u4e24\u8005\u3002\u901a\u5e38\u6838\u5fc3\u677f\u4f1a\u5c06\u677f\u5361\u4e0a\u7684\u7b2c\u4e00\u4e2aGrove\u8fde\u63a5\u5934\u79f0\u4e3aA0\uff0c\u7b2c\u4e8c\u4e2a\u79f0\u4e3aA1\u3002\u7b2c\u4e00\u4e2a\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684AO/A1\u7ba1\u811a\uff0c\u7b2c\u4e8c\u4e2a\u8fde\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684A1/A2\u5f15\u811a\uff0c\u540e\u9762\u7684\u8fde\u63a5\u5934\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\n\n\n\n\n\n\npin\n\n\nFunction\n\n\nNote\n\n\n\n\n\n\n\n\n\n\npin1\n\n\nAn\n\n\n\u7b2c\u4e00\u4e2a\u6a21\u62df\u8f93\u5165\n\n\n\n\n\n\npin2\n\n\nAn+1\n\n\n\u7b2c\u4e8c\u4e2a\u6a21\u62df\u8f93\u5165\n\n\n\n\n\n\npin3\n\n\nVCC\n\n\n\u4f9b\u7535\u5f15\u811a, 5V/3.3V\n\n\n\n\n\n\npin4\n\n\nGND\n\n\n\u5730\n\n\n\n\n\n\n\n\nGrove UART\n\n\nThe Grove UART \u662f\u7279\u6b8a\u7684\u4e00\u79cd\u6570\u5b57\u8f93\u5165\u8f93\u51fa\u63a5\u53e3\u3002\u5b83\u4f7f\u7528\u5f15\u811a1\u548c\u5f15\u811a2\u8fdb\u884c\u4e32\u884c\u8f93\u5165\u548c\u53d1\u9001\u3002 \u5f15\u811a1\u662fRX\u7ebf\uff08\u7528\u4e8e\u63a5\u6536\u6570\u636e\uff0c\u56e0\u6b64\u662f\u8f93\u5165\uff09\uff0c\u5176\u4e2d\u5f15\u811a2\u662fTX\u7ebf\uff08\u7528\u4e8e\u5411Grove\u6a21\u5757\u4f20\u8f93\u6570\u636e\uff09\u3002\n\n\n\n\n\n\n\n\npin\n\n\nFunction\n\n\nNote\n\n\n\n\n\n\n\n\n\n\npin1\n\n\nRX\n\n\n\u4e32\u884c\u63a5\u6536\n\n\n\n\n\n\npin2\n\n\nTX\n\n\n\u4e32\u884c\u53d1\u9001\n\n\n\n\n\n\npin3\n\n\nVCC\n\n\n\u4f9b\u7535\u5f15\u811a 5V/3.3V\n\n\n\n\n\n\npin4\n\n\nGND\n\n\n\u5730\n\n\n\n\n\n\n\n\nGrove I2C\n\n\n\u6709\u8bb8\u591a\u7c7b\u578b\u7684I2C Grove\u4f20\u611f\u5668\u53ef\u7528\u3002\u5927\u591a\u6570\u5668\u4ef6\u540c\u65f6\u652f\u63015V / 3.3V\uff0c\u4f46\u6709\u5c11\u6570\u53ea\u652f\u63013.3V\u6216\u53ea\u652f\u63015.0V\uff0c\u60a8\u9700\u8981\u5728\u4f7f\u7528\u524d\u4ed4\u7ec6\u68c0\u67e5\u7535\u538b\u53c2\u6570\u3002\n\n\nGrove I2C\u8fde\u63a5\u5668\u5177\u6709\u6807\u51c6\u5e03\u5c40\u3002\u5f15\u811a1\u662fSCL\u4fe1\u53f7\uff0c\u5f15\u811a2\u662fSDA\u4fe1\u53f7\u3002\u7535\u6e90\u548c\u63a5\u5730\u4e0e\u5176\u4ed6\u8fde\u63a5\u5668\u76f8\u540c\u3002\u8fd9\u662fGrove Digital Connector\u7684\u53e6\u4e00\u4e2a\u7279\u6b8a\u7248\u672c\u3002\u5b9e\u9645\u4e0a\uff0c\u63a7\u5236\u5668\u4e0a\u7684I2C\u603b\u7ebf\uff08\u5982ESP8266\uff0cRaspberry Pi\u548cArduino\uff09\u901a\u5e38\u53ea\u4f7f\u7528\u6570\u5b57I / O\u5f15\u811a\u901a\u8fc7\u8f6f\u4ef6\u6765\u5b9e\u73b0I2C\u603b\u7ebf\u3002Raspberry Pi\u548cArduino\u4e0a\u7684I2C\u5f15\u811a\u662f\u5e26\u6709\u786c\u4ef6\u652f\u6301\u7684\u3002\n\n\n\n\n\n\n\n\npin\n\n\nFunction\n\n\nNote\n\n\n\n\n\n\n\n\n\n\npin1\n\n\nSCL\n\n\nI2C \u65f6\u949f\n\n\n\n\n\n\npin2\n\n\nSDA\n\n\nI2C \u6570\u636e\n\n\n\n\n\n\npin3\n\n\nVCC\n\n\n\u4f9b\u7535\u5f15\u811a, 5V/3.3V\n\n\n\n\n\n\npin4\n\n\nGND\n\n\n\u5730\n\n\n\n\n\n\n\n\nGrove \u7ebf\u7f06\n\n\n\u901a\u7528 Grove \u7ebf\u7f06\n\n\n\u6211\u4eec\u4e3a\u60a8\u7684\u9879\u76ee\u5de5\u7a0b\u51c6\u5907\u4e865\u79cd\u4e0d\u540c\u7684grove\u7ebf\u7f06, \u957f\u5ea65\u5398\u7c73\uff0c20\u5398\u7c73\uff0c30\u5398\u7c73\uff0c40\u5398\u7c73\u4ee5\u53ca50\u5398\u7c73\u4e0d\u7b49\u3002   \n\n\n\n\n\n\n\n\n5cm\n\n\n20 cm\n\n\n30 cm\n\n\n40 cm\n\n\n50 cm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\n\n\nGrove - Branch Cable \uff08\u5206\u652f\u7535\u7f06\uff09\n\n\nGrove Branch Cable\u662fGrove\u7cfb\u7edf\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7535\u7f06\u3002\u5b83\u7531\u4e09\u4e2a\u5e26\u9632\u53cd\u63d2\u7684\u6bcd\u5934\u8fde\u63a5\u5668\u548c\u56db\u6839\u989c\u8272\u7f16\u7801\u7684\u7535\u7ebf\u7ec4\u6210\u3002Grove\u5206\u652f\u7535\u7f06\u53ef\u7528\u4e8e\u652f\u6301\u83ca\u82b1\u94fe\u4e2d\u7684\u591a\u4e2aGrove\u8bbe\u5907\u8fde\u63a5\u5230Grove shield\u677f\u5361\u4e0a\u3002\u901a\u5e38\uff0c\u4e00\u7aef\u63a5\u53e3\u8fde\u63a5\u5230Grove shield\u677f\u5361\u4e0a\uff0c\u7b2c\u4e8c\u548c\u7b2c\u4e09\u8fde\u63a5\u5668\u8fde\u63a5\u5230\u4e24\u4e2aGrove\u8bbe\u5907\u3002\n\n\n\u4e0eGrove\u7535\u7f06\u7cfb\u5217\u7684\u5176\u4ed6\u6210\u5458\u4e00\u6837\uff0c\u8fd9\u4e2a\u5206\u652f\u7535\u7f06\u4e5f\u662f\u5e26\u6709\u53cd\u63d2\u6263\u7684\uff0c\u8fd9\u6837\u786e\u4fdd\u60a8\u4e0d\u4f1a\u4e0d\u5c0f\u5fc3\u628a\u7ebf\u63d2\u53cd\u3002\u53e6\u5916\uff0c\u5f53\u5c06\u8fde\u63a5\u5668\u8fde\u63a5\u5230shield\u677f\u5361\u6216\u5176\u4ed6\u8bbe\u5907\u65f6\uff0c\u8bf7\u60a8\u6309\u538b\u4ee5\u786e\u4fdd\u8fde\u63a5\u7a33\u5b9a\u53ef\u9760\u3002\u7531\u4e8eGrove Branch\u7535\u7f06\u6709\u95e9\u9501\uff08\u6709\u65f6\u79f0\u4e3a\u201c\u6263\u201d\u6216\u201c\u5e26\u6263\u7535\u7f06\u201d\uff09\uff0c\u5f53\u95e9\u9501\u5173\u95ed\u65f6\uff0c\u60a8\u5c06\u542c\u5230\u4e00\u4e2a\u5c0f\u58f0\u97f3\uff0c\u5e76\u4e14\u5e94\u8be5\u770b\u5230\u95e9\u9501\u5728\u5176\u5bf9\u5e94\u7684\u90e8\u4ef6\u4e0a\u3002\u8fd9\u4e9b\u95e9\u9501\uff08\u6216\u5e26\u6263\uff09\u53ef\u6539\u5584\u8fde\u63a5\uff0c\u5e76\u4e14\u5728\u9ad8\u632f\u52a8\u6216\u751f\u4ea7\u73af\u5883\u4e2d\u7279\u522b\u65b9\u4fbf\uff0c\u56e0\u4e3a\u65ad\u5f00\u7535\u7f06\u65f6\u5fc5\u987b\u4f7f\u7528\u4e00\u4e9b\u529b\u3002\uff0c\n\n\n\u4f7f\u7528Grove\u5206\u652f\u7535\u7f06\u8fde\u63a5\u591a\u4e2a\u8bbe\u5907\u65f6\uff0c\u8bf7\u683c\u5916\u5c0f\u5fc3\u3002\u8bf7\u6ce8\u610fGrove Shield\u4e0a\u7684\u6a21\u62df\u6216\u6570\u5b57\u5f15\u811a\u5c06\u7531Grove\u8bbe\u5907\u5171\u4eab\u3002\u8fd9\u6837\u7684\u914d\u7f6e\u53ef\u80fd\u4e0d\u9002\u5408\u4e8e\u4e24\u4e2a\u6a21\u62df\u8bbe\u5907\u3002\u4f7f\u7528Grove\u5206\u652f\u7535\u7f06\u8fde\u63a5\u6a21\u62df\u548c\u6570\u5b57Grove\u8bbe\u5907\u53ef\u80fd\u6839\u672c\u4e0d\u8d77\u4f5c\u7528\u3002\n\n\n\n\n\u793a\u4f8b\u5305\u62ec:\n\n\n\n\n\u4f7f\u7528\u83ca\u82b1\u94fe\u8fde\u63a5\u4e24\u4e2a\u6216\u591a\u4e2aI2C\u8bbe\u5907\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6761\u5206\u652f\u7535\u7f06\u6765\u6269\u5c55I2C\u603b\u7ebf\u3002\n\n\n\u8fde\u63a5\u4e24\u4e2a\u9700\u8981\u540c\u65f6\u5de5\u4f5c\u7684\u8bbe\u5907\u3002\u4f8b\u5982\uff0cLED\u548c\u7ee7\u7535\u5668\u53ef\u4ee5\u901a\u8fc7\u5355\u4e2aGrove\u5206\u652f\u7535\u7f06\u8fde\u63a5\u5230Grove Shield\u3002\u7531\u4e8e\u4e24\u4e2a\u5668\u4ef6\u5c06\u7531\u540c\u4e00\u4e2a\u6570\u5b57\u5f15\u811a\u63a7\u5236\uff0c\u6240\u4ee5\u53ef\u4ee5\u5b9e\u73b0\u540c\u65f6\u5173\u95edLED\u548c\u65ad\u5f00\u7ee7\u7535\u5668\u3002\n\n\n\n\nGrove - Branch Cable for Servo \uff08\u4f3a\u670d\u5206\u652f\u7535\u7f06\uff09\n\n\nGrove\u5206\u652f\u7535\u7f06\u662f\u53e6\u4e00\u79cdGrove\u7535\u7f06\uff0c\u4e3b\u8981\u7528\u4e8e\u5c06\u4e00\u4e2a\u6216\u4e24\u4e2a\u8235\u673a\u8fde\u63a5\u5230\u60a8\u7684\u9879\u76ee\u3002\u5b83\u4eec\u7531\u4e09\u4e2a\u8fde\u63a5\u5668\u7ec4\u6210\uff1a\u4e00\u4e2a\u56db\u9488\u6bcd\u8fde\u63a5\u5934\uff0c\u9002\u7528\u4e8e\u8fde\u63a5\u5230Grove Shield\uff0c\u4ee5\u53ca\u4e24\u4e2a\u4e09\u9488\u516c\u67f1\u578b\u8fde\u63a5\u5934\u3002\u5728\u8fd9\u79cd\u914d\u7f6e\u4e2d\uff0c\u7535\u6e90\u548c\u5730\uff08\u6765\u81ea\u56db\u9488\u6bcd\u5934\u7684\u5f15\u811a3\u548c4\uff09\u90fd\u8fde\u63a5\u52303\u9488\u7684\u7535\u6e90\u548c\u5730\u3002\u56db\u9488\u8fde\u63a5\u5668\u7684\u5f15\u811a1\uff08\u9ec4\u8272\uff09\u4e00\u7aef\u8fde\u63a5\u5230\u5177\u6709PWM\u529f\u80fd\u7684Arduino\u5f15\u811a\u4e0a\uff0c\u53e6\u4e00\u7aef\u8fde\u63a5\u5230\u5e26\u6709\u9ec4\u8272\u5f15\u7ebf\u76843\u9488\u516c\u5934\u3002\u540c\u6837\uff0c\u56db\u9488\u8fde\u63a5\u5668\u7684\u5f15\u811a2\uff08\u767d\u7ebf\uff09\u7684\u4e00\u7aef\u4e5f\u8fde\u63a5\u5230Arduino\u7684\u7b2c\u4e8c\u4e2a\u5177\u6709PWM\u529f\u80fd\u7684\u5f15\u811a\u4e0a\uff0c\u800c\u53e6\u4e00\u7aef\u8fde\u63a5\u5230\u5e26\u6709\u9ec4\u7ebf\u7684\u53e6\u4e00\u4e2a\u4e09\u9488\u516c\u5934\u4e0a\u3002  \n\n\n\u7528\u4e8eServos\u7684Grove\u5206\u652f\u7535\u7f06\u7684\u56db\u9488\u8fde\u63a5\u5934\u901a\u5e38\u8fde\u63a5\u5230Grove Shield\u6570\u5b57\u63d2\u5ea7\uff0c\u5982D2-D9\u3002\u8fde\u63a5\u4f3a\u670d\u65f6\uff0c\u8bb0\u4e0b\u6570\u5b57PWM\u7535\u7f06\u7684\u7ebf\u989c\u8272\uff08\u9ec4\u8272\u6216\u767d\u8272\uff09\uff0c\u4ee5\u4e86\u89e3\u54ea\u4e2a\u6570\u5b57\u5f15\u811a\u5bf9\u5e94\u4e8e\u4f3a\u670d\u8f93\u5165\u3002\n\n\n\n\nGrove to 4pin Female/Male Jumper \uff08grove\u8f6c4pin \u8df3\u7ebf\uff09\n\n\n\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6765:\n\n\n\n\n\u5c06Grove\u8bbe\u5907\u8fde\u63a5\u5230\u5176\u4ed6\u4e0d\u5e26Grove\u63a5\u53e3\u7684MCU\uff0c\u4f8b\u5982\u60a8\u8981\u5c06Grove - Light Sensor\u8fde\u63a5\u5230Raspberry Pi\u3002\n\n\n\u4f7f\u7528Grove shield\u63a7\u5236\u975eGrove\u63a5\u53e3\u7684\u8bbe\u5907\u3002\n\n\n\n\n\n\n\u7ebf\u7f06\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\nCable\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nBranch Cable\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nBranch Cable for Servo\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove to 4Pin Female\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove to 4Pin Male\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\n\n\nGrove \u5165\u95e8\u5957\u4ef6\n\n\n\u6211\u4eec\u4e3a\u521d\u5b66\u8005\u8bbe\u8ba1\u4e86\u8bb8\u591a\u5957\u4ef6\u3002Grove\u5165\u95e8\u5957\u4ef6\u5305\u62ecGrove\u6269\u5c55\u677f\uff0c\u591a\u4e2aGrove\u6a21\u5757\u548c\u7528\u6237\u624b\u518c\u3002\u540c\u65f6\u6211\u4eec\u63d0\u4f9b\u5927\u91cf\u8bfe\u7a0b\u4f9b\u521d\u5b66\u8005\u5b66\u4e60\u3002\u5982\u679c\u60a8\u60f3\u5f00\u59cb\u7cfb\u7edf\u5730\u5b66\u4e60\u4e00\u4e2a\u5e73\u53f0\u6216\u8005\u5b66\u4e60\u76f8\u5173\u7535\u5b50\u77e5\u8bc6\uff0cGrove Starter\u5957\u4ef6\u5305\u5c06\u662f\u60a8\u7684\u6700\u4f73\u7684\u9009\u62e9\u3002\n\n\n\n\n\u6211\u4eec\u9488\u5bf9\u4e0d\u540c\u7684\u5e73\u53f0\u5f00\u53d1\u4e86\u4e3a\u6570\u4f17\u591a\u7684\u5957\u4ef6\n\n\n\n\n\n\n\n\n\u5957\u4ef6\u540d\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\nGrove - Starter Kit for Arduino\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for mbed\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for LinkIt ONE\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for LaunchPad\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for Photon\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for BeagleBone Green\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for LinkIt 7688 Duo\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter Kit for 96Boards\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrove Starter kit for Arduino\nGenuino 101\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\nGrovePi+ Starter Kit for Raspberry Pi\n\n\n\u7acb\u5373\u8d2d\u4e70!\n\n\n\n\n\n\n\n\n\u9009\u62e9\u60a8\u7684Grove\n\n\n\u60f3\u8981\u4e00\u4e9bGrove\u6a21\u5757\u7528\u4e8e\u60a8\u7684\u9879\u76ee\uff1f\u8fd9\u91cc\u6709\u4e00\u4e9b\u63a8\u8350\u3002\n\n\nGrove \u57fa\u672c\u8f93\u5165\u8f93\u51fa\u6a21\u5757\n\n\n\n\n\n\n\n\nGrove - LED\n\n\nGrove - Rotary Angle Sensor\n\n\nGrove - Button\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove - Switch\n\n\nGrove - Encoder\n\n\nGrove - Touch Sensor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\nGrove \u663e\u793a\u6a21\u5757\n\n\n\n\n\n\n\n\nI2C_LCD\n\n\nGrove - OLED Display 0.96\"\n\n\nGrove - OLED Display 1.12\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove - LCD RGB Backlight\n\n\nGrove - 4-Digit Display\n\n\nGrove LED Bar v2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\nGrove \u8fd0\u52a8\u68c0\u6d4b\u6a21\u5757\n\n\n\n\n\n\n\n\nGrove - IMU 10DOF v2.0\n\n\nDigital Accelerometer(\u00b1400g)\n\n\n3-Axis Digital Gyro\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3-Axis Digital Compass\n\n\n3-Axis Digital Accelerometer(\u00b11.5g)\n\n\n3-Axis Analog Accelerometer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3-Axis Digital Acc(\u00b116g)\n\n\n6-Axis Acc\nCompass v2.0\n\n\n6-Axis Acc\nGyroscope\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\nGrove \u901a\u4fe1\u6a21\u5757\n\n\n\n\n\n\n\n\nGrove \u2013 Uart Wifi\n\n\n433MHz Simple RF link kit\n\n\n315MHz Simple RF Link Kit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove - Serial RF Pro\n\n\n125KHz RFID Reader\n\n\nGrove - BLE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove - BLE (dual model)\n\n\nGrove - NFC\n\n\nGrove - NFC Tag\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\nGrove \u73af\u5883\u76d1\u6d4b\u6a21\u5757\n\n\n\n\n\n\n\n\nAir quality sensor\n\n\nGas Sensor(MQ2)\n\n\nGas Sensor(MQ5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGas Sensor(MQ3)\n\n\nGas Sensor(MQ9)\n\n\nGas Sensor(O2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDust Sensor\n\n\nMoisture Sensor\n\n\nTemperature\nHumidity Sensor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\nGrove \u673a\u5668\u4eba\u914d\u4ef6\n\n\n\n\n\n\n\n\nI2C Mini Motor Driver\n\n\nI2C Motor Driver\n\n\nGrove - Servo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLine Finder\n\n\nUltrasonic Ranger\n\n\n80cm Infrared Proximity Sensor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Details\n\n\nMore Details\n\n\nMore Details", 
            "title": "Grove\u7cfb\u7edf"
        }, 
        {
            "location": "/Grove_System/#grove", 
            "text": "Grove\u662f\u4e00\u4e2a\u6a21\u5757\u5316\u7684\u6807\u51c6\u8fde\u63a5\u5668\u539f\u578b\u7cfb\u7edf\u3002Grove\u91c7\u7528\u79ef\u6728\u5f0f\u7ec4\u88c5\u7535\u5b50\u6280\u672f\u3002\u4e0e\u57fa\u4e8e\u8df3\u7ebf\u6216\u710a\u63a5\u7684\u7cfb\u7edf\u76f8\u6bd4\uff0c\u8fde\u63a5\uff0c\u8bd5\u9a8c\u548c\u6784\u5efa\u66f4\u5bb9\u6613\uff0c\u5e76\u7b80\u5316\u4e86\u5b66\u4e60\u7cfb\u7edf\u3002Grove\u7cfb\u7edf\u5141\u8bb8\u4f60\u6784\u5efa\u771f\u6b63\u7684\u7cfb\u7edf\u3002\u56e0\u800c\u5b83\u9700\u8981\u4e00\u4e9b\u5b66\u4e60\u548c\u4e13\u4e1a\u77e5\u8bc6\u624d\u80fd\u6b63\u786e\u5730\u5c06\u7269\u4ef6\u8054\u63a5\u8d77\u6765\u3002  Grove\u7cfb\u7edf\u7531\u57fa\u672c\u5904\u7406\u5355\u5143\uff08\u6811\u5e72\uff09\u548c\u5177\u6709\u6807\u51c6\u5316\u8fde\u63a5\u5668\u7684\u5404\u79cd\u6a21\u5757\uff08\u6811\u679d\uff09\u7ec4\u6210\u3002Grove\u7cfb\u7edf\u7684\u521b\u59cb\u4eba\u4eec\uff08seeediuno\u56e2\u961f\uff09\u66fe\u7ecf\u8bd5\u56fe\u7528\u201c\u6811\u5e72\u201d\u548c\u201c\u6811\u679d\u201d\u6765\u547d\u540d\u8fd9\u4e9b\u5355\u5143\u548c\u6a21\u5757\uff0c\u7136\u800c\u77ed\u6682\u7684\u7ea0\u7ed3\u4e4b\u540e\u4ed6\u4eec\u679c\u65ad\u653e\u5f03\uff0c\u4e3a\u4e86\u4e0d\u7ed9\u60a8\u9020\u6210\u56f0\u60d1\uff0cseeed\u5c06\u4efb\u4f55\u53ef\u80fd\u9020\u6210\u6df7\u6dc6\u7684\u4e1c\u897f\u90fd\u5f03\u82e5\u655d\u5c63\u3002  \u57fa\u672c\u5355\u5143\uff08\u901a\u5e38\u4e3a\u5fae\u5904\u7406\u5668\uff09\u5141\u8bb8\u4eceGrove\u6a21\u5757\u8f7b\u677e\u8fde\u63a5\u4efb\u4f55\u8f93\u5165\u6216\u8f93\u51fa\u3002\u6bcf\u4e2aGrove\u6a21\u5757\u901a\u5e38\u90fd\u53ef\u4ee5\u5904\u7406\u5355\u4e2a\u529f\u80fd\uff0c\u4f8b\u5982\u7b80\u5355\u7684\u6309\u94ae\u6216\u66f4\u590d\u6742\u7684\u5fc3\u7387\u4f20\u611f\u5668\u3002  \u5982\u679c\u60a8\u4f7f\u7528\u7684\u5904\u7406\u5355\u5143\u6ca1\u6709Grove\u63a5\u53e3\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528Grove \u8f6cPin Header \u8f6c\u63a5\u7ebf\uff0c\u4eceRaspberry Pi\u6216Arduino\u7684\u9488\u811a\u8fde\u63a5\u5230Grove\u6a21\u5757\u3002", 
            "title": "\u4ec0\u4e48\u662fGrove\u7cfb\u7edf?"
        }, 
        {
            "location": "/Grove_System/#grove_1", 
            "text": "\u4ee5\u4e0b\u662f\u4f7f\u7528Grove\u8fdb\u884c\u7684\u4e00\u4e9b\u9879\u76ee\u4f9b\u60a8\u53c2\u8003\uff0c\u66f4\u591a\u9879\u76ee\u8bf7\u70b9\u51fb  \u793a\u4f8b  \u6216\u8005  \u6307\u5357 .     DIY a Humidifier  Personal Voice Assistant  Acrylic Monitor Stand           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!        Sensor hub   Win10 IoT  Steam-punk Style Award  Plant Watering Device           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!        Wi-Fi Speaker  DIY a toy car  Retro Wooden Lamp           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!        Pokemon Go SAFETY BADGE  Make a Wooden Gun  Quality of Life Meter           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!        Hackable RGB ornament  The Internet Of Led Wall  PI Game Box           MAKE IT NOW!  MAKE IT NOW!  MAKE IT NOW!", 
            "title": "Grove \u9879\u76ee"
        }, 
        {
            "location": "/Grove_System/#grove_2", 
            "text": "\u4e00\u5171\u6709\u4e94\u79cd\u5c3a\u5bf8\u7684Grove\u6a21\u5757     1X1  1X2  1X3  2X2  2X3      20x20mm  20x40mm  20x60mm  40x40mm  40x60mm", 
            "title": "Grove \u6a21\u5757\u7684\u5c3a\u5bf8"
        }, 
        {
            "location": "/Grove_System/#grove_3", 
            "text": "\u5982\u679c\u60a8\u7684\u63a7\u5236\u677f\u4e0a\u6ca1\u6709Grove\u8fde\u63a5\u5668\uff0c\u5219\u9700\u8981\u4e00\u4e2aGrove\u6269\u5c55\u677f\u6765\u8fde\u63a5Grove\u6a21\u5757\u3002Grove\u6269\u5c55\u677f\u63d0\u4f9b\u5904\u7406\u80fd\u529b\uff0c\u53ef\u63a5\u6536\u4f20\u611f\u5668\u8f93\u5165\uff0c\u4e5f\u53ef\u4ee5\u8f93\u51fa\u7ed9\u6267\u884c\u5668\u3002\u73b0\u5728\u6211\u4eec\u5df2\u6709\u4e13\u4e3a\u5404\u79cd\u5e73\u53f0\u7684\u8bbe\u8ba1\u7684\u591a\u6b3eGrove\u6269\u5c55\u677f\uff0c\u5305\u62ecArduino UNO\uff0cParticle Phone\uff0cBeagleBone\u7b49\u3002     Arduino \u6269\u5c55\u677f  BeagleBone board \u6269\u5c55\u677f  Arduino Mega \u6269\u5c55\u677f           \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!        IOIO-OTG  Particle Photon  NodeMCU           \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!     !!!\u6ce8\u610f\n     Arduino Base Shield \u9002\u7528\u4e8e\u4e0b\u5217\u6838\u5fc3\u677f:  * Arduino UNO/Leonardo\n* Seeeduino V3/4/4.1/Lite/Clio/Lotus/Stalker\n* LinkIt ONE", 
            "title": "\u5982\u4f55\u5c06Grove\u8fde\u63a5\u5230\u60a8\u7684\u63a7\u5236\u677f"
        }, 
        {
            "location": "/Grove_System/#grove_4", 
            "text": "\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230Grove\u7535\u7f06\u67094\u79cd\u989c\u8272\u3002   pin 1  - \u9ec4\u8272 (\u4f8b\u5982, I2C Grove Connectors\u4e0a\u7684SCL)  pin 2  - \u767d\u8272 (\u4f8b\u5982, I2C Grove Connectors\u4e0a\u7684SDA)  pin 3  - \u7ea2\u8272 - VCC \uff08\u6240\u6709\u7684Grove\u63a5\u53e3\u7ea2\u8272\u90fd\u662fVCC\uff09  pin 4  - \u9ed1\u8272 - GND \uff08\u6240\u6709\u7684Grove\u63a5\u53e3\u7ea2\u8272\u90fd\u662fGND\uff09   Grove\u6a21\u5757\u4e3b\u8981\u67094\u79cd\u63a5\u53e3\u3002", 
            "title": "Grove\u6a21\u5757\u63a5\u53e3"
        }, 
        {
            "location": "/Grove_System/#grove-digital", 
            "text": "Grove\u6570\u5b57\u63a5\u53e3\u7531Grove\u63d2\u5934\u7684\u56db\u6761\u6807\u51c6\u7ebf\u7ec4\u6210\u3002\u4e24\u6761\u4fe1\u53f7\u7ebf\u901a\u5e38\u79f0\u4e3aD0\u548cD1\u3002\u5927\u591a\u6570\u6a21\u5757\u53ea\u4f7f\u7528D0\uff0c\u4f46\u6709\u4e9b\uff08\u50cfLED Bar Grove\u663e\u793a\u5c4f\uff09\u4f7f\u7528\u4e24\u8005\u3002\u901a\u5e38\u6838\u5fc3\u677f\u4f1a\u5c06\u677f\u5361\u4e0a\u7684\u7b2c\u4e00\u4e2aGrove\u8fde\u63a5\u5934\u79f0\u4e3aD0\uff0c\u7b2c\u4e8c\u4e2a\u79f0\u4e3aD1\u3002\u7b2c\u4e00\u4e2a\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684DO/D1\u7ba1\u811a\uff0c\u7b2c\u4e8c\u4e2a\u8fde\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684D1/D2\u5f15\u811a\uff0c\u540e\u9762\u7684\u8fde\u63a5\u5934\u4ee5\u6b64\u7c7b\u63a8\u3002     pin  Function  Note      pin1  Dn  \u7b2c\u4e00\u4e2a\u6570\u5b57\u8f93\u5165    pin2  Dn+1  \u7b2c\u4e8c\u4e2a\u6570\u5b57\u8f93\u5165    pin3  VCC  \u4f9b\u7535\u5f15\u811a 5V/3.3V    pin4  GND  \u5730", 
            "title": "Grove Digital \u6570\u5b57\u63a5\u53e3"
        }, 
        {
            "location": "/Grove_System/#grove-analog", 
            "text": "Grove\u6a21\u62df\u63a5\u53e3\u7531Grove\u63d2\u5934\u7684\u56db\u6761\u6807\u51c6\u7ebf\u7ec4\u6210\u3002\u4e24\u6761\u4fe1\u53f7\u7ebf\u901a\u5e38\u79f0\u4e3aA0\u548cA1\u3002\u5927\u591a\u6570\u6a21\u5757\u53ea\u4f7f\u7528A0\uff0c\u4f46\u6709\u4e9b\uff08\u50cfLED Bar Grove\u663e\u793a\u5c4f\uff09\u4f7f\u7528\u4e24\u8005\u3002\u901a\u5e38\u6838\u5fc3\u677f\u4f1a\u5c06\u677f\u5361\u4e0a\u7684\u7b2c\u4e00\u4e2aGrove\u8fde\u63a5\u5934\u79f0\u4e3aA0\uff0c\u7b2c\u4e8c\u4e2a\u79f0\u4e3aA1\u3002\u7b2c\u4e00\u4e2a\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684AO/A1\u7ba1\u811a\uff0c\u7b2c\u4e8c\u4e2a\u8fde\u63a5\u5934\u4f1a\u8fde\u63a5\u5230\u4e3b\u63a7\u82af\u7247\u7684A1/A2\u5f15\u811a\uff0c\u540e\u9762\u7684\u8fde\u63a5\u5934\u4ee5\u6b64\u7c7b\u63a8\u3002     pin  Function  Note      pin1  An  \u7b2c\u4e00\u4e2a\u6a21\u62df\u8f93\u5165    pin2  An+1  \u7b2c\u4e8c\u4e2a\u6a21\u62df\u8f93\u5165    pin3  VCC  \u4f9b\u7535\u5f15\u811a, 5V/3.3V    pin4  GND  \u5730", 
            "title": "Grove Analog \u6a21\u62df\u63a5\u53e3"
        }, 
        {
            "location": "/Grove_System/#grove-uart", 
            "text": "The Grove UART \u662f\u7279\u6b8a\u7684\u4e00\u79cd\u6570\u5b57\u8f93\u5165\u8f93\u51fa\u63a5\u53e3\u3002\u5b83\u4f7f\u7528\u5f15\u811a1\u548c\u5f15\u811a2\u8fdb\u884c\u4e32\u884c\u8f93\u5165\u548c\u53d1\u9001\u3002 \u5f15\u811a1\u662fRX\u7ebf\uff08\u7528\u4e8e\u63a5\u6536\u6570\u636e\uff0c\u56e0\u6b64\u662f\u8f93\u5165\uff09\uff0c\u5176\u4e2d\u5f15\u811a2\u662fTX\u7ebf\uff08\u7528\u4e8e\u5411Grove\u6a21\u5757\u4f20\u8f93\u6570\u636e\uff09\u3002     pin  Function  Note      pin1  RX  \u4e32\u884c\u63a5\u6536    pin2  TX  \u4e32\u884c\u53d1\u9001    pin3  VCC  \u4f9b\u7535\u5f15\u811a 5V/3.3V    pin4  GND  \u5730", 
            "title": "Grove UART"
        }, 
        {
            "location": "/Grove_System/#grove-i2c", 
            "text": "\u6709\u8bb8\u591a\u7c7b\u578b\u7684I2C Grove\u4f20\u611f\u5668\u53ef\u7528\u3002\u5927\u591a\u6570\u5668\u4ef6\u540c\u65f6\u652f\u63015V / 3.3V\uff0c\u4f46\u6709\u5c11\u6570\u53ea\u652f\u63013.3V\u6216\u53ea\u652f\u63015.0V\uff0c\u60a8\u9700\u8981\u5728\u4f7f\u7528\u524d\u4ed4\u7ec6\u68c0\u67e5\u7535\u538b\u53c2\u6570\u3002  Grove I2C\u8fde\u63a5\u5668\u5177\u6709\u6807\u51c6\u5e03\u5c40\u3002\u5f15\u811a1\u662fSCL\u4fe1\u53f7\uff0c\u5f15\u811a2\u662fSDA\u4fe1\u53f7\u3002\u7535\u6e90\u548c\u63a5\u5730\u4e0e\u5176\u4ed6\u8fde\u63a5\u5668\u76f8\u540c\u3002\u8fd9\u662fGrove Digital Connector\u7684\u53e6\u4e00\u4e2a\u7279\u6b8a\u7248\u672c\u3002\u5b9e\u9645\u4e0a\uff0c\u63a7\u5236\u5668\u4e0a\u7684I2C\u603b\u7ebf\uff08\u5982ESP8266\uff0cRaspberry Pi\u548cArduino\uff09\u901a\u5e38\u53ea\u4f7f\u7528\u6570\u5b57I / O\u5f15\u811a\u901a\u8fc7\u8f6f\u4ef6\u6765\u5b9e\u73b0I2C\u603b\u7ebf\u3002Raspberry Pi\u548cArduino\u4e0a\u7684I2C\u5f15\u811a\u662f\u5e26\u6709\u786c\u4ef6\u652f\u6301\u7684\u3002     pin  Function  Note      pin1  SCL  I2C \u65f6\u949f    pin2  SDA  I2C \u6570\u636e    pin3  VCC  \u4f9b\u7535\u5f15\u811a, 5V/3.3V    pin4  GND  \u5730", 
            "title": "Grove I2C"
        }, 
        {
            "location": "/Grove_System/#grove_5", 
            "text": "", 
            "title": "Grove \u7ebf\u7f06"
        }, 
        {
            "location": "/Grove_System/#grove_6", 
            "text": "\u6211\u4eec\u4e3a\u60a8\u7684\u9879\u76ee\u5de5\u7a0b\u51c6\u5907\u4e865\u79cd\u4e0d\u540c\u7684grove\u7ebf\u7f06, \u957f\u5ea65\u5398\u7c73\uff0c20\u5398\u7c73\uff0c30\u5398\u7c73\uff0c40\u5398\u7c73\u4ee5\u53ca50\u5398\u7c73\u4e0d\u7b49\u3002        5cm  20 cm  30 cm  40 cm  50 cm             \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!  \u7acb\u5373\u8d2d\u4e70!", 
            "title": "\u901a\u7528 Grove \u7ebf\u7f06"
        }, 
        {
            "location": "/Grove_System/#grove-branch-cable", 
            "text": "Grove Branch Cable\u662fGrove\u7cfb\u7edf\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7535\u7f06\u3002\u5b83\u7531\u4e09\u4e2a\u5e26\u9632\u53cd\u63d2\u7684\u6bcd\u5934\u8fde\u63a5\u5668\u548c\u56db\u6839\u989c\u8272\u7f16\u7801\u7684\u7535\u7ebf\u7ec4\u6210\u3002Grove\u5206\u652f\u7535\u7f06\u53ef\u7528\u4e8e\u652f\u6301\u83ca\u82b1\u94fe\u4e2d\u7684\u591a\u4e2aGrove\u8bbe\u5907\u8fde\u63a5\u5230Grove shield\u677f\u5361\u4e0a\u3002\u901a\u5e38\uff0c\u4e00\u7aef\u63a5\u53e3\u8fde\u63a5\u5230Grove shield\u677f\u5361\u4e0a\uff0c\u7b2c\u4e8c\u548c\u7b2c\u4e09\u8fde\u63a5\u5668\u8fde\u63a5\u5230\u4e24\u4e2aGrove\u8bbe\u5907\u3002  \u4e0eGrove\u7535\u7f06\u7cfb\u5217\u7684\u5176\u4ed6\u6210\u5458\u4e00\u6837\uff0c\u8fd9\u4e2a\u5206\u652f\u7535\u7f06\u4e5f\u662f\u5e26\u6709\u53cd\u63d2\u6263\u7684\uff0c\u8fd9\u6837\u786e\u4fdd\u60a8\u4e0d\u4f1a\u4e0d\u5c0f\u5fc3\u628a\u7ebf\u63d2\u53cd\u3002\u53e6\u5916\uff0c\u5f53\u5c06\u8fde\u63a5\u5668\u8fde\u63a5\u5230shield\u677f\u5361\u6216\u5176\u4ed6\u8bbe\u5907\u65f6\uff0c\u8bf7\u60a8\u6309\u538b\u4ee5\u786e\u4fdd\u8fde\u63a5\u7a33\u5b9a\u53ef\u9760\u3002\u7531\u4e8eGrove Branch\u7535\u7f06\u6709\u95e9\u9501\uff08\u6709\u65f6\u79f0\u4e3a\u201c\u6263\u201d\u6216\u201c\u5e26\u6263\u7535\u7f06\u201d\uff09\uff0c\u5f53\u95e9\u9501\u5173\u95ed\u65f6\uff0c\u60a8\u5c06\u542c\u5230\u4e00\u4e2a\u5c0f\u58f0\u97f3\uff0c\u5e76\u4e14\u5e94\u8be5\u770b\u5230\u95e9\u9501\u5728\u5176\u5bf9\u5e94\u7684\u90e8\u4ef6\u4e0a\u3002\u8fd9\u4e9b\u95e9\u9501\uff08\u6216\u5e26\u6263\uff09\u53ef\u6539\u5584\u8fde\u63a5\uff0c\u5e76\u4e14\u5728\u9ad8\u632f\u52a8\u6216\u751f\u4ea7\u73af\u5883\u4e2d\u7279\u522b\u65b9\u4fbf\uff0c\u56e0\u4e3a\u65ad\u5f00\u7535\u7f06\u65f6\u5fc5\u987b\u4f7f\u7528\u4e00\u4e9b\u529b\u3002\uff0c  \u4f7f\u7528Grove\u5206\u652f\u7535\u7f06\u8fde\u63a5\u591a\u4e2a\u8bbe\u5907\u65f6\uff0c\u8bf7\u683c\u5916\u5c0f\u5fc3\u3002\u8bf7\u6ce8\u610fGrove Shield\u4e0a\u7684\u6a21\u62df\u6216\u6570\u5b57\u5f15\u811a\u5c06\u7531Grove\u8bbe\u5907\u5171\u4eab\u3002\u8fd9\u6837\u7684\u914d\u7f6e\u53ef\u80fd\u4e0d\u9002\u5408\u4e8e\u4e24\u4e2a\u6a21\u62df\u8bbe\u5907\u3002\u4f7f\u7528Grove\u5206\u652f\u7535\u7f06\u8fde\u63a5\u6a21\u62df\u548c\u6570\u5b57Grove\u8bbe\u5907\u53ef\u80fd\u6839\u672c\u4e0d\u8d77\u4f5c\u7528\u3002   \u793a\u4f8b\u5305\u62ec:   \u4f7f\u7528\u83ca\u82b1\u94fe\u8fde\u63a5\u4e24\u4e2a\u6216\u591a\u4e2aI2C\u8bbe\u5907\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6761\u5206\u652f\u7535\u7f06\u6765\u6269\u5c55I2C\u603b\u7ebf\u3002  \u8fde\u63a5\u4e24\u4e2a\u9700\u8981\u540c\u65f6\u5de5\u4f5c\u7684\u8bbe\u5907\u3002\u4f8b\u5982\uff0cLED\u548c\u7ee7\u7535\u5668\u53ef\u4ee5\u901a\u8fc7\u5355\u4e2aGrove\u5206\u652f\u7535\u7f06\u8fde\u63a5\u5230Grove Shield\u3002\u7531\u4e8e\u4e24\u4e2a\u5668\u4ef6\u5c06\u7531\u540c\u4e00\u4e2a\u6570\u5b57\u5f15\u811a\u63a7\u5236\uff0c\u6240\u4ee5\u53ef\u4ee5\u5b9e\u73b0\u540c\u65f6\u5173\u95edLED\u548c\u65ad\u5f00\u7ee7\u7535\u5668\u3002", 
            "title": "Grove - Branch Cable \uff08\u5206\u652f\u7535\u7f06\uff09"
        }, 
        {
            "location": "/Grove_System/#grove-branch-cable-for-servo", 
            "text": "Grove\u5206\u652f\u7535\u7f06\u662f\u53e6\u4e00\u79cdGrove\u7535\u7f06\uff0c\u4e3b\u8981\u7528\u4e8e\u5c06\u4e00\u4e2a\u6216\u4e24\u4e2a\u8235\u673a\u8fde\u63a5\u5230\u60a8\u7684\u9879\u76ee\u3002\u5b83\u4eec\u7531\u4e09\u4e2a\u8fde\u63a5\u5668\u7ec4\u6210\uff1a\u4e00\u4e2a\u56db\u9488\u6bcd\u8fde\u63a5\u5934\uff0c\u9002\u7528\u4e8e\u8fde\u63a5\u5230Grove Shield\uff0c\u4ee5\u53ca\u4e24\u4e2a\u4e09\u9488\u516c\u67f1\u578b\u8fde\u63a5\u5934\u3002\u5728\u8fd9\u79cd\u914d\u7f6e\u4e2d\uff0c\u7535\u6e90\u548c\u5730\uff08\u6765\u81ea\u56db\u9488\u6bcd\u5934\u7684\u5f15\u811a3\u548c4\uff09\u90fd\u8fde\u63a5\u52303\u9488\u7684\u7535\u6e90\u548c\u5730\u3002\u56db\u9488\u8fde\u63a5\u5668\u7684\u5f15\u811a1\uff08\u9ec4\u8272\uff09\u4e00\u7aef\u8fde\u63a5\u5230\u5177\u6709PWM\u529f\u80fd\u7684Arduino\u5f15\u811a\u4e0a\uff0c\u53e6\u4e00\u7aef\u8fde\u63a5\u5230\u5e26\u6709\u9ec4\u8272\u5f15\u7ebf\u76843\u9488\u516c\u5934\u3002\u540c\u6837\uff0c\u56db\u9488\u8fde\u63a5\u5668\u7684\u5f15\u811a2\uff08\u767d\u7ebf\uff09\u7684\u4e00\u7aef\u4e5f\u8fde\u63a5\u5230Arduino\u7684\u7b2c\u4e8c\u4e2a\u5177\u6709PWM\u529f\u80fd\u7684\u5f15\u811a\u4e0a\uff0c\u800c\u53e6\u4e00\u7aef\u8fde\u63a5\u5230\u5e26\u6709\u9ec4\u7ebf\u7684\u53e6\u4e00\u4e2a\u4e09\u9488\u516c\u5934\u4e0a\u3002    \u7528\u4e8eServos\u7684Grove\u5206\u652f\u7535\u7f06\u7684\u56db\u9488\u8fde\u63a5\u5934\u901a\u5e38\u8fde\u63a5\u5230Grove Shield\u6570\u5b57\u63d2\u5ea7\uff0c\u5982D2-D9\u3002\u8fde\u63a5\u4f3a\u670d\u65f6\uff0c\u8bb0\u4e0b\u6570\u5b57PWM\u7535\u7f06\u7684\u7ebf\u989c\u8272\uff08\u9ec4\u8272\u6216\u767d\u8272\uff09\uff0c\u4ee5\u4e86\u89e3\u54ea\u4e2a\u6570\u5b57\u5f15\u811a\u5bf9\u5e94\u4e8e\u4f3a\u670d\u8f93\u5165\u3002", 
            "title": "Grove - Branch Cable for Servo \uff08\u4f3a\u670d\u5206\u652f\u7535\u7f06\uff09"
        }, 
        {
            "location": "/Grove_System/#grove-to-4pin-femalemale-jumper-grove4pin", 
            "text": "\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6765:   \u5c06Grove\u8bbe\u5907\u8fde\u63a5\u5230\u5176\u4ed6\u4e0d\u5e26Grove\u63a5\u53e3\u7684MCU\uff0c\u4f8b\u5982\u60a8\u8981\u5c06Grove - Light Sensor\u8fde\u63a5\u5230Raspberry Pi\u3002  \u4f7f\u7528Grove shield\u63a7\u5236\u975eGrove\u63a5\u53e3\u7684\u8bbe\u5907\u3002", 
            "title": "Grove to 4pin Female/Male Jumper \uff08grove\u8f6c4pin \u8df3\u7ebf\uff09"
        }, 
        {
            "location": "/Grove_System/#_1", 
            "text": "Cable  Link      Branch Cable  \u7acb\u5373\u8d2d\u4e70!    Branch Cable for Servo  \u7acb\u5373\u8d2d\u4e70!    Grove to 4Pin Female  \u7acb\u5373\u8d2d\u4e70!    Grove to 4Pin Male  \u7acb\u5373\u8d2d\u4e70!", 
            "title": "\u7ebf\u7f06\u8d2d\u4e70\u94fe\u63a5"
        }, 
        {
            "location": "/Grove_System/#grove_7", 
            "text": "\u6211\u4eec\u4e3a\u521d\u5b66\u8005\u8bbe\u8ba1\u4e86\u8bb8\u591a\u5957\u4ef6\u3002Grove\u5165\u95e8\u5957\u4ef6\u5305\u62ecGrove\u6269\u5c55\u677f\uff0c\u591a\u4e2aGrove\u6a21\u5757\u548c\u7528\u6237\u624b\u518c\u3002\u540c\u65f6\u6211\u4eec\u63d0\u4f9b\u5927\u91cf\u8bfe\u7a0b\u4f9b\u521d\u5b66\u8005\u5b66\u4e60\u3002\u5982\u679c\u60a8\u60f3\u5f00\u59cb\u7cfb\u7edf\u5730\u5b66\u4e60\u4e00\u4e2a\u5e73\u53f0\u6216\u8005\u5b66\u4e60\u76f8\u5173\u7535\u5b50\u77e5\u8bc6\uff0cGrove Starter\u5957\u4ef6\u5305\u5c06\u662f\u60a8\u7684\u6700\u4f73\u7684\u9009\u62e9\u3002   \u6211\u4eec\u9488\u5bf9\u4e0d\u540c\u7684\u5e73\u53f0\u5f00\u53d1\u4e86\u4e3a\u6570\u4f17\u591a\u7684\u5957\u4ef6     \u5957\u4ef6\u540d  \u8d2d\u4e70\u94fe\u63a5      Grove - Starter Kit for Arduino  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for mbed  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for LinkIt ONE  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for LaunchPad  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for Photon  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for BeagleBone Green  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for LinkIt 7688 Duo  \u7acb\u5373\u8d2d\u4e70!    Grove Starter Kit for 96Boards  \u7acb\u5373\u8d2d\u4e70!    Grove Starter kit for Arduino Genuino 101  \u7acb\u5373\u8d2d\u4e70!    GrovePi+ Starter Kit for Raspberry Pi  \u7acb\u5373\u8d2d\u4e70!", 
            "title": "Grove \u5165\u95e8\u5957\u4ef6"
        }, 
        {
            "location": "/Grove_System/#grove_8", 
            "text": "\u60f3\u8981\u4e00\u4e9bGrove\u6a21\u5757\u7528\u4e8e\u60a8\u7684\u9879\u76ee\uff1f\u8fd9\u91cc\u6709\u4e00\u4e9b\u63a8\u8350\u3002", 
            "title": "\u9009\u62e9\u60a8\u7684Grove"
        }, 
        {
            "location": "/Grove_System/#grove_9", 
            "text": "Grove - LED  Grove - Rotary Angle Sensor  Grove - Button           More Details  More Details  More Details        Grove - Switch  Grove - Encoder  Grove - Touch Sensor           More Details  More Details  More Details", 
            "title": "Grove \u57fa\u672c\u8f93\u5165\u8f93\u51fa\u6a21\u5757"
        }, 
        {
            "location": "/Grove_System/#grove_10", 
            "text": "I2C_LCD  Grove - OLED Display 0.96\"  Grove - OLED Display 1.12\"           More Details  More Details  More Details        Grove - LCD RGB Backlight  Grove - 4-Digit Display  Grove LED Bar v2.0           More Details  More Details  More Details", 
            "title": "Grove \u663e\u793a\u6a21\u5757"
        }, 
        {
            "location": "/Grove_System/#grove_11", 
            "text": "Grove - IMU 10DOF v2.0  Digital Accelerometer(\u00b1400g)  3-Axis Digital Gyro           More Details  More Details  More Details        3-Axis Digital Compass  3-Axis Digital Accelerometer(\u00b11.5g)  3-Axis Analog Accelerometer           More Details  More Details  More Details        3-Axis Digital Acc(\u00b116g)  6-Axis Acc Compass v2.0  6-Axis Acc Gyroscope           More Details  More Details  More Details", 
            "title": "Grove \u8fd0\u52a8\u68c0\u6d4b\u6a21\u5757"
        }, 
        {
            "location": "/Grove_System/#grove_12", 
            "text": "Grove \u2013 Uart Wifi  433MHz Simple RF link kit  315MHz Simple RF Link Kit           More Details  More Details  More Details        Grove - Serial RF Pro  125KHz RFID Reader  Grove - BLE           More Details  More Details  More Details        Grove - BLE (dual model)  Grove - NFC  Grove - NFC Tag           More Details  More Details  More Details", 
            "title": "Grove \u901a\u4fe1\u6a21\u5757"
        }, 
        {
            "location": "/Grove_System/#grove_13", 
            "text": "Air quality sensor  Gas Sensor(MQ2)  Gas Sensor(MQ5)           More Details  More Details  More Details        Gas Sensor(MQ3)  Gas Sensor(MQ9)  Gas Sensor(O2)           More Details  More Details  More Details        Dust Sensor  Moisture Sensor  Temperature Humidity Sensor           More Details  More Details  More Details", 
            "title": "Grove \u73af\u5883\u76d1\u6d4b\u6a21\u5757"
        }, 
        {
            "location": "/Grove_System/#grove_14", 
            "text": "I2C Mini Motor Driver  I2C Motor Driver  Grove - Servo           More Details  More Details  More Details        Line Finder  Ultrasonic Ranger  80cm Infrared Proximity Sensor           More Details  More Details  More Details", 
            "title": "Grove \u673a\u5668\u4eba\u914d\u4ef6"
        }, 
        {
            "location": "/Sensor/", 
            "text": "Grove - \u4f20\u611f\u5668\u5305\u62ec\u5404\u79cd\u4f20\u611f\u5668\u8f93\u5165\u6a21\u5757\u3002\n\n\n\u4ea7\u54c1\u5217\u8868\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u4f20\u611f\u5668\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nGrove-Air_Quality_Sensor_v1.3\n\n\nGrove-Barometer-High-Accuracy\n\n\nGrove-Barometer_Sensor_BMP280\n\n\nGrove-Digital_Light_Sensor\n\n\nGrove-Dust_Sensor\n\n\nGrove-Ear-clip_Heart_Rate_Sensor\n\n\nGrove-Electromagnet\n\n\nGrove-EMG_Detector\n\n\nGrove-Encoder\n\n\nGrove-Flame_Sensor\n\n\nGrove-Gas_Sensor-MQ9\n\n\nGrove-Gas_Sensor-O2\n\n\nGrove-GSR_Sensor\n\n\nGrove-HCHO_Sensor\n\n\nGrove-I2C_Color_Sensor\n\n\nGrove-Infrared_Receiver\n\n\nGrove-Light_Sensor\n\n\nGrove-Loudness_Sensor\n\n\nGrove-Moisture_Sensor\n\n\nGrove-Multichannel_Gas_Sensor\n\n\nGrove-Piezo_Vibration_Sensor\n\n\nGrove-Sound_Sensor\n\n\nGrove-Temperature_and_Humidity_Sensor\n\n\nGrove-Temperature_and_Humidity_Sensor_Pro\n\n\nGrove-Temperature_Sensor\n\n\nGrove-Temperature_Sensor_V1.2\n\n\nGrove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0\n\n\nGrove-Touch_Sensor\n\n\nGrove-Ultrasonic_Ranger\n\n\nGrove-UV_Sensor", 
            "title": "Sensor"
        }, 
        {
            "location": "/Sensor/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u4f20\u611f\u5668\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Grove-Air_Quality_Sensor_v1.3  Grove-Barometer-High-Accuracy  Grove-Barometer_Sensor_BMP280  Grove-Digital_Light_Sensor  Grove-Dust_Sensor  Grove-Ear-clip_Heart_Rate_Sensor  Grove-Electromagnet  Grove-EMG_Detector  Grove-Encoder  Grove-Flame_Sensor  Grove-Gas_Sensor-MQ9  Grove-Gas_Sensor-O2  Grove-GSR_Sensor  Grove-HCHO_Sensor  Grove-I2C_Color_Sensor  Grove-Infrared_Receiver  Grove-Light_Sensor  Grove-Loudness_Sensor  Grove-Moisture_Sensor  Grove-Multichannel_Gas_Sensor  Grove-Piezo_Vibration_Sensor  Grove-Sound_Sensor  Grove-Temperature_and_Humidity_Sensor  Grove-Temperature_and_Humidity_Sensor_Pro  Grove-Temperature_Sensor  Grove-Temperature_Sensor_V1.2  Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0  Grove-Touch_Sensor  Grove-Ultrasonic_Ranger  Grove-UV_Sensor", 
            "title": "\u4ea7\u54c1\u5217\u8868"
        }, 
        {
            "location": "/Grove-Encoder/", 
            "text": "\u7b80\u4ecb\n\n\nGrove \u2013 Encoder \u662f\u4e00\u4e2a\u589e\u91cf\u65cb\u8f6c\u7f16\u7801\u5668\u3002\u5b83\u5c06\u8f74\u7684\u65cb\u8f6c\u4fe1\u53f7\u7f16\u7801\u6210\u7535\u5b50\u8109\u51b2\u8f93\u51fa\u4fe1\u53f7\u3002\u8fd9\u4e2a\u6a21\u5757\u4e5f\u5c5e\u4e8eGrove\u7cfb\u5217\uff0c\u6709\u6807\u51c6\u7684Grove\u63a5\u53e3\u3002\n\n\n\u5f53\u60a8\u7684\u9879\u76ee\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65cb\u94ae\u65f6\uff0c\u6bd4\u5982\u8bf4\u97f3\u91cf\u65cb\u94ae\uff0c\u6570\u5b57\u65cb\u94ae\u7b49\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u589e\u91cf\u5f0f\u7f16\u7801\u5668\n\n\nGrove\u63a5\u53e3\n\n\n360\u5ea6\u65cb\u8f6c\n\n\n\n\n\n\nTips\n\n\n\n\n\u5173\u4e8eGrove\u63a5\u53e3\u7684\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003\u4e0b\u9762\u94fe\u63a5\nGrove System\n\n\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6700\u5c0f\u503c\n\n\n\n\n\u5178\u578b\u503c\n\n\n\n\n\u6700\u5927\u503c\n\n\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\u7535\u538b\n\n\n\n\n4.5\n\n\n\n\n5\n\n\n\n\n5.5\n\n\n\n\nV\n\n\n\n\n\n\n\n\n\u7535\u6d41\n\n\n\n\n10\n\n\n\n\n20\n\n\n\n\n30\n\n\n\n\nmA\n\n\n\n\n\n\n\n\n\u5c3a\u5bf8\n\n\n\n\n20x 20\n\n\n\n\nmm\n\n\n\n\n\n\n\n\n\u51c0\u91cd\n\n\n\n\n12\n\n\n\n\ng\n\n\n\n\n\n\n\n\n\u5e73\u53f0\u652f\u6301\n\n\nIntel Edison (with the \nseeedstudio library\n)\n\n\nArduino101 (with the \ncommunity library\n)\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u5f00\u59cb\u4e4b\u524d\n\n\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002\n\n\nGrove-Encoder \u4f7f\u7528\u7684\u4e3aseeedstudio\u7f16\u5199\u7684\u5e93\u7b80\u5355\u6613\u7528\uff0c\u9996\u5148\u8bf7\u70b9\u51fb\u540e\u9762\u7684\u5e93\u540d\u4e0b\u8f7d\u5e93 \nseeedstudio Encoder Lib\n, \u6216\u8005\u70b9\u51fb\u8fd9\u91cc\ncommunity GroveEncoder library\n.  \u7136\u540e\u53ea\u9700\u8981\u628a\u5b83\u63a5\u5728BaseShield\u7684D2\u63a5\u53e3\u4e0a\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528\u4e86.\n\n\n\u73af\u5f62LED\u706f\u6761\u793a\u4f8b\n\n\n\n\n\n\n1.\n\n\n\n\n\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u793a\u4f8b\uff0c\u5c31\u662f\u5c55\u793a\u4e86\u5982\u4f55\u64cd\u505a\u4e00\u4e2a\u5706\u5f62\u7684LED\u706f\u6761\u3002\n\u8fd9\u4e2a\u5706\u5f62\u7684LED\u706f\u6761\u7531Encoder\u548c  \nGrove-CircularLED\n \uff08\u53ef\u70b9\u51fb\u67e5\u770b\uff09\u4e24\u4e2a\u6a21\u5757\u7ec4\u6210 \u3002\u5c06\u8fd9\u4e24\u4e2a\u6a21\u5757\u6309\u7167\u4e0b\u56fe\u6240\u793a\u8fde\u63a5\u8d77\u6765:\n\n\n\n\n\n\n2.\n\n\n\n\n\u8fd9\u4e2a\u9879\u76ee\u9700\u8981\u5148\u70b9\u51fb\u5b89\u88c5\u4e0b\u9762\u8fd9\u51e0\u4e2a\u5e93\uff1a \nTimerOne Lib\n \u5e93\u3001 \nEncoder Lib\n \u5e93\u548c \nCircularLED Library\n\u5e93 \u3002\u4e0b\u8f7d\u5b8c\u4e0a\u9762\u51e0\u4e2a\u5e93\u540e\u5b89\u88c5\u5728\u4f60\u7684Arduino IDE\u4e0a\u3002\n\n\n\n\n3.\n\n\n\n\n\u91cd\u542f\u5e76\u6253\u5f00Arduino IDE\uff0c\u6253\u5f00 \nFile-\nExamples-\nEncoder-\nEncodeCircuiBar\n\u3002\u4ee3\u7801\u5982\u4e0b\u6240\u793a\n\n\n#include \nCircularLED.h\n\n#include \nEncoder.h\n\n#include \nTimerOne.h\n\nCircularLED circularLED;\nunsigned int LED[24];\nint index_LED;\nvoid setup()\n{\n  encoder.Timer_init();\n}\nvoid loop()\n{\n    if (encoder.rotate_flag ==1)\n  {\n    if (encoder.direct==1)\n    {\n      index_LED++;\n      if (index_LED\n23)\n      index_LED=24;\n      SenttocircularBar(index_LED);\n    }\n     else\n     {\n      index_LED--;\n      if(index_LED\n0)\n      index_LED=0;\n      SenttocircularBar(index_LED);\n     }\n    encoder.rotate_flag =0;\n  }\n}\nvoid SenttocircularBar(int index)\n{\n  for (int i=0;i\n24;i++)\n  {\n    if (i\nindex)\n    {\n      LED[i]=0xff;\n    }\n    else\n    LED[i]=0;\n  }\n  circularLED.CircularLEDWrite(LED);\n}\n\n\n\n\n\n\n4.\n\n\n\n\n\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684Arduino\u6216Seeeduino\u677f\u5b50\u91cc\u3002\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\uff0c\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u3002\n\n\n\n\n\n\n\uff01\uff01\uff01\u6ce8\u610f\n\n\n    \u5f53Grove \u2013 Encoder \u88ab\u6309\u4e0b\u65f6\uff0c\u4e5f\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4fe1\u53f7\uff0c\u4f46\u662f\u57fa\u4e8eGrove\u7ebf\u7684\u9650\u5236\uff0c\u5e76\u6ca1\u6709\u5c06\u8be5\u4fe1\u53f7\u5f15\u51fa\u6765\u3002\n\n\n\n\n\u8d44\u6599\u4e0b\u8f7d\n\n\n\n\nEncoder Spec\n\n\nDemo in Arduino forum\n\n\nTimeOne Lib\n\n\nseeedstudio Encoder Library\n\n\ncommunity Encoder Library\n\n\nGrove-Encoder Eagle files", 
            "title": "Grove-Encoder"
        }, 
        {
            "location": "/Grove-Encoder/#_1", 
            "text": "Grove \u2013 Encoder \u662f\u4e00\u4e2a\u589e\u91cf\u65cb\u8f6c\u7f16\u7801\u5668\u3002\u5b83\u5c06\u8f74\u7684\u65cb\u8f6c\u4fe1\u53f7\u7f16\u7801\u6210\u7535\u5b50\u8109\u51b2\u8f93\u51fa\u4fe1\u53f7\u3002\u8fd9\u4e2a\u6a21\u5757\u4e5f\u5c5e\u4e8eGrove\u7cfb\u5217\uff0c\u6709\u6807\u51c6\u7684Grove\u63a5\u53e3\u3002  \u5f53\u60a8\u7684\u9879\u76ee\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65cb\u94ae\u65f6\uff0c\u6bd4\u5982\u8bf4\u97f3\u91cf\u65cb\u94ae\uff0c\u6570\u5b57\u65cb\u94ae\u7b49\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/Grove-Encoder/#_2", 
            "text": "\u589e\u91cf\u5f0f\u7f16\u7801\u5668  Grove\u63a5\u53e3  360\u5ea6\u65cb\u8f6c    Tips   \u5173\u4e8eGrove\u63a5\u53e3\u7684\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003\u4e0b\u9762\u94fe\u63a5 Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Encoder/#_3", 
            "text": "\u9879\u76ee  \n\u6700\u5c0f\u503c  \n\u5178\u578b\u503c  \n\u6700\u5927\u503c  \n\u5355\u4f4d    \n\u7535\u538b  \n4.5  \n5  \n5.5  \nV    \n\u7535\u6d41  \n10  \n20  \n30  \nmA    \n\u5c3a\u5bf8  \n20x 20  \nmm    \n\u51c0\u91cd  \n12  \ng", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Encoder/#_4", 
            "text": "Intel Edison (with the  seeedstudio library )  Arduino101 (with the  community library )", 
            "title": "\u5e73\u53f0\u652f\u6301"
        }, 
        {
            "location": "/Grove-Encoder/#_5", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Encoder/#_6", 
            "text": "\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002  Grove-Encoder \u4f7f\u7528\u7684\u4e3aseeedstudio\u7f16\u5199\u7684\u5e93\u7b80\u5355\u6613\u7528\uff0c\u9996\u5148\u8bf7\u70b9\u51fb\u540e\u9762\u7684\u5e93\u540d\u4e0b\u8f7d\u5e93  seeedstudio Encoder Lib , \u6216\u8005\u70b9\u51fb\u8fd9\u91cc community GroveEncoder library .  \u7136\u540e\u53ea\u9700\u8981\u628a\u5b83\u63a5\u5728BaseShield\u7684D2\u63a5\u53e3\u4e0a\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528\u4e86.", 
            "title": "\u5f00\u59cb\u4e4b\u524d"
        }, 
        {
            "location": "/Grove-Encoder/#led", 
            "text": "1.   \u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u793a\u4f8b\uff0c\u5c31\u662f\u5c55\u793a\u4e86\u5982\u4f55\u64cd\u505a\u4e00\u4e2a\u5706\u5f62\u7684LED\u706f\u6761\u3002\n\u8fd9\u4e2a\u5706\u5f62\u7684LED\u706f\u6761\u7531Encoder\u548c   Grove-CircularLED  \uff08\u53ef\u70b9\u51fb\u67e5\u770b\uff09\u4e24\u4e2a\u6a21\u5757\u7ec4\u6210 \u3002\u5c06\u8fd9\u4e24\u4e2a\u6a21\u5757\u6309\u7167\u4e0b\u56fe\u6240\u793a\u8fde\u63a5\u8d77\u6765:    2.   \u8fd9\u4e2a\u9879\u76ee\u9700\u8981\u5148\u70b9\u51fb\u5b89\u88c5\u4e0b\u9762\u8fd9\u51e0\u4e2a\u5e93\uff1a  TimerOne Lib  \u5e93\u3001  Encoder Lib  \u5e93\u548c  CircularLED Library \u5e93 \u3002\u4e0b\u8f7d\u5b8c\u4e0a\u9762\u51e0\u4e2a\u5e93\u540e\u5b89\u88c5\u5728\u4f60\u7684Arduino IDE\u4e0a\u3002   3.   \u91cd\u542f\u5e76\u6253\u5f00Arduino IDE\uff0c\u6253\u5f00  File- Examples- Encoder- EncodeCircuiBar \u3002\u4ee3\u7801\u5982\u4e0b\u6240\u793a  #include  CircularLED.h \n#include  Encoder.h \n#include  TimerOne.h \nCircularLED circularLED;\nunsigned int LED[24];\nint index_LED;\nvoid setup()\n{\n  encoder.Timer_init();\n}\nvoid loop()\n{\n    if (encoder.rotate_flag ==1)\n  {\n    if (encoder.direct==1)\n    {\n      index_LED++;\n      if (index_LED 23)\n      index_LED=24;\n      SenttocircularBar(index_LED);\n    }\n     else\n     {\n      index_LED--;\n      if(index_LED 0)\n      index_LED=0;\n      SenttocircularBar(index_LED);\n     }\n    encoder.rotate_flag =0;\n  }\n}\nvoid SenttocircularBar(int index)\n{\n  for (int i=0;i 24;i++)\n  {\n    if (i index)\n    {\n      LED[i]=0xff;\n    }\n    else\n    LED[i]=0;\n  }\n  circularLED.CircularLEDWrite(LED);\n}   4.   \u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684Arduino\u6216Seeeduino\u677f\u5b50\u91cc\u3002\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\uff0c\u8bf7\u70b9\u51fb \u8fd9\u91cc \u3002    \uff01\uff01\uff01\u6ce8\u610f \n\n    \u5f53Grove \u2013 Encoder \u88ab\u6309\u4e0b\u65f6\uff0c\u4e5f\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4fe1\u53f7\uff0c\u4f46\u662f\u57fa\u4e8eGrove\u7ebf\u7684\u9650\u5236\uff0c\u5e76\u6ca1\u6709\u5c06\u8be5\u4fe1\u53f7\u5f15\u51fa\u6765\u3002", 
            "title": "\u73af\u5f62LED\u706f\u6761\u793a\u4f8b"
        }, 
        {
            "location": "/Grove-Encoder/#_7", 
            "text": "Encoder Spec  Demo in Arduino forum  TimeOne Lib  seeedstudio Encoder Library  community Encoder Library  Grove-Encoder Eagle files", 
            "title": "\u8d44\u6599\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/", 
            "text": "\u4ea7\u54c1\u7b80\u4ecb\n\n\nGrove-Multichannel Gas Sensor\u662f\u4e00\u4e2a\u5efa\u7acb\u5728MiCS-6814\u4e0a\u7684\u73af\u5883\u68c0\u6d4b\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u68c0\u6d4b\u591a\u79cd\u6709\u5bb3\u6c14\u4f53\uff0c\u7531\u4e8e\u5176\u591a\u901a\u9053\u7279\u6027\uff0c\u53ef\u4ee5\u540c\u65f6\u68c0\u6d4b\u4e09\u79cd\u4e0d\u540c\u6c14\u4f53\u3002\u56e0\u6b64\uff0c\u5f53\u73af\u5883\u5185\u4e0d\u6b62\u4e00\u79cd\u6c14\u4f53\u65f6\uff0c\u8be5\u4f20\u611f\u5668\u53ef\u4ee5\u7528\u4e8e\u76d1\u6d4b\u6c14\u4f53\u6d53\u5ea6\u3002\n\n\n\u8fd9\u4e2a\u4f20\u611f\u5668\u5c5e\u4e8eGrove system\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u63d2\u5230Base shield\u4e0a\uff0c\u5728\u4e0d\u9700\u8981\u4efb\u4f55\u8df3\u7ebf\u7684\u6761\u4ef6\u4e0b\uff0c\u76f4\u63a5\u4e0eArduino\u7ec4\u5408\u4f7f\u7528\u3002\u5176\u63a5\u53e3\u4e3aI2C\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u5b83\u8fde\u63a5\u5230\u6269\u5c55\u677f\u81ea\u5e26\u7684I2C\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528\n\n\n\n\n\u6ce8\u610f\u63d0\u793a\n\n\n\u4f20\u611f\u5668\u503c\u4ec5\u53cd\u6620\u4e86\u5141\u8bb8\u8bef\u5dee\u8303\u56f4\u5185\u6c14\u4f53\u6d53\u5ea6\u7684\u8fd1\u4f3c\u8d8b\u52bf, \u5b83\u5e76\u4e0d\u4ee3\u8868\u51c6\u786e\u771f\u5b9e\u7684\u6c14\u4f53\u6d53\u5ea6\u3002\u7a7a\u6c14\u4e2d\u7279\u5b9a\u6210\u5206\u6d53\u5ea6\u7684\u68c0\u6d4b\u65e0\u6cd5\u901a\u8fc7\u5355\u4e00\u7684\u4f20\u611f\u5668\u5b9e\u73b0\uff0c\u901a\u5e38\u9700\u8981\u66f4\u52a0\u7cbe\u786e\u548c\u6602\u8d35\u7684\u8bbe\u5907\u3002\u5982\u679c\u60a8\u7684\u9879\u76ee\u65e8\u5728\u83b7\u53d6\u9ad8\u7cbe\u5ea6\u6c14\u4f53\u6d53\u5ea6\u6570\u636e\uff0c\u6211\u4eec\u4e0d\u5efa\u8bae\u60a8\u4f7f\u7528\u8fd9\u4e2a\u4f20\u611f\u5668\u3002\n\n\n\n\n\n\n\n\n\u5f00\u59cb\u4e4b\u524d\n\n\n\u76f8\u5173\u9605\u8bfb\n\n\n\u6211\u4eec\u6781\u529b\u63a8\u8350\u60a8\u5728\u4f7f\u7528\u6c14\u4f53\u4f20\u611f\u5668\u4e4b\u524d\uff0c\u5148\u9605\u8bfb\u5982\u4e0b\u53c2\u8003\u8d44\u6599\u3002\u8fd9\u5c06\u5e2e\u52a9\u60a8\u4e86\u89e3\u66f4\u591a\u5173\u4e8eArduino\u548c\u6211\u4eec\u4ea7\u54c1\u7684\u76f8\u5173\u77e5\u8bc6\u3002\u800c\u4e14\u4f1a\u4f7f\u60a8\u5728\u4f7f\u7528\u5f00\u6e90\u786c\u4ef6\u65f6\u66f4\u5f97\u5fc3\u5e94\u624b\u3002\n\n\n\n\nArduino\u5165\u95e8\u6307\u5bfc\n\n\nGrove\u7cfb\u7edf\u7b80\u4ecb\n\n\nBase_Shield\u4f7f\u7528\u6307\u5357\n\n\n\n\n\u9605\u8bfb\u5b8c\u4e0a\u8bc9\u8d44\u6599\u540e\u60a8\u5c06\u638c\u63e1\u5982\u4f55\u4f7f\u7528Base_Shield\u677f\u5361\u5c06Grove\u7cfb\u5217\u4ea7\u54c1\u4e0eArduino\u76f8\u8fde\u3002\u597d\u4e86\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01\n\n\n\u51c6\u5907\u5de5\u4f5c\n\n\n\u8fd9\u4e2a\u6559\u7a0b\u5c06\u9700\u8981\u4f7f\u7528\u5230\u4e0b\u5217\u4ea7\u54c1\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb\u67e5\u9605\u6216\u8d2d\u4e70\u5bf9\u5e94\u4ea7\u54c1:\n\n\n\n\nArduino UNO R3\n \u6216\u8005 \nSeeeduino v4\n\n\nBase Shield\n\n\nGrove - Multichannel Gas Sensor\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npin\u540d\u79f0\n\n\n\u76f8\u5173\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nGND\n\n\n\u63a5\u5730\n\n\n\n\n\n\nVCC\n\n\n3.3V - 5V\n\n\n\n\n\n\nSDA\n\n\nI2C data\n\n\n\n\n\n\nSCL\n\n\nI2C clock\n\n\n\n\n\n\n\n\n\u8be5\u4f20\u611f\u5668\u7684\u4f9b\u7535\u7535\u538b\u4ecb\u4e8e3.3V\u548c5V\u4e4b\u95f4\uff0c\u53ef\u4e0e\u8f93\u51fa\u7535\u538b\u4e3a3.3V\u7684\u5355\u7247\u673a\u517c\u5bb9\u3002\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u4e09\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u4f20\u611f\u5355\u5143\n\n\n\u57fa\u4e8eATmega168PA\n\n\n\u5e26\u6709\u53ef\u7f16\u7a0b\u5730\u5740\u7684I2C\u63a5\u53e3\n\n\n\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed\u52a0\u70ed\u529f\u8017\u964d\u4f4e\u529f\u7387\n\n\n\u53ef\u68c0\u6d4b\u7684\u6c14\u4f53\u79cd\u7c7b\uff1a\n\n\n\u4e00\u6c27\u5316\u78b3 CO 1-1000ppm\n\n\n\u4e8c\u6c27\u5316\u6c2e NO2 0.05-10ppm\n\n\n\u4e59\u9187 C2H6OH 10-500ppm\n\n\n\u6c22 H2 1-1000ppm\n\n\n\u6c28 NH3 1-500ppm\n\n\n\u7532\u70f7 CH4 \n1000ppm\n\n\n\u4e19\u70f7 C3H8 \n1000ppm\n\n\n\u5f02\u4e01\u70f7 C4H10 \n1000ppm\n\n\n\n\n\u6a21\u5757\u56fe\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\nArduino, linkit, wio\n\n\n\u7535\u6c14\u7279\u6027\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u72b6\u6001\n\n\n\u6700\u5c0f\u503c\n\n\n\u7279\u5f81\u503c\n\n\n\u6700\u5927\u503c\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\n\u7535\u538b\n\n\n-\n\n\n3.1\n\n\n3.3\n\n\n5.25\n\n\nV\n\n\n\n\n\n\n\u6ce2\u7eb9\n\n\n\u6700\u5927\u4f9b\u7535\n\n\n-\n\n\n80\n\n\n100\n\n\nmV\n\n\n\n\n\n\n\u53d1\u70ed\u529f\u7387\n\n\n-\n\n\n-\n\n\n-\n\n\n88\n\n\nmV\n\n\n\n\n\n\n\u6700\u5927\u529f\u7387\n\n\n-\n\n\n-\n\n\n-\n\n\n150\n\n\nmV\n\n\n\n\n\n\nADC\u7cbe\u5ea6\n\n\n-\n\n\n-\n\n\n10\n\n\n-\n\n\nBits\n\n\n\n\n\n\nI2C\u901f\u5ea6\n\n\n-\n\n\n-\n\n\n100\n\n\n400\n\n\nkHz\n\n\n\n\n\n\nVIL\n\n\n@I2C\n\n\n-0.5\n\n\n-\n\n\n0.99\n\n\nV\n\n\n\n\n\n\nVIH\n\n\n@I2C\n\n\n2.31\n\n\n-\n\n\n5.25\n\n\nV\n\n\n\n\n\n\n\n\nRED\u4f20\u611f\u5668\u6027\u80fd\n\n\n\n\n\n\n\n\nCharacteristic RED sensor\n\n\nSymbol\n\n\nTyp\n\n\nMin\n\n\nMax\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nSensing resistance in air\n\n\nR0\n\n\n-\n\n\n100\n\n\n1500\n\n\nk\u03a9\n\n\n\n\n\n\nTypical CO detection range\n\n\nFS\n\n\n-\n\n\n1\n\n\n1000\n\n\nppm\n\n\n\n\n\n\nSensitivity factor\n\n\nSR\n\n\n-\n\n\n1.2\n\n\n50\n\n\n-\n\n\n\n\n\n\n\n\n\n\nOX\u4f20\u611f\u5668\u6027\u80fd\n\n\n\n\n\n\n\n\nCharacteristic OX sensor\n\n\nSymbol\n\n\nTyp\n\n\nMin\n\n\nMax\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nSensing resistance in air\n\n\nR0\n\n\n-\n\n\n0.8\n\n\n20\n\n\nk\u03a9\n\n\n\n\n\n\nTypical NO2 detection range\n\n\nFS\n\n\n-\n\n\n0.05\n\n\n10\n\n\nppm\n\n\n\n\n\n\nSensitivity factor\n\n\nSR\n\n\n-\n\n\n2\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\nNH3\u4f20\u611f\u5668\u6027\u80fd\n\n\n\n\n\n\n\n\nCharacteristic NH3 sensor\n\n\nSymbol\n\n\nTyp\n\n\nMin\n\n\nMax\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nSensing resistance in air\n\n\nR0\n\n\n-\n\n\n10\n\n\n1500\n\n\nk\u03a9\n\n\n\n\n\n\nTypical NH3 detection range\n\n\nFS\n\n\n-\n\n\n1\n\n\n300\n\n\nppm\n\n\n\n\n\n\nSensitivity factor\n\n\nSR\n\n\n-\n\n\n1.5\n\n\n15\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u6ce8\u610f\u63d0\u793a\n\n\u4e3a\u4e86\u5f97\u5230\u7a33\u5b9a\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u4f20\u611f\u5668\u9700\u8981\u9884\u52a0\u70ed\u5341\u5206\u949f\u4ee5\u4e0a\u3002\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\u56fe:\n\n\n1.\u5c06 Grove - Multichannel Gas Sensor \u548c Seeeduino\u6309\u7167\u4e0b\u56fe\u65b9\u5f0f\u76f8\u8fde.\n\n\n\n\n\u4e0a\u4f20\u4ee3\u7801:\n\n\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002\n\n\n\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n\u3002\n\n\n2.\u4e0b\u8f7d \nArduino Library \n Grove/Xadow firmware\n \u7136\u540e\u6dfb\u52a0\u5230Arduino\u5e93\u6587\u4ef6\u4e2d\u3002\n\n\n3.\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u6253\u5f00\u793a\u4f8b\u7a0b\u5e8f:File -\n Example -\n Mutichannel_Gas_Sensor-\n ReadSensorValue_Grove.\n\n\nReadSensorValue_Grove \u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n\n\n// Read Data from Grove - Multichannel Gas Sensor\n\n\n#include\n \nWire.h\n\n\n#include\n \nMutichannelGasSensor.h\n\n\n\nvoid\n \nsetup\n()\n\n\n{\n\n    \nSerial\n.\nbegin\n(\n115200\n);\n  \n// start serial for output\n\n    \nSerial\n.\nprintln\n(\npower on!\n);\n\n    \ngas\n.\nbegin\n(\n0x04\n);\n//the default I2C address of the slave is 0x04\n\n    \ngas\n.\npowerOn\n();\n\n    \nSerial\n.\nprint\n(\nFirmware Version = \n);\n\n    \nSerial\n.\nprintln\n(\ngas\n.\ngetVersion\n());\n\n\n}\n\n\n\nvoid\n \nloop\n()\n\n\n{\n\n    \nfloat\n \nc\n;\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_NH3\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of NH3 is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_CO\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of CO is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_NO2\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of NO2 is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_C3H8\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of C3H8 is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_C4H10\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of C4H10 is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_CH4\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of CH4 is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_H2\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of H2 is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \nc\n \n=\n \ngas\n.\nmeasure_C2H5OH\n();\n\n    \nSerial\n.\nprint\n(\nThe concentration of C2H5OH is \n);\n\n    \nif\n(\nc\n=\n0\n)\n \nSerial\n.\nprint\n(\nc\n);\n\n    \nelse\n \nSerial\n.\nprint\n(\ninvalid\n);\n\n    \nSerial\n.\nprintln\n(\n ppm\n);\n\n\n    \ndelay\n(\n1000\n);\n\n\n}\n\n\n\n\n\n4.\u4e0a\u4f20\u4ee3\u7801\u3002\u8bf7\u8bb0\u5f97\u5728Arduino\u8f6f\u4ef6\u7684 \u5de5\u5177 | \u5f00\u53d1\u677f\u4e2d\u52fe\u9009\u5bf9\u5e94\u7684\u677f\u5361\uff0c\u672c\u4f8b\u7a0b\u4f7f\u7528\u7684\u662fSeeeduino Uno\uff0c\u540c\u65f6\u8bf7\u9009\u62e9\u6b63\u786e\u7684\u4e32\u53e3\u3002\n\n\n\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff08ctrl+shift+M\uff09\uff0c\u60a8\u5c31\u53ef\u4ee5\u770b\u5230\u6765\u81ea\u4f20\u611f\u5668\u7684\u6570\u636e\u4e86.\n\n\n\n\n\n\nTip\n\n\n\n\n\u66f4\u591a\u7684\u5173\u4e8eGrove\u6a21\u5757\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb\u53c2\u8003 \nGrove System\n\n\n\n\n\n\n\u66f4\u65b0\u56fa\u4ef6\n\n\n\u8be5Grove\u6a21\u5757\u6709\u4e00\u4e2aATmega168 MCU \u51fa\u5382\u56fa\u4ef6\u3002\u56fa\u4ef6\u5df2\u7ecf\u4e8e2016\u5e7411\u670811\u66f4\u65b0\u5230\u4e86V2.0\u7248\u672c\u3002\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u68c0\u6d4b\u60a8\u5f53\u524d\u7684\u56fa\u4ef6\u7248\u672c\u3002\n\n\n// Get firmware version of Grove Multichannel Gas Sensor\n\n\n#include\n \nWire.h\n\n\n#include\n \nMutichannelGasSensor.h\n\n\n\n#define SENSOR_ADDR     0X04        \n// default to 0x04\n\n\n\nvoid\n \nsetup\n()\n\n\n{\n\n    \nSerial\n.\nbegin\n(\n115200\n);\n\n    \ngas\n.\nbegin\n(\nSENSOR_ADDR\n);\n\n\n    \nunsigned\n \nchar\n \nversion\n \n=\n \ngas\n.\ngetVersion\n();\n\n    \nSerial\n.\nprint\n(\nVersion = \n);\n\n    \nSerial\n.\nprintln\n(\nversion\n);\n    \n\n}\n\n\n\nvoid\n \nloop\n()\n\n\n{\n\n    \n// nothing to do\n\n\n}\n\n\n\n\n\n\u5982\u679c\u68c0\u6d4b\u7ed3\u679c\u60a8\u7684\u56fa\u4ef6\u7248\u672c\u662fV1\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u66f4\u65b0\u56fa\u4ef6\u5230V2\u4ee5\u83b7\u53d6\u66f4\u7a33\u5b9a\u7684\u6570\u636e\u3002\n\n\n\u4e3a\u4e86\u66f4\u65b0\u56fa\u4ef6\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u7d20\u6750,\n\n\n\n\nAn Arduino UNO/Seeeduino V3/\n\n\n6 \u6839\u675c\u90a6\u7ebf\n\n\n\u70d9\u94c1\n\n\n\n\n\u5728\u677f\u5361\u7684\u80cc\u9762\u7559\u6709ICSP\u710a\u76d8\uff0c\u60a8\u9700\u8981\u5c06\u8fd9\u4e9b\u710a\u76d8\u4e0eArduino\u677f\u5b50\u76f8\u8fde\u3002\u7ba1\u811a\u5b9a\u4e49\u5982\u4e0b\u8868\uff0c\u8fde\u63a5\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\n\n\n\n\nSensor\n\n\nArduino\n\n\n\n\n\n\n\n\n\n\nMISO\n\n\nD12\n\n\n\n\n\n\nSCK\n\n\nD13\n\n\n\n\n\n\nNRST\n\n\nD10\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nMOSI\n\n\nD11\n\n\n\n\n\n\nVCC\n\n\n5V\n\n\n\n\n\n\n\n\n\n\n\u8fde\u63a5\u597d\u4e4b\u540e\uff0c\u8bf7\u6253\u5f00\u60a8Arduino\u793a\u4f8b\u4e2d\u7684 \nUpdateFrimware\n , \u8fd0\u884c\uff0c\u6253\u5f00\u60a8\u7684\u4e32\u53e3\u76d1\u89c6\u5668\u3002\u60a8\u5c06\u770b\u5230\u4e00\u4e9b\u6253\u5370\u7684\u4fe1\u606f\u3002\n\n\n\u8f93\u5165\u4e00\u4e2a \u201c g \u201d\u6765\u5f00\u59cb\u70e7\u5f55\u3002\n\n\n\n\n\u6821\u51c6\n\n\n\u5982\u679c\u60a8\u603b\u662f\u5f97\u5230\u4e00\u4e9b\u4e0d\u53ef\u9760\u7684\u6570\u636e\uff0c\u8bf7\u5c1d\u8bd5\u6821\u51c6\u4f20\u611f\u5668\u3002\u6253\u5f00\u793a\u4f8b\u4e2d\u7684 \ncalibration\n ,\u4e0a\u4f20\u81f3\u60a8\u7684Arduino\uff0c\u6253\u5f00\u60a8\u7684\u4e32\u53e3\u76d1\u89c6\u5668\u6765\u67e5\u770b\u6821\u51c6\u7684\u76f8\u5173\u4fe1\u606f\u3002\n\n\n\n\nNote\n\n\n\n\n\u5728\u4f20\u611f\u5668\u51fa\u5382\u524d\u5df2\u7ecf\u6821\u51c6\u8fc7\u4e86\uff0c\u5982\u679c\u60a8\u60f3\u8981\u91cd\u65b0\u6821\u51c6\uff0c\u8bf7\u786e\u4fdd\u6821\u51c6\u65f6\u7a7a\u6c14\u73af\u5883\u662f\u65b0\u9c9c\u6e05\u65b0\u7684\u3002\u6821\u51c6\u5927\u81f4\u9700\u8981\u51e0\u5206\u949f\u5230\u534a\u5c0f\u65f6\u4e0d\u7b49\u7684\u65f6\u95f4\u3002\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[\u539f\u7406\u56fe]\n  \nGrove - Multichannel Gas Sensor v1.0 sch\n\n\n[PCB\u56fe]\n \nGrove - Multichannel Gas Sensor eagle files\n\n\n[\u5e93\u6587\u4ef6]\n \nArduino Library \n Grove/Xadow firmware\n\n\n[\u82af\u7247\u6570\u636e\u624b\u518c]\n \nMiCS-6814 Datasheet\n\n\n\n\n\n\n\nFAQ\n\n\n\n\n\n\nQ1. \u5982\u4f55\u6539\u53d8\u6a21\u5757\u7684I2C\u5730\u5740\n\n\n\n\nA1. \u6253\u5f00\u793a\u4f8b\u4e2d\u540d\u4e3aI2C_Address\u7684\u4f8b\u7a0b\uff0c\u8fd0\u884c\u5b83\u3002\n\n\n\n\n\n\n\n\nQ2. \u6211\u6539\u4e86I2C\u5730\u5740\u4f46\u662f\u4e0d\u5c0f\u5fc3\u5fd8\u4e86\n\n\n\n\n*A2. \u522b\u62c5\u5fc3\uff0c\u8fd0\u884c\u793a\u4f8b\u4e2d\u540d\u4e3a factory_setting\u7684\u4f8b\u7a0b\uff0c\u56de\u5230\u51fa\u5382\u72b6\u6001\u3002 *\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\u5982\u679c\u60a8\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u652f\u6301\uff0c\u8bf7\u8054\u7cfb\u4e0b\u9762\u7684\u90ae\u7bb1\uff0c\u6211\u4eec\u671f\u5f85\u5e76\u6b22\u8fce\u60a8\u7684\u54a8\u8be2\uff1a", 
            "title": "Grove-Multichannel_Gas_Sensor"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_1", 
            "text": "Grove-Multichannel Gas Sensor\u662f\u4e00\u4e2a\u5efa\u7acb\u5728MiCS-6814\u4e0a\u7684\u73af\u5883\u68c0\u6d4b\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u68c0\u6d4b\u591a\u79cd\u6709\u5bb3\u6c14\u4f53\uff0c\u7531\u4e8e\u5176\u591a\u901a\u9053\u7279\u6027\uff0c\u53ef\u4ee5\u540c\u65f6\u68c0\u6d4b\u4e09\u79cd\u4e0d\u540c\u6c14\u4f53\u3002\u56e0\u6b64\uff0c\u5f53\u73af\u5883\u5185\u4e0d\u6b62\u4e00\u79cd\u6c14\u4f53\u65f6\uff0c\u8be5\u4f20\u611f\u5668\u53ef\u4ee5\u7528\u4e8e\u76d1\u6d4b\u6c14\u4f53\u6d53\u5ea6\u3002  \u8fd9\u4e2a\u4f20\u611f\u5668\u5c5e\u4e8eGrove system\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u63d2\u5230Base shield\u4e0a\uff0c\u5728\u4e0d\u9700\u8981\u4efb\u4f55\u8df3\u7ebf\u7684\u6761\u4ef6\u4e0b\uff0c\u76f4\u63a5\u4e0eArduino\u7ec4\u5408\u4f7f\u7528\u3002\u5176\u63a5\u53e3\u4e3aI2C\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u5b83\u8fde\u63a5\u5230\u6269\u5c55\u677f\u81ea\u5e26\u7684I2C\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528   \u6ce8\u610f\u63d0\u793a \n\n\u4f20\u611f\u5668\u503c\u4ec5\u53cd\u6620\u4e86\u5141\u8bb8\u8bef\u5dee\u8303\u56f4\u5185\u6c14\u4f53\u6d53\u5ea6\u7684\u8fd1\u4f3c\u8d8b\u52bf, \u5b83\u5e76\u4e0d\u4ee3\u8868\u51c6\u786e\u771f\u5b9e\u7684\u6c14\u4f53\u6d53\u5ea6\u3002\u7a7a\u6c14\u4e2d\u7279\u5b9a\u6210\u5206\u6d53\u5ea6\u7684\u68c0\u6d4b\u65e0\u6cd5\u901a\u8fc7\u5355\u4e00\u7684\u4f20\u611f\u5668\u5b9e\u73b0\uff0c\u901a\u5e38\u9700\u8981\u66f4\u52a0\u7cbe\u786e\u548c\u6602\u8d35\u7684\u8bbe\u5907\u3002\u5982\u679c\u60a8\u7684\u9879\u76ee\u65e8\u5728\u83b7\u53d6\u9ad8\u7cbe\u5ea6\u6c14\u4f53\u6d53\u5ea6\u6570\u636e\uff0c\u6211\u4eec\u4e0d\u5efa\u8bae\u60a8\u4f7f\u7528\u8fd9\u4e2a\u4f20\u611f\u5668\u3002", 
            "title": "\u4ea7\u54c1\u7b80\u4ecb"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_2", 
            "text": "", 
            "title": "\u5f00\u59cb\u4e4b\u524d"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_3", 
            "text": "\u6211\u4eec\u6781\u529b\u63a8\u8350\u60a8\u5728\u4f7f\u7528\u6c14\u4f53\u4f20\u611f\u5668\u4e4b\u524d\uff0c\u5148\u9605\u8bfb\u5982\u4e0b\u53c2\u8003\u8d44\u6599\u3002\u8fd9\u5c06\u5e2e\u52a9\u60a8\u4e86\u89e3\u66f4\u591a\u5173\u4e8eArduino\u548c\u6211\u4eec\u4ea7\u54c1\u7684\u76f8\u5173\u77e5\u8bc6\u3002\u800c\u4e14\u4f1a\u4f7f\u60a8\u5728\u4f7f\u7528\u5f00\u6e90\u786c\u4ef6\u65f6\u66f4\u5f97\u5fc3\u5e94\u624b\u3002   Arduino\u5165\u95e8\u6307\u5bfc  Grove\u7cfb\u7edf\u7b80\u4ecb  Base_Shield\u4f7f\u7528\u6307\u5357   \u9605\u8bfb\u5b8c\u4e0a\u8bc9\u8d44\u6599\u540e\u60a8\u5c06\u638c\u63e1\u5982\u4f55\u4f7f\u7528Base_Shield\u677f\u5361\u5c06Grove\u7cfb\u5217\u4ea7\u54c1\u4e0eArduino\u76f8\u8fde\u3002\u597d\u4e86\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01", 
            "title": "\u76f8\u5173\u9605\u8bfb"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_4", 
            "text": "\u8fd9\u4e2a\u6559\u7a0b\u5c06\u9700\u8981\u4f7f\u7528\u5230\u4e0b\u5217\u4ea7\u54c1\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb\u67e5\u9605\u6216\u8d2d\u4e70\u5bf9\u5e94\u4ea7\u54c1:   Arduino UNO R3  \u6216\u8005  Seeeduino v4  Base Shield  Grove - Multichannel Gas Sensor", 
            "title": "\u51c6\u5907\u5de5\u4f5c"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_5", 
            "text": "pin\u540d\u79f0  \u76f8\u5173\u63cf\u8ff0      GND  \u63a5\u5730    VCC  3.3V - 5V    SDA  I2C data    SCL  I2C clock     \u8be5\u4f20\u611f\u5668\u7684\u4f9b\u7535\u7535\u538b\u4ecb\u4e8e3.3V\u548c5V\u4e4b\u95f4\uff0c\u53ef\u4e0e\u8f93\u51fa\u7535\u538b\u4e3a3.3V\u7684\u5355\u7247\u673a\u517c\u5bb9\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_6", 
            "text": "\u4e09\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u4f20\u611f\u5355\u5143  \u57fa\u4e8eATmega168PA  \u5e26\u6709\u53ef\u7f16\u7a0b\u5730\u5740\u7684I2C\u63a5\u53e3  \u53ef\u4ee5\u901a\u8fc7\u5173\u95ed\u52a0\u70ed\u529f\u8017\u964d\u4f4e\u529f\u7387  \u53ef\u68c0\u6d4b\u7684\u6c14\u4f53\u79cd\u7c7b\uff1a  \u4e00\u6c27\u5316\u78b3 CO 1-1000ppm  \u4e8c\u6c27\u5316\u6c2e NO2 0.05-10ppm  \u4e59\u9187 C2H6OH 10-500ppm  \u6c22 H2 1-1000ppm  \u6c28 NH3 1-500ppm  \u7532\u70f7 CH4  1000ppm  \u4e19\u70f7 C3H8  1000ppm  \u5f02\u4e01\u70f7 C4H10  1000ppm", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_7", 
            "text": "", 
            "title": "\u6a21\u5757\u56fe"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_8", 
            "text": "Arduino, linkit, wio", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_9", 
            "text": "\u9879\u76ee  \u72b6\u6001  \u6700\u5c0f\u503c  \u7279\u5f81\u503c  \u6700\u5927\u503c  \u5355\u4f4d      \u7535\u538b  -  3.1  3.3  5.25  V    \u6ce2\u7eb9  \u6700\u5927\u4f9b\u7535  -  80  100  mV    \u53d1\u70ed\u529f\u7387  -  -  -  88  mV    \u6700\u5927\u529f\u7387  -  -  -  150  mV    ADC\u7cbe\u5ea6  -  -  10  -  Bits    I2C\u901f\u5ea6  -  -  100  400  kHz    VIL  @I2C  -0.5  -  0.99  V    VIH  @I2C  2.31  -  5.25  V", 
            "title": "\u7535\u6c14\u7279\u6027"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#red", 
            "text": "Characteristic RED sensor  Symbol  Typ  Min  Max  Unit      Sensing resistance in air  R0  -  100  1500  k\u03a9    Typical CO detection range  FS  -  1  1000  ppm    Sensitivity factor  SR  -  1.2  50  -", 
            "title": "RED\u4f20\u611f\u5668\u6027\u80fd"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#ox", 
            "text": "Characteristic OX sensor  Symbol  Typ  Min  Max  Unit      Sensing resistance in air  R0  -  0.8  20  k\u03a9    Typical NO2 detection range  FS  -  0.05  10  ppm    Sensitivity factor  SR  -  2  -  -", 
            "title": "OX\u4f20\u611f\u5668\u6027\u80fd"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#nh3", 
            "text": "Characteristic NH3 sensor  Symbol  Typ  Min  Max  Unit      Sensing resistance in air  R0  -  10  1500  k\u03a9    Typical NH3 detection range  FS  -  1  300  ppm    Sensitivity factor  SR  -  1.5  15  -", 
            "title": "NH3\u4f20\u611f\u5668\u6027\u80fd"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_10", 
            "text": "\u6ce8\u610f\u63d0\u793a \n\u4e3a\u4e86\u5f97\u5230\u7a33\u5b9a\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u4f20\u611f\u5668\u9700\u8981\u9884\u52a0\u70ed\u5341\u5206\u949f\u4ee5\u4e0a\u3002  \u786c\u4ef6\u8fde\u63a5\u56fe:  1.\u5c06 Grove - Multichannel Gas Sensor \u548c Seeeduino\u6309\u7167\u4e0b\u56fe\u65b9\u5f0f\u76f8\u8fde.   \u4e0a\u4f20\u4ee3\u7801:  \u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002  \u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc \u3002  2.\u4e0b\u8f7d  Arduino Library   Grove/Xadow firmware  \u7136\u540e\u6dfb\u52a0\u5230Arduino\u5e93\u6587\u4ef6\u4e2d\u3002  3.\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u6253\u5f00\u793a\u4f8b\u7a0b\u5e8f:File -  Example -  Mutichannel_Gas_Sensor-  ReadSensorValue_Grove.  ReadSensorValue_Grove \u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a  // Read Data from Grove - Multichannel Gas Sensor  #include   Wire.h  #include   MutichannelGasSensor.h  void   setup ()  { \n     Serial . begin ( 115200 );    // start serial for output \n     Serial . println ( power on! ); \n     gas . begin ( 0x04 ); //the default I2C address of the slave is 0x04 \n     gas . powerOn (); \n     Serial . print ( Firmware Version =  ); \n     Serial . println ( gas . getVersion ());  }  void   loop ()  { \n     float   c ; \n\n     c   =   gas . measure_NH3 (); \n     Serial . print ( The concentration of NH3 is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_CO (); \n     Serial . print ( The concentration of CO is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_NO2 (); \n     Serial . print ( The concentration of NO2 is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_C3H8 (); \n     Serial . print ( The concentration of C3H8 is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_C4H10 (); \n     Serial . print ( The concentration of C4H10 is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_CH4 (); \n     Serial . print ( The concentration of CH4 is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_H2 (); \n     Serial . print ( The concentration of H2 is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     c   =   gas . measure_C2H5OH (); \n     Serial . print ( The concentration of C2H5OH is  ); \n     if ( c = 0 )   Serial . print ( c ); \n     else   Serial . print ( invalid ); \n     Serial . println (  ppm ); \n\n     delay ( 1000 );  }   4.\u4e0a\u4f20\u4ee3\u7801\u3002\u8bf7\u8bb0\u5f97\u5728Arduino\u8f6f\u4ef6\u7684 \u5de5\u5177 | \u5f00\u53d1\u677f\u4e2d\u52fe\u9009\u5bf9\u5e94\u7684\u677f\u5361\uff0c\u672c\u4f8b\u7a0b\u4f7f\u7528\u7684\u662fSeeeduino Uno\uff0c\u540c\u65f6\u8bf7\u9009\u62e9\u6b63\u786e\u7684\u4e32\u53e3\u3002  \u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff08ctrl+shift+M\uff09\uff0c\u60a8\u5c31\u53ef\u4ee5\u770b\u5230\u6765\u81ea\u4f20\u611f\u5668\u7684\u6570\u636e\u4e86.    Tip   \u66f4\u591a\u7684\u5173\u4e8eGrove\u6a21\u5757\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb\u53c2\u8003  Grove System", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_11", 
            "text": "\u8be5Grove\u6a21\u5757\u6709\u4e00\u4e2aATmega168 MCU \u51fa\u5382\u56fa\u4ef6\u3002\u56fa\u4ef6\u5df2\u7ecf\u4e8e2016\u5e7411\u670811\u66f4\u65b0\u5230\u4e86V2.0\u7248\u672c\u3002\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u68c0\u6d4b\u60a8\u5f53\u524d\u7684\u56fa\u4ef6\u7248\u672c\u3002  // Get firmware version of Grove Multichannel Gas Sensor  #include   Wire.h  #include   MutichannelGasSensor.h  #define SENSOR_ADDR     0X04         // default to 0x04  void   setup ()  { \n     Serial . begin ( 115200 ); \n     gas . begin ( SENSOR_ADDR ); \n\n     unsigned   char   version   =   gas . getVersion (); \n     Serial . print ( Version =  ); \n     Serial . println ( version );      }  void   loop ()  { \n     // nothing to do  }   \u5982\u679c\u68c0\u6d4b\u7ed3\u679c\u60a8\u7684\u56fa\u4ef6\u7248\u672c\u662fV1\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u66f4\u65b0\u56fa\u4ef6\u5230V2\u4ee5\u83b7\u53d6\u66f4\u7a33\u5b9a\u7684\u6570\u636e\u3002  \u4e3a\u4e86\u66f4\u65b0\u56fa\u4ef6\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u7d20\u6750,   An Arduino UNO/Seeeduino V3/  6 \u6839\u675c\u90a6\u7ebf  \u70d9\u94c1   \u5728\u677f\u5361\u7684\u80cc\u9762\u7559\u6709ICSP\u710a\u76d8\uff0c\u60a8\u9700\u8981\u5c06\u8fd9\u4e9b\u710a\u76d8\u4e0eArduino\u677f\u5b50\u76f8\u8fde\u3002\u7ba1\u811a\u5b9a\u4e49\u5982\u4e0b\u8868\uff0c\u8fde\u63a5\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\u3002     Sensor  Arduino      MISO  D12    SCK  D13    NRST  D10    GND  GND    MOSI  D11    VCC  5V      \u8fde\u63a5\u597d\u4e4b\u540e\uff0c\u8bf7\u6253\u5f00\u60a8Arduino\u793a\u4f8b\u4e2d\u7684  UpdateFrimware  , \u8fd0\u884c\uff0c\u6253\u5f00\u60a8\u7684\u4e32\u53e3\u76d1\u89c6\u5668\u3002\u60a8\u5c06\u770b\u5230\u4e00\u4e9b\u6253\u5370\u7684\u4fe1\u606f\u3002  \u8f93\u5165\u4e00\u4e2a \u201c g \u201d\u6765\u5f00\u59cb\u70e7\u5f55\u3002", 
            "title": "\u66f4\u65b0\u56fa\u4ef6"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_12", 
            "text": "\u5982\u679c\u60a8\u603b\u662f\u5f97\u5230\u4e00\u4e9b\u4e0d\u53ef\u9760\u7684\u6570\u636e\uff0c\u8bf7\u5c1d\u8bd5\u6821\u51c6\u4f20\u611f\u5668\u3002\u6253\u5f00\u793a\u4f8b\u4e2d\u7684  calibration  ,\u4e0a\u4f20\u81f3\u60a8\u7684Arduino\uff0c\u6253\u5f00\u60a8\u7684\u4e32\u53e3\u76d1\u89c6\u5668\u6765\u67e5\u770b\u6821\u51c6\u7684\u76f8\u5173\u4fe1\u606f\u3002   Note   \u5728\u4f20\u611f\u5668\u51fa\u5382\u524d\u5df2\u7ecf\u6821\u51c6\u8fc7\u4e86\uff0c\u5982\u679c\u60a8\u60f3\u8981\u91cd\u65b0\u6821\u51c6\uff0c\u8bf7\u786e\u4fdd\u6821\u51c6\u65f6\u7a7a\u6c14\u73af\u5883\u662f\u65b0\u9c9c\u6e05\u65b0\u7684\u3002\u6821\u51c6\u5927\u81f4\u9700\u8981\u51e0\u5206\u949f\u5230\u534a\u5c0f\u65f6\u4e0d\u7b49\u7684\u65f6\u95f4\u3002", 
            "title": "\u6821\u51c6"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#_13", 
            "text": "[\u539f\u7406\u56fe]    Grove - Multichannel Gas Sensor v1.0 sch  [PCB\u56fe]   Grove - Multichannel Gas Sensor eagle files  [\u5e93\u6587\u4ef6]   Arduino Library   Grove/Xadow firmware  [\u82af\u7247\u6570\u636e\u624b\u518c]   MiCS-6814 Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Multichannel_Gas_Sensor/#faq", 
            "text": "Q1. \u5982\u4f55\u6539\u53d8\u6a21\u5757\u7684I2C\u5730\u5740   A1. \u6253\u5f00\u793a\u4f8b\u4e2d\u540d\u4e3aI2C_Address\u7684\u4f8b\u7a0b\uff0c\u8fd0\u884c\u5b83\u3002     Q2. \u6211\u6539\u4e86I2C\u5730\u5740\u4f46\u662f\u4e0d\u5c0f\u5fc3\u5fd8\u4e86   *A2. \u522b\u62c5\u5fc3\uff0c\u8fd0\u884c\u793a\u4f8b\u4e2d\u540d\u4e3a factory_setting\u7684\u4f8b\u7a0b\uff0c\u56de\u5230\u51fa\u5382\u72b6\u6001\u3002 *      Tip   \u5982\u679c\u60a8\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u652f\u6301\uff0c\u8bf7\u8054\u7cfb\u4e0b\u9762\u7684\u90ae\u7bb1\uff0c\u6211\u4eec\u671f\u5f85\u5e76\u6b22\u8fce\u60a8\u7684\u54a8\u8be2\uff1a", 
            "title": "FAQ"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/", 
            "text": "Grove - Piezo Vibration\u4f20\u611f\u5668\u9002\u7528\u4e8e\u5f39\u6027\uff0c\u632f\u52a8\uff0c\u51b2\u51fb\u548c\u89e6\u611f\u7684\u6d4b\u91cf\u3002\u8be5\u6a21\u5757\u57fa\u4e8ePZT\u8584\u819c\u4f20\u611f\u5668LDT0-028\u3002\u5f53\u4f20\u611f\u5668\u6765\u56de\u79fb\u52a8\u65f6\uff0c\u5176\u4e2d\u7684\u7535\u538b\u6bd4\u8f83\u5668\u5c06\u4ea7\u751f\u4e00\u5b9a\u7684\u7535\u538b\u3002\u5bbd\u52a8\u6001\u8303\u56f4\uff080.001Hz\u301c1000MHz\uff09\u4fdd\u8bc1\u4e86\u826f\u597d\u7684\u6d4b\u91cf\u6027\u80fd\u3002\u5e76\u4e14\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u7528\u87ba\u4e1d\u8c03\u6574\u677f\u4e0a\u7535\u4f4d\u5668\u6765\u8c03\u6574\u5176\u7075\u654f\u5ea6\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u6807\u51c6Grove\u63a5\u53e3\n\n\n\u5bbd\u52a8\u6001\u6d4b\u91cf\u8303\u56f4\uff1a0.1Hz~180Hz\n\n\n\u6d4b\u91cf\u7075\u654f\u5ea6\u53ef\u8c03\n\n\n\u9ad8\u5ea6\u611f\u77e5\u5f3a\u70c8\u51b2\u51fb\n\n\n\n\n\n\nTip\n\n\n\u66f4\u591a\u5173\u4e8eGrove\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb \nGrove System\n\n\n\n\n\u5e73\u53f0\u652f\u6301\n\n\n\n\nArduino\nRaspberry\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\n\n\u6d17\u8863\u673a\u632f\u52a8\u68c0\u6d4b\n\n\n\u4f4e\u529f\u8017\u5524\u9192\u5f00\u5173\n\n\n\u4f4e\u6210\u672c\u632f\u52a8\u611f\u5e94\n\n\n\u6c7d\u8f66\u8b66\u62a5\u7cfb\u7edf\n\n\n\u8eab\u4f53\u8fd0\u52a8\u68c0\u6d4b\n\n\n\u5b89\u5168\u7cfb\u7edf\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u9002\u7528 \nArduino\n\n\n\u7269\u7406\u8fde\u63a5\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5411\u60a8\u5c55\u793aGrove - Piezo Vibration\u4f20\u611f\u5668\u5982\u4f55\u5de5\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Piezo Vibration\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8ba2\u8d2d\n\n\n\u9a6c\u4e0a\u8ba2\u8d2d\n\n\n\u9a6c\u4e0a\u8ba2\u8d2d\n\n\n\n\n\n\n\n\n\u5f53\u68c0\u6d4b\u5230\u632f\u52a8\u65f6\uff0cGrove - Piezo Vibration\u4f20\u611f\u5668\u8f93\u51fa\u903b\u8f91\u9ad8\u7535\u5e73\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55Arduino\u5f15\u811a\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4ee5\u4e0b\u662f\u538b\u7535\u632f\u52a8\u4f20\u611f\u5668\u63a7\u5236LED\u7684\u793a\u4f8b\u3002\u5f53\u68c0\u6d4b\u5230\u632f\u52a8\u65f6\uff0c\u8be5\u4f20\u611f\u5668\u8f93\u51fa\u903b\u8f91\u9ad8\u4fe1\u53f7\uff08\u7075\u654f\u5ea6\u53ef\u901a\u8fc7\u8c03\u8282\u7535\u4f4d\u5668\u6765\u66f4\u6539\uff09\uff0cLED\u4eae\u8d77\u3002\n\n\n\n\n\u6ce8\u610f\n\n\u5f53\u901a\u8fc7\u987a\u65f6\u9488\u8c03\u8282\u7535\u4f4d\u5668\u6765\u589e\u52a0\u9608\u503c\u7535\u538b\u65f6\uff0c\u5373\u4f7f\u539f\u59cb\u8f93\u51fa\u5e94\u8be5\u4e3a\u9ad8\u7535\u5e73\uff0c\u4e5f\u53ef\u80fd\u6700\u7ec8\u8f93\u51fa\u4f4e\u7535\u5e73\u3002\n\n\n\n\n\n\n\u901a\u8fc74 pin\u7684Grove\u63a5\u53e3\u5c06\u4f20\u611f\u5668\u6a21\u5757\u548c\u6269\u5c55\u677f\u7684**A0** \u53e3\u76f8\u8fde\u3002\u6211\u4eec\u4f7f\u7528**\u6570\u5b57\u811a pin13 \u8054\u901a\u7684\u677f\u8f7dLED** \u6765\u4f5c\u4e3a\u8f93\u51fa\u3002\n\n\n\u5c06 the Grove - Basic Shield \u63d2\u5165 Arduino.\n\n\n\u901a\u8fc7USB\u6570\u636e\u7ebf\u5c06Arduino \u8fde\u63a5\u5230PC\u3002\n\n\n\n\n\n\u8f6f\u4ef6\n\n\n\n\n\u5728Arduino \u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c06\u4e0b\u5217\u4ee3\u7801\u590d\u5236\u7c98\u8d34\u5230\u8fd9\u4e2a\u7a7a\u767d\u7684\u6587\u4ef6\u4e2d\u3002\n\n\n\n\nconst int ledPin=13;\nvoid setup() {\n    Serial.begin(9600);\n    pinMode(ledPin,OUTPUT);\n}\n\nvoid loop() {\n    int sensorValue = analogRead(A0);\n    Serial.println(sensorValue);\n    delay(1000);\n    if(sensorValue==1023)\n    {\n        digitalWrite(ledPin,HIGH);\n    }\n    else\n    {\n        digitalWrite(ledPin,LOW);\n    }\n}\n\n\n- \u89e6\u6478\u538b\u7535\u4f20\u611f\u5668\u4f7f\u5176\u632f\u52a8\uff0c\u5f53\u7136\uff0c\u4efb\u4f55\u65b9\u5f0f\u4f7f\u5176\u632f\u52a8\u90fd\u53ef\u4ee5\u3002\u5f53\u68c0\u6d4b\u5230\u632f\u52a8\u65f6\uff0cLED\u5c06\u4eae\u8d77\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u6765\u67e5\u770b\u4f20\u611f\u5668\u8f93\u51fa\u3002\n\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6570\u5b57\u5f15\u811a\uff0c\u4ee5\u6269\u5c55\u677f\u4e0a\u7684D5\u4e3a\u4f8b\uff0c\u5e76\u5c06LED\u8fde\u63a5\u5230\u5f15\u811a13\u3002\n\n\n\n\nconst int ledPin=13;\nvoid setup() {\n    Serial.begin(9600);\n    pinMode(ledPin,OUTPUT);\n}\n\nvoid loop() {\n    int sensorState = digitalRead(5);\n    Serial.println(sensorState);\n    delay(1000);\n    if(sensorState == HIGH)\n    {\n        digitalWrite(ledPin,HIGH);\n    }\n    else\n    {\n        digitalWrite(ledPin,LOW);\n    }\n}\n\n\n\n\n\u4f7f\u7528\u4e8e Raspberry Pi \uff08\u6811\u8393\u6d3e\uff09\n\n\n\u7269\u7406\u8fde\u63a5\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nRaspberry pi\n\n\nGrove - Piezo Vibration\n\n\nGrovePi_Plus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8ba2\u8d2d\n\n\n\u9a6c\u4e0a\u8ba2\u8d2d\n\n\n\u9a6c\u4e0a\u8ba2\u8d2d\n\n\n\n\n\n\n\n\n\n\n\u6839\u636e \n\u6307\u5357\n \u6765\u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002\n\n\n\u901a\u8fc7Grove\u7ebf\u7f06\u5c06\u4f20\u611f\u5668\u8fde\u63a5\u5230grovepi+ \u6269\u5c55\u677f\u7684 A0 \u7aef\u53e3\u3002\n\n\n\n\n\n\n\u8f6f\u4ef6\n\n\n\n\n\u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\u4e0b\uff1a\n\n\n\n\n    \u8f6c\u6362\u8def\u5f84\u5230\u60a8\u7684\u5bf9\u5e94\u76ee\u5f55   cd yourpath/GrovePi/Software/Python/\n\n\n-   \u4ee3\u7801\u5982\u4e0b\uff1a\n\n    nano grove_piezo_vibration_sensor.py   # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import grovepi\n\n    # Connect the Grove Piezo Vibration Sensor to analog port A0\n    # OUT,NC,VCC,GND\n    piezo = 0\n\n    grovepi.pinMode(piezo,\nINPUT\n)\n\n    while True:\n        try:\n            # When vibration is detected, the sensor outputs a logic high signal\n            print grovepi.analogRead(piezo)\n            time.sleep(.5)\n\n        except IOError:\n            print \nError\n\n\n\n\n\n\n\u8fd0\u884c\u793a\u4f8b\n\n    sudo python grove_piezo_vibration_sensor.py\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Eagle\u56fe]\n \nGrove - Piezo Vibration Sensor Eagle File\n\n\n[\u539f\u7406\u56fePDF]\n \nGrove - Piezo Vibration Sensor Schematic PDF File\n\n\n[PCB\u56fePDF]\n \nGrove - Piezo Vibration Sensor PCB PDF File\n\n\n[\u6570\u636e\u624b\u518c]\n \nPiezo Vibration Sensor Datasheet", 
            "title": "Grove-Piezo_Vibration_Sensor"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_1", 
            "text": "\u6807\u51c6Grove\u63a5\u53e3  \u5bbd\u52a8\u6001\u6d4b\u91cf\u8303\u56f4\uff1a0.1Hz~180Hz  \u6d4b\u91cf\u7075\u654f\u5ea6\u53ef\u8c03  \u9ad8\u5ea6\u611f\u77e5\u5f3a\u70c8\u51b2\u51fb    Tip  \u66f4\u591a\u5173\u4e8eGrove\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_2", 
            "text": "Arduino\nRaspberry", 
            "title": "\u5e73\u53f0\u652f\u6301"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_3", 
            "text": "\u6d17\u8863\u673a\u632f\u52a8\u68c0\u6d4b  \u4f4e\u529f\u8017\u5524\u9192\u5f00\u5173  \u4f4e\u6210\u672c\u632f\u52a8\u611f\u5e94  \u6c7d\u8f66\u8b66\u62a5\u7cfb\u7edf  \u8eab\u4f53\u8fd0\u52a8\u68c0\u6d4b  \u5b89\u5168\u7cfb\u7edf", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_4", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#arduino", 
            "text": "", 
            "title": "\u9002\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_5", 
            "text": "\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5411\u60a8\u5c55\u793aGrove - Piezo Vibration\u4f20\u611f\u5668\u5982\u4f55\u5de5\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Piezo Vibration  Base Shield           \u9a6c\u4e0a\u8ba2\u8d2d  \u9a6c\u4e0a\u8ba2\u8d2d  \u9a6c\u4e0a\u8ba2\u8d2d     \u5f53\u68c0\u6d4b\u5230\u632f\u52a8\u65f6\uff0cGrove - Piezo Vibration\u4f20\u611f\u5668\u8f93\u51fa\u903b\u8f91\u9ad8\u7535\u5e73\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55Arduino\u5f15\u811a\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4ee5\u4e0b\u662f\u538b\u7535\u632f\u52a8\u4f20\u611f\u5668\u63a7\u5236LED\u7684\u793a\u4f8b\u3002\u5f53\u68c0\u6d4b\u5230\u632f\u52a8\u65f6\uff0c\u8be5\u4f20\u611f\u5668\u8f93\u51fa\u903b\u8f91\u9ad8\u4fe1\u53f7\uff08\u7075\u654f\u5ea6\u53ef\u901a\u8fc7\u8c03\u8282\u7535\u4f4d\u5668\u6765\u66f4\u6539\uff09\uff0cLED\u4eae\u8d77\u3002   \u6ce8\u610f \n\u5f53\u901a\u8fc7\u987a\u65f6\u9488\u8c03\u8282\u7535\u4f4d\u5668\u6765\u589e\u52a0\u9608\u503c\u7535\u538b\u65f6\uff0c\u5373\u4f7f\u539f\u59cb\u8f93\u51fa\u5e94\u8be5\u4e3a\u9ad8\u7535\u5e73\uff0c\u4e5f\u53ef\u80fd\u6700\u7ec8\u8f93\u51fa\u4f4e\u7535\u5e73\u3002   \u901a\u8fc74 pin\u7684Grove\u63a5\u53e3\u5c06\u4f20\u611f\u5668\u6a21\u5757\u548c\u6269\u5c55\u677f\u7684**A0** \u53e3\u76f8\u8fde\u3002\u6211\u4eec\u4f7f\u7528**\u6570\u5b57\u811a pin13 \u8054\u901a\u7684\u677f\u8f7dLED** \u6765\u4f5c\u4e3a\u8f93\u51fa\u3002  \u5c06 the Grove - Basic Shield \u63d2\u5165 Arduino.  \u901a\u8fc7USB\u6570\u636e\u7ebf\u5c06Arduino \u8fde\u63a5\u5230PC\u3002", 
            "title": "\u7269\u7406\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_6", 
            "text": "\u5728Arduino \u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c06\u4e0b\u5217\u4ee3\u7801\u590d\u5236\u7c98\u8d34\u5230\u8fd9\u4e2a\u7a7a\u767d\u7684\u6587\u4ef6\u4e2d\u3002   const int ledPin=13;\nvoid setup() {\n    Serial.begin(9600);\n    pinMode(ledPin,OUTPUT);\n}\n\nvoid loop() {\n    int sensorValue = analogRead(A0);\n    Serial.println(sensorValue);\n    delay(1000);\n    if(sensorValue==1023)\n    {\n        digitalWrite(ledPin,HIGH);\n    }\n    else\n    {\n        digitalWrite(ledPin,LOW);\n    }\n} \n- \u89e6\u6478\u538b\u7535\u4f20\u611f\u5668\u4f7f\u5176\u632f\u52a8\uff0c\u5f53\u7136\uff0c\u4efb\u4f55\u65b9\u5f0f\u4f7f\u5176\u632f\u52a8\u90fd\u53ef\u4ee5\u3002\u5f53\u68c0\u6d4b\u5230\u632f\u52a8\u65f6\uff0cLED\u5c06\u4eae\u8d77\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u6765\u67e5\u770b\u4f20\u611f\u5668\u8f93\u51fa\u3002    \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6570\u5b57\u5f15\u811a\uff0c\u4ee5\u6269\u5c55\u677f\u4e0a\u7684D5\u4e3a\u4f8b\uff0c\u5e76\u5c06LED\u8fde\u63a5\u5230\u5f15\u811a13\u3002   const int ledPin=13;\nvoid setup() {\n    Serial.begin(9600);\n    pinMode(ledPin,OUTPUT);\n}\n\nvoid loop() {\n    int sensorState = digitalRead(5);\n    Serial.println(sensorState);\n    delay(1000);\n    if(sensorState == HIGH)\n    {\n        digitalWrite(ledPin,HIGH);\n    }\n    else\n    {\n        digitalWrite(ledPin,LOW);\n    }\n}", 
            "title": "\u8f6f\u4ef6"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#raspberry-pi", 
            "text": "", 
            "title": "\u4f7f\u7528\u4e8e Raspberry Pi \uff08\u6811\u8393\u6d3e\uff09"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_7", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Raspberry pi  Grove - Piezo Vibration  GrovePi_Plus           \u9a6c\u4e0a\u8ba2\u8d2d  \u9a6c\u4e0a\u8ba2\u8d2d  \u9a6c\u4e0a\u8ba2\u8d2d      \u6839\u636e  \u6307\u5357  \u6765\u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002  \u901a\u8fc7Grove\u7ebf\u7f06\u5c06\u4f20\u611f\u5668\u8fde\u63a5\u5230grovepi+ \u6269\u5c55\u677f\u7684 A0 \u7aef\u53e3\u3002", 
            "title": "\u7269\u7406\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_8", 
            "text": "\u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\u4e0b\uff1a       \u8f6c\u6362\u8def\u5f84\u5230\u60a8\u7684\u5bf9\u5e94\u76ee\u5f55   cd yourpath/GrovePi/Software/Python/ \n-   \u4ee3\u7801\u5982\u4e0b\uff1a     nano grove_piezo_vibration_sensor.py   #  Ctrl+x  to exit #      import time\n    import grovepi\n\n    # Connect the Grove Piezo Vibration Sensor to analog port A0\n    # OUT,NC,VCC,GND\n    piezo = 0\n\n    grovepi.pinMode(piezo, INPUT )\n\n    while True:\n        try:\n            # When vibration is detected, the sensor outputs a logic high signal\n            print grovepi.analogRead(piezo)\n            time.sleep(.5)\n\n        except IOError:\n            print  Error    \u8fd0\u884c\u793a\u4f8b     sudo python grove_piezo_vibration_sensor.py", 
            "title": "\u8f6f\u4ef6"
        }, 
        {
            "location": "/Grove-Piezo_Vibration_Sensor/#_9", 
            "text": "[Eagle\u56fe]   Grove - Piezo Vibration Sensor Eagle File  [\u539f\u7406\u56fePDF]   Grove - Piezo Vibration Sensor Schematic PDF File  [PCB\u56fePDF]   Grove - Piezo Vibration Sensor PCB PDF File  [\u6570\u636e\u624b\u518c]   Piezo Vibration Sensor Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Sound_Sensor/", 
            "text": "---\n\n\n\n\n\u58f0\u97f3\u4f20\u611f\u5668\u53ef\u4ee5\u68c0\u6d4b\u73af\u5883\u7684\u58f0\u97f3\u5f3a\u5ea6\u3002 \u8be5\u6a21\u5757\u7684\u4e3b\u8981\u7ec4\u4ef6\u662f\u7b80\u5355\u7684\u9ea6\u514b\u98ce\uff0c\u5b83\u57fa\u4e8eLM386\u653e\u5927\u5668\u548c\u9a7b\u6781\u4f53\u9ea6\u514b\u98ce\u3002 \u8be5\u6a21\u5757\u662f\u4ee5\u6a21\u62df\u91cf\u8f93\u51fa\u7684\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u7531Seeeduino\u8fdb\u884c\u91c7\u6837\u548c\u6d4b\u8bd5\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u4f7f\u7528\u7b80\u5355\n\n\n\u80fd\u591f\u8f93\u51fa\u6a21\u62df\u4fe1\u53f7\n\n\n\u80fd\u591f\u7b80\u5355\u7684\u628a\u5b83\u96c6\u6210\u5728Grove\u7535\u8def\u8f93\u5165\u7aef\u7684Logic\u6a21\u5757\u4e0a\n\n\nGrove System\n\n\n\n\n!!!\u8b66\u544a\n    \u8be5\u58f0\u97f3\u4f20\u611f\u5668\u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u6709\u58f0\u73af\u7ed5\uff0c\u8bf7\u52ff\u4f7f\u7528\u8be5\u6a21\u5757\u6536\u96c6\u58f0\u97f3\u4fe1\u53f7\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5236\u4f5c\u58f0\u63a7\u706f\uff0c\u4f46\u4e0d\u80fd\u7528\u4f5c\u5f55\u97f3\u8bbe\u5907\u3002\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\u8303\u56f4\n\n\n3.\n V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41(Vcc=5V)\n\n\n4~5 mA\n\n\n\n\n\n\n\u7535\u538b\u589e\u76ca(V=6V, f=1kHz)\n\n\n26 dB\n\n\n\n\n\n\n\u9ea6\u514b\u98ce\u7075\u654f\u5ea6(1kHz)\n\n\n52-48 dB\n\n\n\n\n\n\n\u9ea6\u514b\u98ce\u963b\u6297\n\n\n2.2k Ohm\n\n\n\n\n\n\n\u9ea6\u514b\u98ce\u9891\u7387\n\n\n16-20 kHz\n\n\n\n\n\n\n\u9ea6\u514b\u98ceS / N\u65e0\u7ebf\u7535\n\n\n54 dB\n\n\n\n\n\n\n\n\n!!!\u5c0f\u63d0\u793a\n    \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n!!!\u6ce8\u610f\n    \u672c\u7ae0\u57fa\u4e8eWin10\u548cArduino IDE 1.6.9\n\n\n\u8fd9\u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u6a21\u5757\uff0c\u60a8\u9700\u8981\u5c06\u4fe1\u53f7\u5f15\u811a\uff08Grove\u8fde\u63a5\u7ebf\u7684YELLOW\u5f15\u811a\uff09\u8fde\u63a5\u5230\u63a7\u5236\u5668\u7684ADC\u8f93\u5165\u3002 \u5982\u679c\u63a7\u5236\u5668\u4e2d\u6ca1\u6709\u5185\u90e8ADC\uff0c\u5efa\u8bae\u4f7f\u7528\nGrove - I2C ADC\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u53bb\u6f14\u793aGrove - Sound\u4f20\u611f\u5668\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Sound Sensor\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u5236\u4f5c\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684\u6b63\u786e\u7aef\u53e3\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u6f14\u793a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2aGrove\u6a21\u5757\u3002\n\n\n\n\nGrove - Sound\u4f20\u611f\u5668\u662f\u4e00\u4e2a\u6a21\u62df\u91cf\u8f93\u5165\u6a21\u5757\uff0c\u6211\u4eec\u5728\u6b64\u6f14\u793a\u4e2d\u5c06\u5176\u8fde\u63a5\u5230 \nA0\n\n\n\n\n\n\n\u4e0b\u8f7d\u7a0b\u5e8f\u5230Arduino\n\n\n\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230 Arduino IDE.\n\n\n// test code for Grove - Sound Sensor\n// loovee @ 2016-8-30\n\nconst int pinAdc = A0;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    //Serial.println(\nGrove - Sound Sensor Test...\n);\n}\n\nvoid loop()\n{\n    long sum = 0;\n    for(int i=0; i\n32; i++)\n    {\n        sum += analogRead(pinAdc);\n    }\n\n    sum \n= 5;\n\n    Serial.println(sum);\n    delay(10);\n}\n\n\n\n\n\u7136\u540e\u9009\u62e9\u6b63\u786e\u7684\u677f\u548cCOM\u7aef\u53e3\uff0c\u7136\u540e\u70b9\u51fb\u4e0a\u4f20\u6309\u94ae\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u51e0\u79d2\u949f\u3002\n\n\n\u83b7\u53d6\u539f\u59cb\u6570\u636e\n\n\n\u8fd9\u91cc\u8ba9\u6211\u4eec\u70b9\u51fb \nTool\uff08\u5de5\u5177\uff09 \n Serial Plotter\uff08\u4e32\u53e3\u7ed8\u56fe\u5668\uff09\n \u6765\u83b7\u53d6\u4f20\u611f\u5668\u7684\u53d8\u5316\u66f2\u7ebf\u3002 \u8bf7\u7559\u8a00\u6765\u544a\u8bc9\u6211\u4eec\u770b\u5230\u7684\u6570\u503c\u53d8\u5316\u3002\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nSchematic and PCB in Eagle format\n\n\nSchematic in PDF format\n\n\nPCB in PDF format\n\n\nGithub Page of this Document\n\n\nLM386.PDF", 
            "title": "Grove-Sound_Sensor"
        }, 
        {
            "location": "/Grove-Sound_Sensor/#-", 
            "text": "\u58f0\u97f3\u4f20\u611f\u5668\u53ef\u4ee5\u68c0\u6d4b\u73af\u5883\u7684\u58f0\u97f3\u5f3a\u5ea6\u3002 \u8be5\u6a21\u5757\u7684\u4e3b\u8981\u7ec4\u4ef6\u662f\u7b80\u5355\u7684\u9ea6\u514b\u98ce\uff0c\u5b83\u57fa\u4e8eLM386\u653e\u5927\u5668\u548c\u9a7b\u6781\u4f53\u9ea6\u514b\u98ce\u3002 \u8be5\u6a21\u5757\u662f\u4ee5\u6a21\u62df\u91cf\u8f93\u51fa\u7684\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u7531Seeeduino\u8fdb\u884c\u91c7\u6837\u548c\u6d4b\u8bd5\u3002", 
            "title": "---"
        }, 
        {
            "location": "/Grove-Sound_Sensor/#_1", 
            "text": "\u4f7f\u7528\u7b80\u5355  \u80fd\u591f\u8f93\u51fa\u6a21\u62df\u4fe1\u53f7  \u80fd\u591f\u7b80\u5355\u7684\u628a\u5b83\u96c6\u6210\u5728Grove\u7535\u8def\u8f93\u5165\u7aef\u7684Logic\u6a21\u5757\u4e0a  Grove System   !!!\u8b66\u544a\n    \u8be5\u58f0\u97f3\u4f20\u611f\u5668\u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u6709\u58f0\u73af\u7ed5\uff0c\u8bf7\u52ff\u4f7f\u7528\u8be5\u6a21\u5757\u6536\u96c6\u58f0\u97f3\u4fe1\u53f7\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5236\u4f5c\u58f0\u63a7\u706f\uff0c\u4f46\u4e0d\u80fd\u7528\u4f5c\u5f55\u97f3\u8bbe\u5907\u3002", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Sound_Sensor/#_2", 
            "text": "\u9879\u76ee  \u53c2\u6570      \u5de5\u4f5c\u7535\u538b\u8303\u56f4  3.  V    \u5de5\u4f5c\u7535\u6d41(Vcc=5V)  4~5 mA    \u7535\u538b\u589e\u76ca(V=6V, f=1kHz)  26 dB    \u9ea6\u514b\u98ce\u7075\u654f\u5ea6(1kHz)  52-48 dB    \u9ea6\u514b\u98ce\u963b\u6297  2.2k Ohm    \u9ea6\u514b\u98ce\u9891\u7387  16-20 kHz    \u9ea6\u514b\u98ceS / N\u65e0\u7ebf\u7535  54 dB     !!!\u5c0f\u63d0\u793a\n    \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Sound_Sensor/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Sound_Sensor/#_4", 
            "text": "!!!\u6ce8\u610f\n    \u672c\u7ae0\u57fa\u4e8eWin10\u548cArduino IDE 1.6.9  \u8fd9\u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u6a21\u5757\uff0c\u60a8\u9700\u8981\u5c06\u4fe1\u53f7\u5f15\u811a\uff08Grove\u8fde\u63a5\u7ebf\u7684YELLOW\u5f15\u811a\uff09\u8fde\u63a5\u5230\u63a7\u5236\u5668\u7684ADC\u8f93\u5165\u3002 \u5982\u679c\u63a7\u5236\u5668\u4e2d\u6ca1\u6709\u5185\u90e8ADC\uff0c\u5efa\u8bae\u4f7f\u7528 Grove - I2C ADC  \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u53bb\u6f14\u793aGrove - Sound\u4f20\u611f\u5668\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Sound Sensor  Base Shield           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70     \u786c\u4ef6\u8fde\u63a5  \u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u5236\u4f5c\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684\u6b63\u786e\u7aef\u53e3\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u6f14\u793a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2aGrove\u6a21\u5757\u3002   Grove - Sound\u4f20\u611f\u5668\u662f\u4e00\u4e2a\u6a21\u62df\u91cf\u8f93\u5165\u6a21\u5757\uff0c\u6211\u4eec\u5728\u6b64\u6f14\u793a\u4e2d\u5c06\u5176\u8fde\u63a5\u5230  A0    \u4e0b\u8f7d\u7a0b\u5e8f\u5230Arduino  \u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230 Arduino IDE.  // test code for Grove - Sound Sensor\n// loovee @ 2016-8-30\n\nconst int pinAdc = A0;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    //Serial.println( Grove - Sound Sensor Test... );\n}\n\nvoid loop()\n{\n    long sum = 0;\n    for(int i=0; i 32; i++)\n    {\n        sum += analogRead(pinAdc);\n    }\n\n    sum  = 5;\n\n    Serial.println(sum);\n    delay(10);\n}  \u7136\u540e\u9009\u62e9\u6b63\u786e\u7684\u677f\u548cCOM\u7aef\u53e3\uff0c\u7136\u540e\u70b9\u51fb\u4e0a\u4f20\u6309\u94ae\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u51e0\u79d2\u949f\u3002  \u83b7\u53d6\u539f\u59cb\u6570\u636e  \u8fd9\u91cc\u8ba9\u6211\u4eec\u70b9\u51fb  Tool\uff08\u5de5\u5177\uff09   Serial Plotter\uff08\u4e32\u53e3\u7ed8\u56fe\u5668\uff09  \u6765\u83b7\u53d6\u4f20\u611f\u5668\u7684\u53d8\u5316\u66f2\u7ebf\u3002 \u8bf7\u7559\u8a00\u6765\u544a\u8bc9\u6211\u4eec\u770b\u5230\u7684\u6570\u503c\u53d8\u5316\u3002", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Sound_Sensor/#_5", 
            "text": "Schematic and PCB in Eagle format  Schematic in PDF format  PCB in PDF format  Github Page of this Document  LM386.PDF", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/", 
            "text": "Grove - Ultrasonic\u4f20\u611f\u5668\u662f\u4e00\u79cd\u975e\u63a5\u89e6\u5f0f\u8ddd\u79bb\u6d4b\u91cf\u6a21\u5757\uff0c\u5de5\u4f5c\u572840KHz\uff0c\u9002\u7528\u4e8e\u9700\u8981\u5bf9\u4e2d\u7b49\u8ddd\u79bb\u8fdb\u884c\u6d4b\u91cf\u7684\u9879\u76ee\u3002\n\n\n\n\n\u4ea7\u54c1\u66f4\u65b0\n\n\n\u4e3a\u4e86\u63d0\u9ad8\u5728\u4f7f\u7528\u4e00\u4e9b\u4f4e\u538b\u4e3b\u677f\u65f6\u7684\u7535\u6e90\u7a33\u5b9a\u6027\uff0c\u6211\u4eec\u5bf9\u6b64\u4ea7\u54c1\u505a\u4e86\u4e00\u4e9b\u66f4\u65b0\u3002\u8fd9\u4e9b\u66f4\u65b0\u5305\u62ec\uff1a\n\n\n\n\n\u589e\u52a0\u7535\u5bb9C14\n\n\n\u91cd\u65b0\u8bbe\u8ba1\u5e03\u5c40\uff0c\u4f7f\u5176\u66f4\u52a0\u6574\u6d01\n\n\n\u517c\u5bb93.3V\u7535\u538b\u7cfb\u7edf\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e24\u5f20\u56fe\u7247\u6765\u663e\u793a\u4e0d\u540c\u4e4b\u5904\uff1a\n\n\n\n\n\n\n!!!\u6ce8\u610f\n    \u8bf7\u6ce8\u610f\uff0c\u65b0\u7248\u672c\u4e0e\u65e7\u7248\u672c\u5171\u4eab\u76f8\u540c\u7684sku\uff0c\u6240\u4ee5\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u65e7\u7684sku\uff1a101020010\u8fdb\u884c\u8d2d\u4e70\uff0c\u6211\u4eec\u5c06\u7ed9\u60a8\u53d1\u9001\u65b0\u7248\u672c\u3002\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u503c/\u8303\u56f4\n\n\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n3.2~5.2V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n8mA\n\n\n\n\n\n\n\u8d85\u58f0\u6ce2\u9891\u7387\n\n\n40kHz\n\n\n\n\n\n\n\u6d4b\u91cf\u8303\u56f4\n\n\n2-350cm\n\n\n\n\n\n\n\u7cbe\u5ea6\n\n\n1cm\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nPWM\n\n\n\n\n\n\n\u5c3a\u5bf8\n\n\n50mm X 25mm X 16mm\n\n\n\n\n\n\n\u91cd\u91cf\n\n\n13g\n\n\n\n\n\n\n\n\n!!!\u5c0f\u63d0\u793a\n    \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003\nGrove System\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u4f7f\u7528Arduino\n\n\n\u7269\u7406\u8fde\u63a5\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2aGrove - Ultrasonic Ranger \u5982\u4f55\u8fd0\u4f5c\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Ultrasonic Ranger\n\n\nBase Shield\n\n\nGrove - LCD RGB Backlight\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u5c06Ultrasonic Ranger\u8fde\u63a5\u5230Grove-Base Shield\u7684 \nD7\n \u7aef\u53e3\u3002\n\n\n\u5c06LCD RGB Backlight\u8fde\u63a5\u5230Grove-Base Shield\u7684 \nI2C\n \u7aef\u53e3\u3002\n\n\n\u5c06Grove - Base Shield\u63d2\u5165\u5230Arduino\u4e2d\u3002\n\n\n\u901a\u8fc7USB\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002\n\n\n\n\n\n\n\u8f6f\u4ef6\u4ee3\u7801\n\n\n\n\n\u4eceGithub\u4e0b\u8f7d\n UltrasonicRanger Library\n\u548c\n  Grove - LCD RGB Backlight Library \n \u3002\n\n\n\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u5982\u4f55\u5b89\u88c5\u5e93\uff0c\u8bf7\u53c2\u9605 \n\u5982\u4f55\u5b89\u88c5\u5e93\n\n\n\n\n#include \nWire.h\n\n#include \nrgb_lcd.h\n\n#include \nUltrasonic.h\n\n\nrgb_lcd lcd;\nUltrasonic ultrasonic(7);\n\nconst int colorR = 0;\nconst int colorG = 255;\nconst int colorB = 0;\n\n\nvoid setup()\n{\n    // set up the LCD\ns number of columns and rows:\n    lcd.begin(16, 2);\n    lcd.setRGB(colorR, colorG, colorB);\n}\n\nvoid loop()\n{   \n    long RangeInCentimeters;\n    RangeInCentimeters = ultrasonic.MeasureInCentimeters();\n    delay(150);\n    lcd.clear();\n    lcd.setCursor(0,0);\n    lcd.print(\nThe distance:\n);\n    lcd.setCursor(0,1) ;\n    lcd.print(RangeInCentimeters,DEC);\n    lcd.setCursor(5,1) ;\n    lcd.print(\ncm\n);\n}\n\n\n- \u5c06\u4ee3\u7801\u590d\u5236\u5230Arduino\u5e76\u4e0a\u4f20\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230LCD\u4e0a\u7684\u8ddd\u79bb\u663e\u793a\u3002\n\n\n\u4f7f\u7528 TI LaunchPad\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u8d85\u58f0\u6ce2\u4f20\u611f\u5668(Ultrasonic Ranger Sensor)\n\n\n\u8be5\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528\u8d85\u58f0\u6ce2\u4f20\u611f\u5668\u6d4b\u91cf\u4e0e\u969c\u788d\u7269\u7684\u8ddd\u79bb\uff0c\u5e76\u57284\u4f4d\u6570\u5b57\u663e\u793a\u5c4f\uff08\u5398\u7c73\uff09\u4e0a\u663e\u793a\u8be5\u503c\u3002\n\n\n\n\n\u8f6f\u4ef6\u4ee3\u7801\n\n\n/*\n Ultrasonic-Ranger to 4-digit-display\n Measure the distance to obstacles in front and display the value on\n 4-digital-display\n\n The circuit:\n * Ultrasonic Ranger attached to SPI plug on Grove Base BoosterPack\n * one side pin (either one) to ground\n * the other side pin to +VCC\n * LED anode (long leg) attached to RED_LED\n * LED cathode (short leg) attached to ground\n\n * Note:  \n\n\n This example code is in the public domain.\n\n http://www.seeedstudio.com/wiki/Grove_-_Ultrasonic_Ranger\n */\n\n#include \nTM1637.h\n\n#include \nUltrasonic.h\n\n/* Macro Define */\n#define CLK               40                  /* 4-digital display clock pin */\n#define DIO               39                 /* 4-digital display data pin */\n#define BLINK_LED         RED_LED            /* blink led */\n#define ULTRASONIC_PIN    38                  /* pin of the Ultrasonic Ranger */\n\n/* Global Variables */\nTM1637 tm1637(CLK, DIO);                  /* 4-digital display object */\nUltrasonic ultrasonic(ULTRASONIC_PIN);    /* Ultrasonic Ranger object */\nint distance = 0;                         /* variable to store the distance to obstacles in front */\nint blink_interval = 0;                   /* led delay time */\nint8_t bits[4] = {0};                     /* array to store the single bits of the value */\n\n/* the setup() method runs once, when the sketch starts */\nvoid setup() {\n\n    /* Initialize 4-digital display */\n    tm1637.init();\n    tm1637.set(BRIGHT_TYPICAL);\n\n    /* declare the red_led pin as an OUTPUT */\n    pinMode(RED_LED, OUTPUT);\n\n}\n\n/* the loop() method runs over and over again */\nvoid loop() {   \n\n    distance = ultrasonic.MeasureInCentimeters();   /* read the value from the sensor */   \n\n    memset(bits, 0, 4);                             /* reset array when we use it */\n    for(int i = 3; i \n= 0; i--) {\n        /* get single bits of the analog value */\n        bits[i] = distance % 10;\n        distance = distance / 10;  \n        tm1637.display(i, bits[i]);                 /* display by 4-digital display */\n    }\n    delay(100);\n}\n\n\n\n\n\u4f7f\u7528 \nRaspberry Pi\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\n\n\n\nRaspberry pi\n\n\nGrove - Ultrasonic Ranger\n\n\nGrovePi_Plus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u6309\u7167 \n\u8bf4\u660e\n  \u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002\n\n\n.\u5c06\u8d85\u58f0\u6ce2\u4f20\u611f\u5668\u8fde\u63a5\u5230\u7aef\u53e3 ** D4 ** \u5e76\u8fd0\u884c\u4e0b\u9762\u7684\u7a0b\u5e8f\u3002 \u5b83\u5c06\u5728\u7ec8\u7aef\u4e0a\u7684\u663e\u793a\u8ddd\u79bb\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\n\n\n\u8f6f\u4ef6\u4ee3\u7801\n\n\n# GrovePi + Grove Ultrasonic Ranger\n\n\n\nfrom\n \ngrovepi\n \nimport\n \n*\n\n\n\n# Connect the Grove Ultrasonic Ranger to digital port D4\n\n\n# SIG,NC,VCC,GND\n\n\n\nultrasonic_ranger\n \n=\n \n4\n\n\n\nwhile\n \nTrue\n:\n\n    \ntry\n:\n\n        \n# Read distance value from Ultrasonic\n\n        \nprint\n \nultrasonicRead\n(\nultrasonic_ranger\n)\n\n\n    \nexcept\n \nTypeError\n:\n\n        \nprint\n \nError\n\n    \nexcept\n \nIOError\n:\n\n        \nprint\n \nError\n\n\n\n\n\n\u8fd0\u884c\u7a0b\u5e8f\n\n\n\n\n\u627e\u5230\u6587\u4ef6\u7684\u8def\u5f84\uff08\u6839\u636e\u4f60\u81ea\u5df1\u7684\u8def\u5f84\uff09\n\n \ncd\n \nGrovePi\n/\nSoftware\n/\nPython\n/\n\n\n\n\n\n\n\u8fd0\u884c\u7a0b\u5e8f\n\n \nsudo\n \npython\n \ngrove_ultrasonic\n.\npy\n\n\n\n\n\n\n\n\n\u8fd0\u884c\u5f97\u5230\u7684\u7ed3\u679c\n\n\n\n\n\n\n\n\u76f8\u5173\u9879\u76ee\n\n\n\u5982\u679c\u60a8\u60f3\u901a\u8fc7Grove - Ultrasonic Ranger\u505a\u4e00\u4e9b\u6709\u610f\u601d\u7684\u9879\u76ee\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u4f9b\u60a8\u53c2\u8003\u3002\n\n\n\u81ea\u52a8\u6c34\u4f4d\u63a7\u5236\u5668\n\n\n\u6709\u8bb8\u591a\u65b9\u6cd5\u4f7f\u7528\u6d6e\u529b\u4f20\u611f\u5668\u6765\u786e\u5b9a\u6c34\u4f4d\uff0c\u6216\u8005\u4f7f\u7528\u63a2\u5934\u6765\u68c0\u6d4b\u6cb9\u7bb1\u4e2d\u7684\u6c34\u4f4d\u9ad8\u4f4e\u3002 \u5982\u4f55\u5728\u4e0d\u4f7f\u7528\u63a2\u9488\u6216\u4e0e\u6c34\u63a5\u89e6\u7684\u60c5\u51b5\u4e0b\u6d4b\u91cf\u6c34\u4f4d\uff1f \u662f\u7684\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ea\u662f\u4f7f\u7528\u8d85\u58f0\u6ce2\u4f20\u611f\u5668\uff0c\u8fd9\u5f88\u7b80\u5355\uff01 \u60a8\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6700\u5927\u548c\u6700\u5c0f\u6c34\u5e73\u6765\u786e\u5b9a\u6c34\u7bb1\u5185\u6c34\u6df1\u3002\n\n\n\n\n\n\n\u5ba4\u5185\u95ea\u7535\u4e91\n\n\n\u505a\u4e00\u4e2a\u5ba4\u5185\u95ea\u7535\u4e91\uff0c\u628a\u5b83\u6302\u5728\u4f60\u7684\u5929\u82b1\u677f\u4e0a\uff0c\u5e76\u4e14\u8ddf\u670b\u53cb\u5f00\u4e00\u4e2a\u73a9\u7b11\uff0c\u8ba9\u4efb\u4f55\u901a\u8fc7\u5b83\u7684\u4eba\u611f\u5230\u9ad8\u5174\uff01\n\n\n\n\n\n\n\u591a\u5f69\u87ba\u65cb\n\n\n\u6211\u4eec\u7684\u827a\u672f\u5bb6\u738b\u4e16\u8f89\u6700\u8fd1\u5411\u6211\u5c55\u793a\u4e86\u53e6\u4e00\u4ef6\u60ca\u4eba\u7684\u827a\u672f\u4f5c\u54c1\uff1a\u591a\u5f69\u87ba\u65cb\u3002 \u518d\u52a0\u4e0a\u51e0\u4e2a\u7b80\u5355\u7684\u7ec4\u4ef6\uff0c\u5979\u5411\u6211\u4eec\u4ecb\u7ecd\u4e86\u827a\u672f\u548c\u7535\u5b50\u7684\u7ec4\u5408\u7684\u7f8e\u4e3d\u3002\n\n\n\u4f7f\u7528Grove - Ultrasonic Ranger\uff0c\u5979\u53ef\u4ee5\u901a\u8fc7\u63d0\u9ad8\u6216\u964d\u4f4e\u7a7a\u6c14\u4e2d\u7684\u624b\u638c\u6765\u795e\u5947\u5730\u63a7\u5236\u591a\u5f69\u87ba\u65cb\u5185\u7684\u53d1\u5149LED\u6570\u91cf\u3002\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Library]\n \nUltrasonic Ranger library\n\n\n[Library]\n \nGrove_LCD_RGB_Backlight-master\n\n\n[Example]\n \nExample_Measure_and_display_the_distance\n\n\n[Example]\n \nExample_Measure_distance_and_led_display", 
            "title": "Grove-Ultrasonic_Ranger"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_1", 
            "text": "\u4e3a\u4e86\u63d0\u9ad8\u5728\u4f7f\u7528\u4e00\u4e9b\u4f4e\u538b\u4e3b\u677f\u65f6\u7684\u7535\u6e90\u7a33\u5b9a\u6027\uff0c\u6211\u4eec\u5bf9\u6b64\u4ea7\u54c1\u505a\u4e86\u4e00\u4e9b\u66f4\u65b0\u3002\u8fd9\u4e9b\u66f4\u65b0\u5305\u62ec\uff1a   \u589e\u52a0\u7535\u5bb9C14  \u91cd\u65b0\u8bbe\u8ba1\u5e03\u5c40\uff0c\u4f7f\u5176\u66f4\u52a0\u6574\u6d01  \u517c\u5bb93.3V\u7535\u538b\u7cfb\u7edf   \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e24\u5f20\u56fe\u7247\u6765\u663e\u793a\u4e0d\u540c\u4e4b\u5904\uff1a    !!!\u6ce8\u610f\n    \u8bf7\u6ce8\u610f\uff0c\u65b0\u7248\u672c\u4e0e\u65e7\u7248\u672c\u5171\u4eab\u76f8\u540c\u7684sku\uff0c\u6240\u4ee5\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u65e7\u7684sku\uff1a101020010\u8fdb\u884c\u8d2d\u4e70\uff0c\u6211\u4eec\u5c06\u7ed9\u60a8\u53d1\u9001\u65b0\u7248\u672c\u3002", 
            "title": "\u4ea7\u54c1\u66f4\u65b0"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_2", 
            "text": "\u53c2\u6570  \u503c/\u8303\u56f4      \u5de5\u4f5c\u7535\u538b  3.2~5.2V    \u5de5\u4f5c\u7535\u6d41  8mA    \u8d85\u58f0\u6ce2\u9891\u7387  40kHz    \u6d4b\u91cf\u8303\u56f4  2-350cm    \u7cbe\u5ea6  1cm    \u8f93\u51fa  PWM    \u5c3a\u5bf8  50mm X 25mm X 16mm    \u91cd\u91cf  13g     !!!\u5c0f\u63d0\u793a\n    \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 Grove System", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_4", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#arduino", 
            "text": "", 
            "title": "\u4f7f\u7528Arduino"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_5", 
            "text": "\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2aGrove - Ultrasonic Ranger \u5982\u4f55\u8fd0\u4f5c\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Ultrasonic Ranger  Base Shield  Grove - LCD RGB Backlight            \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u5c06Ultrasonic Ranger\u8fde\u63a5\u5230Grove-Base Shield\u7684  D7  \u7aef\u53e3\u3002  \u5c06LCD RGB Backlight\u8fde\u63a5\u5230Grove-Base Shield\u7684  I2C  \u7aef\u53e3\u3002  \u5c06Grove - Base Shield\u63d2\u5165\u5230Arduino\u4e2d\u3002  \u901a\u8fc7USB\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002", 
            "title": "\u7269\u7406\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_6", 
            "text": "\u4eceGithub\u4e0b\u8f7d  UltrasonicRanger Library \u548c   Grove - LCD RGB Backlight Library   \u3002  \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u5982\u4f55\u5b89\u88c5\u5e93\uff0c\u8bf7\u53c2\u9605  \u5982\u4f55\u5b89\u88c5\u5e93   #include  Wire.h \n#include  rgb_lcd.h \n#include  Ultrasonic.h \n\nrgb_lcd lcd;\nUltrasonic ultrasonic(7);\n\nconst int colorR = 0;\nconst int colorG = 255;\nconst int colorB = 0;\n\n\nvoid setup()\n{\n    // set up the LCD s number of columns and rows:\n    lcd.begin(16, 2);\n    lcd.setRGB(colorR, colorG, colorB);\n}\n\nvoid loop()\n{   \n    long RangeInCentimeters;\n    RangeInCentimeters = ultrasonic.MeasureInCentimeters();\n    delay(150);\n    lcd.clear();\n    lcd.setCursor(0,0);\n    lcd.print( The distance: );\n    lcd.setCursor(0,1) ;\n    lcd.print(RangeInCentimeters,DEC);\n    lcd.setCursor(5,1) ;\n    lcd.print( cm );\n} \n- \u5c06\u4ee3\u7801\u590d\u5236\u5230Arduino\u5e76\u4e0a\u4f20\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230LCD\u4e0a\u7684\u8ddd\u79bb\u663e\u793a\u3002", 
            "title": "\u8f6f\u4ef6\u4ee3\u7801"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#ti-launchpad", 
            "text": "", 
            "title": "\u4f7f\u7528 TI LaunchPad"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_7", 
            "text": "\u8d85\u58f0\u6ce2\u4f20\u611f\u5668(Ultrasonic Ranger Sensor)  \u8be5\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528\u8d85\u58f0\u6ce2\u4f20\u611f\u5668\u6d4b\u91cf\u4e0e\u969c\u788d\u7269\u7684\u8ddd\u79bb\uff0c\u5e76\u57284\u4f4d\u6570\u5b57\u663e\u793a\u5c4f\uff08\u5398\u7c73\uff09\u4e0a\u663e\u793a\u8be5\u503c\u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_8", 
            "text": "/*\n Ultrasonic-Ranger to 4-digit-display\n Measure the distance to obstacles in front and display the value on\n 4-digital-display\n\n The circuit:\n * Ultrasonic Ranger attached to SPI plug on Grove Base BoosterPack\n * one side pin (either one) to ground\n * the other side pin to +VCC\n * LED anode (long leg) attached to RED_LED\n * LED cathode (short leg) attached to ground\n\n * Note:  \n\n\n This example code is in the public domain.\n\n http://www.seeedstudio.com/wiki/Grove_-_Ultrasonic_Ranger\n */\n\n#include  TM1637.h \n#include  Ultrasonic.h \n/* Macro Define */\n#define CLK               40                  /* 4-digital display clock pin */\n#define DIO               39                 /* 4-digital display data pin */\n#define BLINK_LED         RED_LED            /* blink led */\n#define ULTRASONIC_PIN    38                  /* pin of the Ultrasonic Ranger */\n\n/* Global Variables */\nTM1637 tm1637(CLK, DIO);                  /* 4-digital display object */\nUltrasonic ultrasonic(ULTRASONIC_PIN);    /* Ultrasonic Ranger object */\nint distance = 0;                         /* variable to store the distance to obstacles in front */\nint blink_interval = 0;                   /* led delay time */\nint8_t bits[4] = {0};                     /* array to store the single bits of the value */\n\n/* the setup() method runs once, when the sketch starts */\nvoid setup() {\n\n    /* Initialize 4-digital display */\n    tm1637.init();\n    tm1637.set(BRIGHT_TYPICAL);\n\n    /* declare the red_led pin as an OUTPUT */\n    pinMode(RED_LED, OUTPUT);\n\n}\n\n/* the loop() method runs over and over again */\nvoid loop() {   \n\n    distance = ultrasonic.MeasureInCentimeters();   /* read the value from the sensor */   \n\n    memset(bits, 0, 4);                             /* reset array when we use it */\n    for(int i = 3; i  = 0; i--) {\n        /* get single bits of the analog value */\n        bits[i] = distance % 10;\n        distance = distance / 10;  \n        tm1637.display(i, bits[i]);                 /* display by 4-digital display */\n    }\n    delay(100);\n}", 
            "title": "\u8f6f\u4ef6\u4ee3\u7801"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#raspberry-pi", 
            "text": "", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_9", 
            "text": "Raspberry pi  Grove - Ultrasonic Ranger  GrovePi_Plus           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u6309\u7167  \u8bf4\u660e   \u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002  .\u5c06\u8d85\u58f0\u6ce2\u4f20\u611f\u5668\u8fde\u63a5\u5230\u7aef\u53e3 ** D4 ** \u5e76\u8fd0\u884c\u4e0b\u9762\u7684\u7a0b\u5e8f\u3002 \u5b83\u5c06\u5728\u7ec8\u7aef\u4e0a\u7684\u663e\u793a\u8ddd\u79bb\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_10", 
            "text": "# GrovePi + Grove Ultrasonic Ranger  from   grovepi   import   *  # Connect the Grove Ultrasonic Ranger to digital port D4  # SIG,NC,VCC,GND  ultrasonic_ranger   =   4  while   True : \n     try : \n         # Read distance value from Ultrasonic \n         print   ultrasonicRead ( ultrasonic_ranger ) \n\n     except   TypeError : \n         print   Error \n     except   IOError : \n         print   Error", 
            "title": "\u8f6f\u4ef6\u4ee3\u7801"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_11", 
            "text": "\u627e\u5230\u6587\u4ef6\u7684\u8def\u5f84\uff08\u6839\u636e\u4f60\u81ea\u5df1\u7684\u8def\u5f84\uff09   cd   GrovePi / Software / Python /    \u8fd0\u884c\u7a0b\u5e8f   sudo   python   grove_ultrasonic . py     \u8fd0\u884c\u5f97\u5230\u7684\u7ed3\u679c", 
            "title": "\u8fd0\u884c\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_12", 
            "text": "\u5982\u679c\u60a8\u60f3\u901a\u8fc7Grove - Ultrasonic Ranger\u505a\u4e00\u4e9b\u6709\u610f\u601d\u7684\u9879\u76ee\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u4f9b\u60a8\u53c2\u8003\u3002", 
            "title": "\u76f8\u5173\u9879\u76ee"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_13", 
            "text": "\u6709\u8bb8\u591a\u65b9\u6cd5\u4f7f\u7528\u6d6e\u529b\u4f20\u611f\u5668\u6765\u786e\u5b9a\u6c34\u4f4d\uff0c\u6216\u8005\u4f7f\u7528\u63a2\u5934\u6765\u68c0\u6d4b\u6cb9\u7bb1\u4e2d\u7684\u6c34\u4f4d\u9ad8\u4f4e\u3002 \u5982\u4f55\u5728\u4e0d\u4f7f\u7528\u63a2\u9488\u6216\u4e0e\u6c34\u63a5\u89e6\u7684\u60c5\u51b5\u4e0b\u6d4b\u91cf\u6c34\u4f4d\uff1f \u662f\u7684\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ea\u662f\u4f7f\u7528\u8d85\u58f0\u6ce2\u4f20\u611f\u5668\uff0c\u8fd9\u5f88\u7b80\u5355\uff01 \u60a8\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6700\u5927\u548c\u6700\u5c0f\u6c34\u5e73\u6765\u786e\u5b9a\u6c34\u7bb1\u5185\u6c34\u6df1\u3002", 
            "title": "\u81ea\u52a8\u6c34\u4f4d\u63a7\u5236\u5668"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_14", 
            "text": "\u505a\u4e00\u4e2a\u5ba4\u5185\u95ea\u7535\u4e91\uff0c\u628a\u5b83\u6302\u5728\u4f60\u7684\u5929\u82b1\u677f\u4e0a\uff0c\u5e76\u4e14\u8ddf\u670b\u53cb\u5f00\u4e00\u4e2a\u73a9\u7b11\uff0c\u8ba9\u4efb\u4f55\u901a\u8fc7\u5b83\u7684\u4eba\u611f\u5230\u9ad8\u5174\uff01", 
            "title": "\u5ba4\u5185\u95ea\u7535\u4e91"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_15", 
            "text": "\u6211\u4eec\u7684\u827a\u672f\u5bb6\u738b\u4e16\u8f89\u6700\u8fd1\u5411\u6211\u5c55\u793a\u4e86\u53e6\u4e00\u4ef6\u60ca\u4eba\u7684\u827a\u672f\u4f5c\u54c1\uff1a\u591a\u5f69\u87ba\u65cb\u3002 \u518d\u52a0\u4e0a\u51e0\u4e2a\u7b80\u5355\u7684\u7ec4\u4ef6\uff0c\u5979\u5411\u6211\u4eec\u4ecb\u7ecd\u4e86\u827a\u672f\u548c\u7535\u5b50\u7684\u7ec4\u5408\u7684\u7f8e\u4e3d\u3002  \u4f7f\u7528Grove - Ultrasonic Ranger\uff0c\u5979\u53ef\u4ee5\u901a\u8fc7\u63d0\u9ad8\u6216\u964d\u4f4e\u7a7a\u6c14\u4e2d\u7684\u624b\u638c\u6765\u795e\u5947\u5730\u63a7\u5236\u591a\u5f69\u87ba\u65cb\u5185\u7684\u53d1\u5149LED\u6570\u91cf\u3002", 
            "title": "\u591a\u5f69\u87ba\u65cb"
        }, 
        {
            "location": "/Grove-Ultrasonic_Ranger/#_16", 
            "text": "[Library]   Ultrasonic Ranger library  [Library]   Grove_LCD_RGB_Backlight-master  [Example]   Example_Measure_and_display_the_distance  [Example]   Example_Measure_distance_and_led_display", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-GSR_Sensor/", 
            "text": "GSR\u901a\u8fc7\u6d4b\u91cf\u76ae\u80a4\u7535\u6d41\u53cd\u5e94\u6765\u6d4b\u91cf\u76ae\u80a4\u7535\u5bfc\u7387\u3002 \u5f3a\u70c8\u7684\u60c5\u7eea\u4f1a\u523a\u6fc0\u4f60\u7684\u4ea4\u611f\u795e\u7ecf\u7cfb\u7edf\uff0c\u5bfc\u81f4\u6c57\u817a\u5206\u6ccc\u66f4\u591a\u7684\u6c57\u6c34\u3002 Grove - GSR\u5141\u8bb8\u60a8\u901a\u8fc7\u7b80\u5355\u5730\u5c06\u4e24\u4e2a\u7535\u6781\u8fde\u63a5\u5230\u4e24\u4e2a\u624b\u6307\u6765\u53d1\u73b0\u8fd9\u79cd\u5f3a\u70c8\u7684\u60c5\u7eea\uff0c\u5b83\u80fd\u591f\u5236\u4f5c\u4e0e\u60c5\u611f\u6709\u5173\u7684\u9879\u76ee\uff08\u5982\u7761\u7720\u8d28\u91cf\u76d1\u89c6\u5668\uff09\uff0c\u662f\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u88c5\u5907\u3002\n\n\n\n\n\u7248\u672c\u4fe1\u606f\n\n\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\n\n\n\u53d1\u5e03\u65e5\u671f\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nGrove - GSR_Sensor V1.0\n\n\n2013\u5e746\u670819\u65e5\n\n\n\u521d\u59cb\u7248\u672c\n\n\n\n\n\n\nGrove - GSR_Sensor V1.2\n\n\n2014\u5e747\u670831\u65e5\n\n\n\u5728M324PW-TSSOP14\u548cGND\u4e4b\u95f4\u589e\u52a0C3 100nf\n\n\n\n\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\u8f93\u5165\u7535\u538b\uff1a5V / 3.3V\n\n\n\u7075\u654f\u5ea6\u53ef\u901a\u8fc7\u7535\u4f4d\u5668\u8c03\u8282\n\n\n\u914d\u7f6e\u5916\u90e8\u624b\u6307\u6307\u5957\u6d4b\u91cf\u88c5\u7f6e\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003\nGrove System\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u8fd9\u91cc\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793aGroove - GSR\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4.2\n\n\nGrove - GSR\n\n\nBase Shield\n\n\nGrove-RGB LCD Backlight\n\n\nGrove-Buzzer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u4f7f\u7528Grove \u901a\u7528 4\u9488\u8fde\u63a5\u7ebf\u5c06Grove-GSR\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684 \nA2\n\u3002\n\n\n\u4f7f\u7528Grove \u901a\u7528 4\u9488\u8fde\u63a5\u7ebf\u5c06Grove-Buzzer\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684 \nD3\n\u3002\n\n\n\u4f7f\u7528Grove \u901a\u7528 4\u9488\u8fde\u63a5\u7ebf\u5c06Grove-RGB LCD Backlight\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684 \nI2C\n\u3002\n\n\n\u5c06 Base Shield\u63d2\u5165\u5230 Seeeduino-V4.2\u3002\n\n\n\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06 Seeeduino-V4.2 \u8fde\u63a5\u5230PC\u3002\n\n\n\n\n\n\n\n\nNote\n\n\n\u5982\u679c\u6ca1\u6709Base Shield\uff0c\u8bf7\u4e0d\u7528\u62c5\u5fc3\uff0c\u4f20\u611f\u5668\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5\u5230Arduino\u3002 \u8bf7\u6309\u7167\u4e0b\u9762\u7684\u8868\u683c\u8fde\u63a5Arduino\u3002\n\n\n\n\n\n\n\n\n\n\nGrove-GSR Sensor\n\n\nArduino\n\n\n\n\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nVCC\n\n\nVCC\n\n\n\n\n\n\nSIG\n\n\nA2\n\n\n\n\n\n\nNC\n\n\n\u4e0d\u8fde\u63a5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove-Buzzer\n\n\nArduino\n\n\n\n\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nVCC\n\n\nVCC\n\n\n\n\n\n\nSIG\n\n\n3\n\n\n\n\n\n\nNC\n\n\n\u4e0d\u8fde\u63a5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove -RGB LCD Backlight\n\n\nArduino Uno\n\n\n\n\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nVCC\n\n\nVCC\n\n\n\n\n\n\nSDA\n\n\nA4\n\n\n\n\n\n\nSCL\n\n\nA5\n\n\n\n\n\n\n\n\n\u4f5c\u4e3a\u53c2\u8003\uff0c\u4e0b\u8868\u663e\u793a\u4e86I2C\u5f15\u811a\u4f4d\u4e8e\u5404\u79cdArduino\u677f\u4e0a\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\n\n\n\nBoard\n\n\nI2C  pins\n\n\n\n\n\n\n\n\n\n\nUno, Ethernet\n\n\nA4 (SDA), A5 (SCL)\n\n\n\n\n\n\nMega2560\n\n\n20 (SDA), 21 (SCL)\n\n\n\n\n\n\nLeonardo\n\n\n2 (SDA), 3 (SCL)\n\n\n\n\n\n\nDue\n\n\n20 (SDA), 21 (SCL), SDA1, SCL1\n\n\n\n\n\n\n\n\n\u8f6f\u4ef6\n\n\n\u6211\u4eec\u9700\u8981\u4e0b\u8f7dGrove_LCD_RGB_Backlight\u5e93\u5e76\u5b89\u88c5\u5230\u60a8\u7684Arduino IDE\u3002\n\n\n\n\n\u8bf7\u9075\u5faa \n\u5982\u4f55\u5b89\u88c5arduino\u5e93\n \u7684\u6b65\u9aa4\u6765\u5b89\u88c5RGB Backlight\u5e93\u3002\n\n\n\n\n\n\n\n\n\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u5668\u4e0a\u5e76\u5c06\u5176\u4e0a\u4f20\u5230Arduino\u3002\n\n\n\n\n#include \nWire.h\n\n#include \nrgb_lcd.h\n\n\n    const int BUZZER=3;\n    const int GSR=A2;\n    int threshold=0;\n    int sensorValue;\n    rgb_lcd lcd;\n\n    void setup(){\n      long sum=0;\n      lcd.begin(16, 2);\n      Serial.begin(9600);\n      pinMode(BUZZER,OUTPUT);\n      digitalWrite(BUZZER,LOW);\n      delay(1000);\n\n      for(int i=0;i\n500;i++)\n      {\n      sensorValue=analogRead(GSR);\n      sum += sensorValue;\n      delay(5);\n      }\n      threshold = sum/500;\n       Serial.print(\nthreshold =\n);\n       Serial.println(threshold);\n      }\n\n    void loop(){\n      int temp;\n      sensorValue=analogRead(GSR);\n      Serial.print(\nsensorValue=\n);\n      Serial.println(sensorValue);\n      lcd.setCursor(0, 0);\n      lcd.print(\nGSR Value: \n);\n      lcd.print(sensorValue);\n      temp = threshold - sensorValue;\n      if(abs(temp)\n50)\n      {\n        sensorValue=analogRead(GSR);\n        temp = threshold - sensorValue;\n        if(abs(temp)\n50){\n        digitalWrite(BUZZER,HIGH);\n        Serial.println(\nYES!\n);\n        delay(3000);\n        digitalWrite(BUZZER,LOW);\n        delay(1000);}\n      }\n      }\n\n\n\n\n\n\n\u6234\u597d\u6307\u5957\u5e76\u4e14\u4fdd\u6301\u653e\u677e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4eceGrove_LCD_RGB_Backlight\u548c\u4e32\u53e3\u4e2d\u770b\u5230\u6570\u636e\uff1a\n\n\n\n\n\n\n\n\n\u7136\u540e\u6df1\u5438\u4e00\u53e3\u6c14 \u8702\u9e23\u5668\u73b0\u5728\u5e94\u8be5\u88ab\u89e6\u53d1\u3002 \u800c\u4e14\u5e94\u8be5\u53ef\u4ee5\u89c2\u5bdf\u5230\u8f93\u51fa\u7684\u6570\u503c\u6709\u660e\u663e\u7684\u53d8\u5316\u3002\n\n\n\n\n\u53c2\u8003\n\n\n\n\n\u6709\u51e0\u4e2a\u4f7f\u7528GSR\u6570\u636e\u5728excel\u4e2d\u521b\u5efa\u7684\u56fe\u8868\u3002 \u6211\u4eec\u53ef\u4ee5\u6253\u5f00 \nGSR sensor data\n\u67e5\u770b\u8be6\u7ec6\u6570\u636e.\n\n\n\n\n\n\n\u6df1\u547c\u5438\u7684\u65f6\u5019\n\n\n\n\n\n\n\n\n\u9965\u997f\u7684\u65f6\u5019\n\n\n\n\n\n\n\n\n\u653e\u8f7b\u677e\u7684\u65f6\u5019\n\n\n\n\n\n\n\n\n\u770b\u5230\u6211\u8001\u677f\u6765\u7684\u65f6\u5019\n\n\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Eagle]\n \nGrove - GSR v1.0 Eagle File\n\n\n[PDF]\n \nGrove-GSR v1.0 Sch\n\n\n[PDF]\n \nGrove-GSR v1.0 PCB\n\n\n[Eagle]\n \nGrove - GSR v1.2 Eagle File\n\n\n[PDF]\n \nGrove-GSR v1.2 Sch\n\n\n[PDF]\n \nGrove-GSR v1.2 PCB\n\n\n[Datasheet]\n \nLM324 datasheet\n\n\n[Document]\n \nGSR sensor data", 
            "title": "Grove-GSR_Sensor"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_1", 
            "text": "\u4ea7\u54c1  \u53d1\u5e03\u65e5\u671f  \u63cf\u8ff0      Grove - GSR_Sensor V1.0  2013\u5e746\u670819\u65e5  \u521d\u59cb\u7248\u672c    Grove - GSR_Sensor V1.2  2014\u5e747\u670831\u65e5  \u5728M324PW-TSSOP14\u548cGND\u4e4b\u95f4\u589e\u52a0C3 100nf", 
            "title": "\u7248\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_2", 
            "text": "\u8f93\u5165\u7535\u538b\uff1a5V / 3.3V  \u7075\u654f\u5ea6\u53ef\u901a\u8fc7\u7535\u4f4d\u5668\u8c03\u8282  \u914d\u7f6e\u5916\u90e8\u624b\u6307\u6307\u5957\u6d4b\u91cf\u88c5\u7f6e    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 Grove System", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_4", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_5", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793aGroove - GSR\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4.2  Grove - GSR  Base Shield  Grove-RGB LCD Backlight  Grove-Buzzer             \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u4f7f\u7528Grove \u901a\u7528 4\u9488\u8fde\u63a5\u7ebf\u5c06Grove-GSR\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684  A2 \u3002  \u4f7f\u7528Grove \u901a\u7528 4\u9488\u8fde\u63a5\u7ebf\u5c06Grove-Buzzer\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684  D3 \u3002  \u4f7f\u7528Grove \u901a\u7528 4\u9488\u8fde\u63a5\u7ebf\u5c06Grove-RGB LCD Backlight\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684  I2C \u3002  \u5c06 Base Shield\u63d2\u5165\u5230 Seeeduino-V4.2\u3002  \u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06 Seeeduino-V4.2 \u8fde\u63a5\u5230PC\u3002     Note  \u5982\u679c\u6ca1\u6709Base Shield\uff0c\u8bf7\u4e0d\u7528\u62c5\u5fc3\uff0c\u4f20\u611f\u5668\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5\u5230Arduino\u3002 \u8bf7\u6309\u7167\u4e0b\u9762\u7684\u8868\u683c\u8fde\u63a5Arduino\u3002      Grove-GSR Sensor  Arduino      GND  GND    VCC  VCC    SIG  A2    NC  \u4e0d\u8fde\u63a5        Grove-Buzzer  Arduino      GND  GND    VCC  VCC    SIG  3    NC  \u4e0d\u8fde\u63a5        Grove -RGB LCD Backlight  Arduino Uno      GND  GND    VCC  VCC    SDA  A4    SCL  A5     \u4f5c\u4e3a\u53c2\u8003\uff0c\u4e0b\u8868\u663e\u793a\u4e86I2C\u5f15\u811a\u4f4d\u4e8e\u5404\u79cdArduino\u677f\u4e0a\u7684\u4f4d\u7f6e\u3002     Board  I2C  pins      Uno, Ethernet  A4 (SDA), A5 (SCL)    Mega2560  20 (SDA), 21 (SCL)    Leonardo  2 (SDA), 3 (SCL)    Due  20 (SDA), 21 (SCL), SDA1, SCL1", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_6", 
            "text": "\u6211\u4eec\u9700\u8981\u4e0b\u8f7dGrove_LCD_RGB_Backlight\u5e93\u5e76\u5b89\u88c5\u5230\u60a8\u7684Arduino IDE\u3002   \u8bf7\u9075\u5faa  \u5982\u4f55\u5b89\u88c5arduino\u5e93  \u7684\u6b65\u9aa4\u6765\u5b89\u88c5RGB Backlight\u5e93\u3002     \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u5668\u4e0a\u5e76\u5c06\u5176\u4e0a\u4f20\u5230Arduino\u3002   #include  Wire.h \n#include  rgb_lcd.h \n\n    const int BUZZER=3;\n    const int GSR=A2;\n    int threshold=0;\n    int sensorValue;\n    rgb_lcd lcd;\n\n    void setup(){\n      long sum=0;\n      lcd.begin(16, 2);\n      Serial.begin(9600);\n      pinMode(BUZZER,OUTPUT);\n      digitalWrite(BUZZER,LOW);\n      delay(1000);\n\n      for(int i=0;i 500;i++)\n      {\n      sensorValue=analogRead(GSR);\n      sum += sensorValue;\n      delay(5);\n      }\n      threshold = sum/500;\n       Serial.print( threshold = );\n       Serial.println(threshold);\n      }\n\n    void loop(){\n      int temp;\n      sensorValue=analogRead(GSR);\n      Serial.print( sensorValue= );\n      Serial.println(sensorValue);\n      lcd.setCursor(0, 0);\n      lcd.print( GSR Value:  );\n      lcd.print(sensorValue);\n      temp = threshold - sensorValue;\n      if(abs(temp) 50)\n      {\n        sensorValue=analogRead(GSR);\n        temp = threshold - sensorValue;\n        if(abs(temp) 50){\n        digitalWrite(BUZZER,HIGH);\n        Serial.println( YES! );\n        delay(3000);\n        digitalWrite(BUZZER,LOW);\n        delay(1000);}\n      }\n      }   \u6234\u597d\u6307\u5957\u5e76\u4e14\u4fdd\u6301\u653e\u677e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4eceGrove_LCD_RGB_Backlight\u548c\u4e32\u53e3\u4e2d\u770b\u5230\u6570\u636e\uff1a     \u7136\u540e\u6df1\u5438\u4e00\u53e3\u6c14 \u8702\u9e23\u5668\u73b0\u5728\u5e94\u8be5\u88ab\u89e6\u53d1\u3002 \u800c\u4e14\u5e94\u8be5\u53ef\u4ee5\u89c2\u5bdf\u5230\u8f93\u51fa\u7684\u6570\u503c\u6709\u660e\u663e\u7684\u53d8\u5316\u3002", 
            "title": "\u8f6f\u4ef6"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_7", 
            "text": "\u6709\u51e0\u4e2a\u4f7f\u7528GSR\u6570\u636e\u5728excel\u4e2d\u521b\u5efa\u7684\u56fe\u8868\u3002 \u6211\u4eec\u53ef\u4ee5\u6253\u5f00  GSR sensor data \u67e5\u770b\u8be6\u7ec6\u6570\u636e.    \u6df1\u547c\u5438\u7684\u65f6\u5019     \u9965\u997f\u7684\u65f6\u5019     \u653e\u8f7b\u677e\u7684\u65f6\u5019     \u770b\u5230\u6211\u8001\u677f\u6765\u7684\u65f6\u5019", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/Grove-GSR_Sensor/#_8", 
            "text": "[Eagle]   Grove - GSR v1.0 Eagle File  [PDF]   Grove-GSR v1.0 Sch  [PDF]   Grove-GSR v1.0 PCB  [Eagle]   Grove - GSR v1.2 Eagle File  [PDF]   Grove-GSR v1.2 Sch  [PDF]   Grove-GSR v1.2 PCB  [Datasheet]   LM324 datasheet  [Document]   GSR sensor data", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Dust_Sensor/", 
            "text": "\u8be5\u7070\u5c18\u4f20\u611f\u5668\u901a\u8fc7\u6d4b\u91cf\u7070\u5c18\u6d53\u5ea6\u53ef\u4ee5\u5f88\u597d\u5730\u663e\u793a\u5468\u56f4\u73af\u5883\u4e2d\u7684\u7a7a\u6c14\u8d28\u91cf\u3002 \u901a\u8fc7\u8ba1\u7b97\u7ed9\u5b9a\u65f6\u95f4\u5355\u4f4d\u4e2d\u7684\u4f4e\u8109\u51b2\u5360\u7528\u65f6\u95f4\uff08LPO\u65f6\u95f4\uff09\u6765\u6d4b\u91cf\u7a7a\u6c14\u4e2d\u7684\u9897\u7c92\u7269\u8d28\u6c34\u5e73\uff08PM\u6c34\u5e73\uff09\u3002 LPO\u65f6\u95f4\u4e0ePM\u6d53\u5ea6\u6210\u6b63\u6bd4\u3002 \u8be5\u4f20\u611f\u5668\u53ef\u4e3a\u7a7a\u6c14\u51c0\u5316\u5668\u7cfb\u7edf\u63d0\u4f9b\u53ef\u9760\u7684\u6570\u636e; \u5b83\u80fd\u591f\u54cd\u5e94\u7684pM\u8303\u56f4\u53ef\u4ee5\u8fbe\u5230\u76f4\u5f841\u03bcm\u3002\n\n\n\n\nNote\n\n\n\n\n\u8be5\u4f20\u611f\u5668\u91c7\u7528\u8ba1\u6570\u65b9\u5f0f\u6d4b\u91cf\u7c89\u5c18\u6d53\u5ea6\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u79f0\u91cd\u65b9\u5f0f\uff0c\u5176\u5355\u4f4d\u4e3apcs / L\u6216pcs / 0.01cf\u3002\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u8be5\u4f20\u611f\u5668\u80fd\u591f\u7a33\u5b9a\u548c\u7075\u654f\u7684\u68c0\u6d4b\u4e0d\u4ec5\u662f\u70df\u8349\u70df\u96fe\u7684\u6d53\u5ea6\uff0c\u8fd8\u6709\u5ba4\u5185\u4f1a\u5f15\u8d77\u54ee\u5598\u7684\u5c18\u57c3\u3002\n\n\n\u4f7f\u7528\u5185\u7f6e\u7684\u7a7a\u6c14\u52a0\u70ed\u88c5\u7f6e\u8fbe\u5230\u81ea\u6211\u5438\u6c14\u7684\u529f\u80fd\u3002\n\n\n\u7ef4\u62a4\u65b9\u4fbf\uff0c\u80fd\u591f\u4fdd\u6301\u9ad8\u7075\u654f\u5ea6\u7684\u957f\u671f\u4f7f\u7528\u3002\n\n\n\u80fd\u591f\u8f93\u51fa\u8d85\u8fc71\u5fae\u7c73\u548c2.5\u5fae\u7c73\uff08\u5927\u7ea6\uff09\u7684\u7c92\u5ea6\u3002\n\n\n\u66f4\u7d27\u51d1\u8f7b\u5de7\uff0c\u5b89\u88c5\u65b9\u4fbf\u3002\n\n\n\n\n\n\nNote\n\n\n\u5728\u6700\u65b0\u7248\u672c\u4e2d\uff0c\u8f93\u51fa\u9ad8\u7535\u538b\u4ece4.0V\u53d8\u4e3a4.5V\u3002\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6807\u51c6\u89c4\u683c\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\n4.75~5.75\n\n\nV\n\n\n\n\n\n\n\u5f85\u673a\u7535\u6e90\n\n\n90\n\n\nmA\n\n\n\n\n\n\n\u53ef\u68c0\u6d4b\u6d53\u5ea6\u8303\u56f4\n\n\n0~28,000 / 0 ~ 8000\n\n\npcs/liter / pcs/0.01cf\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\n\n\n0~45\n\n\n\u00b0C\n\n\n\n\n\n\n\u8f93\u51fa\u65b9\u5f0f\n\n\nNegative Logic, Digital output, High: over 4.0V(Rev.2), Low: under 0.7V\n\n\n-\n\n\n\n\n\n\n\u68c0\u6d4b\u7c92\u5f84\n\n\n1\n\n\n\u03bcm\n\n\n\n\n\n\n\u5916\u5f62\u5c3a\u5bf8\n\n\n59(W) \u00d7 45(H) \u00d7 22(D)\n\n\nmm\n\n\n\n\n\n\n\u6e7f\u5ea6\u8303\u56f4\n\n\n95\uff05rh\u4ee5\u4e0b\n\n\n-\n\n\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u7a7a\u6c14\u51c0\u5316\u5668\n\n\n\u7a7a\u6c14\u8d28\u91cf\u76d1\u6d4b\n\n\n\u51b7\u6c14\u673a\n\n\n\u547c\u5438\u673a\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u6ce8\u610f\u4e8b\u9879\n\n\n\n\n\u8bf7\u4fdd\u6301\u76f4\u7acb\u3002\n\n\n\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\u9700\u89813\u5206\u949f\u7684\u9884\u70ed\u65f6\u95f4\u3002\n\n\n\u4efb\u610f\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u7684\u635f\u574f\u3002\n\n\n\u4ee5\u4e0b\u5c0f\u90e8\u4ef6\uff08\u6807\u6709\u7ea2\u8272\u77e9\u5f62\u7684\uff09\u4ec5\u7528\u4e8e\u51fa\u5382\u8bbe\u7f6e\u3002 \u8bf7 \n\u4e0d\u8981\n \u66f4\u6539\u9ed8\u8ba4\u914d\u7f6e\u3002\n\n\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u8fd9\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u6f14\u793a\u5982\u4f55\u4ece\u8fd9\u4e2aGrove - Dust\u4f20\u611f\u5668\u83b7\u53d6PM\u6d53\u5ea6\u6570\u636e\u3002\n\n\n\u5c06Dust\u4f20\u611f\u5668\u63d2\u5165Grove-\nBaseShield\n \u6570\u5b57\u7aef\u53e3 \nD8\n \u5e76\u4e14\u5b83\u53ea\u80fd\u662f\u901a\u8fc7D8\u63a5\u53e3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4f20\u611f\u5668\u7684\u64cd\u4f5c\u6d89\u53ca\u91c7\u6837\u3002 \u6b64\u529f\u80fd\u53ea\u80fd\u901a\u8fc7Arduino / Seeeduino\u4e0aATmega328P\u7684\u8f93\u5165\u5f15\u811aD8\u6765\u5b9e\u73b0\u3002\n\n\n\n\n\n\n\n\nArduino UNO\n\n\nDust Sensor Pin\n\n\nCable Color\n\n\n\n\n\n\n\n\n\n\n5V\n\n\nPin 3\n\n\n\u7ea2\u7ebf\n\n\n\n\n\n\nGND\n\n\nPin 1\n\n\n\u9ed1\u7ebf\n\n\n\n\n\n\nD8\n\n\nPin 4\n\n\n\u9ec4\u7ebf\n\n\n\n\n\n\n\n\nGrove\u8fde\u63a5\u7ebf\u5305\u542b\u5728Grove Dust Sensor\u5c01\u88c5\u4e2d\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528Dupont Line\u53bb\u8fde\u63a5Base Shield\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u5c06Grove - Dust\u4f20\u611f\u5668\u8fde\u63a5\u5230Arduino UNO\uff0c\u800c\u4e0d\u9700\u8981Base Shield\u3002\n\n\n\u8f6f\u4ef6\u7a0b\u5e8f\n\n\n\u5c06\u4e0b\u9762\u7684\u6f14\u793a\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230Arduino IDE\u4e0a\u3002\n\n\n/*\n\n\nGrove - Dust Sensor Demo v1.0\n\n\n Interface to Shinyei Model PPD42NS Particle Sensor\n\n\n Program by Christopher Nafis\n\n\n Written April 2012\n\n\n\n http://www.seeedstudio.com/depot/grove-dust-sensor-p-1050.html\n\n\n http://www.sca-shinyei.com/pdf/PPD42NS.pdf\n\n\n\n JST Pin 1 (Black Wire)  =\ngt; //Arduino GND\n\n\n JST Pin 3 (Red wire)    =\ngt; //Arduino 5VDC\n\n\n JST Pin 4 (Yellow wire) =\ngt; //Arduino Digital Pin 8\n\n\n */\n\n\n\nint\n \npin\n \n=\n \n8\n;\n\n\nunsigned\n \nlong\n \nduration\n;\n\n\nunsigned\n \nlong\n \nstarttime\n;\n\n\nunsigned\n \nlong\n \nsampletime_ms\n \n=\n \n2000\n;\n//sampe 30s\nnbsp;;\n\n\nunsigned\n \nlong\n \nlowpulseoccupancy\n \n=\n \n0\n;\n\n\nfloat\n \nratio\n \n=\n \n0\n;\n\n\nfloat\n \nconcentration\n \n=\n \n0\n;\n\n\n\nvoid\n \nsetup\n()\n \n{\n\n  \nSerial\n.\nbegin\n(\n9600\n);\n\n  \npinMode\n(\n8\n,\nINPUT\n);\n\n  \nstarttime\n \n=\n \nmillis\n();\n//get the current time;\n\n\n}\n\n\n\nvoid\n \nloop\n()\n \n{\n\n  \nduration\n \n=\n \npulseIn\n(\npin\n,\n \nLOW\n);\n\n  \nlowpulseoccupancy\n \n=\n \nlowpulseoccupancy\n+\nduration\n;\n\n\n  \nif\n \n((\nmillis\n()\n-\nstarttime\n)\n \n=\n \nsampletime_ms\n)\n//if the sampel time = = 30s\n\n  \n{\n\n    \nratio\n \n=\n \nlowpulseoccupancy\n/\n(\nsampletime_ms\n*\n10.0\n);\n  \n// Integer percentage 0=\ngt;100\n\n    \nconcentration\n \n=\n \n1.1\n*\npow\n(\nratio\n,\n3\n)\n-\n3.8\n*\npow\n(\nratio\n,\n2\n)\n+\n520\n*\nratio\n+\n0.62\n;\n \n// using spec sheet curve\n\n    \nSerial\n.\nprint\n(\nconcentration = \n);\n\n    \nSerial\n.\nprint\n(\nconcentration\n);\n\n    \nSerial\n.\nprintln\n(\n pcs/0.01cf\n);\n\n    \nSerial\n.\nprintln\n(\n\\n\n);\n\n    \nlowpulseoccupancy\n \n=\n \n0\n;\n\n    \nstarttime\n \n=\n \nmillis\n();\n\n  \n}\n\n\n}\n\n\n\n\n\n\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0cSeeeduino\u572830\u79d2\u5185\u5bf9\u201c\u903b\u8f91\u4f4e\u201d\u7684\u603b\u6301\u7eed\u65f6\u95f4\u8fdb\u884c\u4e86\u91c7\u6837\uff0c\u8fd9\u4e2a\u65f6\u95f4\u8868\u793a\u4e86\u73af\u5883\u7684\u7070\u5c18\u6d53\u5ea6\u3002 \u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecePC\u7684\u4e32\u884c\u7aef\u53e3\u4e2d\u83b7\u53d6\u4f20\u611f\u5668\u68c0\u6d4b\u5230\u7684\u7a7a\u6c14\u8d28\u91cf\u503c\u3002\n\n\n\n\n\"lowpulseoccupancy\"\n \u8868\u793a\u572830\u79d2\u5185\u68c0\u6d4b\u5230\u7684\u4f4e\u8109\u51b2\u5360\u7528\u65f6\u95f4\uff08LPO\u65f6\u95f4\uff09\u3002 \u5355\u4f4d\u662f\u5fae\u79d2\u3002\n\n\n\"ratio\"\n \u53cd\u6620\u4e86\u54ea\u4e2a\u7ea7\u522b\u7684LPO\u65f6\u95f4\u5360\u7528\u4e86\u6574\u4e2a\u7684\u91c7\u6837\u65f6\u95f4\u3002\n\n\n\"concentration\"\n \u662f\u4e00\u4e2a\u6709\u7269\u7406\u610f\u4e49\u7684\u6570\u5b57\u3002 \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u7279\u5f81\u56fe\u6765\u5f97\u51faLPO\u65f6\u95f4\u3002\n\n\n\n\u4ee5\u4e0b\u662f\u529e\u516c\u5ba4\u6d4b\u91cf\u7684\u7c89\u5c18\u6d53\u5ea6\u56fe\uff1a\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u665a\u4e0a\u7684\u5c18\u57c3\u6d53\u5ea6\u5f88\u4f4e\uff0c\u4f46\u662f\u4e0b\u5348\u8f83\u9ad8\u3002 \u5f53\u6d53\u5ea6\u9ad8\u4e8e\u67d0\u4e2a\u6570\u503c\u65f6\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bbe\u7f6e\u9608\u503c\u3002 \u6b64\u5916\uff0c\u5982\u679c\u8981\u8bbe\u7f6e\u4f20\u611f\u5668\u66f4\u654f\u611f\uff0c\u53ef\u4ee5\u5728\u4f20\u611f\u5668\u4e0a\u6dfb\u52a0\u98ce\u6247\uff0c\u5e76\u5728Pin5\u548cGround\u4e4b\u95f4\u6dfb\u52a0\u4e00\u4e2a10k\u03a9\u7684\u7535\u963b\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u8bbf\u95ee \nblog of A.J\n.\n\n\n\u76f8\u5173\u9879\u76ee\n\n\nIf you want to make some awesome projects by Grove - Dust Sensor, here is a project for reference.\n\n\nAir Quality Box\n\n\n\n\nThis section an IoT demo made by Seeeduino and \nGrove\n.\n\n\nMore attention is being paid to the environmental air quality nowadays because the tiny particles in the air around can badly endanger people\u2019s health. We always get the information of environment from our government department. But it\u2019s the average value of the whole city/section. It can not reflect the environment around you accurately.\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[Datasheet]\n \nGrove-Dust_sensor datasheet\n\n\n[Datasheet]\n \nDe-construction of the Shinyei PPD42NS dust sensor Made by Tracy Allen\n\n\n[Demo]\nBuilding a low-cost networked PM2.5 monitor\n -- Made by A.J.\n\n\n[Demo]\n \nMeasuring the Pickle Jr. \u2013 a modified PPD42 with an attached fan.\n -- Made by A.J.\n\n\n[Demo]\n \nTesting the Shinyei PPD42NS\n -- Made by darell tan\n\n\n[Demo]\n \nAir Quality Monitoring\n -- Made by Chris Nafis", 
            "title": "Grove-Dust_Sensor"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_1", 
            "text": "\u8be5\u4f20\u611f\u5668\u80fd\u591f\u7a33\u5b9a\u548c\u7075\u654f\u7684\u68c0\u6d4b\u4e0d\u4ec5\u662f\u70df\u8349\u70df\u96fe\u7684\u6d53\u5ea6\uff0c\u8fd8\u6709\u5ba4\u5185\u4f1a\u5f15\u8d77\u54ee\u5598\u7684\u5c18\u57c3\u3002  \u4f7f\u7528\u5185\u7f6e\u7684\u7a7a\u6c14\u52a0\u70ed\u88c5\u7f6e\u8fbe\u5230\u81ea\u6211\u5438\u6c14\u7684\u529f\u80fd\u3002  \u7ef4\u62a4\u65b9\u4fbf\uff0c\u80fd\u591f\u4fdd\u6301\u9ad8\u7075\u654f\u5ea6\u7684\u957f\u671f\u4f7f\u7528\u3002  \u80fd\u591f\u8f93\u51fa\u8d85\u8fc71\u5fae\u7c73\u548c2.5\u5fae\u7c73\uff08\u5927\u7ea6\uff09\u7684\u7c92\u5ea6\u3002  \u66f4\u7d27\u51d1\u8f7b\u5de7\uff0c\u5b89\u88c5\u65b9\u4fbf\u3002    Note  \u5728\u6700\u65b0\u7248\u672c\u4e2d\uff0c\u8f93\u51fa\u9ad8\u7535\u538b\u4ece4.0V\u53d8\u4e3a4.5V\u3002    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_2", 
            "text": "\u9879\u76ee  \u6807\u51c6\u89c4\u683c  \u5355\u4f4d      VCC  4.75~5.75  V    \u5f85\u673a\u7535\u6e90  90  mA    \u53ef\u68c0\u6d4b\u6d53\u5ea6\u8303\u56f4  0~28,000 / 0 ~ 8000  pcs/liter / pcs/0.01cf    \u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4  0~45  \u00b0C    \u8f93\u51fa\u65b9\u5f0f  Negative Logic, Digital output, High: over 4.0V(Rev.2), Low: under 0.7V  -    \u68c0\u6d4b\u7c92\u5f84  1  \u03bcm    \u5916\u5f62\u5c3a\u5bf8  59(W) \u00d7 45(H) \u00d7 22(D)  mm    \u6e7f\u5ea6\u8303\u56f4  95\uff05rh\u4ee5\u4e0b  -", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_4", 
            "text": "\u7a7a\u6c14\u51c0\u5316\u5668  \u7a7a\u6c14\u8d28\u91cf\u76d1\u6d4b  \u51b7\u6c14\u673a  \u547c\u5438\u673a", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_5", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_6", 
            "text": "\u8bf7\u4fdd\u6301\u76f4\u7acb\u3002  \u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\u9700\u89813\u5206\u949f\u7684\u9884\u70ed\u65f6\u95f4\u3002  \u4efb\u610f\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u5916\u7684\u635f\u574f\u3002  \u4ee5\u4e0b\u5c0f\u90e8\u4ef6\uff08\u6807\u6709\u7ea2\u8272\u77e9\u5f62\u7684\uff09\u4ec5\u7528\u4e8e\u51fa\u5382\u8bbe\u7f6e\u3002 \u8bf7  \u4e0d\u8981  \u66f4\u6539\u9ed8\u8ba4\u914d\u7f6e\u3002", 
            "title": "\u6ce8\u610f\u4e8b\u9879"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_7", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u6f14\u793a\u5982\u4f55\u4ece\u8fd9\u4e2aGrove - Dust\u4f20\u611f\u5668\u83b7\u53d6PM\u6d53\u5ea6\u6570\u636e\u3002  \u5c06Dust\u4f20\u611f\u5668\u63d2\u5165Grove- BaseShield  \u6570\u5b57\u7aef\u53e3  D8  \u5e76\u4e14\u5b83\u53ea\u80fd\u662f\u901a\u8fc7D8\u63a5\u53e3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4f20\u611f\u5668\u7684\u64cd\u4f5c\u6d89\u53ca\u91c7\u6837\u3002 \u6b64\u529f\u80fd\u53ea\u80fd\u901a\u8fc7Arduino / Seeeduino\u4e0aATmega328P\u7684\u8f93\u5165\u5f15\u811aD8\u6765\u5b9e\u73b0\u3002     Arduino UNO  Dust Sensor Pin  Cable Color      5V  Pin 3  \u7ea2\u7ebf    GND  Pin 1  \u9ed1\u7ebf    D8  Pin 4  \u9ec4\u7ebf     Grove\u8fde\u63a5\u7ebf\u5305\u542b\u5728Grove Dust Sensor\u5c01\u88c5\u4e2d\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528Dupont Line\u53bb\u8fde\u63a5Base Shield\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002  \u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u5c06Grove - Dust\u4f20\u611f\u5668\u8fde\u63a5\u5230Arduino UNO\uff0c\u800c\u4e0d\u9700\u8981Base Shield\u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_8", 
            "text": "\u5c06\u4e0b\u9762\u7684\u6f14\u793a\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230Arduino IDE\u4e0a\u3002  /*  Grove - Dust Sensor Demo v1.0   Interface to Shinyei Model PPD42NS Particle Sensor   Program by Christopher Nafis   Written April 2012   http://www.seeedstudio.com/depot/grove-dust-sensor-p-1050.html   http://www.sca-shinyei.com/pdf/PPD42NS.pdf   JST Pin 1 (Black Wire)  = gt; //Arduino GND   JST Pin 3 (Red wire)    = gt; //Arduino 5VDC   JST Pin 4 (Yellow wire) = gt; //Arduino Digital Pin 8   */  int   pin   =   8 ;  unsigned   long   duration ;  unsigned   long   starttime ;  unsigned   long   sampletime_ms   =   2000 ; //sampe 30s nbsp;;  unsigned   long   lowpulseoccupancy   =   0 ;  float   ratio   =   0 ;  float   concentration   =   0 ;  void   setup ()   { \n   Serial . begin ( 9600 ); \n   pinMode ( 8 , INPUT ); \n   starttime   =   millis (); //get the current time;  }  void   loop ()   { \n   duration   =   pulseIn ( pin ,   LOW ); \n   lowpulseoccupancy   =   lowpulseoccupancy + duration ; \n\n   if   (( millis () - starttime )   =   sampletime_ms ) //if the sampel time = = 30s \n   { \n     ratio   =   lowpulseoccupancy / ( sampletime_ms * 10.0 );    // Integer percentage 0= gt;100 \n     concentration   =   1.1 * pow ( ratio , 3 ) - 3.8 * pow ( ratio , 2 ) + 520 * ratio + 0.62 ;   // using spec sheet curve \n     Serial . print ( concentration =  ); \n     Serial . print ( concentration ); \n     Serial . println (  pcs/0.01cf ); \n     Serial . println ( \\n ); \n     lowpulseoccupancy   =   0 ; \n     starttime   =   millis (); \n   }  }   \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0cSeeeduino\u572830\u79d2\u5185\u5bf9\u201c\u903b\u8f91\u4f4e\u201d\u7684\u603b\u6301\u7eed\u65f6\u95f4\u8fdb\u884c\u4e86\u91c7\u6837\uff0c\u8fd9\u4e2a\u65f6\u95f4\u8868\u793a\u4e86\u73af\u5883\u7684\u7070\u5c18\u6d53\u5ea6\u3002 \u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecePC\u7684\u4e32\u884c\u7aef\u53e3\u4e2d\u83b7\u53d6\u4f20\u611f\u5668\u68c0\u6d4b\u5230\u7684\u7a7a\u6c14\u8d28\u91cf\u503c\u3002   \"lowpulseoccupancy\"  \u8868\u793a\u572830\u79d2\u5185\u68c0\u6d4b\u5230\u7684\u4f4e\u8109\u51b2\u5360\u7528\u65f6\u95f4\uff08LPO\u65f6\u95f4\uff09\u3002 \u5355\u4f4d\u662f\u5fae\u79d2\u3002  \"ratio\"  \u53cd\u6620\u4e86\u54ea\u4e2a\u7ea7\u522b\u7684LPO\u65f6\u95f4\u5360\u7528\u4e86\u6574\u4e2a\u7684\u91c7\u6837\u65f6\u95f4\u3002  \"concentration\"  \u662f\u4e00\u4e2a\u6709\u7269\u7406\u610f\u4e49\u7684\u6570\u5b57\u3002 \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u7279\u5f81\u56fe\u6765\u5f97\u51faLPO\u65f6\u95f4\u3002  \u4ee5\u4e0b\u662f\u529e\u516c\u5ba4\u6d4b\u91cf\u7684\u7c89\u5c18\u6d53\u5ea6\u56fe\uff1a   \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u665a\u4e0a\u7684\u5c18\u57c3\u6d53\u5ea6\u5f88\u4f4e\uff0c\u4f46\u662f\u4e0b\u5348\u8f83\u9ad8\u3002 \u5f53\u6d53\u5ea6\u9ad8\u4e8e\u67d0\u4e2a\u6570\u503c\u65f6\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bbe\u7f6e\u9608\u503c\u3002 \u6b64\u5916\uff0c\u5982\u679c\u8981\u8bbe\u7f6e\u4f20\u611f\u5668\u66f4\u654f\u611f\uff0c\u53ef\u4ee5\u5728\u4f20\u611f\u5668\u4e0a\u6dfb\u52a0\u98ce\u6247\uff0c\u5e76\u5728Pin5\u548cGround\u4e4b\u95f4\u6dfb\u52a0\u4e00\u4e2a10k\u03a9\u7684\u7535\u963b\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u8bbf\u95ee  blog of A.J .", 
            "title": "\u8f6f\u4ef6\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_9", 
            "text": "If you want to make some awesome projects by Grove - Dust Sensor, here is a project for reference.", 
            "title": "\u76f8\u5173\u9879\u76ee"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#air-quality-box", 
            "text": "This section an IoT demo made by Seeeduino and  Grove .  More attention is being paid to the environmental air quality nowadays because the tiny particles in the air around can badly endanger people\u2019s health. We always get the information of environment from our government department. But it\u2019s the average value of the whole city/section. It can not reflect the environment around you accurately.", 
            "title": "Air Quality Box"
        }, 
        {
            "location": "/Grove-Dust_Sensor/#_10", 
            "text": "[Datasheet]   Grove-Dust_sensor datasheet  [Datasheet]   De-construction of the Shinyei PPD42NS dust sensor Made by Tracy Allen  [Demo] Building a low-cost networked PM2.5 monitor  -- Made by A.J.  [Demo]   Measuring the Pickle Jr. \u2013 a modified PPD42 with an attached fan.  -- Made by A.J.  [Demo]   Testing the Shinyei PPD42NS  -- Made by darell tan  [Demo]   Air Quality Monitoring  -- Made by Chris Nafis", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Air_Quality_Sensor_v1.3/", 
            "text": "\u8be5\u4f20\u611f\u5668\u662f\u4e3a\u5ba4\u5185\u7a7a\u6c14\u72b6\u51b5\u8fdb\u884c\u7efc\u5408\u76d1\u63a7\u800c\u4e13\u95e8\u8bbe\u8ba1\u7684\u3002 \u5b83\u53ef\u68c0\u6d4b\u591a\u79cd\u6709\u5bb3\u6c14\u4f53\uff0c\u5982\u4e00\u6c27\u5316\u78b3\uff0c\u9152\u7cbe\uff0c\u4e19\u916e\uff0c\u7a00\u91ca\u5242\uff0c\u7532\u919b\u7b49\u3002 \u7531\u4e8e\u6d4b\u91cf\u673a\u5236\u7684\u9650\u5236\uff0c\u8be5\u4f20\u611f\u5668\u4e0d\u80fd\u8f93\u51fa\u7279\u5b9a\u7684\u6570\u636e\u6765\u5b9a\u91cf\u63cf\u8ff0\u76ee\u6807\u6c14\u4f53\u7684\u6d53\u5ea6\u3002 \u4f46\u662f\u5b83\u4ecd\u7136\u8db3\u591f\u7528\u4e8e\u4ec5\u9700\u8981\u5b9a\u6027\u7ed3\u679c\u7684\u5e94\u7528\uff0c\u5982\u6c7d\u8f66\u6e05\u65b0\u55b7\u96fe\u5668\u548c\u81ea\u52a8\u7a7a\u6c14\u5faa\u73af\u7cfb\u7edf\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u80fd\u591f\u8bc6\u522b\u591a\u79cd\u76ee\u6807\u6c14\u4f53\n\n\n\u9ad8\u6027\u4ef7\u6bd4\n\n\n\u8010\u7528\n\n\n\u517c\u5bb95V\u548c3.3V\n\n\n\n\n\n\nCautions\n\n\n\n\n\u9700\u8981\u76f8\u5bf9\u5e72\u51c0\u7684\u7a7a\u6c14\u4f5c\u4e3a\u521d\u59cb\u72b6\u6001\u3002\n\n\n\u957f\u65f6\u95f4\u66b4\u9732\u4e8e\u9ad8\u5ea6\u6c61\u67d3\u7684\u7a7a\u6c14\u53ef\u80fd\u4f1a\u663e\u7740\u524a\u5f31\u5176\u654f\u611f\u6027\u3002\n\n\n\n\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\n\n\u4f7f\u7528Arduino\n\n\n\u5982\u5bfc\u8a00\u4e2d\u6240\u8ff0\uff0c\u8be5\u4f20\u611f\u5668\u5728\u63d0\u4f9b\u591a\u79cd\u7684\u76ee\u6807\u6c14\u4f53\u7684\u5b9a\u6027\u7ed3\u679c\u65b9\u9762\u8868\u73b0\u66f4\u597d\u3002 \u5728\u8fd9\u4e2a\u6f14\u793a\u4e2d\uff0c\u6211\u4eec\u5c06\u5728'.cpp'\u6587\u4ef6\u4e2d\u5b9a\u4e494\u4e2a\u72b6\u6001\u4ee5\u4f9b\u53c2\u8003\u3002 \u4ed6\u4eec\u662f\uff1a\n\n\n\n\na\u3002 \u7a7a\u6c14\u6e05\u65b0 - \u8868\u793a\u826f\u597d\u7684\u7a7a\u8c03\n\n\nb\u3002 \u4f4e\u6c61\u67d3 - \u8868\u660e\u76ee\u6807\u6c14\u4f53\u6d53\u5ea6\u76f8\u5bf9\u8f83\u4f4e\u3002\n\n\nC\u3002 \u9ad8\u6c61\u67d3\uff08\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e0a\u6ca1\u6709\u201c\u5f3a\u5236\u4fe1\u53f7\u6709\u6548\u201d\u4fe1\u606f\uff09 - \u60a8\u5e94\u8be5\u4e86\u89e3\u6c61\u67d3\u6c34\u5e73\uff0c\u5e76\u8003\u8651\u662f\u5426\u91c7\u53d6\u67d0\u4e9b\u63aa\u65bd\u3002\n\n\nd\u3002 \u9ad8\u6c61\u67d3\uff08\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e0a\u5370\u6709\u201c\u5f3a\u5236\u4fe1\u53f7\u6709\u6548\u201d\u4fe1\u606f\uff09 - \u91c7\u53d6\u5373\u65f6\u63aa\u65bd\u63d0\u9ad8\u7a7a\u6c14\u8d28\u91cf\u3002\n\n\n\n\n\u6211\u4eec\u5c06\u51b3\u7b56\u7ed3\u6784\u5c01\u88c5\u5728\u201c.cpp\u201d\u6587\u4ef6\u4e2d\u3002 \u60a8\u53ef\u4ee5\u5728\u6b64\u627e\u5230\u6709\u5173\u5982\u4f55\u4fee\u6539\u9608\u503c\u7684\u4fe1\u606f\u3002\n\n\n\u8ba9\u6211\u4eec\u8bd5\u8bd5\u5427\uff01\n\n\n1.\u5c06\u4f20\u611f\u5668\u8fde\u63a5\u5230 \nGrove - Base Shield\n \u7684 \nA0\n \u7aef\u53e3\u3002\n\n\n\n\n2.\u4e0b\u8f7d\u5e93\u6587\u4ef6 : \nAirQuality_Sensor Library\n.\n\n\n3.\u6253\u5f00\u4f20\u611f\u5668\u52a0\u70ed\u540e\u7b49\u5f85\u81f3\u5c112\u5206\u949f\u3002 \u7136\u540e\u901a\u8fc7\u4ee5\u4e0b\u8def\u5f84\u6253\u5f00\u793a\u4f8b\uff1aFile(\u6587\u4ef6) - \nExample(\u793a\u4f8b) - \n AirQuality_Sensor-\n AirQuality_Sensor\u3002\n\n/*\nAirQuality Demo V1.0.\nconnect to A1 to start testing. it will needs about 20s to start\n* By: http://www.seeedstudio.com\n*/\n#include \nAirQuality.h\n\n#include \nArduino.h\n\nAirQuality airqualitysensor;\nint current_quality =-1;\nvoid setup()\n{\n    Serial.begin(9600);\n    airqualitysensor.init(14);\n}\nvoid loop()\n{\n    current_quality=airqualitysensor.slope();\n    if (current_quality \n= 0)// if a valid data returned.\n    {\n        if (current_quality==0)\n        Serial.println(\nHigh pollution! Force signal active\n);\n        else if (current_quality==1)\n        Serial.println(\nHigh pollution!\n);\n        else if (current_quality==2)\n        Serial.println(\nLow pollution!\n);\n        else if (current_quality ==3)\n        Serial.println(\nFresh air\n);\n    }\n}\nISR(TIMER2_OVF_vect)\n{\n    if(airqualitysensor.counter==122)//set 2 seconds as a detected duty\n    {\n\n        airqualitysensor.last_vol=airqualitysensor.first_vol;\n        airqualitysensor.first_vol=analogRead(A0); // change this value if you use another A port\n        airqualitysensor.counter=0;\n        airqualitysensor.timer_index=1;\n        PORTB=PORTB^0x20;\n    }\n    else\n    {\n        airqualitysensor.counter++;\n    }\n}\n\n\n\n4.\u4e0a\u4f20\u4ee3\u7801\n\n\n5.\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u3002\n\n\n\n\n\u8981\u8c03\u6574\u9608\u503c\u548c\u6307\u793a\u6d88\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684.cpp\u6587\u4ef6\u4e2d\u7684\u51b3\u7b56\u7ed3\u6784\u3002\n\n\nint AirQuality::slope(void)\n{\n    while(timer_index)\n    {\n        if(first_vol-last_vol\n400||first_vol\n700)\n        {\n            Serial.println(\nHigh pollution! Force signal active.\n);\n            timer_index=0;\n            avg_voltage();\n            return 0;\n\n        }\n        else if((first_vol-last_vol\n400\nfirst_vol\n700)||first_vol-vol_standard\n150)\n        {\n            Serial.print(\nsensor_value:\n);\n            Serial.print(first_vol);\n            Serial.println(\n\\t High pollution!\n);\n            timer_index=0;\n            avg_voltage();\n            return 1;\n\n        }\n        else if((first_vol-last_vol\n200\nfirst_vol\n700)||first_vol-vol_standard\n50)\n        {\n            //Serial.println(first_vol-last_vol);\n            Serial.print(\nsensor_value:\n);\n            Serial.print(first_vol);\n            Serial.println(\n\\t Low pollution!\n);\n            timer_index=0;\n            avg_voltage();\n            return 2;\n        }\n        else\n        {\n            avg_voltage();\n            Serial.print(\nsensor_value:\n);\n            Serial.print(first_vol);\n            Serial.println(\n\\t Air fresh\n);\n            timer_index=0;\n            return 3;\n        }\n    }\n    return -1;\n}\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n1.\u4f60\u9700\u8981\u51c6\u5907\u4e00\u4e2aRaspberry pi\u548cgrovepi\u6216grovepi +\u3002\n\n\n2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0cGrovepi+ \u914d\u7f6e\u8bf7\u53c2\u8003 \n\u8bf4\u660e\n \u3002\n\n\n3.\u786c\u4ef6\u8fde\u63a5\n- \u901a\u8fc7grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7 \nA0\n\u3002\n\n\n4.\u8df3\u8f6c\u5230\u793a\u4f8b\u76ee\u5f55\uff1a\n\n\ncd yourpath/GrovePi/Software/Python/\n\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n\n   nano grove_air_quality_sensor.py   # \nCtrl+x\n to exit #\n\n\n\n\nimport time\nimport grovepi\n\n# Connect the Grove Air Quality Sensor to analog port A0\n# SIG,NC,VCC,GND\nair_sensor = 0\n\ngrovepi.pinMode(air_sensor,\nINPUT\n)\n\nwhile True:\n    try:\n        # Get sensor value\n        sensor_value = grovepi.analogRead(air_sensor)\n\n        if sensor_value \n 700:\n            print \nHigh pollution\n\n        elif sensor_value \n 300:\n            print \nLow pollution\n\n        else:\n            print \nAir fresh\n\n\n        print \nsensor_value =\n, sensor_value\n        time.sleep(.5)\n\n    except IOError:\n        print \nError\n\n\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n\n   sudo python grove_air_quality_sensor.py\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\nAirQuality Sensor Library.zip\n\n\nGrove_-_Air_quality_sensor_v1.3_sch_pcb.zip\n\n\nGrove_-_Air_quality_sensor_v1.3_sch.pdf\n\n\nAir_quality_sensor_MP503_Chinese.pdf\n\n\nAir_quality sensor_MP503_English.pdf", 
            "title": "Grove-Air_Quality_Sensor_v1.3"
        }, 
        {
            "location": "/Grove-Air_Quality_Sensor_v1.3/#_1", 
            "text": "\u80fd\u591f\u8bc6\u522b\u591a\u79cd\u76ee\u6807\u6c14\u4f53  \u9ad8\u6027\u4ef7\u6bd4  \u8010\u7528  \u517c\u5bb95V\u548c3.3V    Cautions   \u9700\u8981\u76f8\u5bf9\u5e72\u51c0\u7684\u7a7a\u6c14\u4f5c\u4e3a\u521d\u59cb\u72b6\u6001\u3002  \u957f\u65f6\u95f4\u66b4\u9732\u4e8e\u9ad8\u5ea6\u6c61\u67d3\u7684\u7a7a\u6c14\u53ef\u80fd\u4f1a\u663e\u7740\u524a\u5f31\u5176\u654f\u611f\u6027\u3002", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Air_Quality_Sensor_v1.3/#_2", 
            "text": "\u4f7f\u7528Arduino  \u5982\u5bfc\u8a00\u4e2d\u6240\u8ff0\uff0c\u8be5\u4f20\u611f\u5668\u5728\u63d0\u4f9b\u591a\u79cd\u7684\u76ee\u6807\u6c14\u4f53\u7684\u5b9a\u6027\u7ed3\u679c\u65b9\u9762\u8868\u73b0\u66f4\u597d\u3002 \u5728\u8fd9\u4e2a\u6f14\u793a\u4e2d\uff0c\u6211\u4eec\u5c06\u5728'.cpp'\u6587\u4ef6\u4e2d\u5b9a\u4e494\u4e2a\u72b6\u6001\u4ee5\u4f9b\u53c2\u8003\u3002 \u4ed6\u4eec\u662f\uff1a   a\u3002 \u7a7a\u6c14\u6e05\u65b0 - \u8868\u793a\u826f\u597d\u7684\u7a7a\u8c03  b\u3002 \u4f4e\u6c61\u67d3 - \u8868\u660e\u76ee\u6807\u6c14\u4f53\u6d53\u5ea6\u76f8\u5bf9\u8f83\u4f4e\u3002  C\u3002 \u9ad8\u6c61\u67d3\uff08\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e0a\u6ca1\u6709\u201c\u5f3a\u5236\u4fe1\u53f7\u6709\u6548\u201d\u4fe1\u606f\uff09 - \u60a8\u5e94\u8be5\u4e86\u89e3\u6c61\u67d3\u6c34\u5e73\uff0c\u5e76\u8003\u8651\u662f\u5426\u91c7\u53d6\u67d0\u4e9b\u63aa\u65bd\u3002  d\u3002 \u9ad8\u6c61\u67d3\uff08\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e0a\u5370\u6709\u201c\u5f3a\u5236\u4fe1\u53f7\u6709\u6548\u201d\u4fe1\u606f\uff09 - \u91c7\u53d6\u5373\u65f6\u63aa\u65bd\u63d0\u9ad8\u7a7a\u6c14\u8d28\u91cf\u3002   \u6211\u4eec\u5c06\u51b3\u7b56\u7ed3\u6784\u5c01\u88c5\u5728\u201c.cpp\u201d\u6587\u4ef6\u4e2d\u3002 \u60a8\u53ef\u4ee5\u5728\u6b64\u627e\u5230\u6709\u5173\u5982\u4f55\u4fee\u6539\u9608\u503c\u7684\u4fe1\u606f\u3002  \u8ba9\u6211\u4eec\u8bd5\u8bd5\u5427\uff01  1.\u5c06\u4f20\u611f\u5668\u8fde\u63a5\u5230  Grove - Base Shield  \u7684  A0  \u7aef\u53e3\u3002   2.\u4e0b\u8f7d\u5e93\u6587\u4ef6 :  AirQuality_Sensor Library .  3.\u6253\u5f00\u4f20\u611f\u5668\u52a0\u70ed\u540e\u7b49\u5f85\u81f3\u5c112\u5206\u949f\u3002 \u7136\u540e\u901a\u8fc7\u4ee5\u4e0b\u8def\u5f84\u6253\u5f00\u793a\u4f8b\uff1aFile(\u6587\u4ef6) -  Example(\u793a\u4f8b) -   AirQuality_Sensor-  AirQuality_Sensor\u3002 /*\nAirQuality Demo V1.0.\nconnect to A1 to start testing. it will needs about 20s to start\n* By: http://www.seeedstudio.com\n*/\n#include  AirQuality.h \n#include  Arduino.h \nAirQuality airqualitysensor;\nint current_quality =-1;\nvoid setup()\n{\n    Serial.begin(9600);\n    airqualitysensor.init(14);\n}\nvoid loop()\n{\n    current_quality=airqualitysensor.slope();\n    if (current_quality  = 0)// if a valid data returned.\n    {\n        if (current_quality==0)\n        Serial.println( High pollution! Force signal active );\n        else if (current_quality==1)\n        Serial.println( High pollution! );\n        else if (current_quality==2)\n        Serial.println( Low pollution! );\n        else if (current_quality ==3)\n        Serial.println( Fresh air );\n    }\n}\nISR(TIMER2_OVF_vect)\n{\n    if(airqualitysensor.counter==122)//set 2 seconds as a detected duty\n    {\n\n        airqualitysensor.last_vol=airqualitysensor.first_vol;\n        airqualitysensor.first_vol=analogRead(A0); // change this value if you use another A port\n        airqualitysensor.counter=0;\n        airqualitysensor.timer_index=1;\n        PORTB=PORTB^0x20;\n    }\n    else\n    {\n        airqualitysensor.counter++;\n    }\n}  4.\u4e0a\u4f20\u4ee3\u7801  5.\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u3002   \u8981\u8c03\u6574\u9608\u503c\u548c\u6307\u793a\u6d88\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684.cpp\u6587\u4ef6\u4e2d\u7684\u51b3\u7b56\u7ed3\u6784\u3002  int AirQuality::slope(void)\n{\n    while(timer_index)\n    {\n        if(first_vol-last_vol 400||first_vol 700)\n        {\n            Serial.println( High pollution! Force signal active. );\n            timer_index=0;\n            avg_voltage();\n            return 0;\n\n        }\n        else if((first_vol-last_vol 400 first_vol 700)||first_vol-vol_standard 150)\n        {\n            Serial.print( sensor_value: );\n            Serial.print(first_vol);\n            Serial.println( \\t High pollution! );\n            timer_index=0;\n            avg_voltage();\n            return 1;\n\n        }\n        else if((first_vol-last_vol 200 first_vol 700)||first_vol-vol_standard 50)\n        {\n            //Serial.println(first_vol-last_vol);\n            Serial.print( sensor_value: );\n            Serial.print(first_vol);\n            Serial.println( \\t Low pollution! );\n            timer_index=0;\n            avg_voltage();\n            return 2;\n        }\n        else\n        {\n            avg_voltage();\n            Serial.print( sensor_value: );\n            Serial.print(first_vol);\n            Serial.println( \\t Air fresh );\n            timer_index=0;\n            return 3;\n        }\n    }\n    return -1;\n}  \u4f7f\u7528 Raspberry Pi  1.\u4f60\u9700\u8981\u51c6\u5907\u4e00\u4e2aRaspberry pi\u548cgrovepi\u6216grovepi +\u3002  2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0cGrovepi+ \u914d\u7f6e\u8bf7\u53c2\u8003  \u8bf4\u660e  \u3002  3.\u786c\u4ef6\u8fde\u63a5\n- \u901a\u8fc7grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7  A0 \u3002  4.\u8df3\u8f6c\u5230\u793a\u4f8b\u76ee\u5f55\uff1a  cd yourpath/GrovePi/Software/Python/  \u627e\u5230\u8fd9\u884c\u4ee3\u7801     nano grove_air_quality_sensor.py   #  Ctrl+x  to exit #  import time\nimport grovepi\n\n# Connect the Grove Air Quality Sensor to analog port A0\n# SIG,NC,VCC,GND\nair_sensor = 0\n\ngrovepi.pinMode(air_sensor, INPUT )\n\nwhile True:\n    try:\n        # Get sensor value\n        sensor_value = grovepi.analogRead(air_sensor)\n\n        if sensor_value   700:\n            print  High pollution \n        elif sensor_value   300:\n            print  Low pollution \n        else:\n            print  Air fresh \n\n        print  sensor_value = , sensor_value\n        time.sleep(.5)\n\n    except IOError:\n        print  Error   5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b     sudo python grove_air_quality_sensor.py", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Air_Quality_Sensor_v1.3/#_3", 
            "text": "AirQuality Sensor Library.zip  Grove_-_Air_quality_sensor_v1.3_sch_pcb.zip  Grove_-_Air_quality_sensor_v1.3_sch.pdf  Air_quality_sensor_MP503_Chinese.pdf  Air_quality sensor_MP503_English.pdf", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/", 
            "text": "Grove - \u6c14\u538b\u8ba1\u4f20\u611f\u5668\uff08BMP280\uff09\n \u662fBosch BMP280\u9ad8\u7cbe\u5ea6\u548c\u4f4e\u529f\u8017\u6570\u5b57\u6c14\u538b\u8ba1\u7684\u63a5\u7ebf\u677f\u3002 \u8be5\u6a21\u5757\u53ef\u7528\u4e8e\u7cbe\u786e\u6d4b\u91cf \n\u6e29\u5ea6\n \u548c \n\u5927\u6c14\u538b\u529b\n\u3002 \u968f\u7740\u5927\u6c14\u538b\u529b\u968f\u9ad8\u5ea6\u53d8\u5316\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6d4b\u91cf\u4e00\u4e2a\u5730\u65b9\u7684\u8fd1\u4f3c \n\u9ad8\u5ea6\n \u3002 \u5b83\u53ef\u4ee5\u8fde\u63a5\u5230\u5177\u6709I2C\uff08\u4e0eGrove\u63d2\u69fd\u96c6\u6210\uff09\u6216\u901a\u8fc7SPI\u603b\u7ebf\u7684\u5fae\u63a7\u5236\u5668\u3002 \u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u9ad8\u5ea6\u62bd\u8c61\u7684\u5e93\uff0c\u4f7f\u6b64\u4ea7\u54c1\u66f4\u6613\u4e8e\u4f7f\u7528\u3002\n\n\nBMP280\u662fBMP180\u7684\u5347\u7ea7\u7248\u3002 BMP280\u6bd4\u8d77BMP180\u6709\u7740\u4e86\u663e\u7740\u7684\u6539\u8fdb\u3002 BMP280\u4f53\u79ef\u66f4\u5c0f\uff0c\u529f\u8017\u66f4\u4f4e\uff0c\u566a\u58f0\u6d4b\u91cf\u66f4\u4f4e\uff0c\u538b\u529b\u548c\u6e29\u5ea6\u66f4\u9ad8\u7684\u5206\u8fa8\u7387\uff0c\u66f4\u4f4e\u7684RMS\u566a\u58f0\uff0c\u65b0\u589e\u7684\u63a5\u53e3SPI\uff0c\u66f4\u591a\u7684\u6d4b\u91cf\u6a21\u5f0f\uff0c\u66f4\u9ad8\u7684\u6d4b\u91cf\u901f\u7387\u548c\u65b0\u589e\u7684\u6ee4\u6ce2\u5668\uff0c\u9632\u6b62\u73af\u5883\u5e72\u6270\u3002 \u7531\u4e8e\u5927\u6c14\u538b\u529b\u8bfb\u6570\u53d7\u9ad8\u5ea6\u548c\u6e29\u5ea6\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u5728\u5e93\u4e2d\u589e\u52a0\u4e86\u8865\u507f\u529f\u80fd\u3002 \u56e0\u6b64\uff0cGrove - \u6c14\u538b\u8ba1\u4f20\u611f\u5668\uff08BMP280\uff09\u5728\u63d0\u4f9b\u7cbe\u786e\u7684\u6e29\u5ea6\uff0c\u5927\u6c14\u538b\u529b\u503c\u548c\u8fd1\u4f3c\u9ad8\u5ea6\u6570\u636e\u65b9\u9762\u5c06\u66f4\u52a0\u53ef\u9760\u3002\n\n\n\u8fd9\u4e2a\u4f20\u611f\u5668\u6613\u4e8e\u4f7f\u7528\u3002 \u5bf9\u4e8e\nSeeeduino\n\uff08\u517c\u5bb9Arduino\uff09\uff0c\u53ea\u9700\u4f7f\u7528\nGrove cable\n \u5230I2C Grove\u8fde\u63a5\u5668\u3002 \u7136\u540e\uff0c\u4f7f\u7528GitHub\u63d0\u4f9b\u7684\u5e93\u548c\u793a\u4f8b\u4ee3\u7801\u3002 \u5982\u679c\u60a8\u4f7f\u7528Arduino\uff0c\u8bf7\u4f7f\u7528Base Shield v2.0\u6216\u7b80\u5355\u5730\u5c06VCC\u5f15\u811a\u8fde\u63a5\u52305V\u7535\u538b\u5f15\u811a\uff0cGND\u63a5\u5730\uff0cSCL\u81f3I2C\u65f6\u949f\uff08\u6a21\u62df5\uff09\u548cSDA\u81f3I2C\u6570\u636e\uff08\u6a21\u62df4\uff09\u3002\n\n\n\u5178\u578b\u5e94\u7528\uff1a\u589e\u5f3aGPS\u5bfc\u822a\uff0c\u6237\u5916/\u5ba4\u5185\u5bfc\u822a\uff0c\u5929\u6c14\u9884\u62a5\u6216\u4efb\u4f55\u5176\u4ed6\u9700\u8981\u7cbe\u786e\u5927\u6c14\u538b\u529b\u8bfb\u6570\u7684\u9879\u76ee\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u83b7\u53d6\u66f4\u7cbe\u786e\u7684\u6e29\u5ea6\uff0c\u5927\u6c14\u538b\u529b\u503c\u548c\u8fd1\u4f3c\u7684\u9ad8\u5ea6\u6570\u636e\u3002\n\n\n\u80fd\u591f\u517c\u5bb9Grove\u5e76\u4e14\u6613\u4e8e\u4f7f\u7528\n\n\n\u62bd\u8c61\u7684\u5e93\uff0c\u80fd\u591f\u66f4\u5feb\u5730\u5efa\u8bbe\u9879\u76ee\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u53c2\u6570\u89c4\u683c\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u89c4\u683c\n\n\n\n\n\n\n\n\n\n\n\u8f93\u5165\u7535\u538b\n\n\n3.3V or 5V\n\n\n\n\n\n\nI/O \u53e3\u7535\u538b\n\n\n3.3V or 5V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n0.6mA\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\n\n\n-40 - 85 \u2103\n\n\n\n\n\n\n\u6709\u6548\u538b\u529b\u6d4b\u91cf\u8303\u56f4\n\n\n300\u301c1100 hPa\uff081 hPa = 100 Pa\uff09\uff0c\u7cbe\u5ea6\u4e3a\u00b11.0 hPa\n\n\n\n\n\n\n\u6e29\u5ea6\u6d4b\u91cf\u7cbe\u5ea6\n\n\n\u00b11.0\u00b0C\n\n\n\n\n\n\n\u6d4b\u91cf\u6a21\u5f0f\n\n\nPiezo\u548c Temperature, forced \u6216 periodic\n\n\n\n\n\n\n\u82af\u7247\n\n\nBMP280 (\ndatasheet\n)\n\n\n\n\n\n\n\u91c7\u6837\u9891\u7387\n\n\n182 Hz\uff08\u4e00\u822c\uff09\n\n\n\n\n\n\n\u63a5\u53e3\u603b\u7ebf\n\n\nSPI\uff0cI2C\uff08\u4f7f\u7528\u5176\u4e2d\u4e4b\u4e00\uff09\n\n\n\n\n\n\n\u8d28\u91cf\n\n\n3\u514b\uff08\u63a5\u7ebf\u677f\uff09\n\n\n\n\n\n\n\u5916\u5f62\u5c3a\u5bf8\n\n\n40\uff08\u957f\uff09\u00d720\uff08\u5bbd\uff09 mm\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n 1. \u6211\u4eec\u5c06\u5c3d\u5feb\u5c55\u793a/\u63cf\u8ff0\u5982\u4f55\u9009\u62e9\u63a5\u53e3\u603b\u7ebf\u3002\n\n\n 2. \u9ad8\u5ea6\u7531\u6e29\u5ea6\u548c\u5927\u6c14\u538b\u529b\u7684\u7efc\u5408\u8ba1\u7b97\u5f97\u5230\u3002 \u56e0\u4e3a\u6ca1\u6709\u6d4b\u91cf\u9ad8\u5ea6\u7684\u4e13\u95e8\u7ec4\u4ef6\u3002\n\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\nSPI soldering pads\n\uff0c\u7535\u538b\u76d1\u63a7\u7535\u8def\u3002\n\n\nInterface bus selection pads\n\uff0c\u9009\u62e9I2C\u603b\u7ebf\uff0c\u901a\u8fc7\u710a\u63a5\u8fde\u63a5\u4e24\u4e2a\u710a\u76d8\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fde\u63a5\uff09; \u9009\u62e9SPI\u603b\u7ebf\uff0c\u7528\u950b\u5229\u7684\u5200\u6216\u70d9\u94c1\u5207\u5272\u4e24\u4e2a\u710a\u76d8\u3002\n\n\nSlave board address selection pads\n\uff0c\u9009\u62e9Slave board \u5730\u5740\u4ee5\u907f\u514d\u5730\u5740\u51b2\u7a81\u3002\n\n\n\n\nTips:\n \u60a8\u53ef\u4ee5\u7528\u950b\u5229\u7684\u5200\u5207\u9664\u4e0d\u8981\u7684\u710a\u70b9\u3002\n\n\n\u5982\u679c\u9009\u62e9\u4e86SPI\u603b\u7ebf\uff0c\u5219slave board\u7684\u9ed8\u8ba4\u5730\u5740\u4e3a \n0x77\n\uff08\u53f3\u8fde\u63a5\u4e24\u4e2a\u710a\u76d8\uff09\u3002 \u5982\u679c\u8981\u4f7f\u7528\u5730\u5740 \n0x76\n\uff0c\u8bf7\u65ad\u5f00\u6240\u6709\u4e09\u4e2a\u7684\u710a\u76d8\u3002\n\n\n\n\nNote\n\n\u5de5\u4f5c\u65f6\uff0c\u8bf7\u52ff\u89e6\u6478\u6216\u6447\u6643\u6216\u8ba9\u672c\u4ea7\u54c1\u53d1\u751f\u632f\u52a8\u3002 \u8fd9\u5c06\u9020\u6210\u5e72\u6270\uff0c\u5e76\u4f1a\u5f71\u54cd\u6536\u96c6\u7684\u6570\u636e\u7684\u51c6\u786e\u6027\u3002\n\n\n\n\n\u4ea7\u54c1\u6e05\u5355\n (\u4e3b\u8981\u90e8\u5206)\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6570\u91cf\n\n\n\n\n\n\n\n\n\n\nGrove - Barometer Sensor (BMP280)\n\n\n1 \u7247\n\n\n\n\n\n\nGrove cable\n\n\n1 \u6839\n\n\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u8fd0\u7528\u8fd9\u4e2a\u6a21\u5757\u7684\u4e00\u4e9b\u57fa\u672c\u793a\u4f8b\u3002\n\n\n\u4f7f\u7528 Arduino\n\n\n\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Arduino\u5e73\u53f0\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u9879\u76ee\u3002 \u5373\u4f7f\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u4e3b\u63a7\u677f\uff0c\u8fd9\u4e9b\u6307\u4ee4\u548c\u6e90\u4ee3\u7801\u4e5f\u662f\u6709\u7528\u7684\u3002\n\n\n\u6240\u9700\u6750\u6599\n\n\n\n\nGrove - Barometer Sensor (BMP280) \u00d7 1\n\n\nSeeeduino 4.2\n\uff08\u5b8c\u5168\u517c\u5bb9Arduino\uff09\u6216Arduino UNO \u00d71\uff08\u5176\u4ed6\u578b\u53f7\u4e5f\u5f88\u597d\uff09\n\n\nGrove - Base Shield\n \u00d7 1 \uff08\u5982\u679c\u60a8\u4f7f\u7528Seeeduino\u5728Seeeduino v4.2\u4e0a\u6709\u4e24\u4e2aI2C\u63d2\u5ea7\uff0c\u5219\u662f\u53ef\u9009\u7684\uff09\n\n\nUSB\u7535\u7f06\uff08A\u578b\u81f3B\u578b\uff0c\u9002\u7528\u4e8eArduino\uff09\u00d71\u6216USB\u7535\u7f06\uff08Type-A\u81f3Micro Type-B\uff0cSeeeduino\uff09\u00d71\n\n\nGrove cable\n \u00d7 1\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u5982\u4e0b\u8fde\u63a5\u6240\u6709\u90e8\u5206\uff1a\u7b2c\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e0eSeeeduino\u7684\u8fde\u63a5\uff0c\u7b2c\u4e8c\u5f20\u56fe\u663e\u793a\u4e0eArduino UNO\u7684\u8fde\u63a5\uff1a\n\n\n\n\n\n\n\u7f16\u7801\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \uff0c\u9700\u8981\u7684\u5e93\u8bf7\u70b9\u51fb  \n\u8fd9\u91cc\n\n\n\n\n\n\n\u4f7f\u7528\u5178\u578b\u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \nCodebender\n\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230\u4e3b\u63a7\u677f\u3002\n\n\n\n\n\n\n\n\n\n\n2.\u4e0a\u4f20\u7a0b\u5e8f\u5230\u4f60\u7684Arduino \uff0c\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n\u3002\n\n\nTips:\n \u5982\u679c\u60a8\u4f7f\u7528Seeeduino\uff0c\u8bf7\u5728\u4e0a\u4f20\u5de5\u7a0b\u65f6\u9009\u62e9 \nTool(\u5de5\u5177)\n \u4e0b\u7684 \nBoard(\u5f00\u53d1\u677f)\n\u3002\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nSchematic(Eagle) file\n\n\nBMP280 Datasheet\n\n\nLibrary and example code\n on GitHub\n\n\nI\n2\nC how-to for Arduino", 
            "title": "Grove-Barometer_Sensor-BMP280"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_1", 
            "text": "\u83b7\u53d6\u66f4\u7cbe\u786e\u7684\u6e29\u5ea6\uff0c\u5927\u6c14\u538b\u529b\u503c\u548c\u8fd1\u4f3c\u7684\u9ad8\u5ea6\u6570\u636e\u3002  \u80fd\u591f\u517c\u5bb9Grove\u5e76\u4e14\u6613\u4e8e\u4f7f\u7528  \u62bd\u8c61\u7684\u5e93\uff0c\u80fd\u591f\u66f4\u5feb\u5730\u5efa\u8bbe\u9879\u76ee    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_2", 
            "text": "\u53c2\u6570  \u89c4\u683c      \u8f93\u5165\u7535\u538b  3.3V or 5V    I/O \u53e3\u7535\u538b  3.3V or 5V    \u5de5\u4f5c\u7535\u6d41  0.6mA    \u5de5\u4f5c\u6e29\u5ea6  -40 - 85 \u2103    \u6709\u6548\u538b\u529b\u6d4b\u91cf\u8303\u56f4  300\u301c1100 hPa\uff081 hPa = 100 Pa\uff09\uff0c\u7cbe\u5ea6\u4e3a\u00b11.0 hPa    \u6e29\u5ea6\u6d4b\u91cf\u7cbe\u5ea6  \u00b11.0\u00b0C    \u6d4b\u91cf\u6a21\u5f0f  Piezo\u548c Temperature, forced \u6216 periodic    \u82af\u7247  BMP280 ( datasheet )    \u91c7\u6837\u9891\u7387  182 Hz\uff08\u4e00\u822c\uff09    \u63a5\u53e3\u603b\u7ebf  SPI\uff0cI2C\uff08\u4f7f\u7528\u5176\u4e2d\u4e4b\u4e00\uff09    \u8d28\u91cf  3\u514b\uff08\u63a5\u7ebf\u677f\uff09    \u5916\u5f62\u5c3a\u5bf8  40\uff08\u957f\uff09\u00d720\uff08\u5bbd\uff09 mm      Notes   1. \u6211\u4eec\u5c06\u5c3d\u5feb\u5c55\u793a/\u63cf\u8ff0\u5982\u4f55\u9009\u62e9\u63a5\u53e3\u603b\u7ebf\u3002   2. \u9ad8\u5ea6\u7531\u6e29\u5ea6\u548c\u5927\u6c14\u538b\u529b\u7684\u7efc\u5408\u8ba1\u7b97\u5f97\u5230\u3002 \u56e0\u4e3a\u6ca1\u6709\u6d4b\u91cf\u9ad8\u5ea6\u7684\u4e13\u95e8\u7ec4\u4ef6\u3002", 
            "title": "\u53c2\u6570\u89c4\u683c"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_3", 
            "text": "SPI soldering pads \uff0c\u7535\u538b\u76d1\u63a7\u7535\u8def\u3002  Interface bus selection pads \uff0c\u9009\u62e9I2C\u603b\u7ebf\uff0c\u901a\u8fc7\u710a\u63a5\u8fde\u63a5\u4e24\u4e2a\u710a\u76d8\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fde\u63a5\uff09; \u9009\u62e9SPI\u603b\u7ebf\uff0c\u7528\u950b\u5229\u7684\u5200\u6216\u70d9\u94c1\u5207\u5272\u4e24\u4e2a\u710a\u76d8\u3002  Slave board address selection pads \uff0c\u9009\u62e9Slave board \u5730\u5740\u4ee5\u907f\u514d\u5730\u5740\u51b2\u7a81\u3002   Tips:  \u60a8\u53ef\u4ee5\u7528\u950b\u5229\u7684\u5200\u5207\u9664\u4e0d\u8981\u7684\u710a\u70b9\u3002  \u5982\u679c\u9009\u62e9\u4e86SPI\u603b\u7ebf\uff0c\u5219slave board\u7684\u9ed8\u8ba4\u5730\u5740\u4e3a  0x77 \uff08\u53f3\u8fde\u63a5\u4e24\u4e2a\u710a\u76d8\uff09\u3002 \u5982\u679c\u8981\u4f7f\u7528\u5730\u5740  0x76 \uff0c\u8bf7\u65ad\u5f00\u6240\u6709\u4e09\u4e2a\u7684\u710a\u76d8\u3002   Note \n\u5de5\u4f5c\u65f6\uff0c\u8bf7\u52ff\u89e6\u6478\u6216\u6447\u6643\u6216\u8ba9\u672c\u4ea7\u54c1\u53d1\u751f\u632f\u52a8\u3002 \u8fd9\u5c06\u9020\u6210\u5e72\u6270\uff0c\u5e76\u4f1a\u5f71\u54cd\u6536\u96c6\u7684\u6570\u636e\u7684\u51c6\u786e\u6027\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_4", 
            "text": "\u9879\u76ee  \u6570\u91cf      Grove - Barometer Sensor (BMP280)  1 \u7247    Grove cable  1 \u6839", 
            "title": "\u4ea7\u54c1\u6e05\u5355 (\u4e3b\u8981\u90e8\u5206)"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_5", 
            "text": "\u73b0\u5728\u8ba9\u6211\u4eec\u8fd0\u7528\u8fd9\u4e2a\u6a21\u5757\u7684\u4e00\u4e9b\u57fa\u672c\u793a\u4f8b\u3002", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#arduino", 
            "text": "\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Arduino\u5e73\u53f0\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u9879\u76ee\u3002 \u5373\u4f7f\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u4e3b\u63a7\u677f\uff0c\u8fd9\u4e9b\u6307\u4ee4\u548c\u6e90\u4ee3\u7801\u4e5f\u662f\u6709\u7528\u7684\u3002", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_6", 
            "text": "Grove - Barometer Sensor (BMP280) \u00d7 1  Seeeduino 4.2 \uff08\u5b8c\u5168\u517c\u5bb9Arduino\uff09\u6216Arduino UNO \u00d71\uff08\u5176\u4ed6\u578b\u53f7\u4e5f\u5f88\u597d\uff09  Grove - Base Shield  \u00d7 1 \uff08\u5982\u679c\u60a8\u4f7f\u7528Seeeduino\u5728Seeeduino v4.2\u4e0a\u6709\u4e24\u4e2aI2C\u63d2\u5ea7\uff0c\u5219\u662f\u53ef\u9009\u7684\uff09  USB\u7535\u7f06\uff08A\u578b\u81f3B\u578b\uff0c\u9002\u7528\u4e8eArduino\uff09\u00d71\u6216USB\u7535\u7f06\uff08Type-A\u81f3Micro Type-B\uff0cSeeeduino\uff09\u00d71  Grove cable  \u00d7 1", 
            "title": "\u6240\u9700\u6750\u6599"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_7", 
            "text": "\u5982\u4e0b\u8fde\u63a5\u6240\u6709\u90e8\u5206\uff1a\u7b2c\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e0eSeeeduino\u7684\u8fde\u63a5\uff0c\u7b2c\u4e8c\u5f20\u56fe\u663e\u793a\u4e0eArduino UNO\u7684\u8fde\u63a5\uff1a", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_8", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \uff0c\u9700\u8981\u7684\u5e93\u8bf7\u70b9\u51fb   \u8fd9\u91cc    \u4f7f\u7528\u5178\u578b\u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528  Codebender \u5c06\u4ee3\u7801\u4e0a\u4f20\u5230\u4e3b\u63a7\u677f\u3002      2.\u4e0a\u4f20\u7a0b\u5e8f\u5230\u4f60\u7684Arduino \uff0c\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc \u3002  Tips:  \u5982\u679c\u60a8\u4f7f\u7528Seeeduino\uff0c\u8bf7\u5728\u4e0a\u4f20\u5de5\u7a0b\u65f6\u9009\u62e9  Tool(\u5de5\u5177)  \u4e0b\u7684  Board(\u5f00\u53d1\u677f) \u3002", 
            "title": "\u7f16\u7801"
        }, 
        {
            "location": "/Grove-Barometer_Sensor-BMP280/#_9", 
            "text": "Schematic(Eagle) file  BMP280 Datasheet  Library and example code  on GitHub  I 2 C how-to for Arduino", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/", 
            "text": "\u8033\u5939\u5fc3\u7387\u5957\u4ef6\u5305\u542b\u4e00\u4e2a\u8033\u5939\u548c\u4e00\u4e2a\u63a5\u6536\u5668\u6a21\u5757\u3002 \u5fc3\u7387\u6d4b\u91cf\u5957\u4ef6\u53ef\u7528\u4e8e\u76d1\u6d4b\u60a3\u8005\u548c\u8fd0\u52a8\u5458\u7684\u5fc3\u7387\u3002 \u7ed3\u679c\u53ef\u4ee5\u901a\u8fc7\u4e32\u884c\u7aef\u53e3\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff0c\u53ef\u4ee5\u4fdd\u5b58\u5206\u6790\u3002 \u6574\u4e2a\u7cfb\u7edf\u5177\u6709\u9ad8\u7075\u654f\u5ea6\uff0c\u4f4e\u529f\u8017\u548c\u4fbf\u643a\u6027\u7684\u4f18\u70b9\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u4f4e\u529f\u8017\n\n\n\u65b9\u4fbf\u4f7f\u7528\n\n\n\u9ad8\u7075\u654f\u5ea6\n\n\n\u5b8c\u5168\u7b26\u5408RoHS\u6807\u51c6\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6700\u5c0f\n\n\n\n\n\u6807\u51c6\n\n\n\n\n\u6700\u5927\n\n\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n\n\n3.0\n\n\n\n\n5.0\n\n\n\n\n5.25\n\n\n\n\nV\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n\n\n6.5\n\n\n\n\nmA\n\n\n\n\n\n\n\n\n\u8033\u5939\u957f\u5ea6\n\n\n\n\n120\n\n\n\n\ncm\n\n\n\n\n\n\n\n\n\u6d4b\u91cf\u8303\u56f4\n\n\n\n\n\u226530/min\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u5fc3\u7387\u76d1\u6d4b\u5668\u3002\n\n\n\n\nPlatform Support\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528\u8033\u5939\u5f0f\u5fc3\u7387\u4f20\u611f\u5668\u6765\u6d4b\u91cf\u5fc3\u7387\u7684\u7b80\u5355\u5e94\u7528\u3002\n\n\n\n\n\u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230 \nGrove-Base shield\n \u4e0a\u7684\u6570\u5b57\u7aef\u53e3 \nD2\n \u3002 \u5e76\u5c06Grove-LED\u8fde\u63a5\u5230\u6570\u5b57\u7aef\u53e3 \nD4\n\u3002\n\n\n\u5c06Grove-Base shield\u63d2\u5165Arduino / Seeeduino\u3002\n\n\n\n\n\n\n\n\n\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n\n\n\n    // Function: This program can be used to measure heart rate, the lowest pulse in the program be set to 30.\n    //         Use an external interrupt to measure it.\n    // Hardware: Grove - Ear-clip Heart Rate Sensor, Grove - Base Shield, Grove - LED\n    // Arduino IDE: Arduino-1.0\n    // Author: FrankieChu       \n    // Date: Jan 22, 2013\n    // Version: v1.0\n    // by www.seeedstudio.com\n    #define LED 4//indicator, Grove - LED is connected with D4 of Arduino\n    boolean led_state = LOW;//state of LED, each time an external interrupt\n                                    //will change the state of LED\n    unsigned char counter;\n    unsigned long temp[21];\n    unsigned long sub;\n    bool data_effect=true;\n    unsigned int heart_rate;//the measurement result of heart rate\n\n    const int max_heartpluse_duty = 2000;//you can change it follow your system\ns request.\n                            //2000 meams 2 seconds. System return error\n                            //if the duty overtrip 2 second.\n    void setup()\n    {\n        pinMode(LED, OUTPUT);\n        Serial.begin(9600);\n        Serial.println(\nPlease ready your chest belt.\n);\n        delay(5000);\n        arrayInit();\n        Serial.println(\nHeart rate test begin.\n);\n        attachInterrupt(0, interrupt, RISING);//set interrupt 0,digital port 2\n    }\n    void loop()\n    {\n        digitalWrite(LED, led_state);//Update the state of the indicator\n    }\n    /*Function: calculate the heart rate*/\n    void sum()\n    {\n     if(data_effect)\n        {\n          heart_rate=1200000/(temp[20]-temp[0]);//60*20*1000/20_total_time\n          Serial.print(\nHeart_rate_is:\\t\n);\n          Serial.println(heart_rate);\n        }\n       data_effect=1;//sign bit\n    }\n    /*Function: Interrupt service routine.Get the sigal from the external interrupt*/\n    void interrupt()\n    {\n        temp[counter]=millis();\n        Serial.println(counter,DEC);\n        Serial.println(temp[counter]);\n        switch(counter)\n        {\n            case 0:\n                sub=temp[counter]-temp[20];\n                Serial.println(sub);\n                break;\n            default:\n                sub=temp[counter]-temp[counter-1];\n                Serial.println(sub);\n                break;\n        }\n        if(sub\nmax_heartpluse_duty)//set 2 seconds as max heart pluse duty\n        {\n            data_effect=0;//sign bit\n            counter=0;\n            Serial.println(\nHeart rate measure error,test will restart!\n );\n            arrayInit();\n        }\n        if (counter==20\ndata_effect)\n        {\n            counter=0;\n            sum();\n        }\n        else if(counter!=20\ndata_effect)\n        counter++;\n        else\n        {\n            counter=0;\n            data_effect=1;\n        }\n\n    }\n    /*Function: Initialization for the array(temp)*/\n    void arrayInit()\n    {\n        for(unsigned char i=0;i \n 20;i ++)\n        {\n            temp[i]=0;\n        }\n        temp[20]=millis();\n    }\n\n\n\n\n\n\n\u4e0a\u4f20\u4ee3\u7801\n\n\n\u786e\u4fdd\u4f20\u611f\u5668\u63a5\u89e6\u5230\u60a8\u7684\u8033\u6735\u76ae\u80a4\u3002 \u5f53\u6211\u4eec\u6d4b\u91cf\u5fc3\u7387\u65f6\uff0c\u8fd9\u662f\u8f93\u51fa\u7684\u4fe1\u53f7\uff1a\n\n\n\n\n\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u56fe\u4e2d\uff0c\u68c0\u6d4b\u5230\u7684\u662f\u5fc3\u8df3\u7684\u6ce2\u5f62\u56fe\uff0c\u5f53\u8df3\u52a8\u65f6\u51fa\u73b0\u9ad8\u8109\u51b2\u3002\n\n\n\n\nNote\n\n\u5982\u679c\u4e32\u884c\u76d1\u89c6\u5668\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u8bf7\u66f4\u6539\u4f20\u611f\u5668\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - Ear-clip Heart Rate Sensor Demo code", 
            "title": "Grove-Ear-clip_Heart_Rate_Sensor"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/#_1", 
            "text": "\u4f4e\u529f\u8017  \u65b9\u4fbf\u4f7f\u7528  \u9ad8\u7075\u654f\u5ea6  \u5b8c\u5168\u7b26\u5408RoHS\u6807\u51c6    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/#_2", 
            "text": "\u9879\u76ee  \n\u6700\u5c0f  \n\u6807\u51c6  \n\u6700\u5927  \n\u5355\u4f4d    \n\u5de5\u4f5c\u7535\u538b  \n3.0  \n5.0  \n5.25  \nV    \n\u5de5\u4f5c\u7535\u6d41  \n6.5  \nmA    \n\u8033\u5939\u957f\u5ea6  \n120  \ncm    \n\u6d4b\u91cf\u8303\u56f4  \n\u226530/min  \n-", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/#_3", 
            "text": "\u5fc3\u7387\u76d1\u6d4b\u5668\u3002", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/#platform-support", 
            "text": "", 
            "title": "Platform Support"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/#_4", 
            "text": "\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528\u8033\u5939\u5f0f\u5fc3\u7387\u4f20\u611f\u5668\u6765\u6d4b\u91cf\u5fc3\u7387\u7684\u7b80\u5355\u5e94\u7528\u3002   \u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230  Grove-Base shield  \u4e0a\u7684\u6570\u5b57\u7aef\u53e3  D2  \u3002 \u5e76\u5c06Grove-LED\u8fde\u63a5\u5230\u6570\u5b57\u7aef\u53e3  D4 \u3002  \u5c06Grove-Base shield\u63d2\u5165Arduino / Seeeduino\u3002     \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u9875\u9762\u4e0a\u3002       // Function: This program can be used to measure heart rate, the lowest pulse in the program be set to 30.\n    //         Use an external interrupt to measure it.\n    // Hardware: Grove - Ear-clip Heart Rate Sensor, Grove - Base Shield, Grove - LED\n    // Arduino IDE: Arduino-1.0\n    // Author: FrankieChu       \n    // Date: Jan 22, 2013\n    // Version: v1.0\n    // by www.seeedstudio.com\n    #define LED 4//indicator, Grove - LED is connected with D4 of Arduino\n    boolean led_state = LOW;//state of LED, each time an external interrupt\n                                    //will change the state of LED\n    unsigned char counter;\n    unsigned long temp[21];\n    unsigned long sub;\n    bool data_effect=true;\n    unsigned int heart_rate;//the measurement result of heart rate\n\n    const int max_heartpluse_duty = 2000;//you can change it follow your system s request.\n                            //2000 meams 2 seconds. System return error\n                            //if the duty overtrip 2 second.\n    void setup()\n    {\n        pinMode(LED, OUTPUT);\n        Serial.begin(9600);\n        Serial.println( Please ready your chest belt. );\n        delay(5000);\n        arrayInit();\n        Serial.println( Heart rate test begin. );\n        attachInterrupt(0, interrupt, RISING);//set interrupt 0,digital port 2\n    }\n    void loop()\n    {\n        digitalWrite(LED, led_state);//Update the state of the indicator\n    }\n    /*Function: calculate the heart rate*/\n    void sum()\n    {\n     if(data_effect)\n        {\n          heart_rate=1200000/(temp[20]-temp[0]);//60*20*1000/20_total_time\n          Serial.print( Heart_rate_is:\\t );\n          Serial.println(heart_rate);\n        }\n       data_effect=1;//sign bit\n    }\n    /*Function: Interrupt service routine.Get the sigal from the external interrupt*/\n    void interrupt()\n    {\n        temp[counter]=millis();\n        Serial.println(counter,DEC);\n        Serial.println(temp[counter]);\n        switch(counter)\n        {\n            case 0:\n                sub=temp[counter]-temp[20];\n                Serial.println(sub);\n                break;\n            default:\n                sub=temp[counter]-temp[counter-1];\n                Serial.println(sub);\n                break;\n        }\n        if(sub max_heartpluse_duty)//set 2 seconds as max heart pluse duty\n        {\n            data_effect=0;//sign bit\n            counter=0;\n            Serial.println( Heart rate measure error,test will restart!  );\n            arrayInit();\n        }\n        if (counter==20 data_effect)\n        {\n            counter=0;\n            sum();\n        }\n        else if(counter!=20 data_effect)\n        counter++;\n        else\n        {\n            counter=0;\n            data_effect=1;\n        }\n\n    }\n    /*Function: Initialization for the array(temp)*/\n    void arrayInit()\n    {\n        for(unsigned char i=0;i   20;i ++)\n        {\n            temp[i]=0;\n        }\n        temp[20]=millis();\n    }   \u4e0a\u4f20\u4ee3\u7801  \u786e\u4fdd\u4f20\u611f\u5668\u63a5\u89e6\u5230\u60a8\u7684\u8033\u6735\u76ae\u80a4\u3002 \u5f53\u6211\u4eec\u6d4b\u91cf\u5fc3\u7387\u65f6\uff0c\u8fd9\u662f\u8f93\u51fa\u7684\u4fe1\u53f7\uff1a     \u5728\u7b2c\u4e00\u4e2a\u56fe\u4e2d\uff0c\u68c0\u6d4b\u5230\u7684\u662f\u5fc3\u8df3\u7684\u6ce2\u5f62\u56fe\uff0c\u5f53\u8df3\u52a8\u65f6\u51fa\u73b0\u9ad8\u8109\u51b2\u3002   Note \n\u5982\u679c\u4e32\u884c\u76d1\u89c6\u5668\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u8bf7\u66f4\u6539\u4f20\u611f\u5668\u7684\u4f4d\u7f6e\u3002", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Ear-clip_Heart_Rate_Sensor/#_5", 
            "text": "Grove - Ear-clip Heart Rate Sensor Demo code", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/", 
            "text": "Grove-Gas sensor\uff08O2\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u6d4b\u8bd5\u7a7a\u6c14\u4e2d\u6c27\u6d53\u5ea6\u7684\u4f20\u611f\u5668\uff0c\u5b83\u662f\u57fa\u4e8e\u7535\u5316\u5b66\u7535\u6c60\u539f\u7406\u5de5\u4f5c\u7684\u3002 \u5f53\u8f93\u51fa\u4e0e\u6c27\u6c14\u6d53\u5ea6\u6210\u6bd4\u4f8b\u7684\u7535\u538b\u503c\u65f6,\u901a\u8fc7\u53c2\u8003\u6c27\u6d53\u5ea6\u7ebf\u6027\u7279\u5f81\u56fe\uff0c\u53ef\u4ee5\u6e05\u695a\u5730\u4e86\u89e3\u5f53\u524d\u7684\u6c27\u6c14\u6d53\u5ea6\u3002 \u5b83\u975e\u5e38\u9002\u5408\u68c0\u6d4b\u73af\u5883\u4e2d\u7684\u6c27\u6c14\u6d53\u5ea6\u3002 Grove - Gas Sensor(O2)\u662f\u4e00\u79cd\u6709\u673a\u53cd\u5e94\u6a21\u5757\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u4e0e\u7a7a\u6c14\u4e2d\u6c14\u4f53\u7684\u5316\u5b66\u53cd\u5e94\u4ea7\u751f\u4e00\u70b9\u7535\u6d41\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4e3a\u5176\u63d0\u4f9b\u5916\u90e8\u7535\u6e90\uff0c\u8f93\u51fa\u7535\u538b\u4f1a\u968f\u65f6\u95f4\u53d8\u5316\u800c\u53d8\u5316\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u9ad8\u7cbe\u51c6\u5ea6\n\n\n\u7075\u654f\u5ea6\u9ad8\n\n\n\u7ebf\u6027\u8303\u56f4\u5e7f\n\n\n\u6297\u5e72\u6270\u80fd\u529b\u5f3a\n\n\n\u975e\u51e1\u7684\u53ef\u9760\u6027\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u6d4b\u91cf\u8303\u56f4\n\n\n0-25%\n\n\n\n\n\n\n\u4f7f\u7528\u5bff\u547d\n\n\n\u4e24\u5e74\n\n\n\n\n\n\n\u7075\u654f\u5ea6\n\n\n0.05~0.15 mA(in air)\n\n\n\n\n\n\n\u6e29\u5ea6\u8303\u56f4\n\n\n-20 oC~50 oC\n\n\n\n\n\n\n\u9884\u70ed\u65f6\u95f4\n\n\n20 \u5206\u949f\n\n\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\nNote\n\n\n\u672c\u7ae0\u57fa\u4e8eWin10\u548cArduino IDE 1.6.9\n\n\n\n\n\u8fd9\u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u6a21\u5757\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u4fe1\u53f7\u5f15\u811a\uff08Grove\u8fde\u63a5\u7ebf\u7684YELLOW\u5f15\u811a\uff09\u8fde\u63a5\u5230\u63a7\u5236\u5668\u7684ADC\u8f93\u5165\u3002 \u5982\u679c\u63a7\u5236\u5668\u4e2d\u6ca1\u6709\u5185\u90e8ADC\uff0c\u5efa\u8bae\u4f7f\u7528\nGrove - I2C ADC\n\u3002\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u8ba9\u5b83\u8fdb\u884c\u5de5\u4f5c\uff0c Grove - Gas Sensor(O2)\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Gas Sensor(O2)\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u5236\u4f5c\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230 Base Shield \u7684\u6b63\u786e\u7aef\u53e3\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u6f14\u793a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2aGrove\u6a21\u5757\u3002\n\n\n\n\nGrove - Sound \u4f20\u611f\u5668\u662f\u4e00\u4e2a\u6a21\u62df\u8f93\u51fa\u7684\u6a21\u5757\uff0c\u6211\u4eec\u5728\u6b64\u6f14\u793a\u4e2d\u5c06\u5176\u8fde\u63a5\u5230 \nA0\n \u7aef\u53e3\n\n\n\n\n\n\n\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230Arduino\n\n\n\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230Arduino IDE\u3002\n\n\n// Grove - Gas Sensor(O2) test code\n// Note:\n// 1. It need about about 5-10 minutes to preheat the sensor\n// 2. modify VRefer if needed\n\nconst float VRefer = 3.3;       // voltage of adc reference\n\nconst int pinAdc   = A5;\n\nvoid setup()\n{\n    // put your setup code here, to run once:\n    Serial.begin(9600);\n    Serial.println(\nGrove - Gas Sensor Test Code...\n);\n}\n\nvoid loop()\n{\n    // put your main code here, to run repeatedly:\n    float Vout =0;\n    Serial.print(\nVout =\n);\n\n    Vout = readO2Vout();\n    Serial.print(Vout);\n    Serial.print(\n V, Concentration of O2 is \n);\n    Serial.println(readConcentration());\n    delay(500);\n}\n\nfloat readO2Vout()\n{\n    long sum = 0;\n    for(int i=0; i\n32; i++)\n    {\n        sum += analogRead(pinAdc);\n    }\n\n    sum \n= 5;\n\n    float MeasuredVout = sum * (VRefer / 1023.0);\n    return MeasuredVout;\n}\n\nfloat readConcentration()\n{\n    // Vout samples are with reference to 3.3V\n    float MeasuredVout = readO2Vout();\n\n    //float Concentration = FmultiMap(MeasuredVout, VoutArray,O2ConArray, 6);\n    //when its output voltage is 2.0V,\n    float Concentration = MeasuredVout * 0.21 / 2.0;\n    float Concentration_Percentage=Concentration*100;\n    return Concentration_Percentage;\n}\n\n\n\n\n\u7136\u540e\u9009\u62e9\u6b63\u786e\u7684\u677f\u548cCOM\u7aef\u53e3\uff0c\u7136\u540e\u70b9\u51fb\u4e0a\u4f20\u6309\u94ae\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u51e0\u79d2\u949f\u3002\n\n\n\u83b7\u53d6\u6570\u636e\n\n\n\u6253\u5f00\u60a8\u7684Arduino IDE\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u60a8\u5c06\u7acb\u5373\u83b7\u53d6\u6570\u636e\n\n\n\n\nWarning\n\n\n\u4f20\u611f\u5668\u9700\u8981\u9884\u70ed\u7ea620\u301c30\u5206\u949f\uff0c\u5426\u5219\u4f1a\u83b7\u5f97\u504f\u5927\u7684\u6570\u503c\u3002\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nME2-O2 Datasheet\n\n\nSchematic in Eagle File\n\n\nGithub Repository of this Document", 
            "title": "Grove-Gas_Sensor-O2"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_1", 
            "text": "\u9ad8\u7cbe\u51c6\u5ea6  \u7075\u654f\u5ea6\u9ad8  \u7ebf\u6027\u8303\u56f4\u5e7f  \u6297\u5e72\u6270\u80fd\u529b\u5f3a  \u975e\u51e1\u7684\u53ef\u9760\u6027    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_2", 
            "text": "\u9879\u76ee  \u53c2\u6570      \u6d4b\u91cf\u8303\u56f4  0-25%    \u4f7f\u7528\u5bff\u547d  \u4e24\u5e74    \u7075\u654f\u5ea6  0.05~0.15 mA(in air)    \u6e29\u5ea6\u8303\u56f4  -20 oC~50 oC    \u9884\u70ed\u65f6\u95f4  20 \u5206\u949f", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_4", 
            "text": "Note  \u672c\u7ae0\u57fa\u4e8eWin10\u548cArduino IDE 1.6.9   \u8fd9\u662f\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u6a21\u5757\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u4fe1\u53f7\u5f15\u811a\uff08Grove\u8fde\u63a5\u7ebf\u7684YELLOW\u5f15\u811a\uff09\u8fde\u63a5\u5230\u63a7\u5236\u5668\u7684ADC\u8f93\u5165\u3002 \u5982\u679c\u63a7\u5236\u5668\u4e2d\u6ca1\u6709\u5185\u90e8ADC\uff0c\u5efa\u8bae\u4f7f\u7528 Grove - I2C ADC \u3002  \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u8ba9\u5b83\u8fdb\u884c\u5de5\u4f5c\uff0c Grove - Gas Sensor(O2)\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Gas Sensor(O2)  Base Shield           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_5", 
            "text": "\u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u5236\u4f5c\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230 Base Shield \u7684\u6b63\u786e\u7aef\u53e3\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u6f14\u793a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2aGrove\u6a21\u5757\u3002   Grove - Sound \u4f20\u611f\u5668\u662f\u4e00\u4e2a\u6a21\u62df\u8f93\u51fa\u7684\u6a21\u5757\uff0c\u6211\u4eec\u5728\u6b64\u6f14\u793a\u4e2d\u5c06\u5176\u8fde\u63a5\u5230  A0  \u7aef\u53e3", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#arduino", 
            "text": "\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230Arduino IDE\u3002  // Grove - Gas Sensor(O2) test code\n// Note:\n// 1. It need about about 5-10 minutes to preheat the sensor\n// 2. modify VRefer if needed\n\nconst float VRefer = 3.3;       // voltage of adc reference\n\nconst int pinAdc   = A5;\n\nvoid setup()\n{\n    // put your setup code here, to run once:\n    Serial.begin(9600);\n    Serial.println( Grove - Gas Sensor Test Code... );\n}\n\nvoid loop()\n{\n    // put your main code here, to run repeatedly:\n    float Vout =0;\n    Serial.print( Vout = );\n\n    Vout = readO2Vout();\n    Serial.print(Vout);\n    Serial.print(  V, Concentration of O2 is  );\n    Serial.println(readConcentration());\n    delay(500);\n}\n\nfloat readO2Vout()\n{\n    long sum = 0;\n    for(int i=0; i 32; i++)\n    {\n        sum += analogRead(pinAdc);\n    }\n\n    sum  = 5;\n\n    float MeasuredVout = sum * (VRefer / 1023.0);\n    return MeasuredVout;\n}\n\nfloat readConcentration()\n{\n    // Vout samples are with reference to 3.3V\n    float MeasuredVout = readO2Vout();\n\n    //float Concentration = FmultiMap(MeasuredVout, VoutArray,O2ConArray, 6);\n    //when its output voltage is 2.0V,\n    float Concentration = MeasuredVout * 0.21 / 2.0;\n    float Concentration_Percentage=Concentration*100;\n    return Concentration_Percentage;\n}  \u7136\u540e\u9009\u62e9\u6b63\u786e\u7684\u677f\u548cCOM\u7aef\u53e3\uff0c\u7136\u540e\u70b9\u51fb\u4e0a\u4f20\u6309\u94ae\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u51e0\u79d2\u949f\u3002", 
            "title": "\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230Arduino"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_6", 
            "text": "\u6253\u5f00\u60a8\u7684Arduino IDE\u7684\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u60a8\u5c06\u7acb\u5373\u83b7\u53d6\u6570\u636e   Warning  \u4f20\u611f\u5668\u9700\u8981\u9884\u70ed\u7ea620\u301c30\u5206\u949f\uff0c\u5426\u5219\u4f1a\u83b7\u5f97\u504f\u5927\u7684\u6570\u503c\u3002", 
            "title": "\u83b7\u53d6\u6570\u636e"
        }, 
        {
            "location": "/Grove-Gas_Sensor-O2/#_7", 
            "text": "ME2-O2 Datasheet  Schematic in Eagle File  Github Repository of this Document", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Light_Sensor/", 
            "text": "Grove-Light\u4f20\u611f\u5668\u96c6\u6210\u4e86\u4e00\u4e2a\u5149\u7535\u963b\uff08\u4f9d\u8d56\u5149\u5f3a\u8c03\u6574\u7535\u963b\uff09\u6765\u68c0\u6d4b\u5149\u5f3a\u3002 \u5f53\u5149\u5f3a\u5ea6\u589e\u52a0\u65f6\uff0c\u5149\u7535\u963b\u7684\u7535\u963b\u964d\u4f4e\u3002 \u677f\u4e0a\u7684\u53ccOpAmp\u82af\u7247LM358\u4ea7\u751f\u4e0e\u5149\u5f3a\u5ea6\u76f8\u5bf9\u5e94\u7684\u7535\u538b\uff08\u5373\u57fa\u4e8e\u7535\u963b\u503c\uff09\u3002 \u8f93\u51fa\u4fe1\u53f7\u4e3a\u6a21\u62df\u503c\uff0c\u4eae\u5ea6\u8d8a\u4eae\uff0c\u503c\u8d8a\u5927\u3002\n\n\n\u8be5\u6a21\u5757\u53ef\u7528\u4e8e\u6784\u5efa\u5149\u63a7\u5f00\u5173\uff0c\u5373\u5728\u767d\u5929\u5173\u95ed\u706f\uff0c\u5e76\u5728\u591c\u95f4\u5f00\u542f\u706f\u3002\n\n\n\n\nWarning\n\n\n\u5149\u4f20\u611f\u5668\u503c\u4ec5\u53cd\u6620\u5149\u5f3a\u5ea6\u7684\u8fd1\u4f3c\u8d8b\u52bf\uff0c\u5b83\u4e0d\u8868\u793a\u786e\u5207\u7684\u660e\u4eae\u7a0b\u5ea6\u3002\n\n\n\n\n\u7248\u672c\u4fe1\u606f\n\n\n\u672c\u6587\u6863\u9002\u7528\u4e8e\u4ee5\u4e0b\u7248\u672c\u7684\u4ea7\u54c1\uff1a\n\n\n\n\n\n\n\n\n\u7248\u672c\n\n\n\u53d1\u5e03\u65e5\u671f\n\n\n\u8d2d\u4e70\u5730\u5740\n\n\n\n\n\n\n\n\n\n\nGrove - Light Sensor 1.0\n\n\n2013\u5e744\u670828\u65e5\n\n\n\u4e0d\u518d\u9500\u552e\n\n\n\n\n\n\nGrove - Light Sensor(P)\n\n\n2014\n\n\n\u4e0d\u518d\u9500\u552e\n\n\n\n\n\n\nGrove - Light Sensor(P) V1.1\n\n\n2016\u5e748\u6708\n\n\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u6a21\u62df\u503c\u8f93\u51fa\n\n\n\u9ad8\u53ef\u9760\u6027\u548c\u7075\u654f\u5ea6\n\n\n\u5360\u5730\u9762\u79ef\u5c0f\n\n\n\u80fd\u591f\u8bc6\u522b\u66f4\u5e7f\u6cdb\u7684\u9891\u8c31\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n3~5V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n0.5~3 mA\n\n\n\n\n\n\n\u54cd\u5e94\u65f6\u95f4\n\n\n20-30\u6beb\u79d2\n\n\n\n\n\n\n\u5cf0\u503c\u6ce2\u957f\n\n\n540 nm\n\n\n\n\n\n\n\u91cd\u91cf\n\n\n4 g\n\n\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\nNote\n\n\n\u8be5\u90e8\u5206\u57fa\u4e8eGrove-Light Sensor\uff08P\uff09V1.0\u3002\n\n\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793aGrove-Light\u4f20\u611f\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Light Sensor\n\n\nGrove - LED Bar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBase Shield\n\n\nmicro USB cable\n\n\nGrove cable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684\u9002\u5f53\u7684Grove\u7aef\u53e3\u3002 \u5bf9\u4e8e\u6b64\u6f14\u793a\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2aGrove\u6a21\u5757\u3002\n\n\n\n\nGrove - \u5149\u4f20\u611f\u5668\u662f\u4e00\u4e2a\u6a21\u62df\u8f93\u51fa\u6a21\u5757\uff0c\u8ba9\u6211\u4eec\u5c06\u5176\u8fde\u63a5\u5230 \nA0\n\u3002\n\n\nGrove - LED Bar\u662f\u4e00\u4e2a\u5e26\u4e24\u6761\u603b\u7ebf\u7684\u6570\u5b57\u8f93\u5165\u6a21\u5757\uff0c\u6211\u4eec\u5c06\u5176\u8fde\u63a5\u5230 \nD2\n\u3002\n\n\n\n\n\n\n\u4e0b\u8f7d\u63cf\u8ff0\n\n\nSeeeduino Stalker V3.1\u6709\u4e00\u4e9b\u793a\u4f8b\uff0c\u5176\u4e2d\u5305\u62ec\uff1a\n\n\n\n\n\u8bfb\u53d6\u4f20\u611f\u5668\u539f\u59cb\u503c\u7684\u793a\u4f8b\n\n\n\u8fd9\u4e2a\u677f\u5b50\u5165\u95e8\u7684\u793a\u4f8b\n\n\n\u79d8\u5bc6\u76d2\u6f14\u793a\u7684\u4f8b\u5b50\n\n\nLED\u6761\u5f62\u56fe\u5e93\n\n\n\n\n\n\n\u4e0b\u8f7d\u8fd9\u4e9b\u793a\u4f8b\u5e76\u653e\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u6253\u5f00Arduino IDE\uff0c\nFile\uff08\u6587\u4ef6\uff09\n Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09\n\uff0c\u5e76\u5c06\u4f4d\u7f6e\u8def\u5f84\u590d\u5236\u5230 \nSketchbook\u4f4d\u7f6e\n\uff0c\u7136\u540e\u5355\u51fb\u786e\u5b9a\u3002 \u91cd\u65b0\u6253\u5f00Arduino IDE\uff0c\u7136\u540e\u8bbe\u7f6e\u7f16\u8f91\u9875\u9762\u3002\n\n\n\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230Arduino\n\n\n\u6253\u5f00Arduino IDE\uff0c \nFile\uff08\u6587\u4ef6\uff09\n Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09\n GettingStarted\n  \u6253\u5f00\u6b64\u90e8\u5206\u7684\u4ee3\u7801\u3002\n\n\n\u7136\u540e\u9009\u62e9\u6b63\u786e\u7684\u677f\u548cCOM\u7aef\u53e3\uff0c\u7136\u540e\u5355\u51fb\u4e0a\u4f20\u6309\u94ae\uff0c\u6b64\u8fc7\u7a0b\u5c06\u9700\u8981\u51e0\u79d2\u949f\u3002 \u7136\u540e\u8ba9\u6211\u4eec\u7528\u624b\u906e\u4f4f\u5149\u7ebf\u4f20\u611f\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0LED\u706f\u6761\u51cf\u5c11\u4e86\u5b83\u7684LED\u3002\n\n\n\u83b7\u53d6\u539f\u59cb\u6570\u636e\n\n\n\u5982\u679c\u60a8\u4e0d\u60f3\u7528 Grove-LED Bar\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u53ef\u4ee5\u5c1d\u8bd5\u7684\u4f8b\u5b50\uff0c\u6253\u5f00Arduino IDE\uff0c \nFile\uff08\u6587\u4ef6\uff09\n Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09\n RawData\n \u6253\u5f00\u4ee3\u7801\uff0c\u5c06\u793a\u4f8b\u4e0a\u4f20\u5230Seeeduino V4\u540e\uff0c\u70b9\u51fb \nTool\uff08\u5de5\u5177\uff09\nSerial(\u4e32\u53e3\u7ed8\u56fe\u5668)\n \u4ee5\u83b7\u5f97\u4f20\u611f\u5668\u7684\u53d8\u5316\u66f2\u7ebf\u3002\n\n\n\n\n\u9879\u76ee\uff1a\u79d8\u5bc6\u7bb1\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u7531Grove - \u5149\u4f20\u611f\u5668 - \u79d8\u5bc6\u76d2\u5236\u4f5c\u7684\u9879\u76ee\u3002 \u9996\u5148\u4f60\u9700\u8981\u4e00\u4e2a\u76d2\u5b50\uff0c\u4e00\u4e2a\u7eb8\u76d2\uff0c\u4e00\u4e2a\u6728\u76d2\u5b50\uff0c\u4efb\u4f55\u4e00\u4e2a\u76d2\u5b50\u90fd\u53ef\u4ee5\u3002 \u628a\u4e1c\u897f\u653e\u5728\u76d2\u5b50\u91cc\uff0c\u56e0\u4e3a\u6211\u4eec\u628a\u5b83\u547d\u540d\u4e3a\u79d8\u5bc6\u76d2\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u6253\u5f00\u5b83\uff0c\u5426\u5219\u4f1a\u6709\u4e00\u4e2a\u95f9\u949f\u6765\u901a\u77e5\u4f60\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528LinkIt ONE\u4f5c\u4e3a\u63a7\u5236\u5668\uff0c\u5b83\u662f\u4e00\u4e2aArduino\u517c\u5bb9\u677f\uff0c\u7531\u4e30\u5bcc\u7684\u529f\u80fd\u7ec4\u6210\u3002 \u4f60\u9700\u8981\u4e0b\u9762\u7684\u4e1c\u897f\uff1a\n\n\n\n\nLinkIt ONE\n\n\nGrove - Light Sensor\n\n\nGrove - Base Shield\n\n\n\u4e00\u5f20SIM\u5361\n\n\n\n\n\u6211\u4eec\u5c06Grove - \u5149\u4f20\u611f\u5668\u8fde\u63a5\u5230A0\u6216Base Shield\uff0c\u5e76\u6253\u5f00Arduino IDE\uff0c \nFile(\u6587\u4ef6)\n Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09\n SecretBox\n\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u793a\u4f8b\u4e0a\u4f20\u5230LinkIt ONE\u3002 \u7136\u540e\u6709\u4eba\u6253\u5f00\u76d2\u5b50\uff0c\u706f\u4f1a\u68c0\u6d4b\u5230\u5b83\uff0c\u5e76\u53d1\u9001\u4e00\u4e2a\u77ed\u4fe1\u3002\n\n\n\n\n\u9879\u76ee Wooden Laser Gun\n\n\n\n\nInspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!\n\n\nThe Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to \"activate\" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It's worth to spend one day DIY it as a Xmas present.    \n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\nSketchbook for Light Sensor\n\n\nEagle File for Grove - Light Sensor V1.0\n\n\nEagle File for Grove - Light Sensor(P) V1.0\n\n\nEagle File for Grove - Light Sensor(P) V1.1\n\n\nLS06-M\u03a65 Reference Information\n\n\nLM358.PDF\n\n\nLight Sensor Library\n\n\nSchematic at Easyeda", 
            "title": "Grove-Light_Sensor"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_1", 
            "text": "\u672c\u6587\u6863\u9002\u7528\u4e8e\u4ee5\u4e0b\u7248\u672c\u7684\u4ea7\u54c1\uff1a     \u7248\u672c  \u53d1\u5e03\u65e5\u671f  \u8d2d\u4e70\u5730\u5740      Grove - Light Sensor 1.0  2013\u5e744\u670828\u65e5  \u4e0d\u518d\u9500\u552e    Grove - Light Sensor(P)  2014  \u4e0d\u518d\u9500\u552e    Grove - Light Sensor(P) V1.1  2016\u5e748\u6708", 
            "title": "\u7248\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_2", 
            "text": "\u6a21\u62df\u503c\u8f93\u51fa  \u9ad8\u53ef\u9760\u6027\u548c\u7075\u654f\u5ea6  \u5360\u5730\u9762\u79ef\u5c0f  \u80fd\u591f\u8bc6\u522b\u66f4\u5e7f\u6cdb\u7684\u9891\u8c31    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_4", 
            "text": "\u9879\u76ee  \u53c2\u6570      \u5de5\u4f5c\u7535\u538b  3~5V    \u5de5\u4f5c\u7535\u6d41  0.5~3 mA    \u54cd\u5e94\u65f6\u95f4  20-30\u6beb\u79d2    \u5cf0\u503c\u6ce2\u957f  540 nm    \u91cd\u91cf  4 g", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_5", 
            "text": "Note  \u8be5\u90e8\u5206\u57fa\u4e8eGrove-Light Sensor\uff08P\uff09V1.0\u3002   \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793aGrove-Light\u4f20\u611f\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Light Sensor  Grove - LED Bar           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70        Base Shield  micro USB cable  Grove cable           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_6", 
            "text": "\u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684\u9002\u5f53\u7684Grove\u7aef\u53e3\u3002 \u5bf9\u4e8e\u6b64\u6f14\u793a\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2aGrove\u6a21\u5757\u3002   Grove - \u5149\u4f20\u611f\u5668\u662f\u4e00\u4e2a\u6a21\u62df\u8f93\u51fa\u6a21\u5757\uff0c\u8ba9\u6211\u4eec\u5c06\u5176\u8fde\u63a5\u5230  A0 \u3002  Grove - LED Bar\u662f\u4e00\u4e2a\u5e26\u4e24\u6761\u603b\u7ebf\u7684\u6570\u5b57\u8f93\u5165\u6a21\u5757\uff0c\u6211\u4eec\u5c06\u5176\u8fde\u63a5\u5230  D2 \u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_7", 
            "text": "Seeeduino Stalker V3.1\u6709\u4e00\u4e9b\u793a\u4f8b\uff0c\u5176\u4e2d\u5305\u62ec\uff1a   \u8bfb\u53d6\u4f20\u611f\u5668\u539f\u59cb\u503c\u7684\u793a\u4f8b  \u8fd9\u4e2a\u677f\u5b50\u5165\u95e8\u7684\u793a\u4f8b  \u79d8\u5bc6\u76d2\u6f14\u793a\u7684\u4f8b\u5b50  LED\u6761\u5f62\u56fe\u5e93    \u4e0b\u8f7d\u8fd9\u4e9b\u793a\u4f8b\u5e76\u653e\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u6253\u5f00Arduino IDE\uff0c File\uff08\u6587\u4ef6\uff09  Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09 \uff0c\u5e76\u5c06\u4f4d\u7f6e\u8def\u5f84\u590d\u5236\u5230  Sketchbook\u4f4d\u7f6e \uff0c\u7136\u540e\u5355\u51fb\u786e\u5b9a\u3002 \u91cd\u65b0\u6253\u5f00Arduino IDE\uff0c\u7136\u540e\u8bbe\u7f6e\u7f16\u8f91\u9875\u9762\u3002", 
            "title": "\u4e0b\u8f7d\u63cf\u8ff0"
        }, 
        {
            "location": "/Grove-Light_Sensor/#arduino", 
            "text": "\u6253\u5f00Arduino IDE\uff0c  File\uff08\u6587\u4ef6\uff09  Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09  GettingStarted   \u6253\u5f00\u6b64\u90e8\u5206\u7684\u4ee3\u7801\u3002  \u7136\u540e\u9009\u62e9\u6b63\u786e\u7684\u677f\u548cCOM\u7aef\u53e3\uff0c\u7136\u540e\u5355\u51fb\u4e0a\u4f20\u6309\u94ae\uff0c\u6b64\u8fc7\u7a0b\u5c06\u9700\u8981\u51e0\u79d2\u949f\u3002 \u7136\u540e\u8ba9\u6211\u4eec\u7528\u624b\u906e\u4f4f\u5149\u7ebf\u4f20\u611f\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0LED\u706f\u6761\u51cf\u5c11\u4e86\u5b83\u7684LED\u3002", 
            "title": "\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230Arduino"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_8", 
            "text": "\u5982\u679c\u60a8\u4e0d\u60f3\u7528 Grove-LED Bar\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u53ef\u4ee5\u5c1d\u8bd5\u7684\u4f8b\u5b50\uff0c\u6253\u5f00Arduino IDE\uff0c  File\uff08\u6587\u4ef6\uff09  Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09  RawData  \u6253\u5f00\u4ee3\u7801\uff0c\u5c06\u793a\u4f8b\u4e0a\u4f20\u5230Seeeduino V4\u540e\uff0c\u70b9\u51fb  Tool\uff08\u5de5\u5177\uff09 Serial(\u4e32\u53e3\u7ed8\u56fe\u5668)  \u4ee5\u83b7\u5f97\u4f20\u611f\u5668\u7684\u53d8\u5316\u66f2\u7ebf\u3002", 
            "title": "\u83b7\u53d6\u539f\u59cb\u6570\u636e"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_9", 
            "text": "\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u7531Grove - \u5149\u4f20\u611f\u5668 - \u79d8\u5bc6\u76d2\u5236\u4f5c\u7684\u9879\u76ee\u3002 \u9996\u5148\u4f60\u9700\u8981\u4e00\u4e2a\u76d2\u5b50\uff0c\u4e00\u4e2a\u7eb8\u76d2\uff0c\u4e00\u4e2a\u6728\u76d2\u5b50\uff0c\u4efb\u4f55\u4e00\u4e2a\u76d2\u5b50\u90fd\u53ef\u4ee5\u3002 \u628a\u4e1c\u897f\u653e\u5728\u76d2\u5b50\u91cc\uff0c\u56e0\u4e3a\u6211\u4eec\u628a\u5b83\u547d\u540d\u4e3a\u79d8\u5bc6\u76d2\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u6253\u5f00\u5b83\uff0c\u5426\u5219\u4f1a\u6709\u4e00\u4e2a\u95f9\u949f\u6765\u901a\u77e5\u4f60\u3002  \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528LinkIt ONE\u4f5c\u4e3a\u63a7\u5236\u5668\uff0c\u5b83\u662f\u4e00\u4e2aArduino\u517c\u5bb9\u677f\uff0c\u7531\u4e30\u5bcc\u7684\u529f\u80fd\u7ec4\u6210\u3002 \u4f60\u9700\u8981\u4e0b\u9762\u7684\u4e1c\u897f\uff1a   LinkIt ONE  Grove - Light Sensor  Grove - Base Shield  \u4e00\u5f20SIM\u5361   \u6211\u4eec\u5c06Grove - \u5149\u4f20\u611f\u5668\u8fde\u63a5\u5230A0\u6216Base Shield\uff0c\u5e76\u6253\u5f00Arduino IDE\uff0c  File(\u6587\u4ef6)  Sketchbook\uff08\u9879\u76ee\u6587\u4ef6\u5939\uff09  SecretBox \uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u793a\u4f8b\u4e0a\u4f20\u5230LinkIt ONE\u3002 \u7136\u540e\u6709\u4eba\u6253\u5f00\u76d2\u5b50\uff0c\u706f\u4f1a\u68c0\u6d4b\u5230\u5b83\uff0c\u5e76\u53d1\u9001\u4e00\u4e2a\u77ed\u4fe1\u3002", 
            "title": "\u9879\u76ee\uff1a\u79d8\u5bc6\u7bb1"
        }, 
        {
            "location": "/Grove-Light_Sensor/#wooden-laser-gun", 
            "text": "Inspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!  The Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to \"activate\" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It's worth to spend one day DIY it as a Xmas present.", 
            "title": "\u9879\u76ee Wooden Laser Gun"
        }, 
        {
            "location": "/Grove-Light_Sensor/#_10", 
            "text": "Sketchbook for Light Sensor  Eagle File for Grove - Light Sensor V1.0  Eagle File for Grove - Light Sensor(P) V1.0  Eagle File for Grove - Light Sensor(P) V1.1  LS06-M\u03a65 Reference Information  LM358.PDF  Light Sensor Library  Schematic at Easyeda", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-MOSFET/", 
            "text": "Grove - MOSFET\u4f7f\u60a8\u80fd\u591f\u5728\u5fae\u63a7\u5236\u5668\u4e0a\u4ee5\u4f4e\u7535\u538b\uff08\u4f8b\u59825V\uff09\u6765\u63a7\u5236\u9700\u8981\u66f4\u9ad8\u7535\u538b\u7684\u9879\u76ee\uff0c\u4f8b\u598215VDC\u3002 MOSFET\u4e5f\u662f\u4e00\u79cd\u5f00\u5173\uff0c\u4f46\u5176\u5f00\u5173\u9891\u7387\u53ef\u4ee5\u8fbe\u52305MHz\uff0c\u6bd4\u6b63\u5e38\u7684\u673a\u68b0\u5f0f\u7ee7\u7535\u5668\u5feb\u5f97\u591a\u3002 \u677f\u4e0a\u6709\u4e24\u4e2a\u87ba\u4e1d\u7aef\u53e3\u3002 \u4e00\u4e2a\u7528\u4e8e\u5916\u90e8\u7535\u6e90\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u8981\u63a7\u5236\u7684\u8bbe\u5907\u3002 \u5f53\u5b83\u5173\u95ed\u65f6\uff0cMOSFET\u7684\u7535\u529b\u5c06\u4ece\u4e00\u7aef\u4f20\u9012\u5230\u53e6\u4e00\u7aef\u3002 \u4f46\u662f\u5982\u679c\u5916\u90e8\u7535\u6e90\u4e0d\u5b58\u5728\uff0c\u60a8\u7684\u8bbe\u5907\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7Grove\u63a5\u53e3\u4ece\u5fae\u63a7\u5236\u5668\u83b7\u53d6\u7535\u529b\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\uff1a5V\n\n\n\u8f93\u5165\u7535\u538b\uff1a5\u301c15V\n\n\nMOSFET\u578b\u53f7\uff1aCJQ4435\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\nVin\uff1a\u63a5\u53d7\u7535\u6d41\u5c0f\u4e8e2A\u76845V\u301c15V\u7535\u6e90\u3002\n\n\nVout\uff1a\u5728\u8fd9\u91cc\u8fde\u63a5\u6267\u884c\u5668\u3002\n\n\n\u793a\u8303\n\n\n\u4f7f\u7528 Arduino\n\n\n\u8fd9\u91cc\u6211\u4eec\u6f14\u793a\u5982\u4f55\u4f7f\u7528Grove-MOSFET\u6765\u63a7\u5236\u7535\u673a\u3002 \u6211\u4eec\u4e3a\u5916\u90e8\u7535\u6e90\u63d0\u4f9b\u7535\u6e90\uff0c\u5982\u679c\u53d7\u63a7\u8bbe\u5907\u7684\u7535\u6d41\u5c0f\u4e8e300mA\uff0cSeeeduino\u4e5f\u53ef\u4ee5\u5b8c\u5168\u652f\u6301\u5b83\uff0c\u65e0\u9700\u989d\u5916\u7684\u7535\u6e90\u3002\n\n\n\n\n    // demo of Grove - MOSFET\n    // use pin 6 to control a motor\n\n    int motorPin = 6;\n\n    void setup()\n    {\n        Serial.begin(38400);\n        pinMode(motorPin, OUTPUT);\n        Serial.println(\nGrove - MOSFET Test Demo!\n);\n    }\n\n    void loop()\n    {\n        motorOnThenOffWithSpeed();\n        motorAcceleration();\n    }\n\n    void motorOnThenOffWithSpeed()\n    {\n        int onSpeed  = 200;                         // a number between 0 (stopped) and 255 (full speed)\n        int onTime   = 2500;\n        int offSpeed = 50;                          // a number between 0 (stopped) and 255 (full speed)\n        int offTime  = 1000;\n        analogWrite(motorPin, onSpeed);\n        delay(onTime);\n        analogWrite(motorPin, offSpeed);\n        delay(offTime);\n    }\n\n    void motorAcceleration()\n    {\n        int delayTime = 50;\n        for(int i=0; i\n256; i++)\n        {\n            analogWrite(motorPin, i);\n            delay(delayTime);\n        }\n\n        for(int i=255; i\n=0; i--)\n        {\n            analogWrite(motorPin, i);\n            delay(delayTime);\n        }\n    }\n\n\n\n\n\u4f7f\u7528Raspberry Pi\n\n\n1.\u4f60\u5e94\u8be5\u51c6\u5907\u4e00\u4e2araspberry pi \u548c  grovepi \u6216\u8005 grovepi+.\n\n\n2.\u60a8\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u8bf7\u9075\u5faa\n\u8bf4\u660e\n \u8fdb\u884c\u914d\u7f6e\u3002\n\n\n3.\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u7528Grove\u6570\u636e\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u7aef\u53e3 \nD6\n\u3002\n\n\n\n\n4.\u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\uff1a\n\n    cd yourpath/GrovePi/Software/Python/\n\n\n-   \u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n    nano grove_mosfet.py   # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import grovepi\n\n    # Connect the Grove MOSFET to analog port D6\n    # SIG,NC,VCC,GND\n    mosfet = 6\n\n    grovepi.pinMode(mosfet,\nOUTPUT\n)\n    time.sleep(1)\n\n    while True:\n        try:\n            # Full speed\n            grovepi.analogWrite(mosfet,255)\n            print \nfull speed\n\n            time.sleep(2)\n\n            # Half speed\n            grovepi.analogWrite(mosfet,128)\n            print \nhalf speed\n\n            time.sleep(2)\n\n            # Off\n            grovepi.analogWrite(mosfet,0)\n            print \noff\n\n            time.sleep(2)\n\n        except KeyboardInterrupt:\n            grovepi.analogWrite(mosfet,0)\n            break\n        except IOError:\n            print \nError\n\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n    sudo python grove_mosfet.py\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - MOSFET Eagle File\n\n\nGrove - MOSFET Schematic PDF\n\n\nCJQ4435 Datasheet\n\n\nMOSFET Wikipedia", 
            "title": "Grove-MOSFET"
        }, 
        {
            "location": "/Grove-MOSFET/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b\uff1a5V  \u8f93\u5165\u7535\u538b\uff1a5\u301c15V  MOSFET\u578b\u53f7\uff1aCJQ4435    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-MOSFET/#_2", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-MOSFET/#_3", 
            "text": "Vin\uff1a\u63a5\u53d7\u7535\u6d41\u5c0f\u4e8e2A\u76845V\u301c15V\u7535\u6e90\u3002  Vout\uff1a\u5728\u8fd9\u91cc\u8fde\u63a5\u6267\u884c\u5668\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-MOSFET/#_4", 
            "text": "", 
            "title": "\u793a\u8303"
        }, 
        {
            "location": "/Grove-MOSFET/#arduino", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u6f14\u793a\u5982\u4f55\u4f7f\u7528Grove-MOSFET\u6765\u63a7\u5236\u7535\u673a\u3002 \u6211\u4eec\u4e3a\u5916\u90e8\u7535\u6e90\u63d0\u4f9b\u7535\u6e90\uff0c\u5982\u679c\u53d7\u63a7\u8bbe\u5907\u7684\u7535\u6d41\u5c0f\u4e8e300mA\uff0cSeeeduino\u4e5f\u53ef\u4ee5\u5b8c\u5168\u652f\u6301\u5b83\uff0c\u65e0\u9700\u989d\u5916\u7684\u7535\u6e90\u3002       // demo of Grove - MOSFET\n    // use pin 6 to control a motor\n\n    int motorPin = 6;\n\n    void setup()\n    {\n        Serial.begin(38400);\n        pinMode(motorPin, OUTPUT);\n        Serial.println( Grove - MOSFET Test Demo! );\n    }\n\n    void loop()\n    {\n        motorOnThenOffWithSpeed();\n        motorAcceleration();\n    }\n\n    void motorOnThenOffWithSpeed()\n    {\n        int onSpeed  = 200;                         // a number between 0 (stopped) and 255 (full speed)\n        int onTime   = 2500;\n        int offSpeed = 50;                          // a number between 0 (stopped) and 255 (full speed)\n        int offTime  = 1000;\n        analogWrite(motorPin, onSpeed);\n        delay(onTime);\n        analogWrite(motorPin, offSpeed);\n        delay(offTime);\n    }\n\n    void motorAcceleration()\n    {\n        int delayTime = 50;\n        for(int i=0; i 256; i++)\n        {\n            analogWrite(motorPin, i);\n            delay(delayTime);\n        }\n\n        for(int i=255; i =0; i--)\n        {\n            analogWrite(motorPin, i);\n            delay(delayTime);\n        }\n    }", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-MOSFET/#raspberry-pi", 
            "text": "1.\u4f60\u5e94\u8be5\u51c6\u5907\u4e00\u4e2araspberry pi \u548c  grovepi \u6216\u8005 grovepi+.  2.\u60a8\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u8bf7\u9075\u5faa \u8bf4\u660e  \u8fdb\u884c\u914d\u7f6e\u3002  3.\u786c\u4ef6\u8fde\u63a5   \u7528Grove\u6570\u636e\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u7aef\u53e3  D6 \u3002   4.\u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\uff1a     cd yourpath/GrovePi/Software/Python/ \n-   \u627e\u5230\u8fd9\u884c\u4ee3\u7801     nano grove_mosfet.py   #  Ctrl+x  to exit #      import time\n    import grovepi\n\n    # Connect the Grove MOSFET to analog port D6\n    # SIG,NC,VCC,GND\n    mosfet = 6\n\n    grovepi.pinMode(mosfet, OUTPUT )\n    time.sleep(1)\n\n    while True:\n        try:\n            # Full speed\n            grovepi.analogWrite(mosfet,255)\n            print  full speed \n            time.sleep(2)\n\n            # Half speed\n            grovepi.analogWrite(mosfet,128)\n            print  half speed \n            time.sleep(2)\n\n            # Off\n            grovepi.analogWrite(mosfet,0)\n            print  off \n            time.sleep(2)\n\n        except KeyboardInterrupt:\n            grovepi.analogWrite(mosfet,0)\n            break\n        except IOError:\n            print  Error   5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b     sudo python grove_mosfet.py", 
            "title": "\u4f7f\u7528Raspberry Pi"
        }, 
        {
            "location": "/Grove-MOSFET/#_5", 
            "text": "Grove - MOSFET Eagle File  Grove - MOSFET Schematic PDF  CJQ4435 Datasheet  MOSFET Wikipedia", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/", 
            "text": "Grove - \u6e29\u5ea6\u4f20\u611f\u5668\u4f7f\u7528\u70ed\u654f\u7535\u963b\u6765\u68c0\u6d4b\u73af\u5883\u6e29\u5ea6\u3002 \u5f53\u73af\u5883\u6e29\u5ea6\u964d\u4f4e\u65f6\uff0c\u70ed\u654f\u7535\u963b\u7684\u7535\u963b\u5c06\u589e\u52a0\u3002 \u8fd9\u662f\u6211\u4eec\u7528\u6765\u8ba1\u7b97\u73af\u5883\u6e29\u5ea6\u7684\u8fd9\u4e2a\u7279\u70b9\u3002 \u8be5\u4f20\u611f\u5668\u7684\u53ef\u68c0\u6d4b\u8303\u56f4\u4e3a-40 - 125\u00baC\uff0c\u7cbe\u5ea6\u4e3a\u00b11.5\u00baC\u3002\n\n\n\n\n\u4ea7\u54c1\u53c2\u6570\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b: 3.3 ~ 5V\n\n\n\n\n\n\n\u572825\u2103\u4e0b\uff0c\u6700\u5927\u989d\u5b9a\u529f\u7387\uff1a300mW\n\n\n\n\n\n\n\u96f6\u529f\u7387\u7535\u963b\uff1a10K\u03a9\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\uff1a-40\u301c+125\u2103\n\n\n\n\n\n\n\u793a\u8303\n\n\n\n\n\u4f7f\u7528Arduino\n\n\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf4\u660e\u5982\u4f55\u4ece\u4f20\u611f\u5668\u8bfb\u53d6\u6e29\u5ea6\u4fe1\u606f\u3002\n\n\n1.\u4f7f\u75284\u9488Grove\u8fde\u63a5\u7ebf\u5c06\u6a21\u5757\u8fde\u63a5\u5230Grove - Basic Shield\u7684\u6a21\u62df\u7aef\u53e3 \nA0\n \u4e0a\u3002\n\n\n2.\u5c06Grove-Basic Shield\u63d2\u5165Arduino\u3002\n3.\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002\n\n\n\n\n4.\u4e0b\u8f7d\u4ee5\u4e0b\u7a0b\u5e8f\u5230\u4f60\u7684\u677f\u5b50.\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u3002\n\n\n/*\n/* Grove - Temperature Sensor demo v1.0\n*  This sensor detects the environment temperature,\n*  Connect the signal of this sensor to A0, use the\n*  Serial monitor to get the result.\n*  By: http://www.seeedstudio.com\n*/\n#include \nlt;math.h\ngt;\nint a;\nfloat temperature;\nint B=3975;                  //B value of the thermistor\nfloat resistance;\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    a=analogRead(0);\n    resistance=(float)(1023-a)*10000/a; //get the resistance of the sensor;\n    temperature=1/(log(resistance/10000)/B+1/298.15)-273.15;//convert to temperature via datasheet\nnbsp;;\n    delay(1000);\n    Serial.print(\nCurrent temperature is \n);\n    Serial.println(temperature);\n}\n\n\n\n\n5.\u60a8\u53ef\u4ee5\u901a\u8fc7\u4e32\u884c\u76d1\u89c6\u5668\u68c0\u67e5\u8bfb\u6570\u3002 \u9ed8\u8ba4\u5355\u4f4d\u4e3a\u6444\u6c0f\u5ea6\u3002\n\n\n\n\n\u4f5c\u4e3a\u53c2\u8003\uff0c\u4ee5\u4e0b\u662f\u6211\u4eec\u5728\u8be5\u4f20\u611f\u5668\u4e0a\u4f7f\u7528\u7684\u70ed\u654f\u7535\u963bTTC3A103 * 39H\u7684\u7535\u963b\u66f2\u7ebf\u3002 \u6e29\u5ea6\u8d8a\u9ad8\uff0c\u7535\u963b\u8d8a\u5c0f\u3002\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2araspberry pi\u548c\u4e00\u4e2agrovepi\u6216grovepi +\u3002\n\n\n2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\n\n\n3.\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7 \nD3\n\u3002\n\n\n\n\n4.\u6d4f\u89c8\u6f14\u793a\u76ee\u5f55\uff1a\n\ncd yourpath/GrovePi/Software/Python/\n\n\n\n\n\n\u627e\u5230\u5230\u8fd9\u884c\u4ee3\u7801\n\n\n\n\nnano grove_temperature_sensor.py   # \nCtrl+x\n to exit #\n\n\n\nimport time\nimport grovepi\n\n#Connect the Grove Temperature Sensor to analog port A0\n#SIG,NC,VCC,GND\nsensor = 0\n\nwhile True:\ntry:\ntemp = grovepi.temp(sensor,\n1.1\n)\nprint \ntemp =\n, temp\ntime.sleep(.5)\n\nexcept KeyboardInterrupt:\nbreak\nexcept IOError:\nprint \nError\n\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n\nsudo python grove_temperature_sensor.py\n\n\n\n\n\u4f7f\u7528 Beaglebone Green\n\n\n\u8981\u5f00\u59cb\u7f16\u8f91BBG\u4e0a\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528Cloud9 IDE\u3002\n\n\n\u4e3a\u4e86\u719f\u6089Cloud9 IDE\uff0c\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u7ec3\u4e60\uff0c\u5148\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u95ea\u70c1BeagleBone\u4e0a\u76844\u4e2a\u53ef\u7f16\u7a0bLED\u706f\uff0c\u8fd9\u662f\u5b66\u4e60\u7f16\u7a0b\u4e00\u4e2a\u597d\u7684\u5f00\u59cb\u3002\n\n\n\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528Cloud9 IDE\uff0c\u8bf7\u53c2\u8003 \n\u8fd9\u91cc\n\u3002\n\n\n\u7b2c\u4e00\u6b65:\n \u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u201c\n+\n\u201d\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002\n\n\n\n\n\n\n\u7b2c\u4e8c\u6b65:\n \u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u9009\u9879\u5361\u4e2d\n\nfrom Adafruit_I2C import Adafruit_I2C\nimport time\n\nADDR_ADC121 = 0x50\n\nREG_ADDR_RESULT = 0x00\nREG_ADDR_ALERT = 0x01\nREG_ADDR_CONFIG = 0x02\nREG_ADDR_LIMITL = 0x03\nREG_ADDR_LIMITH = 0x04\nREG_ADDR_HYST = 0x05\nREG_ADDR_CONVL = 0x06\nREG_ADDR_CONVH = 0x07\n\ni2c = Adafruit_I2C(ADDR_ADC121)\n\nclass I2cAdc:\ndef __init__(self):\ni2c.write8(REG_ADDR_CONFIG, 0x20)\n\ndef read_adc(self):\n\nRead ADC data 0-4095.\n\ndata_list = i2c.readList(REG_ADDR_RESULT, 2)\n        #print \ndata list\n, data_list\ndata = ((data_list[0] \n 0x0f) \n 8 | data_list[1]) \n 0xfff\nreturn data\n\nif __name__ == \n__main__\n:\n    # Connect the Grove - I2C ADC to I2C Grove port of Beaglebone Green.\nadc = I2cAdc()\nwhile True:\nprint \nsensor value \n, adc.read_adc()\ntime.sleep(.2)\n\n\n\n\u7b2c\u4e09\u6b65:\n \u901a\u8fc7\u5355\u51fb\u540d\u79f0\u4e3a\u4ee5\u201cgrove_i2c_adc.py\u201d\u547d\u540d\u4fdd\u5b58\u6587\u4ef6\n\n\n\u7b2c\u56db\u6b65:\n \u521b\u5efa\u65b0\u6587\u4ef6\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230\u65b0\u9009\u9879\u5361\u4e2d\uff0c\u5e76\u4f7f\u7528.py\u6269\u5c55\u540d\u4fdd\u5b58\u3002\n\n\nimport time\nimport math\nimport grove_i2c_adc\nimport Adafruit_BBIO.GPIO as GPIO\n\nBUZZER = \nP9_22\n            # GPIO P9_22\nGPIO.setup(BUZZER, GPIO.OUT)\n\n# The threshold to turn the buzzer on 28 Celsius\nTHRESHOLD_TEMPERATURE = 28\n\nadc = grove_i2c_adc.I2cAdc()\n\n#   The argument in the read_temperature() method defines which Grove board(Grove Temperature Sensor) version you have connected.\n#   Defaults to \nv1.2\n. eg.\n#       temp = read_temperature(\nv1.0\n)          # B value = 3975\n#       temp = read_temperature(\nv1.1\n)          # B value = 4250\n#       temp = read_temperature(\nv1.2\n)          # B value = 4250\ndef read_temperature(model = \nv1.2\n):\n\nRead temperature values in Celsius from Grove Temperature Sensor\n\n    # each of the sensor revisions use different thermistors, each with their own B value constant\nif model == \nv1.2\n:\nbValue = 4250  # sensor v1.2 uses thermistor ??? (assuming NCP18WF104F03RC until SeeedStudio clarifies)\nelif model == \nv1.1\n:\nbValue = 4250  # sensor v1.1 uses thermistor NCP18WF104F03RC\nelse:\nbValue = 3975  # sensor v1.0 uses thermistor TTC3A103*39H\n\ntotal_value = 0\nfor index in range(20):\nsensor_value = adc.read_adc()\ntotal_value += sensor_value\ntime.sleep(0.05)\naverage_value = float(total_value / 20)\n\n    # Transform the ADC data into the data of Arduino platform.\nsensor_value_tmp = (float)(average_value / 4095 * 2.95 * 2 / 3.3 * 1023)\nresistance = (float)(1023 - sensor_value_tmp) * 10000 / sensor_value_tmp\ntemperature = round((float)(1 / (math.log(resistance / 10000) / bValue + 1 / 298.15) - 273.15), 2)\nreturn temperature\n\n# Function: If the temperature sensor senses the temperature that is up to the threshold you set in the code, the buzzer is ringing for 1s.\n# Hardware: Grove - I2C ADC, Grove - Temperature Sensor, Grove - Buzzer\n# Note: Use P9_22(UART2_RXD) as GPIO.\n# Connect the Grove Buzzer to UART Grove port of Beaglebone Green.\n# Connect the Grove - I2C ADC to I2C Grove port of Beaglebone Green, and then connect the Grove - Temperature Sensor to Grove - I2C ADC.\nif __name__ == \n__main__\n:\n\nwhile True:\ntry:\n            # Read temperature values in Celsius from Grove Temperature Sensor\ntemperature = read_temperature(\nv1.2\n)\n\n            # When the temperature reached predetermined value, buzzer is ringing.\n\nprint \ntemperature = \n, temperature\n\nexcept IOError:\nprint \nError\n\n\n\n\n\n\u7b2c5\u6b65:\n \u5c06Grove\u6e29\u5ea6\u4f20\u611f\u5668\u8fde\u63a5\u5230\u7684Grove I2C\u7aef\u53e3I2C ADC\u3002\n\n\n\u7b2c6\u6b65:\n \u8fd0\u884c\u4ee3\u7801\n\u4f60\u4f1a\u53d1\u73b0\u7ec8\u7aef\u6bcf2\u79d2\u8f93\u51fa\u4e00\u6b21\u6e29\u5ea6\u503c\u3002\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n\n\nGrove - Temperature Sensor v1.0 Eagle File\n\n\n\n\n\n\nDemo code on github", 
            "title": "Grove-Temperature_Sensor"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b: 3.3 ~ 5V    \u572825\u2103\u4e0b\uff0c\u6700\u5927\u989d\u5b9a\u529f\u7387\uff1a300mW    \u96f6\u529f\u7387\u7535\u963b\uff1a10K\u03a9    \u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\uff1a-40\u301c+125\u2103", 
            "title": "\u4ea7\u54c1\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/#_2", 
            "text": "", 
            "title": "\u793a\u8303"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/#arduino", 
            "text": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf4\u660e\u5982\u4f55\u4ece\u4f20\u611f\u5668\u8bfb\u53d6\u6e29\u5ea6\u4fe1\u606f\u3002  1.\u4f7f\u75284\u9488Grove\u8fde\u63a5\u7ebf\u5c06\u6a21\u5757\u8fde\u63a5\u5230Grove - Basic Shield\u7684\u6a21\u62df\u7aef\u53e3  A0  \u4e0a\u3002  2.\u5c06Grove-Basic Shield\u63d2\u5165Arduino\u3002\n3.\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002   4.\u4e0b\u8f7d\u4ee5\u4e0b\u7a0b\u5e8f\u5230\u4f60\u7684\u677f\u5b50.\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb \u8fd9\u91cc \u3002  /*\n/* Grove - Temperature Sensor demo v1.0\n*  This sensor detects the environment temperature,\n*  Connect the signal of this sensor to A0, use the\n*  Serial monitor to get the result.\n*  By: http://www.seeedstudio.com\n*/\n#include  lt;math.h gt;\nint a;\nfloat temperature;\nint B=3975;                  //B value of the thermistor\nfloat resistance;\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    a=analogRead(0);\n    resistance=(float)(1023-a)*10000/a; //get the resistance of the sensor;\n    temperature=1/(log(resistance/10000)/B+1/298.15)-273.15;//convert to temperature via datasheet nbsp;;\n    delay(1000);\n    Serial.print( Current temperature is  );\n    Serial.println(temperature);\n}  5.\u60a8\u53ef\u4ee5\u901a\u8fc7\u4e32\u884c\u76d1\u89c6\u5668\u68c0\u67e5\u8bfb\u6570\u3002 \u9ed8\u8ba4\u5355\u4f4d\u4e3a\u6444\u6c0f\u5ea6\u3002   \u4f5c\u4e3a\u53c2\u8003\uff0c\u4ee5\u4e0b\u662f\u6211\u4eec\u5728\u8be5\u4f20\u611f\u5668\u4e0a\u4f7f\u7528\u7684\u70ed\u654f\u7535\u963bTTC3A103 * 39H\u7684\u7535\u963b\u66f2\u7ebf\u3002 \u6e29\u5ea6\u8d8a\u9ad8\uff0c\u7535\u963b\u8d8a\u5c0f\u3002", 
            "title": "\u4f7f\u7528Arduino"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/#raspberry-pi", 
            "text": "1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2araspberry pi\u548c\u4e00\u4e2agrovepi\u6216grovepi +\u3002  2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa  \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e  3.\u786c\u4ef6\u8fde\u63a5   \u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7  D3 \u3002   4.\u6d4f\u89c8\u6f14\u793a\u76ee\u5f55\uff1a cd yourpath/GrovePi/Software/Python/   \u627e\u5230\u5230\u8fd9\u884c\u4ee3\u7801   nano grove_temperature_sensor.py   #  Ctrl+x  to exit #  import time\nimport grovepi\n\n#Connect the Grove Temperature Sensor to analog port A0\n#SIG,NC,VCC,GND\nsensor = 0\n\nwhile True:\ntry:\ntemp = grovepi.temp(sensor, 1.1 )\nprint  temp = , temp\ntime.sleep(.5)\n\nexcept KeyboardInterrupt:\nbreak\nexcept IOError:\nprint  Error   5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b  sudo python grove_temperature_sensor.py", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/#beaglebone-green", 
            "text": "\u8981\u5f00\u59cb\u7f16\u8f91BBG\u4e0a\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528Cloud9 IDE\u3002  \u4e3a\u4e86\u719f\u6089Cloud9 IDE\uff0c\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u7ec3\u4e60\uff0c\u5148\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u95ea\u70c1BeagleBone\u4e0a\u76844\u4e2a\u53ef\u7f16\u7a0bLED\u706f\uff0c\u8fd9\u662f\u5b66\u4e60\u7f16\u7a0b\u4e00\u4e2a\u597d\u7684\u5f00\u59cb\u3002  \u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528Cloud9 IDE\uff0c\u8bf7\u53c2\u8003  \u8fd9\u91cc \u3002  \u7b2c\u4e00\u6b65:  \u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u201c + \u201d\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002    \u7b2c\u4e8c\u6b65:  \u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u9009\u9879\u5361\u4e2d from Adafruit_I2C import Adafruit_I2C\nimport time\n\nADDR_ADC121 = 0x50\n\nREG_ADDR_RESULT = 0x00\nREG_ADDR_ALERT = 0x01\nREG_ADDR_CONFIG = 0x02\nREG_ADDR_LIMITL = 0x03\nREG_ADDR_LIMITH = 0x04\nREG_ADDR_HYST = 0x05\nREG_ADDR_CONVL = 0x06\nREG_ADDR_CONVH = 0x07\n\ni2c = Adafruit_I2C(ADDR_ADC121)\n\nclass I2cAdc:\ndef __init__(self):\ni2c.write8(REG_ADDR_CONFIG, 0x20)\n\ndef read_adc(self): Read ADC data 0-4095. \ndata_list = i2c.readList(REG_ADDR_RESULT, 2)\n        #print  data list , data_list\ndata = ((data_list[0]   0x0f)   8 | data_list[1])   0xfff\nreturn data\n\nif __name__ ==  __main__ :\n    # Connect the Grove - I2C ADC to I2C Grove port of Beaglebone Green.\nadc = I2cAdc()\nwhile True:\nprint  sensor value  , adc.read_adc()\ntime.sleep(.2)  \u7b2c\u4e09\u6b65:  \u901a\u8fc7\u5355\u51fb\u540d\u79f0\u4e3a\u4ee5\u201cgrove_i2c_adc.py\u201d\u547d\u540d\u4fdd\u5b58\u6587\u4ef6  \u7b2c\u56db\u6b65:  \u521b\u5efa\u65b0\u6587\u4ef6\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230\u65b0\u9009\u9879\u5361\u4e2d\uff0c\u5e76\u4f7f\u7528.py\u6269\u5c55\u540d\u4fdd\u5b58\u3002  import time\nimport math\nimport grove_i2c_adc\nimport Adafruit_BBIO.GPIO as GPIO\n\nBUZZER =  P9_22             # GPIO P9_22\nGPIO.setup(BUZZER, GPIO.OUT)\n\n# The threshold to turn the buzzer on 28 Celsius\nTHRESHOLD_TEMPERATURE = 28\n\nadc = grove_i2c_adc.I2cAdc()\n\n#   The argument in the read_temperature() method defines which Grove board(Grove Temperature Sensor) version you have connected.\n#   Defaults to  v1.2 . eg.\n#       temp = read_temperature( v1.0 )          # B value = 3975\n#       temp = read_temperature( v1.1 )          # B value = 4250\n#       temp = read_temperature( v1.2 )          # B value = 4250\ndef read_temperature(model =  v1.2 ): Read temperature values in Celsius from Grove Temperature Sensor \n    # each of the sensor revisions use different thermistors, each with their own B value constant\nif model ==  v1.2 :\nbValue = 4250  # sensor v1.2 uses thermistor ??? (assuming NCP18WF104F03RC until SeeedStudio clarifies)\nelif model ==  v1.1 :\nbValue = 4250  # sensor v1.1 uses thermistor NCP18WF104F03RC\nelse:\nbValue = 3975  # sensor v1.0 uses thermistor TTC3A103*39H\n\ntotal_value = 0\nfor index in range(20):\nsensor_value = adc.read_adc()\ntotal_value += sensor_value\ntime.sleep(0.05)\naverage_value = float(total_value / 20)\n\n    # Transform the ADC data into the data of Arduino platform.\nsensor_value_tmp = (float)(average_value / 4095 * 2.95 * 2 / 3.3 * 1023)\nresistance = (float)(1023 - sensor_value_tmp) * 10000 / sensor_value_tmp\ntemperature = round((float)(1 / (math.log(resistance / 10000) / bValue + 1 / 298.15) - 273.15), 2)\nreturn temperature\n\n# Function: If the temperature sensor senses the temperature that is up to the threshold you set in the code, the buzzer is ringing for 1s.\n# Hardware: Grove - I2C ADC, Grove - Temperature Sensor, Grove - Buzzer\n# Note: Use P9_22(UART2_RXD) as GPIO.\n# Connect the Grove Buzzer to UART Grove port of Beaglebone Green.\n# Connect the Grove - I2C ADC to I2C Grove port of Beaglebone Green, and then connect the Grove - Temperature Sensor to Grove - I2C ADC.\nif __name__ ==  __main__ :\n\nwhile True:\ntry:\n            # Read temperature values in Celsius from Grove Temperature Sensor\ntemperature = read_temperature( v1.2 )\n\n            # When the temperature reached predetermined value, buzzer is ringing.\n\nprint  temperature =  , temperature\n\nexcept IOError:\nprint  Error   \u7b2c5\u6b65:  \u5c06Grove\u6e29\u5ea6\u4f20\u611f\u5668\u8fde\u63a5\u5230\u7684Grove I2C\u7aef\u53e3I2C ADC\u3002  \u7b2c6\u6b65:  \u8fd0\u884c\u4ee3\u7801\n\u4f60\u4f1a\u53d1\u73b0\u7ec8\u7aef\u6bcf2\u79d2\u8f93\u51fa\u4e00\u6b21\u6e29\u5ea6\u503c\u3002", 
            "title": "\u4f7f\u7528 Beaglebone Green"
        }, 
        {
            "location": "/Grove-Temperature_Sensor/#_3", 
            "text": "Grove - Temperature Sensor v1.0 Eagle File    Demo code on github", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Temperature_Sensor_V1.2/", 
            "text": "Grove - Temperature Sensor\u4f7f\u7528\n\u70ed\u654f\u7535\u963b\n \u6765\u68c0\u6d4b\u73af\u5883\u6e29\u5ea6\u3002 \u5f53\u73af\u5883\u6e29\u5ea6\u964d\u4f4e\u65f6\uff0c\u70ed\u654f\u7535\u963b\u7684\u7535\u963b\u5c06\u589e\u52a0\u3002 \u6211\u4eec\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u5bf9\u73af\u5883\u6e29\u5ea6\u8fdb\u884c\u9884\u6d4b\u3002 \u8be5\u4f20\u611f\u5668\u7684\u53ef\u68c0\u6d4b\u8303\u56f4\u4e3a-40 - 125\u00baC\uff0c\u7cbe\u5ea6\u4e3a\u00b11.5\u00baC\n\n\n\n\nNote\n\n\n\u8fd9\u4e2awiki\u8d44\u6599\u7684\u5185\u5bb9\u9002\u7528\u4e8eGrove - Temperature sensorV1.1\uff0c\u540c\u6837\u4e5f\u9002\u7528\u4e8eV1.0\uff0c\u8bf7\u53c2\u9605\nGrove - Temperature Sensor\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b: 3.3 ~ 5V\n\n\n\u96f6\u529f\u7387\u7535\u963b: 100 K\u03a9\n\n\n\u7535\u963b\u5bb9\u5dee: \u00b11%\n\n\n\u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4: -40 ~ +125 \u2103\n\n\n\u6807\u79f0B\u5e38\u6570\uff1a 4250 ~ 4299K\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u901a\u8fc7\u672c\u8282\u7684\u5b66\u4e60\u4e4b\u540e\uff0c\u60a8\u53ea\u9700\u8981\u901a\u8fc7\u51e0\u6b65\u5c31\u53ef\u4ee5\u4f7f\u7528Grove - Temperature Sensor V1.1 / 1.2\u5b8c\u6210\u9879\u76ee\u3002\n\n\n\u51c6\u5907\u5de5\u4f5c\n  \n\n\n\u73b0\u5728\u6211\u4eec\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\uff0c\u5c55\u793a\u5982\u4f55\u4f7f\u7528Grove - Temperature Sensor V1.1/1.2\u83b7\u5f97\u6570\u636e\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u9700\u8981\u51c6\u5907\u7684\u6a21\u5757\u3002\n\n\n\n\nSeeeduino v4.2\n\n\n\n\nSeeeduino V4.2\u4e0eArduino\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528Arduino\uff0c\u8bf7\u53c2\u9605 \n\u8fd9\u91cc\n\u5f00\u59cb\u60a8\u7684Arduino\u65c5\u7a0b\u3002\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u53ea\u9700\u5c06Grove - Temperature Sensor\u8fde\u63a5\u5230Seeeduino v4.2\u7684A5\u7aef\u53e3\u4e0a\n\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\n\n\u4e0b\u8f7d\u7a0b\u5e8f\n\n\n\u542f\u52a8Arduino IDE\uff0c\u7136\u540e\u5355\u51fbFile(\u6587\u4ef6)\nNew(\u65b0\u5efa)\u4ee5\u6253\u5f00\u65b0\u7684\u7f16\u8f91\u9875\u9762\u3002\n\n\n\u7136\u540e\u628a\u4e0b\u9762\u7684\u7a0b\u5e8f\u590d\u5236\u5230Arduino IDE\u4e0a:\n\n// Demo code for Grove - Temperature Sensor V1.1/1.2\n// Loovee @ 2015-8-26\n\n#include \nmath.h\n\n\nconst int B = 4275;               // B value of the thermistor\nconst int R0 = 100000;            // R0 = 100k\nconst int pinTempSensor = A5;     // Grove - Temperature Sensor connect to A5\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int a = analogRead(pinTempSensor);\n\n    float R = 1023.0/a-1.0;\n    R = R0*R;\n\n    float temperature = 1.0/(log(R/R0)/B+1/298.15)-273.15; // convert to temperature via datasheet\n\n    Serial.print(\ntemperature = \n);\n    Serial.println(temperature);\n\n    delay(100);\n}\n\n\n\n\u70b9\u51fbTools\uff08\u5de5\u5177\uff09\nBoard\uff08\u677f\uff09 \u9009\u62e9Arduino UNO \u5e76\u4e14\u9009\u62e9\u76f8\u5e94\u7684\u7aef\u53e3\n\n\n\u73b0\u5728\u70b9\u51fb\u4e0a\u4f20\uff08CTRL + U\uff09\u5f55\u5165\u6d4b\u8bd5\u4ee3\u7801\u3002 \u8bf7\u53c2\u8003\u8fd9\u91cc\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u63d0\u793a\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u8bba\u575b\u4e0a\u8fdb\u884c\u8bc4\u8bba\uff0c\u5bfb\u6c42\u5e2e\u52a9\u3002\n\n\n\u770b\u5230\u7684\u7ed3\u679c\n\n\n\u4e0a\u4f20\u5b8c\u6210\u540e\uff0c\u6253\u5f00Arduino IDE\u7684Tools\uff08\u5de5\u5177\uff09\nSerial Serial Monitor\uff08\u4e32\u53e3\u76d1\u89c6\u5668\uff09\uff0c\u53ef\u4ee5\u83b7\u5f97\u6e29\u5ea6\u6570\u636e\uff1a\n\n\n\n\n\u53c2\u8003\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u77e5\u9053\u6e29\u5ea6\u7b97\u6cd5\u5982\u4f55\u6765\uff0c\u8bf7\u53c2\u8003\u4e0b\u56fe\uff1a\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\nSchematic at Easyeda\n\n\nGrove - Temperature Sensor v1.1 Eagle File\n\n\nGrove - Temperature Sensor v1.1.PDF\n\n\nTemperature Sensor datasheet", 
            "title": "Grove-Temperature_Sensor_V1.2"
        }, 
        {
            "location": "/Grove-Temperature_Sensor_V1.2/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b: 3.3 ~ 5V  \u96f6\u529f\u7387\u7535\u963b: 100 K\u03a9  \u7535\u963b\u5bb9\u5dee: \u00b11%  \u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4: -40 ~ +125 \u2103  \u6807\u79f0B\u5e38\u6570\uff1a 4250 ~ 4299K    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Temperature_Sensor_V1.2/#_2", 
            "text": "\u901a\u8fc7\u672c\u8282\u7684\u5b66\u4e60\u4e4b\u540e\uff0c\u60a8\u53ea\u9700\u8981\u901a\u8fc7\u51e0\u6b65\u5c31\u53ef\u4ee5\u4f7f\u7528Grove - Temperature Sensor V1.1 / 1.2\u5b8c\u6210\u9879\u76ee\u3002  \u51c6\u5907\u5de5\u4f5c     \u73b0\u5728\u6211\u4eec\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\uff0c\u5c55\u793a\u5982\u4f55\u4f7f\u7528Grove - Temperature Sensor V1.1/1.2\u83b7\u5f97\u6570\u636e\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u9700\u8981\u51c6\u5907\u7684\u6a21\u5757\u3002   Seeeduino v4.2   Seeeduino V4.2\u4e0eArduino\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528Arduino\uff0c\u8bf7\u53c2\u9605  \u8fd9\u91cc \u5f00\u59cb\u60a8\u7684Arduino\u65c5\u7a0b\u3002  \u786c\u4ef6\u8fde\u63a5  \u53ea\u9700\u5c06Grove - Temperature Sensor\u8fde\u63a5\u5230Seeeduino v4.2\u7684A5\u7aef\u53e3\u4e0a\n\u5982\u4e0b\u6240\u793a\uff1a   \u4e0b\u8f7d\u7a0b\u5e8f  \u542f\u52a8Arduino IDE\uff0c\u7136\u540e\u5355\u51fbFile(\u6587\u4ef6) New(\u65b0\u5efa)\u4ee5\u6253\u5f00\u65b0\u7684\u7f16\u8f91\u9875\u9762\u3002  \u7136\u540e\u628a\u4e0b\u9762\u7684\u7a0b\u5e8f\u590d\u5236\u5230Arduino IDE\u4e0a: // Demo code for Grove - Temperature Sensor V1.1/1.2\n// Loovee @ 2015-8-26\n\n#include  math.h \n\nconst int B = 4275;               // B value of the thermistor\nconst int R0 = 100000;            // R0 = 100k\nconst int pinTempSensor = A5;     // Grove - Temperature Sensor connect to A5\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int a = analogRead(pinTempSensor);\n\n    float R = 1023.0/a-1.0;\n    R = R0*R;\n\n    float temperature = 1.0/(log(R/R0)/B+1/298.15)-273.15; // convert to temperature via datasheet\n\n    Serial.print( temperature =  );\n    Serial.println(temperature);\n\n    delay(100);\n}  \u70b9\u51fbTools\uff08\u5de5\u5177\uff09 Board\uff08\u677f\uff09 \u9009\u62e9Arduino UNO \u5e76\u4e14\u9009\u62e9\u76f8\u5e94\u7684\u7aef\u53e3  \u73b0\u5728\u70b9\u51fb\u4e0a\u4f20\uff08CTRL + U\uff09\u5f55\u5165\u6d4b\u8bd5\u4ee3\u7801\u3002 \u8bf7\u53c2\u8003\u8fd9\u91cc\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u63d0\u793a\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u8bba\u575b\u4e0a\u8fdb\u884c\u8bc4\u8bba\uff0c\u5bfb\u6c42\u5e2e\u52a9\u3002  \u770b\u5230\u7684\u7ed3\u679c  \u4e0a\u4f20\u5b8c\u6210\u540e\uff0c\u6253\u5f00Arduino IDE\u7684Tools\uff08\u5de5\u5177\uff09 Serial Serial Monitor\uff08\u4e32\u53e3\u76d1\u89c6\u5668\uff09\uff0c\u53ef\u4ee5\u83b7\u5f97\u6e29\u5ea6\u6570\u636e\uff1a", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Temperature_Sensor_V1.2/#_3", 
            "text": "\u5982\u679c\u4f60\u60f3\u77e5\u9053\u6e29\u5ea6\u7b97\u6cd5\u5982\u4f55\u6765\uff0c\u8bf7\u53c2\u8003\u4e0b\u56fe\uff1a", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/Grove-Temperature_Sensor_V1.2/#_4", 
            "text": "Schematic at Easyeda  Grove - Temperature Sensor v1.1 Eagle File  Grove - Temperature Sensor v1.1.PDF  Temperature Sensor datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0/", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u591a\u529f\u80fd\u4f20\u611f\u5668\uff0c\u53ef\u540c\u65f6\u7ed9\u4f60\u6e29\u5ea6\u548c\u76f8\u5bf9\u6e7f\u5ea6\u7684\u4fe1\u606f\u3002 \u5b83\u91c7\u7528 TH02 sensor \u8fdb\u884c\u6d4b\u91cf\uff0c\u53ef\u6ee1\u8db3\u4e00\u822c\u9700\u6c42\u7684\u9879\u76ee\u3002 \u5f53\u73af\u5883\u6e7f\u5ea6\u5728 0-80\uff05RH \u548c 0-70\u00b0C \u4e4b\u95f4\u7684\u6e29\u5ea6\u6761\u4ef6\u4e0b\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u53ef\u9760\u7684\u8bfb\u6570\uff0c\u80fd\u591f\u6ee1\u8db3\u5927\u591a\u6570\u5bb6\u5ead\u548c\u65e5\u5e38\u5e94\u7528\u7684\u9700\u6c42\u3002\n\n\n\n\n\u4ea7\u54c1\u53c2\u6570\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\u8303\u56f4\n\u00a0\u00a0\u00a0\u00a0 - \uff083.3V\u301c5V\uff09\n\n\n\u4f4e\u529f\u8017\n\u00a0\u00a0\u00a0\u00a0 - \u5728 RH \u8f6c\u6362\u671f\u95f4\u4e3a350\u03bcA\n\n\n0\u301c100\uff05RH\u5de5\u4f5c\u8303\u56f4\n\n\n\u6d4b\u91cf\u8303\u56f4\uff1a\n\u00a0\u00a0\u00a0\u00a0 - \u6e7f\u5ea6\uff1a0\uff05 - 80\uff05RH\n\u00a0\u00a0\u00a0\u00a0 - \u6e29\u5ea6\uff1a0\u301c70\u2103\n\n\n\u51c6\u786e\u6027\uff1a\n\u00a0\u00a0\u00a0\u00a0 - \u6e7f\u5ea6\uff1a\u00b14.5\uff05RH\n\u00a0\u00a0\u00a0\u00a0 - \u6e29\u5ea6\uff1a\u00b10.5\u00b0C\n\n\n\u5177\u6709 I2C \u4e3b\u673a\u63a5\u53e3\n\n\n\u5177\u6709\u957f\u671f\u8fd0\u884c\u7684\u7a33\u5b9a\u6027\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\nPlatforms Supported\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u5de5\u4e1aHVAC / R\n\n\n\u6052\u6e29\u5668/\u6e7f\u5ea6\u8ba1\n\n\n\u5fae\u73af\u5883/\u6570\u636e\u4e2d\u5fc3\n\n\n\n\n\u793a\u8303\n\n\n\u8be5\u6f14\u793a\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4ece\u8be5 Grove - Temperature\nHumidity Sensor (High-Accuracy \nMini) Sensor \u8bfb\u53d6\u6e29\u5ea6\u548c\u6e7f\u5ea6\u4fe1\u606f\u3002\n\n\n\n\u5c06 Temperature and Humidity sensor \u8fde\u63a5\u5230 Grove - Base Shield \u7684\u6a21\u62df\u7aef\u53e3 \nI2C\n\u3002\n\n\n\n\n\u4e0b\u8f7d  \nGrove_Temper_Humidity_TH02 \u5e93\n \u5e76\u4e14\u5b89\u88c5\u8fd9\u4e2a\u5e93\u5230 Arduino \u5e93\u6587\u4ef6\u3002\n\n\n\n\n/*\n * Demo name  ?: TH02_dev demo\n * Usage      ?: DIGITAL I2C HUMIDITY AND TEMPERATURE SENSOR\n * Author     ?: Oliver Wang from Seeed Studio\n * Version    ?: V0.1\n */\n\n#include \nTH02_dev.h\n\n#include \nArduino.h\n\n#include \nWire.h\n\n\nvoid setup()\n{\n    Serial.begin(9600);        // start serial for output\n\n    Serial.println(\n****TH02_dev demo by seeed studio****\\n\n);\n    /* Power up,delay 150ms,until voltage is stable */\n    delay(150);\n    /* Reset HP20x_dev */\n    TH02.begin();\n    delay(100);\n\n    /* Determine TH02_dev is available or not */\n    Serial.println(\nTH02_dev is available.\\n\n);\n}\n\n\nvoid loop()\n{\n    float temper = TH02.ReadTemperature();\n    Serial.println(\nTemperature: \n);\n    Serial.print(temper);\n    Serial.println(\nC\\r\\n\n);\n\n    float humidity = TH02.ReadHumidity();\n    Serial.println(\nHumidity: \n);\n    Serial.print(humidity);\n    Serial.println(\n%\\r\\n\n);\n    delay(1000);\n}\n\n\n\n\n\u5c06\u5176\u4e0a\u4f20\u5230\u60a8\u7684 Arduino \u677f\u4e0a\uff0c\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u89c2\u5bdf\u73af\u5883\u7684\u6e29\u5ea6\u548c\u76f8\u5bf9\u6e7f\u5ea6\u4fe1\u606f\u3002\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - Temperature\nHumidity Sensor (High-Accuracy \n Mini) V1.0 sch pcb\n\n\nTH02_SENSOR.pdf\n\n\nGrove_Temper_Humidity_TH02 library", 
            "title": "Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0"
        }, 
        {
            "location": "/Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b\u8303\u56f4\n\u00a0\u00a0\u00a0\u00a0 - \uff083.3V\u301c5V\uff09  \u4f4e\u529f\u8017\n\u00a0\u00a0\u00a0\u00a0 - \u5728 RH \u8f6c\u6362\u671f\u95f4\u4e3a350\u03bcA  0\u301c100\uff05RH\u5de5\u4f5c\u8303\u56f4  \u6d4b\u91cf\u8303\u56f4\uff1a\n\u00a0\u00a0\u00a0\u00a0 - \u6e7f\u5ea6\uff1a0\uff05 - 80\uff05RH\n\u00a0\u00a0\u00a0\u00a0 - \u6e29\u5ea6\uff1a0\u301c70\u2103  \u51c6\u786e\u6027\uff1a\n\u00a0\u00a0\u00a0\u00a0 - \u6e7f\u5ea6\uff1a\u00b14.5\uff05RH\n\u00a0\u00a0\u00a0\u00a0 - \u6e29\u5ea6\uff1a\u00b10.5\u00b0C  \u5177\u6709 I2C \u4e3b\u673a\u63a5\u53e3  \u5177\u6709\u957f\u671f\u8fd0\u884c\u7684\u7a33\u5b9a\u6027    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u53c2\u6570"
        }, 
        {
            "location": "/Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0/#_2", 
            "text": "\u5de5\u4e1aHVAC / R  \u6052\u6e29\u5668/\u6e7f\u5ea6\u8ba1  \u5fae\u73af\u5883/\u6570\u636e\u4e2d\u5fc3", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0/#_3", 
            "text": "\u8be5\u6f14\u793a\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4ece\u8be5 Grove - Temperature Humidity Sensor (High-Accuracy  Mini) Sensor \u8bfb\u53d6\u6e29\u5ea6\u548c\u6e7f\u5ea6\u4fe1\u606f\u3002  \n\u5c06 Temperature and Humidity sensor \u8fde\u63a5\u5230 Grove - Base Shield \u7684\u6a21\u62df\u7aef\u53e3  I2C \u3002   \u4e0b\u8f7d   Grove_Temper_Humidity_TH02 \u5e93  \u5e76\u4e14\u5b89\u88c5\u8fd9\u4e2a\u5e93\u5230 Arduino \u5e93\u6587\u4ef6\u3002   /*\n * Demo name  ?: TH02_dev demo\n * Usage      ?: DIGITAL I2C HUMIDITY AND TEMPERATURE SENSOR\n * Author     ?: Oliver Wang from Seeed Studio\n * Version    ?: V0.1\n */\n\n#include  TH02_dev.h \n#include  Arduino.h \n#include  Wire.h \n\nvoid setup()\n{\n    Serial.begin(9600);        // start serial for output\n\n    Serial.println( ****TH02_dev demo by seeed studio****\\n );\n    /* Power up,delay 150ms,until voltage is stable */\n    delay(150);\n    /* Reset HP20x_dev */\n    TH02.begin();\n    delay(100);\n\n    /* Determine TH02_dev is available or not */\n    Serial.println( TH02_dev is available.\\n );\n}\n\n\nvoid loop()\n{\n    float temper = TH02.ReadTemperature();\n    Serial.println( Temperature:  );\n    Serial.print(temper);\n    Serial.println( C\\r\\n );\n\n    float humidity = TH02.ReadHumidity();\n    Serial.println( Humidity:  );\n    Serial.print(humidity);\n    Serial.println( %\\r\\n );\n    delay(1000);\n}  \u5c06\u5176\u4e0a\u4f20\u5230\u60a8\u7684 Arduino \u677f\u4e0a\uff0c\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u89c2\u5bdf\u73af\u5883\u7684\u6e29\u5ea6\u548c\u76f8\u5bf9\u6e7f\u5ea6\u4fe1\u606f\u3002", 
            "title": "\u793a\u8303"
        }, 
        {
            "location": "/Grove-TemptureAndHumidity_Sensor_High_Accuracy_AndMini-v1.0/#_4", 
            "text": "Grove - Temperature Humidity Sensor (High-Accuracy   Mini) V1.0 sch pcb  TH02_SENSOR.pdf  Grove_Temper_Humidity_TH02 library", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor_Pro/", 
            "text": "\u8fd9\u662f\u6211\u4eec\u7684Grove\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u7684\u4e00\u4e2a\u5f3a\u5927\u7684\u59d0\u59b9\u7248\u672c\u3002 \u5b83\u5177\u6709\u6bd4\u57fa\u672c\u7248\u672c\u66f4\u5b8c\u6574\u548c\u51c6\u786e\u7684\u6027\u80fd\u3002 \u8be5\u4f20\u611f\u5668\u7684\u68c0\u6d4b\u8303\u56f4\u4e3a5\uff05RH - 99\uff05RH\uff0c-40\u00b0C\u81f380\u00b0C\u3002\u5176\u7cbe\u5ea6\u8fbe\u52302\uff05RH\u548c0.5\u00b0C\u3002\u5982\u679c\u5bf9\u4f7f\u7528\u5177\u6709\u4e25\u683c\u7684\u8981\u6c42\uff0c\u8fd9\u4e2a\u4f20\u611f\u5668\u662f\u5f88\u4e13\u4e1a\u7684\u9009\u62e9\u3002\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6700\u5c0f\n\n\n\u6807\u51c6\n\n\n\u6700\u5927\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\n3.3\n\n\n-\n\n\n6\n\n\nV\n\n\n\n\n\n\n\u652f\u6301\u6d4b\u91cf\u7535\u6d41\n\n\n1\n\n\n-\n\n\n1.5\n\n\nmA\n\n\n\n\n\n\n\u5f85\u673a\u7535\u6d41\n\n\n40\n\n\n-\n\n\n50\n\n\nuA\n\n\n\n\n\n\n\u6d4b\u91cf\u8303\u56f4  \n(\u6e7f\u5ea6)\n\n\n5%\n\n\n-\n\n\n99%\n\n\nRH\n\n\n\n\n\n\n\u6d4b\u91cf\u8303\u56f4 \n(\u6e29\u5ea6)\n\n\n-40\n\n\n-\n\n\n80\n\n\n\u00b0C\n\n\n\n\n\n\n\u7cbe\u5ea6 \n(\u6e7f\u5ea6)\n\n\n-\n\n\n-\n\n\n\u00b12%\n\n\nRH\n\n\n\n\n\n\n\u7cbe\u5ea6 \n(\u6e29\u5ea6)\n\n\n-\n\n\n-\n\n\n\u00b10.5\n\n\n\u00b0C\n\n\n\n\n\n\n\u5206\u8fa8\u7387    \n(\u6e7f\u5ea6)\n\n\n-\n\n\n-\n\n\n0.1%\n\n\nRH\n\n\n\n\n\n\n\u5206\u8fa8\u7387 \n(\u6e29\u5ea6)\n\n\n-\n\n\n-\n\n\n0.1\n\n\n\u00b0C\n\n\n\n\n\n\n\u518d\u73b0\u6027    \n(\u6e7f\u5ea6)\n\n\n-\n\n\n-\n\n\n\u00b10.3%\n\n\nRH\n\n\n\n\n\n\n\u518d\u73b0\u6027 \n(\u6e29\u5ea6)\n\n\n-\n\n\n-\n\n\n\u00b10.2\n\n\n\u00b0C\n\n\n\n\n\n\n\u957f\u671f\u7a33\u5b9a\u6027\n\n\n-\n\n\n-\n\n\n\u00b10.5%\n\n\nRH/year\n\n\n\n\n\n\n\u4fe1\u53f7\u91c7\u96c6\u5468\u671f\n\n\n-\n\n\n2\n\n\n-\n\n\nS\n\n\n\n\n\n\n\u54cd\u5e94\u65f6\u95f41 / e\uff0863\uff05\uff09\n\n\n6\n\n\n-\n\n\n20\n\n\nS\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003\nGrove System\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u4ee5\u4e0b\u662f\u5165\u95e8\u7528\u6237\u6307\u5357\u3002\n\n\n\n\n \u5165\u95e8\u6307\u5bfc\n\n\nGrove\u7684\u4ecb\u7ecd\n\n\n\n\n\u6211\u4eec\u63d0\u4f9b2\u4e2a\u793a\u4f8b\uff0c\u5305\u62ec\u5728arduino\u548craspberry pi\u5e73\u53f0\u4e0a\u6267\u884c\u3002\n\n\n\u4f7f\u7528 Arduino\n\n\n\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2aGrove - \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - DHT Sensor pro\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u5c06 Temperature and Humidity Sensor Pro\u8fde\u63a5\u5230 \nGrove - Base Shiel\n \u7684D2\u7aef\u53e3\u3002 \u7136\u540e\u5c06Grove - Base Shield\u63d2\u5165Arduino\uff0c\u5e76\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002\n\n\n\n\n\n\n\n\n\n\n\u8bf7\u9075\u5faa \n\u5982\u4f55\u5b89\u88c5arduino\u5e93\n\u6765\u5b89\u88c5\u5e93\u3002\n\n\n\n\n\n\n\u4e0b\u8f7d\nSeeed DHT\u5e93\n\uff0c\u800carduino\u677f\u662f16MHz XTAL\u7684;\u8fd8\u6709\u53e6\u4e00\u4e2a\u5e93 - \nDHTlib\n\u4e5f\u53ef\u7528\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fSeeed DHT\u5e93\u3002 \u8be5\u5e93\u652f\u630116MHz\u548c8MHz\u7684 Arduino\uff08\u4f8b\u5982Seeeduino Stalker\uff09\n\n\n\n\n\n\n\u91cd\u65b0\u542f\u52a8Arduino IDE\u3002 \u901a\u8fc7\u8def\u5f84\u6253\u5f00\u201cDHTtester\u201d\u793a\u4f8b\uff1a \nFile\uff08\u6587\u4ef6\uff09 \n Examples\uff08\u793a\u4f8b\uff09 \n Grove_Humidity_Temperature_Sensor-master \n DHTtester\n. \u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u7684\u6e29\u5ea6\u548c\u76f8\u5bf9\u6e7f\u5ea6\u4fe1\u606f\u3002\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\u8fd9\u4e2aGrove - Temperature and Humidity Sensor Pro \u548c\u6211\u4eec\u7684\u53e6\u4e00\u4e2a\u4ea7\u54c1\nGrove-Temperature and Humidity Sensor\n\u6b63\u5728\u5171\u4eab\u6b64\u5e93\u3002 \u65e0\u8bba\u60a8\u4f7f\u7528\u54ea\u79cd\u4ea7\u54c1\uff0c\u8bf7\u786e\u4fdd\u60a8\u4e3a\u4f20\u611f\u5668\u7684\u5b9a\u4e49\u7684\u7aef\u53e3\u751f\u6548\uff0c\u5e76\u5c06\u5176\u4ed6\u89c4\u683c\u7684\u5b9a\u4e49\u5728\u7a0b\u5e8f\u4e2d\u6ce8\u91ca\u6389\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5728Grove - Temperature and Humidity Sensor Pro \u4e0a\u4f7f\u7528\u7684\u4f20\u611f\u5668\u662fDHT 22.\u56e0\u6b64\u4f20\u611f\u5668\u89c4\u683c\u7684\u5b9a\u4e49\u90e8\u5206\u5e94\u8be5\u662f\uff1a\n\n\n\n\n//#define DHTTYPE DHT11   // DHT 11\n#define DHTTYPE DHT22   // DHT 22  (AM2302)\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)or\n\n\n- \u5c06\u5176\u4e0a\u4f20\u5230\u60a8\u7684Arduino\u677f\u3002\n- \u8fd9\u91cc\u5c31\u662f\u8f93\u51fa\u7ed3\u679c\n\n\n\n\n\u4f7f\u7528Raspberry Pi\n\n\n\u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nRaspberry pi\n\n\nGrove - DHT Sensor pro\n\n\nGrovepi+\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u6309\u7167\n\u8bf4\u660e\n\u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002\n\n\n\n\n-\u5c06grove DHT pro\u63d2\u5165Grovepi +\u7684\u63d2\u5ea7D4\u3002\n\n\n- \u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\uff1a\n\n\n  cd yourpath/GrovePi/Software/Python/\n\n\n\n\n\n\n\u627e\u5230\u8fd9\u5217\u4ee3\u7801\n\n\n\n\n    nano grove_dht_pro.py   # \nCtrl+x\n to exit #\n\n\n\n\nimport grovepi\n\n# Connect the Grove Temperature \n Humidity Sensor Pro to digital port D4\n# SIG,NC,VCC,GND\nsensor = 4\n\nwhile True:\n    try:\n        [temp,humidity] = grovepi.dht(sensor,1)\n        print \ntemp =\n, temp, \n humidity =\n, humidity\n\n    except IOError:\n        print \nError\n\n\n\n\n\n\n\n\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n\n\n\n      sudo python grove_dht_pro.py\n\n\n- \u8fd9\u91cc\u662f\u8f93\u51fa\u7ed3\u679c\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nTemp Humi Pro in eagle format\n\n\nTemp Humi Pro PCB in PDF format\n\n\nTemp Humi Pro Schematic in PDF format\n\n\nHumidity Temperature Sensor pro library\n\n\nAM2302-CN.pdf\n\n\nAM2302-EN.pdf", 
            "title": "Grove-Temperature_and_Humidity_Sensor_Pro"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor_Pro/#_1", 
            "text": "\u9879\u76ee  \u6700\u5c0f  \u6807\u51c6  \u6700\u5927  \u5355\u4f4d      VCC  3.3  -  6  V    \u652f\u6301\u6d4b\u91cf\u7535\u6d41  1  -  1.5  mA    \u5f85\u673a\u7535\u6d41  40  -  50  uA    \u6d4b\u91cf\u8303\u56f4   (\u6e7f\u5ea6)  5%  -  99%  RH    \u6d4b\u91cf\u8303\u56f4  (\u6e29\u5ea6)  -40  -  80  \u00b0C    \u7cbe\u5ea6  (\u6e7f\u5ea6)  -  -  \u00b12%  RH    \u7cbe\u5ea6  (\u6e29\u5ea6)  -  -  \u00b10.5  \u00b0C    \u5206\u8fa8\u7387     (\u6e7f\u5ea6)  -  -  0.1%  RH    \u5206\u8fa8\u7387  (\u6e29\u5ea6)  -  -  0.1  \u00b0C    \u518d\u73b0\u6027     (\u6e7f\u5ea6)  -  -  \u00b10.3%  RH    \u518d\u73b0\u6027  (\u6e29\u5ea6)  -  -  \u00b10.2  \u00b0C    \u957f\u671f\u7a33\u5b9a\u6027  -  -  \u00b10.5%  RH/year    \u4fe1\u53f7\u91c7\u96c6\u5468\u671f  -  2  -  S    \u54cd\u5e94\u65f6\u95f41 / e\uff0863\uff05\uff09  6  -  20  S      Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 Grove System", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor_Pro/#_2", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor_Pro/#_3", 
            "text": "\u4ee5\u4e0b\u662f\u5165\u95e8\u7528\u6237\u6307\u5357\u3002    \u5165\u95e8\u6307\u5bfc  Grove\u7684\u4ecb\u7ecd   \u6211\u4eec\u63d0\u4f9b2\u4e2a\u793a\u4f8b\uff0c\u5305\u62ec\u5728arduino\u548craspberry pi\u5e73\u53f0\u4e0a\u6267\u884c\u3002  \u4f7f\u7528 Arduino  \u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2aGrove - \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - DHT Sensor pro  Base Shield           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u5c06 Temperature and Humidity Sensor Pro\u8fde\u63a5\u5230  Grove - Base Shiel  \u7684D2\u7aef\u53e3\u3002 \u7136\u540e\u5c06Grove - Base Shield\u63d2\u5165Arduino\uff0c\u5e76\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002      \u8bf7\u9075\u5faa  \u5982\u4f55\u5b89\u88c5arduino\u5e93 \u6765\u5b89\u88c5\u5e93\u3002    \u4e0b\u8f7d Seeed DHT\u5e93 \uff0c\u800carduino\u677f\u662f16MHz XTAL\u7684;\u8fd8\u6709\u53e6\u4e00\u4e2a\u5e93 -  DHTlib \u4e5f\u53ef\u7528\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fSeeed DHT\u5e93\u3002 \u8be5\u5e93\u652f\u630116MHz\u548c8MHz\u7684 Arduino\uff08\u4f8b\u5982Seeeduino Stalker\uff09    \u91cd\u65b0\u542f\u52a8Arduino IDE\u3002 \u901a\u8fc7\u8def\u5f84\u6253\u5f00\u201cDHTtester\u201d\u793a\u4f8b\uff1a  File\uff08\u6587\u4ef6\uff09   Examples\uff08\u793a\u4f8b\uff09   Grove_Humidity_Temperature_Sensor-master   DHTtester . \u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u7684\u6e29\u5ea6\u548c\u76f8\u5bf9\u6e7f\u5ea6\u4fe1\u606f\u3002      Note  \u8fd9\u4e2aGrove - Temperature and Humidity Sensor Pro \u548c\u6211\u4eec\u7684\u53e6\u4e00\u4e2a\u4ea7\u54c1 Grove-Temperature and Humidity Sensor \u6b63\u5728\u5171\u4eab\u6b64\u5e93\u3002 \u65e0\u8bba\u60a8\u4f7f\u7528\u54ea\u79cd\u4ea7\u54c1\uff0c\u8bf7\u786e\u4fdd\u60a8\u4e3a\u4f20\u611f\u5668\u7684\u5b9a\u4e49\u7684\u7aef\u53e3\u751f\u6548\uff0c\u5e76\u5c06\u5176\u4ed6\u89c4\u683c\u7684\u5b9a\u4e49\u5728\u7a0b\u5e8f\u4e2d\u6ce8\u91ca\u6389\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5728Grove - Temperature and Humidity Sensor Pro \u4e0a\u4f7f\u7528\u7684\u4f20\u611f\u5668\u662fDHT 22.\u56e0\u6b64\u4f20\u611f\u5668\u89c4\u683c\u7684\u5b9a\u4e49\u90e8\u5206\u5e94\u8be5\u662f\uff1a   //#define DHTTYPE DHT11   // DHT 11\n#define DHTTYPE DHT22   // DHT 22  (AM2302)\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)or \n- \u5c06\u5176\u4e0a\u4f20\u5230\u60a8\u7684Arduino\u677f\u3002\n- \u8fd9\u91cc\u5c31\u662f\u8f93\u51fa\u7ed3\u679c   \u4f7f\u7528Raspberry Pi  \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Raspberry pi  Grove - DHT Sensor pro  Grovepi+           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u6309\u7167 \u8bf4\u660e \u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002   -\u5c06grove DHT pro\u63d2\u5165Grovepi +\u7684\u63d2\u5ea7D4\u3002 \n- \u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\uff1a    cd yourpath/GrovePi/Software/Python/   \u627e\u5230\u8fd9\u5217\u4ee3\u7801       nano grove_dht_pro.py   #  Ctrl+x  to exit #  import grovepi\n\n# Connect the Grove Temperature   Humidity Sensor Pro to digital port D4\n# SIG,NC,VCC,GND\nsensor = 4\n\nwhile True:\n    try:\n        [temp,humidity] = grovepi.dht(sensor,1)\n        print  temp = , temp,   humidity = , humidity\n\n    except IOError:\n        print  Error    \u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b         sudo python grove_dht_pro.py \n- \u8fd9\u91cc\u662f\u8f93\u51fa\u7ed3\u679c", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor_Pro/#_4", 
            "text": "Temp Humi Pro in eagle format  Temp Humi Pro PCB in PDF format  Temp Humi Pro Schematic in PDF format  Humidity Temperature Sensor pro library  AM2302-CN.pdf  AM2302-EN.pdf", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/", 
            "text": "\u8be5\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u63d0\u4f9b\u9884\u6821\u51c6\u7684\u6570\u5b57\u8f93\u51fa\u3002 \u91c7\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u7535\u5bb9\u4f20\u611f\u5143\u4ef6\u6d4b\u91cf\u76f8\u5bf9\u6e7f\u5ea6\uff0c\u6e29\u5ea6\u5219\u7531\u8d1f\u6e29\u5ea6\u7cfb\u6570\uff08NTC\uff09\u70ed\u654f\u7535\u963b\u6d4b\u91cf\u3002 \u5177\u6709\u826f\u597d\u7684\u53ef\u9760\u6027\u548c\u957f\u671f\u7684\u7a33\u5b9a\u6027\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u4f20\u611f\u5668\u4e0d\u9002\u7528\u4e8e\u4f4e\u4e8e0\u5ea6\u7684\u6e29\u5ea6\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u76f8\u5bf9\u6e7f\u5ea6\u548c\u6e29\u5ea6\u6d4b\u91cf\n\n\n\u5168\u8303\u56f4\u6e29\u5ea6\u8865\u507f\u6821\u51c6\n\n\n\u8f93\u51fa\u6570\u5b57\u4fe1\u53f7\n\n\n\u80fd\u591f\u957f\u671f\u7a33\u5b9a\u7684\u8fd0\u884c\n\n\n\u4f20\u8f93\u8ddd\u79bb\u8fdc\uff08\n 20m\uff09\n\n\n\u4f4e\u529f\u8017\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u6d88\u8d39\u4ea7\u54c1\n\n\n\u6c14\u8c61\u53f0\n\n\n\u6e7f\u5ea6\u8c03\u8282\u5668\n\n\n\u51b7\u6c14\u673a\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\u4e3b\u8981\u7684\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u89c4\u683c\n\n\n\n\n\n\n\n\n\n\nPCB\u5c3a\u5bf8\n\n\n2.0cm*4.0cm\n\n\n\n\n\n\n\u63a5\u53e3\n\n\n2.0mm\u95f4\u8ddd\u7684\u9488\u5934\n\n\n\n\n\n\nIO\u7ed3\u6784\n\n\nSIG,VCC,GND,NC\n\n\n\n\n\n\nROHS\n\n\nYES\n\n\n\n\n\n\n\n\n\u7535\u5b50\u7279\u6027\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6761\u4ef6\n\n\n\n\n\u6700\u5c0f\n\n\n\n\n\u6807\u51c6\n\n\n\n\n\u6700\u5927\n\n\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\nVCC\n\n\n\n\n-\n\n\n\n\n3.3\n\n\n\n\n-\n\n\n\n\n5\n\n\n\n\nV\n\n\n\n\n\n\n\n\n\u6d4b\u91cf\u7535\u6d41\n\n\n\n\n-\n\n\n\n\n1.3\u00a0\n\n\n\n\n-\u00a0\n\n\n\n\n2.1\n\n\n\n\nmA\n\n\n\n\n\n\n\n\n\u5e73\u5747\u4f9b\u5e94\u7535\u6d41\n\n\n\n\n-\n\n\n\n\n0.5\n\n\n\n\n-\n\n\n\n\n1.1\n\n\n\n\nmA\n\n\n\n\n\n\n\n\n\u6d4b\u91cf\u8303\u56f4\n\n\n\n\n\u6e7f\u5ea6\n\n\n\n\n20%\n\n\n\n\n-\n\n\n\n\n90%\n\n\n\n\nRH\n\n\n\n\n\n\n\n\n\u6e29\u5ea6\n\n\n\n\n0\n\n\n\n\n-\n\n\n\n\n50\n\n\n\n\n\u00b0C\n\n\n\n\n\n\n\n\n\u51c6\u786e\u6027\n\n\n\n\n\u6e7f\u5ea6\n\n\n\n\n-\n\n\n\n\n-\n\n\n\n\n\u00b15%\n\n\n\n\nRH\n\n\n\n\n\n\n\n\n\u6e29\u5ea6\n\n\n\n\n\n\n\n\n\n\n\n\n\u00b12\n\n\n\n\n\u00b0C\n\n\n\n\n\n\n\n\n\u7075\u654f\u5ea6\n\n\n\n\n\u6e7f\u5ea6\n\n\n\n\n\n\n\n\n-\n\n\n\n\n1%\n\n\n\n\nRH\n\n\n\n\n\n\n\n\n\u6e29\u5ea6\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\u00b0C\n\n\n\n\n\n\n\n\n\u518d\u73b0\u6027\n\n\n\n\n\u6e7f\u5ea6\n\n\n\n\n\n\n\n\n\n\n\n\n\u00b11%\n\n\n\n\nRH\n\n\n\n\n\n\n\n\n\u6e29\u5ea6\n\n\n\n\n\n\n\n\n\n\n\n\n\u00b11\n\n\n\n\n\u00b0C\n\n\n\n\n\n\n\n\n\u957f\u671f\u8fd0\u884c\u7a33\u5b9a\u6027\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00b11%\n\n\n\n\nRH/\u5e74\n\n\n\n\n\n\n\n\n\u4fe1\u53f7\u91c7\u96c6\u5468\u671f\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\u5f53MCU\u53d1\u9001\u89e6\u53d1\u4fe1\u53f7\u65f6\uff0c\u4f20\u611f\u5668\u5c06\u4ece\u4f4e\u529f\u8017\u6a21\u5f0f\u5207\u6362\u5230\u6fc0\u6d3b\u6a21\u5f0f\u3002 trigger signal\u4f20\u611f\u5668\u5c06\u54cd\u5e94\u4fe1\u53f7\u53d1\u9001\u56deMCU\u540e\uff0c\u5b83\u5c06\u4f20\u8f93\u51fa40\u4f4d\u91c7\u96c6\u5230\u7684\u6570\u636e\u5e76\u89e6\u53d1\u65b0\u7684\u4fe1\u53f7\u91c7\u96c6\uff08\u8bf7\u6ce8\u610f\uff0c\u5728\u89e6\u53d1\u4fe1\u53f7\u5230\u6765\u4e4b\u524dMCU\u5df2\u7ecf\u6536\u96c6\u5230\u4ece\u4f20\u611f\u5668\u53d1\u9001\u6765\u768440\u4f4d\u91c7\u96c6\u5230\u7684\u6570\u636e\uff09\u4e00\u4e2a\u89e6\u53d1\u4fe1\u53f7\u80fd\u591f\u4ece\u4f20\u611f\u5668\u63a5\u6536\u4e00\u6b2140\u4f4d\u54cd\u5e94\u7684\u6570\u636e\u3002 \u5355\u603b\u7ebf\u6570\u636e\u7528\u4e8eMCU\u548c\u4f20\u611f\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\n\u901a\u4fe1\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n\n\n\n\u5355\u6b21\u901a\u4fe1\u9700\u89815ms\uff0c\u5728\u9ad8\u4f4d\u7684\u6570\u636e\u9996\u5148\u53d1\u51fa\u3002 \u4fe1\u53f7\u6570\u636e\u4e3a40\u4f4d\uff0c\u5305\u62ec16\u4f4d\u6e7f\u5ea6\u6570\u636e\uff0c16\u4f4d\u6e29\u5ea6\u6570\u636e\u548c8\u4f4d\u6821\u9a8c\u6570\u636e\u3002\u6570\u636e\u683c\u5f0f\u4e3a\uff1a\n\n\n8bits integer part of humidity+8bits decimal part of humidity\n+8bits integer part of temperature+8bits decimal part of temperature\n+8bits checksum.\n\n\n\n\n\n\u7a0b\u5e8f\n\n\n\u5c06\u6e29\u5ea6\u548c\u6e7f\u5ea6\u4f20\u611f\u5668\u8fde\u63a5\u5230\u6a21\u62df\u7aef\u53e3 \nA0\n .\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7a0b\u5e8f\u83b7\u5f97\u73af\u5883\u6e29\u5ea6\u548c\u6e7f\u5ea6\uff08\u4ee3\u7801\u4ec5\u9002\u7528\u4e8eseeeduino\uff0c\u5982\u679c\u4f7f\u7528seeeduino mega\uff0c\u5219\u5e94\u66f4\u6539\u4ee3\u7801\uff0c\u5c06PINC\u66f4\u6539\u4e3aPINF\uff0c\u5c06DDRC\u66f4\u6539\u4e3aDDRF\u5e76\u5c06PORTC\u66f4\u6539\u4e3aPORTF\uff09\n\n\n\n\n#define DHT11_PIN 0      // ADC0\n\nbyte read_dht11_dat()\n{\n    byte i = 0;\n    byte result=0;\n    for(i=0; i\n 8; i++){\n\n        while(!(PINC \n _BV(DHT11_PIN)));  // wait for 50us\n        delayMicroseconds(30);\n\n        if(PINC \n _BV(DHT11_PIN))\n        result |=(1\n(7-i));\n        while((PINC \n _BV(DHT11_PIN)));  // wait \n1\n finish\n    }\n    return result;\n}\n\nvoid setup()\n{\n    DDRC |= _BV(DHT11_PIN);\n    PORTC |= _BV(DHT11_PIN);\n\n    Serial.begin(9600);\n    Serial.println(\nReady\n);\n}\n\nvoid loop()\n{\n    byte dht11_dat[5];\n    byte dht11_in;\n    byte i;\n    // start condition\n    // 1. pull-down i/o pin from 18ms\n    PORTC \n= ~_BV(DHT11_PIN);\n    delay(18);\n    PORTC |= _BV(DHT11_PIN);\n    delayMicroseconds(40);\n\n    DDRC \n= ~_BV(DHT11_PIN);\n    delayMicroseconds(40);\n\n    dht11_in = PINC \n _BV(DHT11_PIN);\n\n    if(dht11_in){\n        Serial.println(\ndht11 start condition 1 not met\n);\n        return;\n    }\n    delayMicroseconds(80);\n\n    dht11_in = PINC \n _BV(DHT11_PIN);\n\n    if(!dht11_in){\n        Serial.println(\ndht11 start condition 2 not met\n);\n        return;\n    }\n    delayMicroseconds(80);\n    // now ready for data reception\n    for (i=0; i\n5; i++)\n    dht11_dat[i] = read_dht11_dat();\n\n    DDRC |= _BV(DHT11_PIN);\n    PORTC |= _BV(DHT11_PIN);\n\n    byte dht11_check_sum = dht11_dat[0]+dht11_dat[1]+dht11_dat[2]+dht11_dat[3];\n    // check check_sum\n    if(dht11_dat[4]!= dht11_check_sum)\n    {\n        Serial.println(\nDHT11 checksum error\n);\n    }\n\n    Serial.print(\nCurrent humdity = \n);\n    Serial.print(dht11_dat[0], DEC);\n    Serial.print(\n.\n);\n    Serial.print(dht11_dat[1], DEC);\n    Serial.print(\n%  \n);\n    Serial.print(\ntemperature = \n);\n    Serial.print(dht11_dat[2], DEC);\n    Serial.print(\n.\n);\n    Serial.print(dht11_dat[3], DEC);\n    Serial.println(\nC  \n);\n\n    delay(2000);\n}\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nTemperature Humidity.zip\n\n\nSchematic at Easyeda", 
            "title": "Grove-Temperature_and_Humidity_Sensor"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_1", 
            "text": "\u76f8\u5bf9\u6e7f\u5ea6\u548c\u6e29\u5ea6\u6d4b\u91cf  \u5168\u8303\u56f4\u6e29\u5ea6\u8865\u507f\u6821\u51c6  \u8f93\u51fa\u6570\u5b57\u4fe1\u53f7  \u80fd\u591f\u957f\u671f\u7a33\u5b9a\u7684\u8fd0\u884c  \u4f20\u8f93\u8ddd\u79bb\u8fdc\uff08  20m\uff09  \u4f4e\u529f\u8017    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_2", 
            "text": "\u6d88\u8d39\u4ea7\u54c1  \u6c14\u8c61\u53f0  \u6e7f\u5ea6\u8c03\u8282\u5668  \u51b7\u6c14\u673a", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_3", 
            "text": "", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_4", 
            "text": "", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_5", 
            "text": "\u9879\u76ee  \u89c4\u683c      PCB\u5c3a\u5bf8  2.0cm*4.0cm    \u63a5\u53e3  2.0mm\u95f4\u8ddd\u7684\u9488\u5934    IO\u7ed3\u6784  SIG,VCC,GND,NC    ROHS  YES", 
            "title": "\u4e3b\u8981\u7684\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_6", 
            "text": "\u9879\u76ee  \n\u6761\u4ef6  \n\u6700\u5c0f  \n\u6807\u51c6  \n\u6700\u5927  \n\u5355\u4f4d    \nVCC  \n-  \n3.3  \n-  \n5  \nV    \n\u6d4b\u91cf\u7535\u6d41  \n-  \n1.3\u00a0  \n-\u00a0  \n2.1  \nmA    \n\u5e73\u5747\u4f9b\u5e94\u7535\u6d41  \n-  \n0.5  \n-  \n1.1  \nmA    \n\u6d4b\u91cf\u8303\u56f4  \n\u6e7f\u5ea6  \n20%  \n-  \n90%  \nRH    \n\u6e29\u5ea6  \n0  \n-  \n50  \n\u00b0C    \n\u51c6\u786e\u6027  \n\u6e7f\u5ea6  \n-  \n-  \n\u00b15%  \nRH    \n\u6e29\u5ea6      \n\u00b12  \n\u00b0C    \n\u7075\u654f\u5ea6  \n\u6e7f\u5ea6    \n-  \n1%  \nRH    \n\u6e29\u5ea6      \n1  \n\u00b0C    \n\u518d\u73b0\u6027  \n\u6e7f\u5ea6      \n\u00b11%  \nRH    \n\u6e29\u5ea6      \n\u00b11  \n\u00b0C    \n\u957f\u671f\u8fd0\u884c\u7a33\u5b9a\u6027        \n\u00b11%  \nRH/\u5e74    \n\u4fe1\u53f7\u91c7\u96c6\u5468\u671f      \n2    \nS", 
            "title": "\u7535\u5b50\u7279\u6027"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_7", 
            "text": "\u5f53MCU\u53d1\u9001\u89e6\u53d1\u4fe1\u53f7\u65f6\uff0c\u4f20\u611f\u5668\u5c06\u4ece\u4f4e\u529f\u8017\u6a21\u5f0f\u5207\u6362\u5230\u6fc0\u6d3b\u6a21\u5f0f\u3002 trigger signal\u4f20\u611f\u5668\u5c06\u54cd\u5e94\u4fe1\u53f7\u53d1\u9001\u56deMCU\u540e\uff0c\u5b83\u5c06\u4f20\u8f93\u51fa40\u4f4d\u91c7\u96c6\u5230\u7684\u6570\u636e\u5e76\u89e6\u53d1\u65b0\u7684\u4fe1\u53f7\u91c7\u96c6\uff08\u8bf7\u6ce8\u610f\uff0c\u5728\u89e6\u53d1\u4fe1\u53f7\u5230\u6765\u4e4b\u524dMCU\u5df2\u7ecf\u6536\u96c6\u5230\u4ece\u4f20\u611f\u5668\u53d1\u9001\u6765\u768440\u4f4d\u91c7\u96c6\u5230\u7684\u6570\u636e\uff09\u4e00\u4e2a\u89e6\u53d1\u4fe1\u53f7\u80fd\u591f\u4ece\u4f20\u611f\u5668\u63a5\u6536\u4e00\u6b2140\u4f4d\u54cd\u5e94\u7684\u6570\u636e\u3002 \u5355\u603b\u7ebf\u6570\u636e\u7528\u4e8eMCU\u548c\u4f20\u611f\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\n\u901a\u4fe1\u8fc7\u7a0b\u5982\u4e0b\uff1a   \u5355\u6b21\u901a\u4fe1\u9700\u89815ms\uff0c\u5728\u9ad8\u4f4d\u7684\u6570\u636e\u9996\u5148\u53d1\u51fa\u3002 \u4fe1\u53f7\u6570\u636e\u4e3a40\u4f4d\uff0c\u5305\u62ec16\u4f4d\u6e7f\u5ea6\u6570\u636e\uff0c16\u4f4d\u6e29\u5ea6\u6570\u636e\u548c8\u4f4d\u6821\u9a8c\u6570\u636e\u3002\u6570\u636e\u683c\u5f0f\u4e3a\uff1a  8bits integer part of humidity+8bits decimal part of humidity\n+8bits integer part of temperature+8bits decimal part of temperature\n+8bits checksum.", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_8", 
            "text": "\u5c06\u6e29\u5ea6\u548c\u6e7f\u5ea6\u4f20\u611f\u5668\u8fde\u63a5\u5230\u6a21\u62df\u7aef\u53e3  A0  .\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7a0b\u5e8f\u83b7\u5f97\u73af\u5883\u6e29\u5ea6\u548c\u6e7f\u5ea6\uff08\u4ee3\u7801\u4ec5\u9002\u7528\u4e8eseeeduino\uff0c\u5982\u679c\u4f7f\u7528seeeduino mega\uff0c\u5219\u5e94\u66f4\u6539\u4ee3\u7801\uff0c\u5c06PINC\u66f4\u6539\u4e3aPINF\uff0c\u5c06DDRC\u66f4\u6539\u4e3aDDRF\u5e76\u5c06PORTC\u66f4\u6539\u4e3aPORTF\uff09   #define DHT11_PIN 0      // ADC0\n\nbyte read_dht11_dat()\n{\n    byte i = 0;\n    byte result=0;\n    for(i=0; i  8; i++){\n\n        while(!(PINC   _BV(DHT11_PIN)));  // wait for 50us\n        delayMicroseconds(30);\n\n        if(PINC   _BV(DHT11_PIN))\n        result |=(1 (7-i));\n        while((PINC   _BV(DHT11_PIN)));  // wait  1  finish\n    }\n    return result;\n}\n\nvoid setup()\n{\n    DDRC |= _BV(DHT11_PIN);\n    PORTC |= _BV(DHT11_PIN);\n\n    Serial.begin(9600);\n    Serial.println( Ready );\n}\n\nvoid loop()\n{\n    byte dht11_dat[5];\n    byte dht11_in;\n    byte i;\n    // start condition\n    // 1. pull-down i/o pin from 18ms\n    PORTC  = ~_BV(DHT11_PIN);\n    delay(18);\n    PORTC |= _BV(DHT11_PIN);\n    delayMicroseconds(40);\n\n    DDRC  = ~_BV(DHT11_PIN);\n    delayMicroseconds(40);\n\n    dht11_in = PINC   _BV(DHT11_PIN);\n\n    if(dht11_in){\n        Serial.println( dht11 start condition 1 not met );\n        return;\n    }\n    delayMicroseconds(80);\n\n    dht11_in = PINC   _BV(DHT11_PIN);\n\n    if(!dht11_in){\n        Serial.println( dht11 start condition 2 not met );\n        return;\n    }\n    delayMicroseconds(80);\n    // now ready for data reception\n    for (i=0; i 5; i++)\n    dht11_dat[i] = read_dht11_dat();\n\n    DDRC |= _BV(DHT11_PIN);\n    PORTC |= _BV(DHT11_PIN);\n\n    byte dht11_check_sum = dht11_dat[0]+dht11_dat[1]+dht11_dat[2]+dht11_dat[3];\n    // check check_sum\n    if(dht11_dat[4]!= dht11_check_sum)\n    {\n        Serial.println( DHT11 checksum error );\n    }\n\n    Serial.print( Current humdity =  );\n    Serial.print(dht11_dat[0], DEC);\n    Serial.print( . );\n    Serial.print(dht11_dat[1], DEC);\n    Serial.print( %   );\n    Serial.print( temperature =  );\n    Serial.print(dht11_dat[2], DEC);\n    Serial.print( . );\n    Serial.print(dht11_dat[3], DEC);\n    Serial.println( C   );\n\n    delay(2000);\n}", 
            "title": "\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Temperature_and_Humidity_Sensor/#_9", 
            "text": "Temperature Humidity.zip  Schematic at Easyeda", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-UV_Sensor/", 
            "text": "UV\u4f20\u611f\u5668\u7528\u4e8e\u68c0\u6d4b\u5c04\u5165\u7d2b\u5916\u7ebf\uff08UV\uff09\u8f90\u5c04\u7684\u5f3a\u5ea6\u3002 \u8fd9\u79cd\u5f62\u5f0f\u7684\u7535\u78c1\u8f90\u5c04\u5177\u6709\u6bd4\u53ef\u89c1\u5149\u8f90\u5c04\u66f4\u77ed\u7684\u6ce2\u957f\u3002 Grove-UV\u4f20\u611f\u5668\u57fa\u4e8e\u4f20\u611f\u5668GUVA-S12D\uff0c\u5176\u5bbd\u8303\u56f4\u4e3a200nm-400nm\u3002 \u8be5\u6a21\u5757\u8f93\u51fa\u968f\u7d2b\u5916\u7ebf\u5f3a\u5ea6\u53d8\u5316\u7684\u7535\u4fe1\u53f7\uff0c\u8fd9\u5c06\u7ed9\u60a8\u7684\u5efa\u8bae\u662f\u5426\u4eca\u5929\u9002\u5408\u53bb\u6c99\u6ee9\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u9ad8\u7a33\u5b9a\u6027\n\n\n\u826f\u597d\u7684\u7075\u654f\u5ea6\n\n\n\u4f4e\u529f\u8017\n\n\n\u5177\u6709Schottky\u5149\u7535\u4e8c\u6781\u7ba1\u4f20\u611f\u5668\n\n\n\u54cd\u5e94\u8303\u56f4\u5e7f\n\n\n\u5177\u6709Grove\u63a5\u53e3\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6700\u5c0f\n\n\n\u6807\u51c6\n\n\n\u6700\u5927\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n3.0\n\n\n5.0\n\n\n5.1\n\n\nVDC\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n\n\n0.31\n\n\n\n\nmA\n\n\n\n\n\n\n\u8f93\u51fa\u7535\u538b\n\n\n\n\n\n\n\n\nmV\n\n\n\n\n\n\n\u54cd\u5e94\u6ce2\u957f\n\n\n240\n\n\n~\n\n\n370\n\n\nnm\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\n\n\n-30\n\n\n~\n\n\n85\n\n\n\u2103\n\n\n\n\n\n\n\n\nPlatform Support\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u7d2b\u5916\u7ebf\u4f20\u611f\u5668\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684\u5e94\u7528\uff0c\u5305\u62ec\u836f\u54c1\uff0c\u6c7d\u8f66\u548c\u673a\u5668\u4eba\u3002\n\n\nUV\u4f20\u611f\u5668\u4e5f\u7528\u4e8e\u5370\u5237\u884c\u4e1a\uff0c\u7528\u4e8e\u6eb6\u5242\u5904\u7406\u548c\u67d3\u8272\u5de5\u827a\u3002\n\n\n\u6b64\u5916\uff0c\u7d2b\u5916\u7ebf\u4f20\u611f\u5668\u4e5f\u7528\u4e8e\u5316\u5b66\u5de5\u4e1a\u7528\u4e8e\u5316\u5b66\u54c1\u7684\u751f\u4ea7\uff0c\u50a8\u5b58\u548c\u8fd0\u8f93\u3002\n\n\n\n\nUV\u4f20\u611f\u5668\u7684\u7406\u8bba\u662f\uff1a\u5728\u9633\u5149\u4e0b\uff0cUV\u6307\u6570\u548c\u5149\u7535\u6d41\u662f\u7ebf\u6027\u76f8\u5173\u7684\u5173\u7cfb\u3002\n\n\n\n\n\u5173\u4e8e\u6211\u4eec\u7684Grove-UV\u4f20\u611f\u5668\uff0c\u6211\u4eec\u5df2\u5c06\u5149\u7535\u8f6c\u6362\u4e3aArduino / Seeeduino\u6536\u96c6\u7684\u76f8\u5e94\u7535\u538b\u503c\u3002 \u8f93\u51fa\u7535\u538b\u548cUV\u6307\u6570\u662f\u7ebf\u6027\u7684\uff1a\n\n\n\u7167\u660e\u5f3a\u5ea6= 307 * Vsig\n\n\nVsig\u662f\u4eceGrove\u63a5\u53e3\u7684SIG\u5f15\u811a\u6d4b\u5f97\u7684\u7535\u538b\u503c\u3002\n\u5bf9\u4e8e\u6ce2\u957f\u6d4b\u91cf\u8303\u56f4\u4e3a240nm\u301c370nm\n\u7167\u660e\u5f3a\u5ea6\u5355\u4f4d\uff1amW / m \n 2 \n\n\n\n\nNote\n\n\u8981\u8ba1\u7b97\u7d2b\u5916\u7ebf\u6307\u6570\u503c\uff0c\u8bf7\u53c2\u8003\n\u7f8e\u56fdEPA \n\u3002 \u5f88\u96be\u8bf4\u8fd9\u4e2a\u4f20\u611f\u5668\u7684\u6d4b\u91cf\u503c\u53ef\u4ee5\u8f6c\u6362\u6210EPA\u6807\u51c6\u7684\u7d2b\u5916\u7ebf\u6307\u6570\uff0c\u4f46\u53ef\u4ee5\u5927\u81f4\u4f30\u8ba1\u3002\n\n\n\n\nUV\u6307\u6570=\u7167\u660e\u5f3a\u5ea6/ 200\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\nNote\n\n\n\u672c\u7ae0\u57fa\u4e8eWin10\u548cArduino IDE 1.6.9\n\n\n\n\n\u6211\u4eec\u5c06\u901a\u8fc7\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u6b3eGroove-UV\u4f20\u611f\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - UV Sensor\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u5236\u4f5c\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684\u6b63\u786e\u7aef\u53e3\u3002 \u5bf9\u4e8e\u6b64\u6f14\u793a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2aGrove\u6a21\u5757\u3002\n- \u5c06Grove UV\u4f20\u611f\u5668\u8fde\u63a5\u5230Grove - Base Shield\u7684A0\u7aef\u53e3\u3002\n- \u5c06Grove - Base Shield\u63d2\u5165Arduino / Seeeduino\uff0c\u5e76\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06\u5176\u8fde\u63a5\u5230PC\u3002\n- \u6f14\u793a\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002\n\n\n\n\n\u5c06\u7a0b\u5e8f\u4e0a\u4f20\u5230Arduino\u5e76\u6253\u5f00\u4e32\u53e3\u76d1\u63a7\u6570\u636e\n\n\n// modified by Victor\n// to calculate UV index directly\nvoid setup(){\n\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int sensorValue;\n    long  sum=0;\n    for(int i=0;i\n1024;i++)// accumulate readings for 1024 times\n    {\n        sensorValue=analogRead(A0);\n        sum=sensorValue+sum;\n        delay(2);\n    }\n    long meanVal = sum/1024;  // get mean value\n    Serial.print(\nThe current UV index is:\n);\n    Serial.print((meanVal*1000/4.3-83)/21);// get a detailed calculating expression for UV index in schematic files.\n    Serial.print(\n\\n\n);\n    delay(20);\n\n}\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - UV Sensor v1.1 PCB and schematics(current version) in Eagle format\n\n\nGrove - UV Sensor v1.1 PCB(current version) in PDF format\n\n\nGrove - UV Sensor v1.1 schematics(current version) in PDF format\n\n\nGrove\u00a0-\u00a0UV\u00a0Sensor\u00a0v1.1 Sensor Datasheets(current version)\n\n\nUS EPA Suggestions About UV Radiation\n\n\nGrove - UV Sensor v1.0 schematics and datasheets(older version)", 
            "title": "Grove-UV_Sensor"
        }, 
        {
            "location": "/Grove-UV_Sensor/#_1", 
            "text": "\u9ad8\u7a33\u5b9a\u6027  \u826f\u597d\u7684\u7075\u654f\u5ea6  \u4f4e\u529f\u8017  \u5177\u6709Schottky\u5149\u7535\u4e8c\u6781\u7ba1\u4f20\u611f\u5668  \u54cd\u5e94\u8303\u56f4\u5e7f  \u5177\u6709Grove\u63a5\u53e3    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-UV_Sensor/#_2", 
            "text": "\u9879\u76ee  \u6700\u5c0f  \u6807\u51c6  \u6700\u5927  \u5355\u4f4d      \u5de5\u4f5c\u7535\u538b  3.0  5.0  5.1  VDC    \u5de5\u4f5c\u7535\u6d41   0.31   mA    \u8f93\u51fa\u7535\u538b     mV    \u54cd\u5e94\u6ce2\u957f  240  ~  370  nm    \u5de5\u4f5c\u6e29\u5ea6  -30  ~  85  \u2103", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-UV_Sensor/#platform-support", 
            "text": "", 
            "title": "Platform Support"
        }, 
        {
            "location": "/Grove-UV_Sensor/#_3", 
            "text": "\u7d2b\u5916\u7ebf\u4f20\u611f\u5668\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684\u5e94\u7528\uff0c\u5305\u62ec\u836f\u54c1\uff0c\u6c7d\u8f66\u548c\u673a\u5668\u4eba\u3002  UV\u4f20\u611f\u5668\u4e5f\u7528\u4e8e\u5370\u5237\u884c\u4e1a\uff0c\u7528\u4e8e\u6eb6\u5242\u5904\u7406\u548c\u67d3\u8272\u5de5\u827a\u3002  \u6b64\u5916\uff0c\u7d2b\u5916\u7ebf\u4f20\u611f\u5668\u4e5f\u7528\u4e8e\u5316\u5b66\u5de5\u4e1a\u7528\u4e8e\u5316\u5b66\u54c1\u7684\u751f\u4ea7\uff0c\u50a8\u5b58\u548c\u8fd0\u8f93\u3002   UV\u4f20\u611f\u5668\u7684\u7406\u8bba\u662f\uff1a\u5728\u9633\u5149\u4e0b\uff0cUV\u6307\u6570\u548c\u5149\u7535\u6d41\u662f\u7ebf\u6027\u76f8\u5173\u7684\u5173\u7cfb\u3002   \u5173\u4e8e\u6211\u4eec\u7684Grove-UV\u4f20\u611f\u5668\uff0c\u6211\u4eec\u5df2\u5c06\u5149\u7535\u8f6c\u6362\u4e3aArduino / Seeeduino\u6536\u96c6\u7684\u76f8\u5e94\u7535\u538b\u503c\u3002 \u8f93\u51fa\u7535\u538b\u548cUV\u6307\u6570\u662f\u7ebf\u6027\u7684\uff1a  \u7167\u660e\u5f3a\u5ea6= 307 * Vsig  Vsig\u662f\u4eceGrove\u63a5\u53e3\u7684SIG\u5f15\u811a\u6d4b\u5f97\u7684\u7535\u538b\u503c\u3002\n\u5bf9\u4e8e\u6ce2\u957f\u6d4b\u91cf\u8303\u56f4\u4e3a240nm\u301c370nm\n\u7167\u660e\u5f3a\u5ea6\u5355\u4f4d\uff1amW / m   2    Note \n\u8981\u8ba1\u7b97\u7d2b\u5916\u7ebf\u6307\u6570\u503c\uff0c\u8bf7\u53c2\u8003 \u7f8e\u56fdEPA  \u3002 \u5f88\u96be\u8bf4\u8fd9\u4e2a\u4f20\u611f\u5668\u7684\u6d4b\u91cf\u503c\u53ef\u4ee5\u8f6c\u6362\u6210EPA\u6807\u51c6\u7684\u7d2b\u5916\u7ebf\u6307\u6570\uff0c\u4f46\u53ef\u4ee5\u5927\u81f4\u4f30\u8ba1\u3002  UV\u6307\u6570=\u7167\u660e\u5f3a\u5ea6/ 200", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-UV_Sensor/#_4", 
            "text": "Note  \u672c\u7ae0\u57fa\u4e8eWin10\u548cArduino IDE 1.6.9   \u6211\u4eec\u5c06\u901a\u8fc7\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u6b3eGroove-UV\u4f20\u611f\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - UV Sensor  Base Shield           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70     \u786c\u4ef6\u8fde\u63a5  \u7531\u4e8eGrove\u7cfb\u5217\u6a21\u5757\u7684\u4f18\u70b9\uff0c\u60a8\u4e0d\u9700\u8981\u5236\u4f5c\u710a\u63a5\u6216\u9762\u5305\u677f\uff0c\u60a8\u9700\u8981\u505a\u7684\u662f\u5c06\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684\u6b63\u786e\u7aef\u53e3\u3002 \u5bf9\u4e8e\u6b64\u6f14\u793a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2aGrove\u6a21\u5757\u3002\n- \u5c06Grove UV\u4f20\u611f\u5668\u8fde\u63a5\u5230Grove - Base Shield\u7684A0\u7aef\u53e3\u3002\n- \u5c06Grove - Base Shield\u63d2\u5165Arduino / Seeeduino\uff0c\u5e76\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06\u5176\u8fde\u63a5\u5230PC\u3002\n- \u6f14\u793a\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002   \u5c06\u7a0b\u5e8f\u4e0a\u4f20\u5230Arduino\u5e76\u6253\u5f00\u4e32\u53e3\u76d1\u63a7\u6570\u636e  // modified by Victor\n// to calculate UV index directly\nvoid setup(){\n\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int sensorValue;\n    long  sum=0;\n    for(int i=0;i 1024;i++)// accumulate readings for 1024 times\n    {\n        sensorValue=analogRead(A0);\n        sum=sensorValue+sum;\n        delay(2);\n    }\n    long meanVal = sum/1024;  // get mean value\n    Serial.print( The current UV index is: );\n    Serial.print((meanVal*1000/4.3-83)/21);// get a detailed calculating expression for UV index in schematic files.\n    Serial.print( \\n );\n    delay(20);\n\n}", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-UV_Sensor/#_5", 
            "text": "Grove - UV Sensor v1.1 PCB and schematics(current version) in Eagle format  Grove - UV Sensor v1.1 PCB(current version) in PDF format  Grove - UV Sensor v1.1 schematics(current version) in PDF format  Grove\u00a0-\u00a0UV\u00a0Sensor\u00a0v1.1 Sensor Datasheets(current version)  US EPA Suggestions About UV Radiation  Grove - UV Sensor v1.0 schematics and datasheets(older version)", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Vibration_Motor/", 
            "text": "\u8fd9\u662f\u4e00\u79cd\u9002\u5408\u4f5c\u4e3a\u975e\u542c\u89c9\u6307\u793a\u5668\u7684\u8ff7\u4f60\u632f\u52a8\u7535\u673a\u3002 \u5f53\u8f93\u5165\u4e3a\u9ad8\u7535\u5e73\u65f6\uff0c\u7535\u673a\u5c06\u50cf\u9759\u97f3\u6a21\u5f0f\u4e0b\u7684\u624b\u673a\u4e00\u6837\u632f\u52a8\u3002\n\n\n\n\u7248\u672c\u4fe1\u606f\n\n\n\n\n\n\n\n\n\n\n\u8c03\u6574\u7248\u672c\n\n\n\u63cf\u8ff0\n\n\n\u53d1\u5e03\u65e5\u671f\n\n\n\n\n\n\n\n\n\n\nv0.9b\n\n\n\u521d\u59cb\u7248\u672c\n\n\n2011\u5e745\u670810\u65e5\n\n\n\n\n\n\nv1.0\n\n\n\u80fd\u591f\u76f4\u63a5\u4f7f\u7528I / O\u7aef\u53e3\u9a71\u52a8\u632f\u52a8\u7535\u673a\n\n\n2011\u5e7411\u67085\u65e5\n\n\n\n\n\n\nv1.2\n\n\n\u589e\u52a0\u4e86\u6676\u4f53\u7ba1\uff0c\u80fd\u591f\u4f7f\u7528\u8f83\u5927\u7535\u6d41\u9a71\u52a8\u632f\u52a8\u7535\u673a\n\n\n2013\u5e747\u670811\u65e5\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u80fd\u591f\u517c\u5bb9Grove\n\n\n\u65e0\u58f0\n\n\n\u4f4e\u529f\u8017\n\n\n\u9ad8\u53ef\u9760\u6027\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u4ea7\u54c1\u89c4\u683c\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6700\u5c0f\n\n\n\n\n\u4e00\u822c\n\n\n\n\n\u6700\u5927\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n\n\n3.0V\n\n\n\n\n5.0V\n\n\n\n\n5.5V\n\n\n\n\n\n\n\n\n\u63a7\u5236\u6a21\u5f0f\n\n\n\n\n\u903b\u8f91\u7535\u5e73\n\uff08\u5f53\u903b\u8f91\u9ad8\u7535\u5e73\u65f6\uff0c\u7535\u673a\u4e3aON\uff0c\u4f4e\u7535\u5e73\u65f6\uff0c\u7535\u673a\u4e3aOFF\u3002\uff09\n\n\n\n\n\n\n\n\n\u989d\u5b9a\u8f6c\u901f\n\n\n\n\n9000 rpm\n\n\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\u4f7f\u7528 Arduino\n\n\n\u5176\u5b9e\u8ba9\u5b83\u632f\u52a8\u8ddf\u70b9\u4eaeLED\u4e00\u6837\u5bb9\u6613\u3002 \u4ee5\u4e0b\u662f\u663e\u793a\u5982\u4f55\u6253\u5f00\u632f\u52a8\u7535\u673a\u7684\u793a\u4f8b\u3002\n\n\n\n\n\u4f7f\u7528Grove\u8fde\u63a5\u7ebf\u5c06\u5176\u63d2\u5165Grove - Base Shield\u7684\u6570\u5b57\u7aef\u53e3 \nD9\n \u3002\n\n\n\u5c06 Grove - Base Shield\u63d2\u5165Arduino\u3002\n\n\n\n\u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06Arduino\u4e0ePC\u8fdb\u884c\u8fde\u63a5\n\n\n\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u9875\u9762\u4e0a\uff0c\u5e76\u5c06\u5176\u4e0a\u4f20\u5230\u60a8\u7684Arduino\u3002\n\n\n\n\n\u4f7f\u7528\u5982\u4e0b\u6240\u793a\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n\nint MoPin = 9;    // vibrator Grove connected to digital pin 9\n\nvoid setup()  {\n    pinMode( MoPin, OUTPUT );\n}\n\nvoid loop()  {\n\n    digitalWrite(MoPin, HIGH);\n    delay(1000);\n\n    digitalWrite(MoPin, LOW);\n    delay(1000);\n}\n\n\n\n\n\u73b0\u5728\uff0c\u611f\u53d7\u4f60\u7535\u673a\u7684\u632f\u52a8\u5427\uff01\n\n\n\u4f7f\u7528Raspberry Pi\n\n\n1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2aRaspberry Pi\u548c\u4e00\u4e2agrovepi\u6216grovepi +\u3002\n\n\n2.\u60a8\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa\n\u8bf4\u660e\n \u8fdb\u884c\u914d\u7f6e\u3002\n\n\n3.\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u7528Grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi \nD8\n \u63a5\u53e3\u3002\n\n\n\n\n4.\u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\uff1a\n\ncd yourpath/GrovePi/Software/Python/\n\n\n-  \u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\nnano grove_vibration_motor.py   # \nCtrl+x\n to exit #\n\n\n\nimport time\nimport grovepi\n\n#\u5c06Grove Vibration Motor\u8fde\u63a5\u5230\u6570\u5b57\u7aef\u53e3D8\n#SIG,NC,VCC,GND\nvibration_motor = 8\n\ngrovepi.pinMode(vibration_motor,\nOUTPUT\n)\n\nwhile True:\n    try:\n        # Start vibrating for 1 second\n        grovepi.digitalWrite(vibration_motor,1)\n        print \nstart\n\n        time.sleep(1)\n\n        # Stop vibrating for 1 second, then repeat\n        grovepi.digitalWrite(vibration_motor,0)\n        print \nstop\n\n        time.sleep(1)\n\n    except KeyboardInterrupt:\n        grovepi.digitalWrite(vibration_motor,0)\n        break\n    except IOError:\n        print \nError\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\nsudo python grove_vibration_motor.py\n\n\n\n\u9879\u76ee\n\n\n\n\nInspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!\n\n\nThe Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to \"activate\" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It's worth to spend one day DIY it as a Xmas present.    \n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - Vibration Motor Eagle File\n\n\nS9013 Datasheet\n\n\nANDA-B1020 Datasheet", 
            "title": "Grove-Vibration_Motor"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#_1", 
            "text": "\u80fd\u591f\u517c\u5bb9Grove  \u65e0\u58f0  \u4f4e\u529f\u8017  \u9ad8\u53ef\u9760\u6027    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#_2", 
            "text": "\u9879\u76ee  \n\u6700\u5c0f  \n\u4e00\u822c  \n\u6700\u5927    \n\u5de5\u4f5c\u7535\u538b  \n3.0V  \n5.0V  \n5.5V    \n\u63a7\u5236\u6a21\u5f0f  \n\u903b\u8f91\u7535\u5e73\n\uff08\u5f53\u903b\u8f91\u9ad8\u7535\u5e73\u65f6\uff0c\u7535\u673a\u4e3aON\uff0c\u4f4e\u7535\u5e73\u65f6\uff0c\u7535\u673a\u4e3aOFF\u3002\uff09    \n\u989d\u5b9a\u8f6c\u901f  \n9000 rpm", 
            "title": "\u4ea7\u54c1\u89c4\u683c"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#_4", 
            "text": "", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#arduino", 
            "text": "\u5176\u5b9e\u8ba9\u5b83\u632f\u52a8\u8ddf\u70b9\u4eaeLED\u4e00\u6837\u5bb9\u6613\u3002 \u4ee5\u4e0b\u662f\u663e\u793a\u5982\u4f55\u6253\u5f00\u632f\u52a8\u7535\u673a\u7684\u793a\u4f8b\u3002   \u4f7f\u7528Grove\u8fde\u63a5\u7ebf\u5c06\u5176\u63d2\u5165Grove - Base Shield\u7684\u6570\u5b57\u7aef\u53e3  D9  \u3002  \u5c06 Grove - Base Shield\u63d2\u5165Arduino\u3002  \u4f7f\u7528USB\u6570\u636e\u7ebf\u5c06Arduino\u4e0ePC\u8fdb\u884c\u8fde\u63a5  \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u9875\u9762\u4e0a\uff0c\u5e76\u5c06\u5176\u4e0a\u4f20\u5230\u60a8\u7684Arduino\u3002   \u4f7f\u7528\u5982\u4e0b\u6240\u793a\u7684\u793a\u4f8b\u4ee3\u7801\uff1a  int MoPin = 9;    // vibrator Grove connected to digital pin 9\n\nvoid setup()  {\n    pinMode( MoPin, OUTPUT );\n}\n\nvoid loop()  {\n\n    digitalWrite(MoPin, HIGH);\n    delay(1000);\n\n    digitalWrite(MoPin, LOW);\n    delay(1000);\n}  \u73b0\u5728\uff0c\u611f\u53d7\u4f60\u7535\u673a\u7684\u632f\u52a8\u5427\uff01", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#raspberry-pi", 
            "text": "1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2aRaspberry Pi\u548c\u4e00\u4e2agrovepi\u6216grovepi +\u3002  2.\u60a8\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \u8bf4\u660e  \u8fdb\u884c\u914d\u7f6e\u3002  3.\u786c\u4ef6\u8fde\u63a5   \u7528Grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi  D8  \u63a5\u53e3\u3002   4.\u5bfc\u822a\u5230\u793a\u4f8b\u76ee\u5f55\uff1a cd yourpath/GrovePi/Software/Python/ \n-  \u627e\u5230\u8fd9\u884c\u4ee3\u7801 nano grove_vibration_motor.py   #  Ctrl+x  to exit #  import time\nimport grovepi\n\n#\u5c06Grove Vibration Motor\u8fde\u63a5\u5230\u6570\u5b57\u7aef\u53e3D8\n#SIG,NC,VCC,GND\nvibration_motor = 8\n\ngrovepi.pinMode(vibration_motor, OUTPUT )\n\nwhile True:\n    try:\n        # Start vibrating for 1 second\n        grovepi.digitalWrite(vibration_motor,1)\n        print  start \n        time.sleep(1)\n\n        # Stop vibrating for 1 second, then repeat\n        grovepi.digitalWrite(vibration_motor,0)\n        print  stop \n        time.sleep(1)\n\n    except KeyboardInterrupt:\n        grovepi.digitalWrite(vibration_motor,0)\n        break\n    except IOError:\n        print  Error  \n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b sudo python grove_vibration_motor.py", 
            "title": "\u4f7f\u7528Raspberry Pi"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#_5", 
            "text": "Inspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!  The Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to \"activate\" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It's worth to spend one day DIY it as a Xmas present.", 
            "title": "\u9879\u76ee"
        }, 
        {
            "location": "/Grove-Vibration_Motor/#_6", 
            "text": "Grove - Vibration Motor Eagle File  S9013 Datasheet  ANDA-B1020 Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-4-Digit_Display/", 
            "text": "Grove - 4-Digit Display \u6a21\u5757\u662f\u4e00\u4e2a\u6709\u774012\u4e2a\u5f15\u811a\u7684\u6a21\u5757\u3002 \u5728\u8fd9\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528TM1637\u5c06\u63a7\u5236\u5f15\u811a\u7684\u6570\u91cf\u7f29\u5c0f\u52302\u4e2a.\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u53ea\u901a\u8fc7Arduino\u6216Seeeduino\u76842\u4e2a\u6570\u5b57\u5f15\u811a\u6765\u63a7\u5236\u5185\u5bb9\u548c\u4eae\u5ea6\u3002 \u5bf9\u4e8e\u9700\u8981\u5b57\u6bcd\u6570\u5b57\u663e\u793a\u7684\u9879\u76ee\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u80fd\u591f\u663e\u793a4\u4f4d\u7ea2\u8272\u5b57\u6bcd\u548c\u6570\u5b57\n\n\n\u80fd\u591f\u517c\u5bb9Grove\u63a5\u53e3\uff083.3V / 5V\uff09\n\n\n\u5177\u67098\u4e2a\u8c03\u8282\u4eae\u5ea6\u7684\u7ea7\u522b\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u663e\u793a\u65f6\u95f4\n\n\n\u79d2\u8868\n\n\n\u4f20\u611f\u5668\u6570\u503c\u7684\u663e\u793a\n\n\n\n\n\u4ea7\u54c1\u89c4\u683c\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6700\u5c0f\n\n\n\n\n\u6807\u51c6\n\n\n\n\n\u6700\u5927\n\n\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n\n\n3.3\n\n\n\n\n5.0\n\n\n\n\n5.5\n\n\n\n\nVDC\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n\n\n0.2\n\n\n\n\n27\n\n\n\n\n80\n\n\n\n\nmA\n\n\n\n\n\n\n\n\n\u5916\u5f62\u5c3a\u5bf8\n\n\n\n\n42x24x14\n\n\n\n\nmm\n\n\n\n\n\n\n\n\n\u91cd\u91cf\n\n\n\n\n7\u00b11\n\n\n\n\ng\n\n\n\n\n\n\n\n\nPlatforms Supported\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\nGrove interface\n - \u53ef\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684\u6570\u5b57\u7aef\u53e3\u3002\n\n\n4 - digit display\n - \u666e\u901a\u9633\u6781\u6570\u7801\u7ba1\u3002\n\n\n\u7ba1\u811a\u5b9a\u4e49:\n CLK DIO VCC GND\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u4f7f\u7528 TI LaunchPad\n\n\n\u663e\u793a\u6570\u5b57\uff084\u4f4d\u6570\u5b57\u663e\u793a\uff09\n\n\n\u672c\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528Grove-4-Digital Display\u663e\u793a\u4e00\u4e9b\u6570\u5b57\u3002\n\n\n\n\n/*\n * TM1637.cpp\n * A library for the 4 digit display\n */\n#include \nTM1637.h\n\n#define CLK 39 //pins definitions for TM1637 and can be changed to other ports\n#define DIO 38\nTM1637 tm1637(CLK,DIO);\nvoid setup()\n{\n    tm1637.init();\n    tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;\n}\nvoid loop()\n{\n    int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F\n    int8_t ListDisp[4];\n    unsigned char i = 0;\n    unsigned char count = 0;\n    delay(150);\n    while(1)\n    {\n        i = count;\n        count ++;\n        if(count == sizeof(NumTab)) count = 0;\n        for(unsigned char BitSelect = 0;BitSelect \n 4;BitSelect ++)\n        {\n            ListDisp[BitSelect] = NumTab[i];\n            i ++;\n            if(i == sizeof(NumTab)) i = 0;\n        }\n        tm1637.display(0,ListDisp[0]);\n        tm1637.display(1,ListDisp[1]);\n        tm1637.display(2,ListDisp[2]);\n        tm1637.display(3,ListDisp[3]);\n        delay(300);\n    }\n}\n\n\n\n\n\u4f7f\u7528 Arduino\n\n\n\u4f7f\u7528 TM1637 \u6765\u63a7\u5236\u663e\u793a\u7684\u5185\u5bb9\u4ee5\u53ca\u6539\u53d8\u4eae\u5ea6\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u5982\u4f55\u663e\u793a\u65f6\u95f4\u3002\n\n\n\n\n\n\n\u4f7f\u7528Grove\u8fde\u63a5\u7ebf\u5c06LED Strip Driver \u4e0a\u6807\u6709\u201cIN\u201d\u7684Grove\u63d2\u5ea7\u548c \nGrove - Base Shield\n \u7684\u6570\u5b57 \nD2\n \u7aef\u53e3\u8fde\u63a5\u8d77\u6765\u3002 \u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u66f4\u6539\u6570\u5b57\u7aef\u53e3\u3002 \u4f46\u662f\u4e0d\u8981\u5fd8\u4e86\u5728\u6f14\u793a\u4ee3\u7801\u7684\u5b9a\u4e49\u4e2d\u66f4\u6539\u7aef\u53e3\u53f7\u3002\n\n\n\n\n\n\n\u63d2\u5165Arduino / Seeeduino\u6216\u5c06 \nGrove - Mega Shield\n \u63d2\u5165Arduino Mega\u3002\n\n\nSeeeduino \u548c Grove - 4-digit display:\n\n\n\n\nArduino Mega \u548c Grove - 4-digit display:\n\n\n\n\n\n\n\n\u901a\u8fc7USB\u6570\u636e\u7ebf\u5c06Arduino / Seeeduino\u8fde\u63a5\u5230PC\u3002\n\n\n\n\n\n\n\u4e0b\u8f7d \nthe 4-Digit Display \u5e93\n \u548c \nTimerOne \u5e93\n. \u89e3\u538b\u5e76\u5c06\u5b83\u4eec\u653e\u5728Arduino IDE\u7684\u5e93\u6587\u4ef6\u4e2d\uff0c\u8def\u5f84\u4e3a\uff1a..\\arduino-1.0\\libraries\u3002\n\n\n\n\n\n\n\u91cd\u65b0\u542f\u52a8Arduino IDE\uff0c\u6253\u5f00\u4e00\u4e2a\u60a8\u559c\u6b22\u7684\u6f14\u793a\u4ee3\u7801\uff0c\u4f8b\u5982\u65f6\u949f\u663e\u793a\u76f4\u63a5\u901a\u8fc7\u8def\u5f84\uff1a\nFile(\u6587\u4ef6) - \nExample(\u793a\u4f8b) - \nDigitalTube - \nClockDisplay\n\u3002\n\n\n\n\n\n\n\n\n\u4e0a\u4f20\u6f14\u793a\u4ee3\u7801\uff0c\u51e0\u79d2\u949f\u540e\u65f6\u949f\u5f00\u59cb\u663e\u793a\u3002\n\n\n\u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a:\n\n\n\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2araspberry pi\u548cgrovepi\u6216grovepi +\u3002\n\n\n2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa\n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n\n\n3.\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7 \nD5\n \u7aef\u53e3\u3002\n\n\n\n\n4.\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a\n\ncd yourpath/GrovePi/Software/Python/\n\n\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\nnano grove_4_digit_display.py   # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import grovepi\n\n    # Connect the Grove 4 Digit Display to digital port D5\n    # CLK,DIO,VCC,GND\n    display = 5\n    grovepi.pinMode(display,\nOUTPUT\n)\n\n    # If you have an analog sensor connect it to A0 so you can monitor it below\n    sensor = 0\n    grovepi.pinMode(sensor,\nINPUT\n)\n\n    time.sleep(.5)\n\n    # 4 Digit Display methods\n    # grovepi.fourDigit_init(pin)\n    # grovepi.fourDigit_number(pin,value,leading_zero)\n    # grovepi.fourDigit_brightness(pin,brightness)\n    # grovepi.fourDigit_digit(pin,segment,value)\n    # grovepi.fourDigit_segment(pin,segment,leds)\n    # grovepi.fourDigit_score(pin,left,right)\n    # grovepi.fourDigit_monitor(pin,analog,duration)\n    # grovepi.fourDigit_on(pin)\n    # grovepi.fourDigit_off(pin)\n\n    while True:\n        try:\n            print \nTest 1) Initialise\n\n            grovepi.fourDigit_init(display)\n            time.sleep(.5)\n\n            print \nTest 2) Set brightness\n\n            for i in range(0,8):\n                grovepi.fourDigit_brightness(display,i)\n                time.sleep(.2)\n            time.sleep(.3)\n\n            # set to lowest brightness level\n            grovepi.fourDigit_brightness(display,0)\n            time.sleep(.5)\n\n            print \nTest 3) Set number without leading zeros\n\n            leading_zero = 0\n            grovepi.fourDigit_number(display,1,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,12,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,123,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,1234,leading_zero)\n            time.sleep(.5)\n\n            print \nTest 4) Set number with leading zeros\n\n            leading_zero = 1\n            grovepi.fourDigit_number(display,5,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,56,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,567,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,5678,leading_zero)\n            time.sleep(.5)\n\n            print \nTest 5) Set individual digit\n\n            grovepi.fourDigit_digit(display,0,2)\n            grovepi.fourDigit_digit(display,1,6)\n            grovepi.fourDigit_digit(display,2,9)\n            grovepi.fourDigit_digit(display,3,15) # 15 = F\n            time.sleep(.5)\n\n            print \nTest 6) Set individual segment\n\n            grovepi.fourDigit_segment(display,0,118) # 118 = H\n            grovepi.fourDigit_segment(display,1,121) # 121 = E\n            grovepi.fourDigit_segment(display,2,118) # 118 = H\n            grovepi.fourDigit_segment(display,3,121) # 121 = E\n            time.sleep(.5)\n\n            grovepi.fourDigit_segment(display,0,57) # 57 = C\n            grovepi.fourDigit_segment(display,1,63) # 63 = O\n            grovepi.fourDigit_segment(display,2,63) # 63 = O\n            grovepi.fourDigit_segment(display,3,56) # 56 = L\n            time.sleep(.5)\n\n            print \nTest 7) Set score\n\n            grovepi.fourDigit_score(display,0,0)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,0)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,1)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,2)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,3)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,4)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,5)\n            time.sleep(.5)\n\n            print \nTest 8) Set time\n\n            grovepi.fourDigit_score(display,12,59)\n            time.sleep(.5)\n\n            print \nTest 9) Monitor analog pin\n\n            seconds = 10\n            grovepi.fourDigit_monitor(display,sensor,seconds)\n            time.sleep(.5)\n\n            print \nTest 10) Switch all on\n\n            grovepi.fourDigit_on(display)\n            time.sleep(.5)\n\n            print \nTest 11) Switch all off\n\n            grovepi.fourDigit_off(display)\n            time.sleep(.5)\n\n        except KeyboardInterrupt:\n            grovepi.fourDigit_off(display)\n            break\n        except IOError:\n            print \nError\n\n\n\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\nsudo python grove_4_digit_display.py\n\n\n6.\u5982\u679c\u60a8\u7684Grovepi\u6ca1\u6709\u6700\u65b0\u7684\u5230\u6700\u65b0\u7684\u56fa\u4ef6\uff0c\u6b64\u6f14\u793a\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\n\ncd yourpath/GrovePi/Firmware\nsudo ./firmware_update.sh\n\n\n\n\u9879\u76ee\n\n\n\n\nInspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!\n\n\nThe Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to \"activate\" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It's worth to spend one day DIY it as a Xmas present.    \n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - 4-Digit Display V1.0 eagle files\n\n\nSchematic in PDF\n\n\n4-Digit Display library\n\n\nTimerOne library\n\n\nFour-Digit Display Suli Library\n\n\nTM1637 datasheet", 
            "title": "Grove-4-Digit_Display"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_1", 
            "text": "\u80fd\u591f\u663e\u793a4\u4f4d\u7ea2\u8272\u5b57\u6bcd\u548c\u6570\u5b57  \u80fd\u591f\u517c\u5bb9Grove\u63a5\u53e3\uff083.3V / 5V\uff09  \u5177\u67098\u4e2a\u8c03\u8282\u4eae\u5ea6\u7684\u7ea7\u522b    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_2", 
            "text": "\u663e\u793a\u65f6\u95f4  \u79d2\u8868  \u4f20\u611f\u5668\u6570\u503c\u7684\u663e\u793a", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_3", 
            "text": "\u9879\u76ee  \n\u6700\u5c0f  \n\u6807\u51c6  \n\u6700\u5927  \n\u5355\u4f4d    \n\u5de5\u4f5c\u7535\u538b  \n3.3  \n5.0  \n5.5  \nVDC    \n\u5de5\u4f5c\u7535\u6d41  \n0.2  \n27  \n80  \nmA    \n\u5916\u5f62\u5c3a\u5bf8  \n42x24x14  \nmm    \n\u91cd\u91cf  \n7\u00b11  \ng", 
            "title": "\u4ea7\u54c1\u89c4\u683c"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_4", 
            "text": "Grove interface  - \u53ef\u8fde\u63a5\u5230Grove - Base Shield\u4e0a\u7684\u6570\u5b57\u7aef\u53e3\u3002  4 - digit display  - \u666e\u901a\u9633\u6781\u6570\u7801\u7ba1\u3002  \u7ba1\u811a\u5b9a\u4e49:  CLK DIO VCC GND", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_5", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#ti-launchpad", 
            "text": "\u663e\u793a\u6570\u5b57\uff084\u4f4d\u6570\u5b57\u663e\u793a\uff09  \u672c\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528Grove-4-Digital Display\u663e\u793a\u4e00\u4e9b\u6570\u5b57\u3002   /*\n * TM1637.cpp\n * A library for the 4 digit display\n */\n#include  TM1637.h \n#define CLK 39 //pins definitions for TM1637 and can be changed to other ports\n#define DIO 38\nTM1637 tm1637(CLK,DIO);\nvoid setup()\n{\n    tm1637.init();\n    tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;\n}\nvoid loop()\n{\n    int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F\n    int8_t ListDisp[4];\n    unsigned char i = 0;\n    unsigned char count = 0;\n    delay(150);\n    while(1)\n    {\n        i = count;\n        count ++;\n        if(count == sizeof(NumTab)) count = 0;\n        for(unsigned char BitSelect = 0;BitSelect   4;BitSelect ++)\n        {\n            ListDisp[BitSelect] = NumTab[i];\n            i ++;\n            if(i == sizeof(NumTab)) i = 0;\n        }\n        tm1637.display(0,ListDisp[0]);\n        tm1637.display(1,ListDisp[1]);\n        tm1637.display(2,ListDisp[2]);\n        tm1637.display(3,ListDisp[3]);\n        delay(300);\n    }\n}", 
            "title": "\u4f7f\u7528 TI LaunchPad"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#arduino", 
            "text": "\u4f7f\u7528 TM1637 \u6765\u63a7\u5236\u663e\u793a\u7684\u5185\u5bb9\u4ee5\u53ca\u6539\u53d8\u4eae\u5ea6\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u5982\u4f55\u663e\u793a\u65f6\u95f4\u3002    \u4f7f\u7528Grove\u8fde\u63a5\u7ebf\u5c06LED Strip Driver \u4e0a\u6807\u6709\u201cIN\u201d\u7684Grove\u63d2\u5ea7\u548c  Grove - Base Shield  \u7684\u6570\u5b57  D2  \u7aef\u53e3\u8fde\u63a5\u8d77\u6765\u3002 \u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u66f4\u6539\u6570\u5b57\u7aef\u53e3\u3002 \u4f46\u662f\u4e0d\u8981\u5fd8\u4e86\u5728\u6f14\u793a\u4ee3\u7801\u7684\u5b9a\u4e49\u4e2d\u66f4\u6539\u7aef\u53e3\u53f7\u3002    \u63d2\u5165Arduino / Seeeduino\u6216\u5c06  Grove - Mega Shield  \u63d2\u5165Arduino Mega\u3002  Seeeduino \u548c Grove - 4-digit display:   Arduino Mega \u548c Grove - 4-digit display:    \u901a\u8fc7USB\u6570\u636e\u7ebf\u5c06Arduino / Seeeduino\u8fde\u63a5\u5230PC\u3002    \u4e0b\u8f7d  the 4-Digit Display \u5e93  \u548c  TimerOne \u5e93 . \u89e3\u538b\u5e76\u5c06\u5b83\u4eec\u653e\u5728Arduino IDE\u7684\u5e93\u6587\u4ef6\u4e2d\uff0c\u8def\u5f84\u4e3a\uff1a..\\arduino-1.0\\libraries\u3002    \u91cd\u65b0\u542f\u52a8Arduino IDE\uff0c\u6253\u5f00\u4e00\u4e2a\u60a8\u559c\u6b22\u7684\u6f14\u793a\u4ee3\u7801\uff0c\u4f8b\u5982\u65f6\u949f\u663e\u793a\u76f4\u63a5\u901a\u8fc7\u8def\u5f84\uff1a File(\u6587\u4ef6) -  Example(\u793a\u4f8b) -  DigitalTube -  ClockDisplay \u3002     \u4e0a\u4f20\u6f14\u793a\u4ee3\u7801\uff0c\u51e0\u79d2\u949f\u540e\u65f6\u949f\u5f00\u59cb\u663e\u793a\u3002  \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a:", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#raspberry-pi", 
            "text": "1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2araspberry pi\u548cgrovepi\u6216grovepi +\u3002  2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002  3.\u786c\u4ef6\u8fde\u63a5   \u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7  D5  \u7aef\u53e3\u3002   4.\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a cd yourpath/GrovePi/Software/Python/   \u627e\u5230\u8fd9\u884c\u4ee3\u7801 nano grove_4_digit_display.py   #  Ctrl+x  to exit #      import time\n    import grovepi\n\n    # Connect the Grove 4 Digit Display to digital port D5\n    # CLK,DIO,VCC,GND\n    display = 5\n    grovepi.pinMode(display, OUTPUT )\n\n    # If you have an analog sensor connect it to A0 so you can monitor it below\n    sensor = 0\n    grovepi.pinMode(sensor, INPUT )\n\n    time.sleep(.5)\n\n    # 4 Digit Display methods\n    # grovepi.fourDigit_init(pin)\n    # grovepi.fourDigit_number(pin,value,leading_zero)\n    # grovepi.fourDigit_brightness(pin,brightness)\n    # grovepi.fourDigit_digit(pin,segment,value)\n    # grovepi.fourDigit_segment(pin,segment,leds)\n    # grovepi.fourDigit_score(pin,left,right)\n    # grovepi.fourDigit_monitor(pin,analog,duration)\n    # grovepi.fourDigit_on(pin)\n    # grovepi.fourDigit_off(pin)\n\n    while True:\n        try:\n            print  Test 1) Initialise \n            grovepi.fourDigit_init(display)\n            time.sleep(.5)\n\n            print  Test 2) Set brightness \n            for i in range(0,8):\n                grovepi.fourDigit_brightness(display,i)\n                time.sleep(.2)\n            time.sleep(.3)\n\n            # set to lowest brightness level\n            grovepi.fourDigit_brightness(display,0)\n            time.sleep(.5)\n\n            print  Test 3) Set number without leading zeros \n            leading_zero = 0\n            grovepi.fourDigit_number(display,1,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,12,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,123,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,1234,leading_zero)\n            time.sleep(.5)\n\n            print  Test 4) Set number with leading zeros \n            leading_zero = 1\n            grovepi.fourDigit_number(display,5,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,56,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,567,leading_zero)\n            time.sleep(.5)\n            grovepi.fourDigit_number(display,5678,leading_zero)\n            time.sleep(.5)\n\n            print  Test 5) Set individual digit \n            grovepi.fourDigit_digit(display,0,2)\n            grovepi.fourDigit_digit(display,1,6)\n            grovepi.fourDigit_digit(display,2,9)\n            grovepi.fourDigit_digit(display,3,15) # 15 = F\n            time.sleep(.5)\n\n            print  Test 6) Set individual segment \n            grovepi.fourDigit_segment(display,0,118) # 118 = H\n            grovepi.fourDigit_segment(display,1,121) # 121 = E\n            grovepi.fourDigit_segment(display,2,118) # 118 = H\n            grovepi.fourDigit_segment(display,3,121) # 121 = E\n            time.sleep(.5)\n\n            grovepi.fourDigit_segment(display,0,57) # 57 = C\n            grovepi.fourDigit_segment(display,1,63) # 63 = O\n            grovepi.fourDigit_segment(display,2,63) # 63 = O\n            grovepi.fourDigit_segment(display,3,56) # 56 = L\n            time.sleep(.5)\n\n            print  Test 7) Set score \n            grovepi.fourDigit_score(display,0,0)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,0)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,1)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,2)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,3)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,4)\n            time.sleep(.2)\n            grovepi.fourDigit_score(display,1,5)\n            time.sleep(.5)\n\n            print  Test 8) Set time \n            grovepi.fourDigit_score(display,12,59)\n            time.sleep(.5)\n\n            print  Test 9) Monitor analog pin \n            seconds = 10\n            grovepi.fourDigit_monitor(display,sensor,seconds)\n            time.sleep(.5)\n\n            print  Test 10) Switch all on \n            grovepi.fourDigit_on(display)\n            time.sleep(.5)\n\n            print  Test 11) Switch all off \n            grovepi.fourDigit_off(display)\n            time.sleep(.5)\n\n        except KeyboardInterrupt:\n            grovepi.fourDigit_off(display)\n            break\n        except IOError:\n            print  Error    5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b sudo python grove_4_digit_display.py \n6.\u5982\u679c\u60a8\u7684Grovepi\u6ca1\u6709\u6700\u65b0\u7684\u5230\u6700\u65b0\u7684\u56fa\u4ef6\uff0c\u6b64\u6f14\u793a\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 cd yourpath/GrovePi/Firmware\nsudo ./firmware_update.sh", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_6", 
            "text": "Inspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!  The Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to \"activate\" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It's worth to spend one day DIY it as a Xmas present.", 
            "title": "\u9879\u76ee"
        }, 
        {
            "location": "/Grove-4-Digit_Display/#_7", 
            "text": "Grove - 4-Digit Display V1.0 eagle files  Schematic in PDF  4-Digit Display library  TimerOne library  Four-Digit Display Suli Library  TM1637 datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/", 
            "text": "\u8be5 Grove - Barometer (High-Accuracy) Sensor \u91c7\u7528 HP206C \u9ad8\u7cbe\u5ea6\u82af\u7247\uff0c\u53ef\u68c0\u6d4b\u6c14\u538b\uff0c\u9ad8\u5ea6\u8ba1\u548c\u6e29\u5ea6\u3002 \u53ef\u4ee5\u5e7f\u6cdb\u6d4b\u91cf 300mbar\u301c1200mbar \u7684\u538b\u529b\uff0c\u8d85\u9ad8\u5206\u8fa8\u7387\u6a21\u5f0f\u4e0b\u7684\u8d85\u9ad8\u7cbe\u5ea6\u4e3a 0.01mbar\uff080.1m\uff09\uff0c\u82af\u7247\u4ec5\u63a5\u53d7 1.8V \u81f3 3.6V \u7684\u8f93\u5165\u7535\u538b\u3002 \u7136\u800c\uff0c\u52a0\u4e0a\u5916\u90e8\u7535\u8def\uff0c\u8be5\u6a21\u5757\u53ef\u4ee5\u4e0e 3.3V \u548c 5V \u517c\u5bb9\u3002 \u56e0\u6b64\uff0c\u5b83\u53ef\u4ee5\u5728 Arduino / Seeeduino \u6216 Seeeduino Stalker \u4e0a\u4f7f\u7528\uff0c\u65e0\u9700\u4fee\u6539\u3002\u5b83\u7684\u8bbe\u8ba1\u662f\u901a\u8fc7 I2C\u603b\u7ebf\u76f4\u63a5\u8fde\u63a5\u5230\u5fae\u63a7\u5236\u5668\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5177\u6709\u6570\u5b57\u4f20\u8f93\u7ebf\u7ebf\uff08I2C\uff09\u63a5\u53e3\n\n\n\u57fa\u4e8e\u6307\u4ee4\u7684\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6709\u8865\u507f\u529f\u80fd\uff08\u53ef\u9009\uff09\n\n\n\u53ef\u7f16\u5199\u7a0b\u5e8f\u8bbe\u7f6e\u4e2d\u65ad\u63a7\u5236\n\n\n\u5168\u6570\u636e\u8865\u507f\n\n\n\u5bbd\u6c14\u538b\u8303\u56f4\n\n\n\u7075\u6d3b\u7684\u7535\u6e90\u7535\u538b\u8303\u56f4\n\n\n\u8d85\u4f4e\u529f\u8017\n\n\n\u9ad8\u5ea6\u5206\u8fa8\u7387\u53ef\u8fbe0.01\u7c73\n\n\n\u80fd\u591f\u8fdb\u884c\u6e29\u5ea6\u6d4b\u91cf\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u9ad8\u7cbe\u5ea6\u79fb\u52a8\u7684\u9ad8\u5ea6\u8ba1/\u6674\u96e8\u8868\n\n\n\u5de5\u4e1a\u538b\u529b\u548c\u6e29\u5ea6\u4f20\u611f\u5668\u7cfb\u7edf\n\n\n\u6c7d\u8f66\u7cfb\u7edf\n\n\n\u4e2a\u4eba\u7535\u5b50\u6d4b\u6e29\u4eea\n\n\n\u5192\u9669\u548c\u8fd0\u52a8\u7684\u624b\u8868\n\n\n\u533b\u7528\u6c14\u4f53\u63a7\u5236\u7cfb\u7edf\n\n\n\u6c14\u8c61\u7ad9\u8bbe\u5907\n\n\n\u5ba4\u5185\u5bfc\u822a\u548c\u5730\u56fe\u8f85\u52a9\n\n\n\u6696\u6c14\uff0c\u901a\u98ce\uff0c\u7a7a\u8c03\n\n\n\n\n\u4ea7\u54c1\u89c4\u683c\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6700\u5c0f\n\n\n\n\n\u6807\u51c6\n\n\n\n\n\u6700\u5927\n\n\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n\n\n3.3\n\n\n\n\n5\n\n\n\n\n5.5\n\n\n\n\nVDC\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n\n\n635\n\n\n\n\n/\n\n\n\n\n1100\n\n\n\n\nuA\n\n\n\n\n\n\n\n\n\u538b\u529b\u8303\u56f4\n\n\n\n\n300\n\n\n\n\n/\n\n\n\n\n1200\n\n\n\n\nhPa\n\n\n\n\n\n\n\n\nI2C \u6570\u636e\u4f20\u8f93\u9891\u7387\n\n\n\n\n/\n\n\n\n\n/\n\n\n\n\n10\n\n\n\n\nMHz\n\n\n\n\n\n\n\n\n\u5c3a\u5bf8\n\n\n\n\n20.4x41.8x9.7\n\n\n\n\nmm\n\n\n\n\n\n\n\n\n\u8d28\u91cf\n\n\n\n\n/\n\n\n\n\ng\n\n\n\n\n\n\n\n\nPlatforms Supported\n\n\n\u4f7f\u7528\u65b9\u5f0f\n\n\n\u4f7f\u7528 Arduino\n\n\n\u6c14\u538b\u6761\u4ef6\u662f\u7528\u4e8e\u9884\u6d4b\u5929\u6c14\u53d8\u5316\u548c\u63a8\u65ad\u6d77\u62d4\u9ad8\u5ea6\u7684\u6807\u51c6\u4e4b\u4e00\u3002 \u8fd9\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4ece\u8fd9\u4e2a Grove - Barometer Sensor \u8bfb\u53d6\u6c14\u538b\u6570\u636e\u3002\n\n\n1.\u901a\u8fc7 Grove \u8fde\u63a5\u7ebf\u5c06\u5176\u8fde\u63a5\u5230 Seeeduino \u6216 Grove - Base Shield \u7684 \nI2C\n \u7aef\u53e3\u3002 \u5e76\u901a\u8fc7 USB \u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002\n\n\n\n\n2.\u4e0b\u8f7d\u5e93\u6587\u4ef6 \nGrove_Barometer_HP20x\n \u901a\u8fc7\u8def\u5f84\uff1a.\\arduino-1.0.1\\libraries \u5c06\u5176\u89e3\u538b\u7f29\u5230 Arduino IDE \u7684\u5e93\u6587\u4ef6\u4e2d\u3002\n\n\n3.\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\uff0c\u5e76\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u7c98\u8d34\u5230\u5176\u4e2d\u6216\u76f4\u63a5\u901a\u8fc7\u8def\u5f84\u6253\u5f00\u4ee3\u7801\uff1aFile\uff08\u6587\u4ef6\uff09-\n Example\uff08\u793a\u4f8b\uff09 - \n Barometer_Sensor-\n Barometer_Sensor\u3002\n\n\n/*\n* Demo name  ?: HP20x_dev demo\n* Usage      ?: I2C PRECISION BAROMETER AND ALTIMETER [HP206C hopeRF]\n* Author     ?: Oliver Wang from Seeed Studio\n* Version    ?: V0.1\n* Change log ?: Add kalman filter 2014/04/04\n*/\n\n#include \nHP20x_dev.h\n\n#include \nKalmanFilter.h\n\n\n#include \nArduino.h\n\n#include \nWire.h\n\n\nunsigned char ret = 0;\n\n    /* Instance */\nKalmanFilter t_filter;    //temperature filter\nKalmanFilter p_filter;    //pressure filter\nKalmanFilter a_filter;    //altitude filter\n\n\nvoid setup()\n{\n    Serial.begin(9600);        // start serial for output\n\n    Serial.println(\n****HP20x_dev demo by seeed studio****\\n\n);\n    Serial.println(\nCalculation formula: H = [8.5(101325-P)]/100 \\n\n);\n      /* Power up,delay 150ms,until voltage is stable */\n    delay(150);\n      /* Reset HP20x_dev */\n    HP20x.begin();\n    delay(100);\n\n      /* Determine HP20x_dev is available or not */\n    ret = HP20x.isAvailable();\n    if(OK_HP20X_DEV == ret)\n    {\n        Serial.println(\nHP20x_dev is available.\\n\n);\n    }\n    else\n    {\n        Serial.println(\nHP20x_dev isn\nt available.\\n\n);\n    }\n\n}\n\n\nvoid loop()\n{\n    char display[40];\n    if(OK_HP20X_DEV == ret)\n    {\n        Serial.println(\n------------------\\n\n);\n        long Temper = HP20x.ReadTemperature();\n        Serial.println(\nTemper:\n);\n        float t = Temper/100.0;\n        Serial.print(t);\n        Serial.println(\nC.\\n\n);\n        Serial.println(\nFilter:\n);\n        Serial.print(t_filter.Filter(t));\n        Serial.println(\nC.\\n\n);\n\n        long Pressure = HP20x.ReadPressure();\n        Serial.println(\nPressure:\n);\n        t = Pressure/100.0;\n        Serial.print(t);\n        Serial.println(\nhPa.\\n\n);\n        Serial.println(\nFilter:\n);\n        Serial.print(p_filter.Filter(t));\n        Serial.println(\nhPa\\n\n);\n\n        long Altitude = HP20x.ReadAltitude();\n        Serial.println(\nAltitude:\n);\n        t = Altitude/100.0;\n        Serial.print(t);\n        Serial.println(\nm.\\n\n);\n        Serial.println(\nFilter:\n);\n        Serial.print(a_filter.Filter(t));\n        Serial.println(\nm.\\n\n);\n        Serial.println(\n------------------\\n\n);\n        delay(1000);\n    }\n}\n\n\n\n\n4.\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u6765\u63a5\u6536\u4f20\u611f\u5668\u7684\u6570\u636e\uff0c\u5305\u62ec\u6e29\u5ea6\uff0c\u6c14\u538b\u503c\uff0c\u76f8\u5bf9\u6c14\u538b\u548c\u9ad8\u5ea6\u3002\n\n\n\n\n\u4ee5\u4e0b\u662f\u7ed8\u5236\u6d77\u62d4\u9ad8\u5ea6\u4e0e\u5927\u6c14\u538b\u529b\u4e4b\u95f4\u5173\u7cfb\u7684\u53c2\u8003\u56fe\u3002\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove_Barometer_High-Accuracy_v1.0_sch_pcb Eagle File\n\n\nHP206C Datasheet\n\n\nGithub repository for Grove_Barometer_HP20x", 
            "title": "Grove-Barometer_High_Accuracy"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#_1", 
            "text": "\u5177\u6709\u6570\u5b57\u4f20\u8f93\u7ebf\u7ebf\uff08I2C\uff09\u63a5\u53e3  \u57fa\u4e8e\u6307\u4ee4\u7684\u8bfb\u53d6\u65b9\u5f0f\uff0c\u6709\u8865\u507f\u529f\u80fd\uff08\u53ef\u9009\uff09  \u53ef\u7f16\u5199\u7a0b\u5e8f\u8bbe\u7f6e\u4e2d\u65ad\u63a7\u5236  \u5168\u6570\u636e\u8865\u507f  \u5bbd\u6c14\u538b\u8303\u56f4  \u7075\u6d3b\u7684\u7535\u6e90\u7535\u538b\u8303\u56f4  \u8d85\u4f4e\u529f\u8017  \u9ad8\u5ea6\u5206\u8fa8\u7387\u53ef\u8fbe0.01\u7c73  \u80fd\u591f\u8fdb\u884c\u6e29\u5ea6\u6d4b\u91cf    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#_2", 
            "text": "\u9ad8\u7cbe\u5ea6\u79fb\u52a8\u7684\u9ad8\u5ea6\u8ba1/\u6674\u96e8\u8868  \u5de5\u4e1a\u538b\u529b\u548c\u6e29\u5ea6\u4f20\u611f\u5668\u7cfb\u7edf  \u6c7d\u8f66\u7cfb\u7edf  \u4e2a\u4eba\u7535\u5b50\u6d4b\u6e29\u4eea  \u5192\u9669\u548c\u8fd0\u52a8\u7684\u624b\u8868  \u533b\u7528\u6c14\u4f53\u63a7\u5236\u7cfb\u7edf  \u6c14\u8c61\u7ad9\u8bbe\u5907  \u5ba4\u5185\u5bfc\u822a\u548c\u5730\u56fe\u8f85\u52a9  \u6696\u6c14\uff0c\u901a\u98ce\uff0c\u7a7a\u8c03", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#_3", 
            "text": "\u9879\u76ee  \n\u6700\u5c0f  \n\u6807\u51c6  \n\u6700\u5927  \n\u5355\u4f4d    \n\u5de5\u4f5c\u7535\u538b  \n3.3  \n5  \n5.5  \nVDC    \n\u5de5\u4f5c\u7535\u6d41  \n635  \n/  \n1100  \nuA    \n\u538b\u529b\u8303\u56f4  \n300  \n/  \n1200  \nhPa    \nI2C \u6570\u636e\u4f20\u8f93\u9891\u7387  \n/  \n/  \n10  \nMHz    \n\u5c3a\u5bf8  \n20.4x41.8x9.7  \nmm    \n\u8d28\u91cf  \n/  \ng", 
            "title": "\u4ea7\u54c1\u89c4\u683c"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#_4", 
            "text": "", 
            "title": "\u4f7f\u7528\u65b9\u5f0f"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#arduino", 
            "text": "\u6c14\u538b\u6761\u4ef6\u662f\u7528\u4e8e\u9884\u6d4b\u5929\u6c14\u53d8\u5316\u548c\u63a8\u65ad\u6d77\u62d4\u9ad8\u5ea6\u7684\u6807\u51c6\u4e4b\u4e00\u3002 \u8fd9\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4ece\u8fd9\u4e2a Grove - Barometer Sensor \u8bfb\u53d6\u6c14\u538b\u6570\u636e\u3002  1.\u901a\u8fc7 Grove \u8fde\u63a5\u7ebf\u5c06\u5176\u8fde\u63a5\u5230 Seeeduino \u6216 Grove - Base Shield \u7684  I2C  \u7aef\u53e3\u3002 \u5e76\u901a\u8fc7 USB \u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002   2.\u4e0b\u8f7d\u5e93\u6587\u4ef6  Grove_Barometer_HP20x  \u901a\u8fc7\u8def\u5f84\uff1a.\\arduino-1.0.1\\libraries \u5c06\u5176\u89e3\u538b\u7f29\u5230 Arduino IDE \u7684\u5e93\u6587\u4ef6\u4e2d\u3002  3.\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\uff0c\u5e76\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u7c98\u8d34\u5230\u5176\u4e2d\u6216\u76f4\u63a5\u901a\u8fc7\u8def\u5f84\u6253\u5f00\u4ee3\u7801\uff1aFile\uff08\u6587\u4ef6\uff09-  Example\uff08\u793a\u4f8b\uff09 -   Barometer_Sensor-  Barometer_Sensor\u3002  /*\n* Demo name  ?: HP20x_dev demo\n* Usage      ?: I2C PRECISION BAROMETER AND ALTIMETER [HP206C hopeRF]\n* Author     ?: Oliver Wang from Seeed Studio\n* Version    ?: V0.1\n* Change log ?: Add kalman filter 2014/04/04\n*/\n\n#include  HP20x_dev.h \n#include  KalmanFilter.h \n\n#include  Arduino.h \n#include  Wire.h \n\nunsigned char ret = 0;\n\n    /* Instance */\nKalmanFilter t_filter;    //temperature filter\nKalmanFilter p_filter;    //pressure filter\nKalmanFilter a_filter;    //altitude filter\n\n\nvoid setup()\n{\n    Serial.begin(9600);        // start serial for output\n\n    Serial.println( ****HP20x_dev demo by seeed studio****\\n );\n    Serial.println( Calculation formula: H = [8.5(101325-P)]/100 \\n );\n      /* Power up,delay 150ms,until voltage is stable */\n    delay(150);\n      /* Reset HP20x_dev */\n    HP20x.begin();\n    delay(100);\n\n      /* Determine HP20x_dev is available or not */\n    ret = HP20x.isAvailable();\n    if(OK_HP20X_DEV == ret)\n    {\n        Serial.println( HP20x_dev is available.\\n );\n    }\n    else\n    {\n        Serial.println( HP20x_dev isn t available.\\n );\n    }\n\n}\n\n\nvoid loop()\n{\n    char display[40];\n    if(OK_HP20X_DEV == ret)\n    {\n        Serial.println( ------------------\\n );\n        long Temper = HP20x.ReadTemperature();\n        Serial.println( Temper: );\n        float t = Temper/100.0;\n        Serial.print(t);\n        Serial.println( C.\\n );\n        Serial.println( Filter: );\n        Serial.print(t_filter.Filter(t));\n        Serial.println( C.\\n );\n\n        long Pressure = HP20x.ReadPressure();\n        Serial.println( Pressure: );\n        t = Pressure/100.0;\n        Serial.print(t);\n        Serial.println( hPa.\\n );\n        Serial.println( Filter: );\n        Serial.print(p_filter.Filter(t));\n        Serial.println( hPa\\n );\n\n        long Altitude = HP20x.ReadAltitude();\n        Serial.println( Altitude: );\n        t = Altitude/100.0;\n        Serial.print(t);\n        Serial.println( m.\\n );\n        Serial.println( Filter: );\n        Serial.print(a_filter.Filter(t));\n        Serial.println( m.\\n );\n        Serial.println( ------------------\\n );\n        delay(1000);\n    }\n}  4.\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u6765\u63a5\u6536\u4f20\u611f\u5668\u7684\u6570\u636e\uff0c\u5305\u62ec\u6e29\u5ea6\uff0c\u6c14\u538b\u503c\uff0c\u76f8\u5bf9\u6c14\u538b\u548c\u9ad8\u5ea6\u3002   \u4ee5\u4e0b\u662f\u7ed8\u5236\u6d77\u62d4\u9ad8\u5ea6\u4e0e\u5927\u6c14\u538b\u529b\u4e4b\u95f4\u5173\u7cfb\u7684\u53c2\u8003\u56fe\u3002", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Barometer_High_Accuracy/#_5", 
            "text": "Grove_Barometer_High-Accuracy_v1.0_sch_pcb Eagle File  HP206C Datasheet  Github repository for Grove_Barometer_HP20x", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/", 
            "text": "\u8be5\u6a21\u5757\u57fa\u4e8e\u5c06\u5149\u5f3a\u5ea6\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\u7684 I2C\u5149\u6570\u8f6c\u6362\u5668 TSL2561\u3002 \u4e0e\u4f20\u7edf\u7684\u6a21\u62df\u5149\u4f20\u611f\u5668\u4e0d\u540c\uff0c \nGrove - Light Sensor\n \u8be5\u6570\u5b57\u6a21\u5757\u7531\u4e8e\u5b83\u6709\u53cc\u91cd\u5149\u654f\u4e8c\u6781\u7ba1\uff1a\u7ea2\u5916\u548c\u5168\u5149\u8c31\u7684\uff0c\u6240\u6709\u5177\u6709\u53ef\u62e9\u5149\u8c31\u8303\u56f4\u529f\u80fd\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u4e09\u79cd\u68c0\u6d4b\u6a21\u5f0f\u4e4b\u95f4\u5207\u6362\u8bfb\u53d6\u6570\u636e\u3002 \u5b83\u4eec\u662f\u7ea2\u5916\u6a21\u5f0f\uff0c\u5168\u5149\u8c31\u548c\u4eba\u7c7b\u53ef\u89c1\u6a21\u5f0f\u3002 \u5f53\u5728\u4eba\u7c7b\u53ef\u89c6\u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u8be5\u4f20\u611f\u5668\u663e\u793a\u7684\u8bfb\u6570\u6070\u597d\u63a5\u8fd1\u60a8\u7684\u773c\u775b\u611f\u89c9\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u53ef\u9009\u62e9\u68c0\u6d4b\u6a21\u5f0f\n\n\n\u5728 400 kHz I2C \u5feb\u901f\u6a21\u5f0f\u4e0b\uff0c\u80fd\u591f\u4fdd\u6301\u9ad8\u5206\u8fa8\u7387\u7684\u4ee5 16 \u4f4d\u6570\u5b57\u4fe1\u53f7\u8f93\u51fa\n\n\n\u5bbd\u52a8\u6001\u8303\u56f4\uff1a0.1 - 40,000 LUX\n\n\n\u5bbd\u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\uff1a-40\u00b0C\u81f385\u00b0C\n\n\n\u5177\u6709\u53ef\u7f16\u7a0b\u7684\u4e2d\u65ad\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u4e0a\u9650\u548c\u4e0b\u9650\u7684\u9608\u503c\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6700\u5c0f\n\n\n\u6807\u51c6\n\n\n\u6700\u5927\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\n\u7535\u6e90\u7535\u538b\uff0cVDD\n\n\n3.3\n\n\n5\n\n\n5.1\n\n\nV\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\n\n\n-30\n\n\n\\\n\n\n70\n\n\n\u2103\n\n\n\n\n\n\nSCL\uff0cSDA\u8f93\u5165\u4f4e\u7535\u538b\n\n\n-0.5\n\n\n\\\n\n\n0.8\n\n\nV\n\n\n\n\n\n\nSCL\uff0cSDA\u8f93\u5165\u9ad8\u7535\u538b\n\n\n2.3\n\n\n\\\n\n\n5.1\n\n\nV\n\n\n\n\n\n\n\n\nPlatforms Supported\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\nU1:\n TSL2561 IC\uff0c\u5149\u6570\u5b57\u8f6c\u6362\u5668\u3002 \u8fd9\u662f\u529f\u80fd\u6846\u56fe\n\n\n- \n\u5bc4\u5b58\u5668\u56fe\u8868\n\n\nTSL2561\u753116\u4e2a\u5bc4\u5b58\u5668\uff083\u4e2a\u4fdd\u7559\uff09\u548c\u901a\u8fc7\u4e32\u884c\u63a5\u53e3\u8bbf\u95ee\u547d\u4ee4\u5bc4\u5b58\u5668\u6765\u5b9e\u73b0\u8fdb\u884c\u63a7\u5236\u548c\u76d1\u89c6\u7684\u3002 \u8fd9\u4e9b\u5bc4\u5b58\u5668\u63d0\u4f9b\u5404\u79cd\u63a7\u5236\u529f\u80fd\uff0c\u53ef\u4ee5\u8bfb\u53d6\u51c6\u786e\u7684 ADC \u8f6c\u6362\u7ed3\u679c\u3002 \u5bc4\u5b58\u5668\u96c6\u5408\u5982\u4e0b\u6240\u793a\u3002\n\n\n\n\n\n\n\u9891\u8c31\u54cd\u5e94\u66f2\u7ebf\n\n\n\n\n\n\nDigital light sensor \u7684\u4e24\u4e2a\u901a\u9053\u5177\u6709\u4e0d\u540c\u7684\u54cd\u5e94\u7279\u6027\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u5b83\u4eec\u7684\u5de5\u4f5c\u6a21\u5f0f\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u540c\u65f6\u5de5\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6709\u5176\u4e2d\u4e00\u4e2a\u5de5\u4f5c\u3002\n\n\nU3:\n XC6206MR332 IC\uff0c\u6b63\u7a33\u538b\u5668\u3002\n\n\nQ1,Q2:\n BSN20 IC\uff0cN\u6c9f\u9053\u589e\u5f3a\u578b\u5782\u76f4D-MOS\u6676\u4f53\u7ba1\u3002\n\n\nSCL,SDA:\n I2C\u4fe1\u53f7\u63a5\u53e3\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u4f7f\u7528 Arduino\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a Grove - Digital light sensor \u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Digital light sensor\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u5c06 Grove - Digital light Sensor \u8fde\u63a5\u5230 Base shield \u7684 \nI2C\n \u7aef\u53e3\u3002\n\n\n\u5c06 Base shield \u63d2\u5165 Arduino\u3002\n\n\n\u4f7f\u7528 USB \u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002\n\n\n\n\n\n\n\u7a0b\u5e8f\n\n\n\n\n\u4ece\u8fd9\u91cc\u4e0b\u8f7d\u5e93\u6587\u4ef6 \nDigital Light Sensor \u5e93\n;\n\n\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5 Arduino \u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002\n\n\n\u901a\u8fc7\u8def\u5f84\u76f4\u63a5\u6253\u5f00\u4ee3\u7801\uff1a \nFile\uff08\u6587\u4ef6\uff09 -\n Example\uff08\u793a\u4f8b\uff09 -\nDigital_Light_Sensor-\nDigital_Light_Sensor\n.\n\n\n\n\n\n\n\n\n\n\n\u6216\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230IDE\u5e76\u4e0a\u4f20\u5230Arduino\u3002\n\n    /*\n     * Digital_Light_Sensor.ino\n     * A library for TSL2561\n     *\n     * Copyright (c) 2012 seeed technology inc.\n     * Website   \u00a0: www.seeed.cc\n     * Author    \u00a0: zhangkun\n     * Create Time:\n     * Change Log\u00a0:\n     *\n     * The MIT License (MIT)\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \nSoftware\n), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n     * THE SOFTWARE.\n     */\n\n    #include \nWire.h\n\n    #include \nDigital_Light_TSL2561.h\n\n    void setup()\n    {\n      Wire.begin();\n      Serial.begin(9600);\n      TSL2561.init();\n    }\n\n    void loop()\n    {\n      Serial.print(\nThe Light value is: \n);\n      Serial.println(TSL2561.readVisibleLux());\n      delay(1000);\n    }\n\n\n\n\n\n\n\n\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u6765\u770b\u76d1\u89c6\u7684\u7ed3\u679c\u3002\n\n\n\n\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nRaspberry pi\n\n\nGrove - Digital light sensor\n\n\nGrovePi_Plus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n\n\n\u4f7f\u7528 grove \u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165 Grovepi + \u63d2\u5ea7 \nI2C\n\u3002\n\n\n\n\n\n\n\u7a0b\u5e8f\n\n\n\n\n\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a\n\n    cd yourpath/GrovePi/Software/Python/grove_i2c_digital_light_sensor/\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n\n\n\n    nano grove_i2c_digital_light_sensor.py  # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import smbus\n    from Adafruit_I2C import Adafruit_I2C\n    import RPi.GPIO as GPIO\n    import grovepi\n    from smbus import SMBus\n\n    global I2C_ADDRESS\n    global I2C_SMBUS\n    global _CMD\n    global _CMD_CLEAR\n    global _CMD_WORD\n    global _CMD_BLOCK\n    global _REG_CONTROL\n    global _REG_TIMING\n    global _REG_ID\n    global _REG_BLOCKREAD\n    global _REG_DATA0\n    global _REG_DATA1\n    global _POWER_UP\n    global _POWER_DOWN\n    global _GAIN_LOW\n    global _GAIN_HIGH\n    global _INTEGRATION_START\n    global _INTEGRATION_STOP\n    global _INTEGRATE_13\n    global _INTEGRATE_101\n    global _INTEGRATE_402\n    global _INTEGRATE_DEFAULT\n    global _INTEGRATE_NA\n    global _GAIN\n    global _MANUAL\n    global _INTEG\n    global _CHANNEL0\n    global _CHANNEL1\n    global _D0\n    global _D1\n    global _LUX\n\n\n    # bus parameters\n    rev = GPIO.RPI_REVISION\n    if rev == 2 or rev == 3:\n        I2C_SMBUS = smbus.SMBus(1)\n    else:\n        I2C_SMBUS = smbus.SMBus(0)\n\n    # Default I2C address\n    I2C_ADDRESS = 0x29\n\n    # Commands\n    _CMD       = 0x80\n    _CMD_CLEAR = 0x40\n    _CMD_WORD  = 0x20\n    _CMD_BLOCK = 0x10\n\n    # Registers\n    _REG_CONTROL   = 0x00\n    _REG_TIMING    = 0x01\n    _REG_ID        = 0x0A\n    _REG_BLOCKREAD = 0x0B\n    _REG_DATA0     = 0x0C\n    _REG_DATA1     = 0x0E\n\n    # Control parameters\n    _POWER_UP   = 0x03\n    _POWER_DOWN = 0x00\n\n    # Timing parameters\n    _GAIN_LOW          = 0b00000000\n    _GAIN_HIGH         = 0b00010000\n    _INTEGRATION_START = 0b00001000\n    _INTEGRATION_STOP  = 0b00000000\n    _INTEGRATE_13      = 0b00000000\n    _INTEGRATE_101     = 0b00000001\n    _INTEGRATE_402     = 0b00000010\n    _INTEGRATE_DEFAULT = _INTEGRATE_402\n    _INTEGRATE_NA      = 0b00000011\n\n    # Testing parameters\n    ambient  = None\n    IR       = None\n    _ambient = 0\n    _IR      = 0\n    _LUX     = None\n\n\n    class Tsl2561(object):\n            i2c = None\n\n            def _init__(self, bus = I2C_SMBUS, addr = I2C_ADDRESS, debug = 1, pause = 0.8):  # set debug = 0 stops debugging output on screen\n                    assert(bus is not None)\n                assert(addr \n 0b000111 and addr \n 0b1111000)\n\n                    self.i2c     = Adafruit_I2C(addr)\n                    self.pause   = pause\n                    self.debug   = debug\n                    self.gain    = 0\n                self._bus    = bus\n                    self._addr   = addr\n\n                ambient        = None\n                    IR             = None\n                self._ambient  = 0\n                    self._IR       = 0\n                self._LUX      = None\n                    self._control(_POWER_UP)\n                    self._partno_revision()\n\n    #        @property\n\n            def _lux(self, gain):\n                    \n\n                    Returns a lux value.  Returns None if no valid value is set yet.\n                    \n\n                    var = readLux(gain)\n                    ambient = var[0]\n                    IR = var[1]\n                    self._ambient = var[2]\n                    self._IR = var[3]\n                    self_LUX = var[4]\n                    return (ambient, IR, self._ambient, self._IR, self._LUX)\n\n\n            def setGain(self, gain = 1):\n                    \n Set the gain \n\n                    if (gain\u00a0!= self.gain):\n                            if (gain==1):\n                                    cmd = _CMD | _REG_TIMING\n                                    value = 0x02\n                                    self.i2c.write8(cmd, value)  # Set gain = 1X and timing = 402 mSec\n                                    if (self.debug):\n                                            print \nSetting low gain\n\n                            else:\n                                    cmd = _CMD | _REG_TIMING\n                                    value = 0x12\n                                    self.i2c.write8(cmd, value)  # Set gain = 16X and timing = 402 mSec\n                                    if (self.debug):\n                                            print \nSetting high gain\n\n                            self.gain=gain;  # Safe gain for calculation\n                            time.sleep(self.pause)  # Pause for integration (self.pause must be bigger than integration time)\n\n\n            def readWord(self, reg):\n                    \n Reads a word from the TSL2561 I2C device \n\n                    try:\n                            wordval = self.i2c.readU16(reg)\n                            newval = self.i2c.reverseByteOrder(wordval)\n                            if (self.debug):\n                                    print(\nI2C: Device 0x%02X: returned 0x%04X from reg 0x%02X\n\u00a0% (self._addr, wordval \n 0xFFFF, reg))\n                            return newval\n                    except IOError:\n                            print(\nError accessing 0x%02X: Chcekcyour I2C address\n\u00a0% self._addr)\n                            return -1\n\n\n            def readFull(self, reg = 0x8C):\n                    \n Read visible + IR diode from the TSL2561 I2C device \n\n                    return self.readWord(reg);\n\n            def readIR(self, reg = 0x8E):\n                    \n Reads only IR diode from the TSL2561 I2C device \n\n                    return self.readWord(reg);\n\n            def readLux(self, gain = 0):\n                    \n Grabs a lux reading either with autoranging (gain=0) or with specific gain (1, 16) \n\n                    if (self.debug):\n                            print \ngain = \n, gain\n                    if (gain == 1 or gain == 16):\n                            self.setGain(gain)  # Low/highGain\n                            ambient = self.readFull()\n                            IR = self.readIR()\n                    elif (gain == 0):  # Auto gain\n                            self.setGain(16)  # First try highGain\n                            ambient = self.readFull()\n                            if (ambient \n 65535):\n                                    IR = self.readIR()\n                            if (ambient \n= 65535 or IR \n= 65535):  # Value(s) exeed(s) datarange\n                                    self.setGain(1)  # Set lowGain\n                                    ambient = self.readFull()\n                                    IR = self.readIR()\n\n                    # If either sensor is saturated, no acculate lux value can be achieved.\n                    if (ambient == 0xffff or IR == 0xffff):\n                    self._LUX = None\n                    self._ambient = None\n                    self._IR = None\n                    return (self.ambient, self.IR, self._ambient, self._IR, self._LUX)\n                    if (self.gain == 1):\n                            self._ambient = 16 * ambient  # Scale 1x to 16x\n                            self._IR = 16 * IR            # Scale 1x to 16x\n                    else:\n                            self._ambient = 1 * ambient\n                            self._IR = 1 * IR\n                    if (self.debug):\n                            print \nIR Result without scaling: \n, IR\n                            print \nIR Result: \n, self._IR\n                            print \nAmbient Result without scaling: \n, ambient\n                            print \nAmbient Result: \n, self._ambient\n\n                    if (self._ambient == 0):\n                    # Sometimes, the channel 0 returns 0 when dark ...\n                    self._LUX = 0.0\n                    return (ambient, IR, self._ambient, self._IR, self._LUX)\n\n                    ratio = (self._IR / float(self._ambient))  # Change to make it run under python 2\n\n                    if (self.debug):\n                            print \nratio: \n, ratio\n\n                    if ((ratio \n= 0) and (ratio \n= 0.52)):\n                            self._LUX = (0.0315 * self._ambient) - (0.0593 * self._ambient * (ratio ** 1.4))\n                    elif (ratio \n= 0.65):\n                            self._LUX = (0.0229 * self._ambient) - (0.0291 * self._IR)\n                    elif (ratio \n= 0.80):\n                            self._LUX = (0.0157 * self._ambient) - (0.018 * self._IR)\n                    elif (ratio \n= 1.3):\n                            self._LUX = (0.00338 * self._ambient) - (0.0026 * self._IR)\n                    elif (ratio \n 1.3):\n                            self._LUX = 0\n\n                    return (ambient, IR, self._ambient, self._IR, self._LUX)\n\n            def _partno_revision(self):\n                    \n Read Partnumber and revision of the sensor \n\n                    cmd = _CMD | _REG_ID\n                    value = self.i2c.readS8(cmd)\n                    part = str(value)[7:4]\n                    if (part == \n0000\n):\n                            PartNo = \nTSL2560CS\n\n                    elif (part == \n0001\n):\n                            PartNo = \nTSL2561CS\n\n                    elif (part == \n0100\n):\n                            PartNo = \nTSL2560T/FN/CL\n\n                    elif (part == \n0101\n):\n                            PartNo = \nTSL2561T/FN/CL\n\n                    else:\n                            PartNo = \nnot TSL2560 or TSL 2561\n\n                    RevNo = str(value)[3:0]\n                    if (self.debug):\n                            print \nresponce: \n, value\n                            print \nPartNo = \n, PartNo\n                            print \nRevNo = \n, RevNo\n                    return (PartNo, RevNo)\n\n            def _control(self, params):\n                    if (params == _POWER_UP):\n                            print \nPower ON\n\n                    elif (params == _POWER_DOWN):\n                            print \nPower OFF\n\n                    else:\n                            print \nNo params given\n\n                    cmd = _CMD | _REG_CONTROL | params\n                    self.i2c.write8(self._addr, cmd)  # select command register and power on\n                time.sleep(0.4)  # Wait for 400ms to power up or power down.\n\n\n\n    def main():\n            TSL2561 = Tsl2561()\n            TSL2561._init__(I2C_SMBUS, I2C_ADDRESS)\n            while (True):\n                    gain=0\n                    val = TSL2561.readLux(gain)\n                    ambient = val[0]\n                    IR = val[1]\n                    _ambient = val[2]\n                    _IR = val[3]\n                    _LUX = val[4]\n                    if (ambient == 0xffff or IR == 0xffff):\n                            print (\nSensor is saturated, no lux value can be achieved:\n)\n                    print (\nambient = \n + ambient)\n                        print (\nIR = \n + IR)\n                            print (\nlight = \n + _LUX)\n                elif (_ambient == 0):\n                        print (\nIt\ns dark:\n)\n                            print (\nambient = \n + str(ambient))\n                    print (\nIR = \n + str(IR))\n                        print (\n_ambient = \n + str(_ambient))\n                            print (\n_IR = \n + str(_IR))\n                    print (\nLight = \n + str(_LUX) + \n lux.\n)\n                    else:\n                            print (\nThere is light:\n)\n                    print (\nambient = \n + str(ambient))\n                            print (\nIR = \n + str(IR))\n                            print (\n_ambient = \n + str(_ambient))\n                            print (\n_IR = \n + str(_IR))\n                            print (\nLight = \n + str(_LUX) + \n lux.\n)\n                    time.sleep(2)\n                    ambient  = None\n                    IR       = None\n                    _ambient = 0\n                    _IR      = 0\n                    _LUX     = None\n                TSL2561._control(_POWER_DOWN)\n\n\n    if __name__==\n__main__\n:\n            main()\n\n\n\n\n\n\n\n\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n    sudo python grove_i2c_digital_light_sensor.py\n\n\n\n\n\n\n\n\u8fd9\u4e2a\u5c31\u662f\u5f97\u5230\u7684\u7ed3\u679c\n\n\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Eagle]\n \nGrove - Digital Light Sensor Eagle File\n\n\n[PDF]\n \nGrove - Digital Light Sensor Sch PDF File\n\n\n[PDF]\n \nGrove - Digital Light Sensor PCB PDF File\n\n\n[Library]\n \nLibrary Github Grove-Digital Light\n\n\n[Datasheet]\n \nTSL2561 Datasheet", 
            "title": "Grove-Digital_Light_Sensor"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_1", 
            "text": "\u53ef\u9009\u62e9\u68c0\u6d4b\u6a21\u5f0f  \u5728 400 kHz I2C \u5feb\u901f\u6a21\u5f0f\u4e0b\uff0c\u80fd\u591f\u4fdd\u6301\u9ad8\u5206\u8fa8\u7387\u7684\u4ee5 16 \u4f4d\u6570\u5b57\u4fe1\u53f7\u8f93\u51fa  \u5bbd\u52a8\u6001\u8303\u56f4\uff1a0.1 - 40,000 LUX  \u5bbd\u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\uff1a-40\u00b0C\u81f385\u00b0C  \u5177\u6709\u53ef\u7f16\u7a0b\u7684\u4e2d\u65ad\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u4e0a\u9650\u548c\u4e0b\u9650\u7684\u9608\u503c    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_2", 
            "text": "\u9879\u76ee  \u6700\u5c0f  \u6807\u51c6  \u6700\u5927  \u5355\u4f4d      \u7535\u6e90\u7535\u538b\uff0cVDD  3.3  5  5.1  V    \u5de5\u4f5c\u6e29\u5ea6  -30  \\  70  \u2103    SCL\uff0cSDA\u8f93\u5165\u4f4e\u7535\u538b  -0.5  \\  0.8  V    SCL\uff0cSDA\u8f93\u5165\u9ad8\u7535\u538b  2.3  \\  5.1  V", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_3", 
            "text": "U1:  TSL2561 IC\uff0c\u5149\u6570\u5b57\u8f6c\u6362\u5668\u3002 \u8fd9\u662f\u529f\u80fd\u6846\u56fe \n-  \u5bc4\u5b58\u5668\u56fe\u8868  TSL2561\u753116\u4e2a\u5bc4\u5b58\u5668\uff083\u4e2a\u4fdd\u7559\uff09\u548c\u901a\u8fc7\u4e32\u884c\u63a5\u53e3\u8bbf\u95ee\u547d\u4ee4\u5bc4\u5b58\u5668\u6765\u5b9e\u73b0\u8fdb\u884c\u63a7\u5236\u548c\u76d1\u89c6\u7684\u3002 \u8fd9\u4e9b\u5bc4\u5b58\u5668\u63d0\u4f9b\u5404\u79cd\u63a7\u5236\u529f\u80fd\uff0c\u53ef\u4ee5\u8bfb\u53d6\u51c6\u786e\u7684 ADC \u8f6c\u6362\u7ed3\u679c\u3002 \u5bc4\u5b58\u5668\u96c6\u5408\u5982\u4e0b\u6240\u793a\u3002    \u9891\u8c31\u54cd\u5e94\u66f2\u7ebf    Digital light sensor \u7684\u4e24\u4e2a\u901a\u9053\u5177\u6709\u4e0d\u540c\u7684\u54cd\u5e94\u7279\u6027\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u5b83\u4eec\u7684\u5de5\u4f5c\u6a21\u5f0f\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u540c\u65f6\u5de5\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u53ea\u6709\u5176\u4e2d\u4e00\u4e2a\u5de5\u4f5c\u3002  U3:  XC6206MR332 IC\uff0c\u6b63\u7a33\u538b\u5668\u3002  Q1,Q2:  BSN20 IC\uff0cN\u6c9f\u9053\u589e\u5f3a\u578b\u5782\u76f4D-MOS\u6676\u4f53\u7ba1\u3002  SCL,SDA:  I2C\u4fe1\u53f7\u63a5\u53e3", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_4", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#arduino", 
            "text": "", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_5", 
            "text": "\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a Grove - Digital light sensor \u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Digital light sensor  Base Shield           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u5c06 Grove - Digital light Sensor \u8fde\u63a5\u5230 Base shield \u7684  I2C  \u7aef\u53e3\u3002  \u5c06 Base shield \u63d2\u5165 Arduino\u3002  \u4f7f\u7528 USB \u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_6", 
            "text": "\u4ece\u8fd9\u91cc\u4e0b\u8f7d\u5e93\u6587\u4ef6  Digital Light Sensor \u5e93 ;  \u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5 Arduino \u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002  \u901a\u8fc7\u8def\u5f84\u76f4\u63a5\u6253\u5f00\u4ee3\u7801\uff1a  File\uff08\u6587\u4ef6\uff09 -  Example\uff08\u793a\u4f8b\uff09 - Digital_Light_Sensor- Digital_Light_Sensor .      \u6216\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5230IDE\u5e76\u4e0a\u4f20\u5230Arduino\u3002     /*\n     * Digital_Light_Sensor.ino\n     * A library for TSL2561\n     *\n     * Copyright (c) 2012 seeed technology inc.\n     * Website   \u00a0: www.seeed.cc\n     * Author    \u00a0: zhangkun\n     * Create Time:\n     * Change Log\u00a0:\n     *\n     * The MIT License (MIT)\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the  Software ), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n     * THE SOFTWARE.\n     */\n\n    #include  Wire.h \n    #include  Digital_Light_TSL2561.h \n    void setup()\n    {\n      Wire.begin();\n      Serial.begin(9600);\n      TSL2561.init();\n    }\n\n    void loop()\n    {\n      Serial.print( The Light value is:  );\n      Serial.println(TSL2561.readVisibleLux());\n      delay(1000);\n    }    \u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u6765\u770b\u76d1\u89c6\u7684\u7ed3\u679c\u3002", 
            "title": "\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#raspberry-pi", 
            "text": "", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_7", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Raspberry pi  Grove - Digital light sensor  GrovePi_Plus           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa  \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002  \u4f7f\u7528 grove \u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165 Grovepi + \u63d2\u5ea7  I2C \u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_8", 
            "text": "\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a     cd yourpath/GrovePi/Software/Python/grove_i2c_digital_light_sensor/  \u627e\u5230\u8fd9\u884c\u4ee3\u7801       nano grove_i2c_digital_light_sensor.py  #  Ctrl+x  to exit #      import time\n    import smbus\n    from Adafruit_I2C import Adafruit_I2C\n    import RPi.GPIO as GPIO\n    import grovepi\n    from smbus import SMBus\n\n    global I2C_ADDRESS\n    global I2C_SMBUS\n    global _CMD\n    global _CMD_CLEAR\n    global _CMD_WORD\n    global _CMD_BLOCK\n    global _REG_CONTROL\n    global _REG_TIMING\n    global _REG_ID\n    global _REG_BLOCKREAD\n    global _REG_DATA0\n    global _REG_DATA1\n    global _POWER_UP\n    global _POWER_DOWN\n    global _GAIN_LOW\n    global _GAIN_HIGH\n    global _INTEGRATION_START\n    global _INTEGRATION_STOP\n    global _INTEGRATE_13\n    global _INTEGRATE_101\n    global _INTEGRATE_402\n    global _INTEGRATE_DEFAULT\n    global _INTEGRATE_NA\n    global _GAIN\n    global _MANUAL\n    global _INTEG\n    global _CHANNEL0\n    global _CHANNEL1\n    global _D0\n    global _D1\n    global _LUX\n\n\n    # bus parameters\n    rev = GPIO.RPI_REVISION\n    if rev == 2 or rev == 3:\n        I2C_SMBUS = smbus.SMBus(1)\n    else:\n        I2C_SMBUS = smbus.SMBus(0)\n\n    # Default I2C address\n    I2C_ADDRESS = 0x29\n\n    # Commands\n    _CMD       = 0x80\n    _CMD_CLEAR = 0x40\n    _CMD_WORD  = 0x20\n    _CMD_BLOCK = 0x10\n\n    # Registers\n    _REG_CONTROL   = 0x00\n    _REG_TIMING    = 0x01\n    _REG_ID        = 0x0A\n    _REG_BLOCKREAD = 0x0B\n    _REG_DATA0     = 0x0C\n    _REG_DATA1     = 0x0E\n\n    # Control parameters\n    _POWER_UP   = 0x03\n    _POWER_DOWN = 0x00\n\n    # Timing parameters\n    _GAIN_LOW          = 0b00000000\n    _GAIN_HIGH         = 0b00010000\n    _INTEGRATION_START = 0b00001000\n    _INTEGRATION_STOP  = 0b00000000\n    _INTEGRATE_13      = 0b00000000\n    _INTEGRATE_101     = 0b00000001\n    _INTEGRATE_402     = 0b00000010\n    _INTEGRATE_DEFAULT = _INTEGRATE_402\n    _INTEGRATE_NA      = 0b00000011\n\n    # Testing parameters\n    ambient  = None\n    IR       = None\n    _ambient = 0\n    _IR      = 0\n    _LUX     = None\n\n\n    class Tsl2561(object):\n            i2c = None\n\n            def _init__(self, bus = I2C_SMBUS, addr = I2C_ADDRESS, debug = 1, pause = 0.8):  # set debug = 0 stops debugging output on screen\n                    assert(bus is not None)\n                assert(addr   0b000111 and addr   0b1111000)\n\n                    self.i2c     = Adafruit_I2C(addr)\n                    self.pause   = pause\n                    self.debug   = debug\n                    self.gain    = 0\n                self._bus    = bus\n                    self._addr   = addr\n\n                ambient        = None\n                    IR             = None\n                self._ambient  = 0\n                    self._IR       = 0\n                self._LUX      = None\n                    self._control(_POWER_UP)\n                    self._partno_revision()\n\n    #        @property\n\n            def _lux(self, gain):\n                     \n                    Returns a lux value.  Returns None if no valid value is set yet.\n                     \n                    var = readLux(gain)\n                    ambient = var[0]\n                    IR = var[1]\n                    self._ambient = var[2]\n                    self._IR = var[3]\n                    self_LUX = var[4]\n                    return (ambient, IR, self._ambient, self._IR, self._LUX)\n\n\n            def setGain(self, gain = 1):\n                      Set the gain  \n                    if (gain\u00a0!= self.gain):\n                            if (gain==1):\n                                    cmd = _CMD | _REG_TIMING\n                                    value = 0x02\n                                    self.i2c.write8(cmd, value)  # Set gain = 1X and timing = 402 mSec\n                                    if (self.debug):\n                                            print  Setting low gain \n                            else:\n                                    cmd = _CMD | _REG_TIMING\n                                    value = 0x12\n                                    self.i2c.write8(cmd, value)  # Set gain = 16X and timing = 402 mSec\n                                    if (self.debug):\n                                            print  Setting high gain \n                            self.gain=gain;  # Safe gain for calculation\n                            time.sleep(self.pause)  # Pause for integration (self.pause must be bigger than integration time)\n\n\n            def readWord(self, reg):\n                      Reads a word from the TSL2561 I2C device  \n                    try:\n                            wordval = self.i2c.readU16(reg)\n                            newval = self.i2c.reverseByteOrder(wordval)\n                            if (self.debug):\n                                    print( I2C: Device 0x%02X: returned 0x%04X from reg 0x%02X \u00a0% (self._addr, wordval   0xFFFF, reg))\n                            return newval\n                    except IOError:\n                            print( Error accessing 0x%02X: Chcekcyour I2C address \u00a0% self._addr)\n                            return -1\n\n\n            def readFull(self, reg = 0x8C):\n                      Read visible + IR diode from the TSL2561 I2C device  \n                    return self.readWord(reg);\n\n            def readIR(self, reg = 0x8E):\n                      Reads only IR diode from the TSL2561 I2C device  \n                    return self.readWord(reg);\n\n            def readLux(self, gain = 0):\n                      Grabs a lux reading either with autoranging (gain=0) or with specific gain (1, 16)  \n                    if (self.debug):\n                            print  gain =  , gain\n                    if (gain == 1 or gain == 16):\n                            self.setGain(gain)  # Low/highGain\n                            ambient = self.readFull()\n                            IR = self.readIR()\n                    elif (gain == 0):  # Auto gain\n                            self.setGain(16)  # First try highGain\n                            ambient = self.readFull()\n                            if (ambient   65535):\n                                    IR = self.readIR()\n                            if (ambient  = 65535 or IR  = 65535):  # Value(s) exeed(s) datarange\n                                    self.setGain(1)  # Set lowGain\n                                    ambient = self.readFull()\n                                    IR = self.readIR()\n\n                    # If either sensor is saturated, no acculate lux value can be achieved.\n                    if (ambient == 0xffff or IR == 0xffff):\n                    self._LUX = None\n                    self._ambient = None\n                    self._IR = None\n                    return (self.ambient, self.IR, self._ambient, self._IR, self._LUX)\n                    if (self.gain == 1):\n                            self._ambient = 16 * ambient  # Scale 1x to 16x\n                            self._IR = 16 * IR            # Scale 1x to 16x\n                    else:\n                            self._ambient = 1 * ambient\n                            self._IR = 1 * IR\n                    if (self.debug):\n                            print  IR Result without scaling:  , IR\n                            print  IR Result:  , self._IR\n                            print  Ambient Result without scaling:  , ambient\n                            print  Ambient Result:  , self._ambient\n\n                    if (self._ambient == 0):\n                    # Sometimes, the channel 0 returns 0 when dark ...\n                    self._LUX = 0.0\n                    return (ambient, IR, self._ambient, self._IR, self._LUX)\n\n                    ratio = (self._IR / float(self._ambient))  # Change to make it run under python 2\n\n                    if (self.debug):\n                            print  ratio:  , ratio\n\n                    if ((ratio  = 0) and (ratio  = 0.52)):\n                            self._LUX = (0.0315 * self._ambient) - (0.0593 * self._ambient * (ratio ** 1.4))\n                    elif (ratio  = 0.65):\n                            self._LUX = (0.0229 * self._ambient) - (0.0291 * self._IR)\n                    elif (ratio  = 0.80):\n                            self._LUX = (0.0157 * self._ambient) - (0.018 * self._IR)\n                    elif (ratio  = 1.3):\n                            self._LUX = (0.00338 * self._ambient) - (0.0026 * self._IR)\n                    elif (ratio   1.3):\n                            self._LUX = 0\n\n                    return (ambient, IR, self._ambient, self._IR, self._LUX)\n\n            def _partno_revision(self):\n                      Read Partnumber and revision of the sensor  \n                    cmd = _CMD | _REG_ID\n                    value = self.i2c.readS8(cmd)\n                    part = str(value)[7:4]\n                    if (part ==  0000 ):\n                            PartNo =  TSL2560CS \n                    elif (part ==  0001 ):\n                            PartNo =  TSL2561CS \n                    elif (part ==  0100 ):\n                            PartNo =  TSL2560T/FN/CL \n                    elif (part ==  0101 ):\n                            PartNo =  TSL2561T/FN/CL \n                    else:\n                            PartNo =  not TSL2560 or TSL 2561 \n                    RevNo = str(value)[3:0]\n                    if (self.debug):\n                            print  responce:  , value\n                            print  PartNo =  , PartNo\n                            print  RevNo =  , RevNo\n                    return (PartNo, RevNo)\n\n            def _control(self, params):\n                    if (params == _POWER_UP):\n                            print  Power ON \n                    elif (params == _POWER_DOWN):\n                            print  Power OFF \n                    else:\n                            print  No params given \n                    cmd = _CMD | _REG_CONTROL | params\n                    self.i2c.write8(self._addr, cmd)  # select command register and power on\n                time.sleep(0.4)  # Wait for 400ms to power up or power down.\n\n\n\n    def main():\n            TSL2561 = Tsl2561()\n            TSL2561._init__(I2C_SMBUS, I2C_ADDRESS)\n            while (True):\n                    gain=0\n                    val = TSL2561.readLux(gain)\n                    ambient = val[0]\n                    IR = val[1]\n                    _ambient = val[2]\n                    _IR = val[3]\n                    _LUX = val[4]\n                    if (ambient == 0xffff or IR == 0xffff):\n                            print ( Sensor is saturated, no lux value can be achieved: )\n                    print ( ambient =   + ambient)\n                        print ( IR =   + IR)\n                            print ( light =   + _LUX)\n                elif (_ambient == 0):\n                        print ( It s dark: )\n                            print ( ambient =   + str(ambient))\n                    print ( IR =   + str(IR))\n                        print ( _ambient =   + str(_ambient))\n                            print ( _IR =   + str(_IR))\n                    print ( Light =   + str(_LUX) +   lux. )\n                    else:\n                            print ( There is light: )\n                    print ( ambient =   + str(ambient))\n                            print ( IR =   + str(IR))\n                            print ( _ambient =   + str(_ambient))\n                            print ( _IR =   + str(_IR))\n                            print ( Light =   + str(_LUX) +   lux. )\n                    time.sleep(2)\n                    ambient  = None\n                    IR       = None\n                    _ambient = 0\n                    _IR      = 0\n                    _LUX     = None\n                TSL2561._control(_POWER_DOWN)\n\n\n    if __name__== __main__ :\n            main()    \u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b     sudo python grove_i2c_digital_light_sensor.py    \u8fd9\u4e2a\u5c31\u662f\u5f97\u5230\u7684\u7ed3\u679c", 
            "title": "\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Digital_Light_Sensor/#_9", 
            "text": "[Eagle]   Grove - Digital Light Sensor Eagle File  [PDF]   Grove - Digital Light Sensor Sch PDF File  [PDF]   Grove - Digital Light Sensor PCB PDF File  [Library]   Library Github Grove-Digital Light  [Datasheet]   TSL2561 Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Electromagnet/", 
            "text": "Electromagnet\u662f\u4e00\u79cd\u901a\u8fc7\u7535\u6d41\u4ea7\u751f\u78c1\u573a\u7684\u78c1\u4f53\u3002 \u6839\u636e\u5b89\u57f9\u5b9a\u5f8b\uff0c\u6d41\u5165\u7535\u7ebf\u7684\u7535\u6d41\u5728\u7535\u7ebf\u5468\u56f4\u4ea7\u751f\u78c1\u573a\uff08\u5982\u56fe\u6240\u793a\uff09\u3002 \u4e3a\u4e86\u4f7f\u78c1\u573a\u66f4\u52a0\u96c6\u4e2d\uff0c\u5728Electromagnet\u4e2d\uff0c\u7f20\u7ed5\u7740\u5f88\u591a\u6574\u9f50\u6392\u5e03\u7684\u7ebf\u5708\u3002 \u6240\u6709\u7ebf\u5708\u7684\u78c1\u573a\u901a\u8fc7\u7ebf\u5708\u7684\u4e2d\u5fc3\uff0c\u5728\u90a3\u91cc\u4ea7\u751f\u5f3a\u78c1\u573a\u3002 \u8fd9\u6837Grove - Electromagnet\u53ef\u4ee5\u5438\u8d771KG\u91cd\u7684\u94c1\u3002 \u5b83\u4f7f\u7528\u5f88\u65b9\u4fbf\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u5b66\u4e60\u5230\u7535\u78c1\u94c1\u7684\u539f\u7406\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u517c\u5bb9Grove\u63a5\u53e3\n\n\n\u6700\u5927\u80fd\u591f\u5438\u6c141KG\n\n\n\u5f85\u673a\u7535\u6d41\u6bd4\u8f83\u4f4e\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\uff1aDC 5V\n\n\n\u5de5\u4f5c\u7535\u6d41\uff1a400mA\n\n\n\u5f85\u673a\u7535\u6d41\uff1a200uA\n\n\n\u5438\u8d77\u91cd\u91cf\uff1a1KG\n\n\n\n\n\u5e73\u53f0\u652f\u6301\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\u4f7f\u7528 Arduino\n\n\n\n\n\n\n\u7a0b\u5e8f:\n\n\n/*\n  Turns on an Electromagnet on for one second, then off for one second, repeatedly.\n  This example code is in the public domain.\n*/\n\nint Electromagnet = 0;\nint LED = 13;\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n    // initialize the digital pin as an output.\n    pinMode(Electromagnet, OUTPUT);\n    pinMode(LED, OUTPUT);\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n    digitalWrite(Electromagnet, HIGH);  // turn the Electromagnet on (HIGH is the voltage level)\n    digitalWrite(LED, HIGH);            // turn the LED on (HIGH is the voltage level)\n    delay(1000);                        // wait for a second\n    digitalWrite(Electromagnet, LOW);   // turn the Electromagnet off by making the voltage LOW\n    digitalWrite(LED, LOW);             // turn the LED off by making the voltage LOW\n    delay(1000);                        // wait for a second\n}\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2a raspberry pi\u548cgrovepi\u6216grovepi +\u3002\n\n\n2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa\n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n\n\n3.\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u4f7f\u7528 grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi \u63d2\u5ea7 \nD4\n \u7aef\u53e3\u3002\n\n\n\n\n4.\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a\n\n    cd yourpath/GrovePi/Software/Python/\n\n\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n\n\n\n    nano grove_electromagnet.py   # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import grovepi\n\n    # The electromagnet can hold a 1KG weight\n\n    # Connect the Grove Electromagnet to digital port D4\n    # SIG,NC,VCC,GND\n    electromagnet = 4\n\n    grovepi.pinMode(electromagnet,\nOUTPUT\n)\n    time.sleep(1)\n\n    while True:\n        try:\n            # Switch on electromagnet\n            grovepi.digitalWrite(electromagnet,1)\n            print \non\n\n            time.sleep(2)\n\n            # Switch off electromagnet\n            grovepi.digitalWrite(electromagnet,0)\n            print \noff\n\n            time.sleep(2)\n\n        except KeyboardInterrupt:\n            grovepi.digitalWrite(electromagnet,0)\n            break\n        except IOError:\n            print \nError\n\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\u3002\n\n    sudo python grove_electromagnet.py\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove Electromagnet v1.0 SCH PCB.zip\n\n\nDatasheet ZYE1-P20-15 PDF", 
            "title": "Grove-Electromagnet"
        }, 
        {
            "location": "/Grove-Electromagnet/#_1", 
            "text": "\u517c\u5bb9Grove\u63a5\u53e3  \u6700\u5927\u80fd\u591f\u5438\u6c141KG  \u5f85\u673a\u7535\u6d41\u6bd4\u8f83\u4f4e    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Electromagnet/#_2", 
            "text": "\u5de5\u4f5c\u7535\u538b\uff1aDC 5V  \u5de5\u4f5c\u7535\u6d41\uff1a400mA  \u5f85\u673a\u7535\u6d41\uff1a200uA  \u5438\u8d77\u91cd\u91cf\uff1a1KG", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Electromagnet/#_3", 
            "text": "", 
            "title": "\u5e73\u53f0\u652f\u6301"
        }, 
        {
            "location": "/Grove-Electromagnet/#_4", 
            "text": "", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Electromagnet/#arduino", 
            "text": "\u7a0b\u5e8f:  /*\n  Turns on an Electromagnet on for one second, then off for one second, repeatedly.\n  This example code is in the public domain.\n*/\n\nint Electromagnet = 0;\nint LED = 13;\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n    // initialize the digital pin as an output.\n    pinMode(Electromagnet, OUTPUT);\n    pinMode(LED, OUTPUT);\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n    digitalWrite(Electromagnet, HIGH);  // turn the Electromagnet on (HIGH is the voltage level)\n    digitalWrite(LED, HIGH);            // turn the LED on (HIGH is the voltage level)\n    delay(1000);                        // wait for a second\n    digitalWrite(Electromagnet, LOW);   // turn the Electromagnet off by making the voltage LOW\n    digitalWrite(LED, LOW);             // turn the LED off by making the voltage LOW\n    delay(1000);                        // wait for a second\n}", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Electromagnet/#raspberry-pi", 
            "text": "1.\u4f60\u5e94\u8be5\u6709\u4e00\u4e2a raspberry pi\u548cgrovepi\u6216grovepi +\u3002  2.\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002  3.\u786c\u4ef6\u8fde\u63a5   \u4f7f\u7528 grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi \u63d2\u5ea7  D4  \u7aef\u53e3\u3002   4.\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a     cd yourpath/GrovePi/Software/Python/   \u627e\u5230\u8fd9\u884c\u4ee3\u7801       nano grove_electromagnet.py   #  Ctrl+x  to exit #      import time\n    import grovepi\n\n    # The electromagnet can hold a 1KG weight\n\n    # Connect the Grove Electromagnet to digital port D4\n    # SIG,NC,VCC,GND\n    electromagnet = 4\n\n    grovepi.pinMode(electromagnet, OUTPUT )\n    time.sleep(1)\n\n    while True:\n        try:\n            # Switch on electromagnet\n            grovepi.digitalWrite(electromagnet,1)\n            print  on \n            time.sleep(2)\n\n            # Switch off electromagnet\n            grovepi.digitalWrite(electromagnet,0)\n            print  off \n            time.sleep(2)\n\n        except KeyboardInterrupt:\n            grovepi.digitalWrite(electromagnet,0)\n            break\n        except IOError:\n            print  Error   5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\u3002     sudo python grove_electromagnet.py", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-Electromagnet/#_5", 
            "text": "Grove Electromagnet v1.0 SCH PCB.zip  Datasheet ZYE1-P20-15 PDF", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-EMG_Detector/", 
            "text": "EMG detector \u662f\u8fde\u63a5\u4eba\u4f53\u548c\u7535\u8def\u7684\u7684\u6865\u6881\uff0c\u4f20\u611f\u5668\u80fd\u591f\u6536\u96c6\u808c\u8089\u6536\u7f29\u7684\u7535\u4fe1\u53f7\uff0c\u7136\u540e\u8fdb\u884c\u4e8c\u6b21\u653e\u5927\u548c\u6ee4\u6ce2\uff0c\u8f93\u51fa\u7684\u4fe1\u53f7\u53ef\u4ee5\u88ab Arduino \u8bc6\u522b\u3002 \u60a8\u53ef\u4ee5\u628a\u6b64\u4e2a\u4fe1\u53f7\u6dfb\u52a0\u5230\u60a8\u7684\u63a7\u5236\u7cfb\u7edf\u4e2d\u3002\n\n\n\n\nNote\n\n\u4f20\u611f\u5668\u4e0d\u80fd\u7528\u4e8e\u533b\u7597\u7528\u9014\u3002\n\n\n\n\n\u5728\u5f85\u673a\u6a21\u5f0f\u4e0b\uff0c\u8f93\u51fa\u7535\u538b\u4e3a1.5V\u3002 \u5f53\u68c0\u6d4b\u5230\u808c\u8089\u6d3b\u52a8\u65f6\uff0c\u8f93\u51fa\u4e0a\u5347\u7684\u4fe1\u53f7\uff0c\u6700\u5927\u7535\u538b\u4e3a3.3V\u3002 \u60a8\u53ef\u4ee5\u57283.3V\u62165V\u7cfb\u7edf\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u4f20\u611f\u5668\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u80fd\u591f\u517c\u5bb9Grove\u63a5\u53e3\n\n\n\u9700\u89813.5mm\u63d2\u5934\u7684\u8fde\u63a5\u7ebf\n\n\n\u5305\u542b\u67096\u4e2a\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u7684\u8868\u9762\u7535\u6781\n\n\n\u7535\u6e90\u7535\u538b\uff1a3.3V-5V\n\n\n\u67091000mm\u957f\u7684\u6570\u636e\u7ebf\n\n\n\u65e0\u9700\u989d\u5916\u7684\u7535\u6e90\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\nPlatforms Supported\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\nJ2\uff1agrove\u63a5\u53e3\uff0c\u8fde\u63a5\u5230\u6a21\u62dfI / O;\n\n\nJ1\uff1aEMG\u7684\u53ef\u968f\u610f\u4f7f\u7528\u7684\u8868\u9762\u7535\u6781\u8fde\u63a5\u5668\u3002\n\n\nU1\uff1aINA331IDGKT\uff0c\u5dee\u5206\u653e\u5927\u5668\u3002\n\n\nU2\uff0cU3\uff1aOPA333\uff0c\u96f6\u6f02\u79fb\u653e\u5927\u5668\u3002\n\n\n\n\n\u793a\u8303\n\n\n\u8fd9\u4e2a\u6f14\u793a\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Grove - LCD RGB Backlight\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a \nSeeeduino V3.0\n \uff0c\nGrove - LED Bar\n \u548c \nGrove - Base Shield\n\u3002\n\n\n\u786c\u4ef6\u5b89\u88c5\n\n\n\u5c06 Grove - Base Shield \u63d2\u5165\u5230 Seeeduino\uff0c\u7136\u540e\u5c06 Grove - LED Bar \u8fde\u63a5\u5230 \nD8\n \u7aef\u53e3\uff0c\u5c06 Grove - EMG \u4f20\u611f\u5668\u8fde\u63a5\u5230 \nA0\n \u7aef\u53e3\u3002\n\n\n\u6700\u540e\uff0c\u628a\u4e09\u4e2a\u7535\u6781\u7c98\u5230\u4f60\u7684\u808c\u8089\u4e0a\uff0c\u5e76\u4fdd\u6301\u6bcf\u4e2a\u7535\u6781\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n\n\n\n\u4e0b\u8f7d\u4ee3\u7801\u548c\u4e0a\u4f20\n\n\n\u60a8\u53ef\u4ee5\u5728 github \u4e2d\u4e0b\u8f7d\u6f14\u793a\u4ee3\u7801\uff0c\u70b9\u51fb\n\n\u8fd9\u91cc\n\uff0c\u7136\u540e\u5c06\u5176\u89e3\u538b\u5230\u4efb\u4f55\u5730\u65b9\u3002\n\n\n\u7136\u540e\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230 Seeeduino\uff0c\u5982\u679c\u60a8\u5bf9\u4ee3\u7801\u4e0a\u4f20\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u53c2\u9605\n  \nSeeeduino\u5165\u95e8\n\n\n\n\n\u66f4\u591a\n\n\n\u4e0b\u8f7d\u6f14\u793a\u4ee3\u7801\u540e\uff0c\u521d\u59cb\u5316\u5927\u7ea6\u9700\u89815\u79d2\u949f\uff0c\u8bf7\u5148\u4e0d\u8981\u8fd0\u52a8\u3002\n\n\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u521d\u59cb\u5316\u65f6\uff0cLed Bar\u5c06\u4f1a\u4ece10\u7ea7\u8f6c\u4e3a0\u7ea7\u3002\u5f53Led Bar\u5168\u90e8\u5173\u95ed\u65f6\uff0c\u60a8\u53ef\u4ee5\u9a6c\u4e0a\u505a\u4e00\u4e9b\u52a8\u4f5c\u3002\n\n\n\u5f53\u4f60\u79fb\u52a8\u65f6\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0Led Bar\u7684\u7ea7\u522b\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove-EMG Sensor v1.0 Eagle File\n\n\nGrove-EMG Sensor v1.1 Eagle File\n\n\nGrove-EMG Sensor v1.1 schematic PDF\n\n\nDemo Code", 
            "title": "Grove-EMG_Detector"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_1", 
            "text": "\u80fd\u591f\u517c\u5bb9Grove\u63a5\u53e3  \u9700\u89813.5mm\u63d2\u5934\u7684\u8fde\u63a5\u7ebf  \u5305\u542b\u67096\u4e2a\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u7684\u8868\u9762\u7535\u6781  \u7535\u6e90\u7535\u538b\uff1a3.3V-5V  \u67091000mm\u957f\u7684\u6570\u636e\u7ebf  \u65e0\u9700\u989d\u5916\u7684\u7535\u6e90    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-EMG_Detector/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_2", 
            "text": "J2\uff1agrove\u63a5\u53e3\uff0c\u8fde\u63a5\u5230\u6a21\u62dfI / O;  J1\uff1aEMG\u7684\u53ef\u968f\u610f\u4f7f\u7528\u7684\u8868\u9762\u7535\u6781\u8fde\u63a5\u5668\u3002  U1\uff1aINA331IDGKT\uff0c\u5dee\u5206\u653e\u5927\u5668\u3002  U2\uff0cU3\uff1aOPA333\uff0c\u96f6\u6f02\u79fb\u653e\u5927\u5668\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_3", 
            "text": "\u8fd9\u4e2a\u6f14\u793a\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Grove - LCD RGB Backlight\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a  Seeeduino V3.0  \uff0c Grove - LED Bar  \u548c  Grove - Base Shield \u3002", 
            "title": "\u793a\u8303"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_4", 
            "text": "\u5c06 Grove - Base Shield \u63d2\u5165\u5230 Seeeduino\uff0c\u7136\u540e\u5c06 Grove - LED Bar \u8fde\u63a5\u5230  D8  \u7aef\u53e3\uff0c\u5c06 Grove - EMG \u4f20\u611f\u5668\u8fde\u63a5\u5230  A0  \u7aef\u53e3\u3002  \u6700\u540e\uff0c\u628a\u4e09\u4e2a\u7535\u6781\u7c98\u5230\u4f60\u7684\u808c\u8089\u4e0a\uff0c\u5e76\u4fdd\u6301\u6bcf\u4e2a\u7535\u6781\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002", 
            "title": "\u786c\u4ef6\u5b89\u88c5"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_5", 
            "text": "\u60a8\u53ef\u4ee5\u5728 github \u4e2d\u4e0b\u8f7d\u6f14\u793a\u4ee3\u7801\uff0c\u70b9\u51fb \u8fd9\u91cc \uff0c\u7136\u540e\u5c06\u5176\u89e3\u538b\u5230\u4efb\u4f55\u5730\u65b9\u3002  \u7136\u540e\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230 Seeeduino\uff0c\u5982\u679c\u60a8\u5bf9\u4ee3\u7801\u4e0a\u4f20\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u53c2\u9605\n   Seeeduino\u5165\u95e8", 
            "title": "\u4e0b\u8f7d\u4ee3\u7801\u548c\u4e0a\u4f20"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_6", 
            "text": "\u4e0b\u8f7d\u6f14\u793a\u4ee3\u7801\u540e\uff0c\u521d\u59cb\u5316\u5927\u7ea6\u9700\u89815\u79d2\u949f\uff0c\u8bf7\u5148\u4e0d\u8981\u8fd0\u52a8\u3002  \u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u521d\u59cb\u5316\u65f6\uff0cLed Bar\u5c06\u4f1a\u4ece10\u7ea7\u8f6c\u4e3a0\u7ea7\u3002\u5f53Led Bar\u5168\u90e8\u5173\u95ed\u65f6\uff0c\u60a8\u53ef\u4ee5\u9a6c\u4e0a\u505a\u4e00\u4e9b\u52a8\u4f5c\u3002  \u5f53\u4f60\u79fb\u52a8\u65f6\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0Led Bar\u7684\u7ea7\u522b\u4f1a\u53d1\u751f\u53d8\u5316\u3002", 
            "title": "\u66f4\u591a"
        }, 
        {
            "location": "/Grove-EMG_Detector/#_7", 
            "text": "Grove-EMG Sensor v1.0 Eagle File  Grove-EMG Sensor v1.1 Eagle File  Grove-EMG Sensor v1.1 schematic PDF  Demo Code", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Flame_Sensor/", 
            "text": "Grove - Flame Sensor \u53ef\u7528\u4e8e\u68c0\u6d4b\u6ce2\u957f760nm\u81f31100nm\u8303\u56f4\u5185\u6ce2\u957f\u7684\u706b\u6e90\u6216\u5176\u4ed6\u5149\u6e90\u3002 \u5b83\u662f\u57fa\u4e8eYG1006\u4f20\u611f\u5668\uff0c\u5b83\u662f\u4e00\u79cd\u80fd\u591f\u5feb\u901f\u5904\u7406\u4fe1\u53f7\u548c\u5177\u6709\u9ad8\u7075\u654f\u5ea6\u7684NPN\u7845\u5149\u7535\u6676\u4f53\u7ba1\u3002 \u7531\u4e8e\u91c7\u7528\u9ed1\u8272\u73af\u6c27\u6811\u8102\u6750\u8d28\uff0c\u4f20\u611f\u5668\u5bf9\u7ea2\u5916\u8f90\u5c04\u654f\u611f\u3002 \u5728\u6d88\u9632\u673a\u5668\u4eba\u7ec4\u6210\u4e2d\uff0c\u4f20\u611f\u5668\u8d77\u7740\u975e\u5e38\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u673a\u5668\u4eba\u627e\u5230\u706b\u6e90\u7684\u773c\u775b\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u517c\u5bb9Grove\u63a5\u53e3\n\n\n\u5bf9\u4e8e\u706b\u5149\u5177\u6709\u5f88\u9ad8\u7684\u7075\u654f\u5ea6\n\n\n\u54cd\u5e94\u65f6\u95f4\u5f88\u5feb\n\n\n\u4f7f\u7528\u65b9\u4fbf\n\n\n\u7075\u654f\u5ea6\u53ef\u8c03\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\n\n\u6700\u5c0f\n\n\n\n\n\u6807\u51c6\n\n\n\n\n\u6700\u5927\n\n\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n\n\n4.75\n\n\n\n\n5.0\n\n\n\n\n5.30\n\n\n\n\nVDC\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n\n\n/\n\n\n\n\n20\n\n\n\n\n/\n\n\n\n\nmA\n\n\n\n\n\n\n\n\n\u68c0\u6d4b\u5230\u5149\u8c31\u5e26\u5bbd\u7684\u8303\u56f4\n\n\n\n\n760\n\n\n\n\n940\n\n\n\n\n1100\n\n\n\n\nnm\n\n\n\n\n\n\n\n\n\u68c0\u6d4b\u8303\u56f4\n\n\n\n\n0\n\n\n\n\n~\n\n\n\n\n1\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\u54cd\u5e94\u65f6\u95f4\n\n\n\n\n15\n\n\n\n\n\u03bcS\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u6e29\u5ea6\n\n\n\n\n-25\n\n\n\n\n~\n\n\n\n\n85\n\n\n\n\n\u2103\n\n\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\u8be5\u6a21\u5757\u4e3b\u8981\u7528\u4e8e\u68c0\u6d4b\u7ea2\u5916\u7ebf\u3002 \u5b83\u901a\u8fc7\u6bd4\u8f83\u5668\u8f93\u51fa\u6570\u5b57\u4fe1\u53f7 \n0\n \u548c \n1\n\u3002 \u68c0\u6d4b\u5230\u7ea2\u5916\u706f\u65f6\uff0c\u8f93\u51fa\u503c\u4e3a \n0\n\u3002 \u5b83\u7684\u7075\u654f\u5ea6\u53ef\u7531\u7cbe\u5bc6\u7684\u7535\u4f4d\u8ba1\u8c03\u8282\u3002\n\n\n\u6211\u4eec\u6765\u7528\u5b83\u6765\u63a7\u5236\u3002 \u5f53\u8f93\u51fa\u503c\u4e3a \n0\n \u65f6\uff0cLED\u5c06\u4eae\u8d77\u3002\n\n\n1.\u4f7f\u75284\u9488\u7684 grove \u8fde\u63a5\u7ebf\u5c06\u6a21\u5757\u8fde\u63a5\u5230 \nGrove - Base Shield\n \u7684 \nD3\n \u7aef\u53e3\u3002\n\n\n2.\u5c06 Grove - Base Shield \u63d2\u5165\u5230 Arduino\u3002\n\n\n3.\u4f7f\u7528 USB \u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002\n\n\n4.\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n\n    /******************************************************************************/\n\n    #define SENSOR 3 //connect SENSOR to digital pin3\n    #define LED 2//connect Grove - LED to pin2\n\nvoid setup()\n{\n    pinsInit();\n}\nvoid loop()\n{\n    if(isFlameDetected())\n    turnOnLED();\n    else turnOffLED();\n}\n    /********************************/\nvoid pinsInit()\n{\n    pinMode(FLAME_SENSOR, INPUT);\n    pinMode(LED,OUTPUT);\n    digitalWrite(LED,LOW);\n}\nvoid turnOnLED()\n{\n    digitalWrite(LED,HIGH);\n}\nvoid turnOffLED()\n{\n    digitalWrite(LED,LOW);\n}\nboolean isFlameDetected()\n{\n    if(digitalRead(FLAME_SENSOR))\n    return false;\n    else return true;\n}\n\n\n\n\n5.\u5f53\u6709\u68c0\u6d4b\u5230\u7ea2\u5916\u7ebf\u7684\u65f6\u5019\uff0cLED\u4f1a\u70b9\u4eae\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8bbe\u8ba1\u60a8\u7684\u4ea7\u54c1\u3002\n\n\n\u53c2\u8003\n\n\n\u4f20\u611f\u5668\u53ef\u4ee5\u68c0\u6d4b\u6ce2\u957f\u5728760nm-1100nm\u8303\u56f4\u5185\u7684\u5149\u6e90\u3002 \u4e0b\u56fe\u663e\u793a\u4e86\u5149\u8c31\u7075\u654f\u5ea6\u3002\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - Flame Sensor Eagle File\n\n\nGithub repository for Grove_Flame_Sensor Library\n\n\nLM293D datasheet", 
            "title": "Grove-Flame_Sensor"
        }, 
        {
            "location": "/Grove-Flame_Sensor/#_1", 
            "text": "\u517c\u5bb9Grove\u63a5\u53e3  \u5bf9\u4e8e\u706b\u5149\u5177\u6709\u5f88\u9ad8\u7684\u7075\u654f\u5ea6  \u54cd\u5e94\u65f6\u95f4\u5f88\u5feb  \u4f7f\u7528\u65b9\u4fbf  \u7075\u654f\u5ea6\u53ef\u8c03    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Flame_Sensor/#_2", 
            "text": "\u9879\u76ee  \n\u6700\u5c0f  \n\u6807\u51c6  \n\u6700\u5927  \n\u5355\u4f4d    \n\u5de5\u4f5c\u7535\u538b  \n4.75  \n5.0  \n5.30  \nVDC    \n\u5de5\u4f5c\u7535\u6d41  \n/  \n20  \n/  \nmA    \n\u68c0\u6d4b\u5230\u5149\u8c31\u5e26\u5bbd\u7684\u8303\u56f4  \n760  \n940  \n1100  \nnm    \n\u68c0\u6d4b\u8303\u56f4  \n0  \n~  \n1  \nm    \n\u54cd\u5e94\u65f6\u95f4  \n15  \n\u03bcS    \n\u5de5\u4f5c\u6e29\u5ea6  \n-25  \n~  \n85  \n\u2103", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Flame_Sensor/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Flame_Sensor/#_4", 
            "text": "\u8be5\u6a21\u5757\u4e3b\u8981\u7528\u4e8e\u68c0\u6d4b\u7ea2\u5916\u7ebf\u3002 \u5b83\u901a\u8fc7\u6bd4\u8f83\u5668\u8f93\u51fa\u6570\u5b57\u4fe1\u53f7  0  \u548c  1 \u3002 \u68c0\u6d4b\u5230\u7ea2\u5916\u706f\u65f6\uff0c\u8f93\u51fa\u503c\u4e3a  0 \u3002 \u5b83\u7684\u7075\u654f\u5ea6\u53ef\u7531\u7cbe\u5bc6\u7684\u7535\u4f4d\u8ba1\u8c03\u8282\u3002  \u6211\u4eec\u6765\u7528\u5b83\u6765\u63a7\u5236\u3002 \u5f53\u8f93\u51fa\u503c\u4e3a  0  \u65f6\uff0cLED\u5c06\u4eae\u8d77\u3002  1.\u4f7f\u75284\u9488\u7684 grove \u8fde\u63a5\u7ebf\u5c06\u6a21\u5757\u8fde\u63a5\u5230  Grove - Base Shield  \u7684  D3  \u7aef\u53e3\u3002  2.\u5c06 Grove - Base Shield \u63d2\u5165\u5230 Arduino\u3002  3.\u4f7f\u7528 USB \u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002  4.\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002      /******************************************************************************/\n\n    #define SENSOR 3 //connect SENSOR to digital pin3\n    #define LED 2//connect Grove - LED to pin2\n\nvoid setup()\n{\n    pinsInit();\n}\nvoid loop()\n{\n    if(isFlameDetected())\n    turnOnLED();\n    else turnOffLED();\n}\n    /********************************/\nvoid pinsInit()\n{\n    pinMode(FLAME_SENSOR, INPUT);\n    pinMode(LED,OUTPUT);\n    digitalWrite(LED,LOW);\n}\nvoid turnOnLED()\n{\n    digitalWrite(LED,HIGH);\n}\nvoid turnOffLED()\n{\n    digitalWrite(LED,LOW);\n}\nboolean isFlameDetected()\n{\n    if(digitalRead(FLAME_SENSOR))\n    return false;\n    else return true;\n}  5.\u5f53\u6709\u68c0\u6d4b\u5230\u7ea2\u5916\u7ebf\u7684\u65f6\u5019\uff0cLED\u4f1a\u70b9\u4eae\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8bbe\u8ba1\u60a8\u7684\u4ea7\u54c1\u3002", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Flame_Sensor/#_5", 
            "text": "\u4f20\u611f\u5668\u53ef\u4ee5\u68c0\u6d4b\u6ce2\u957f\u5728760nm-1100nm\u8303\u56f4\u5185\u7684\u5149\u6e90\u3002 \u4e0b\u56fe\u663e\u793a\u4e86\u5149\u8c31\u7075\u654f\u5ea6\u3002", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/Grove-Flame_Sensor/#_6", 
            "text": "Grove - Flame Sensor Eagle File  Github repository for Grove_Flame_Sensor Library  LM293D datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/", 
            "text": "Grove - Gas Sensor(MQ9)\u6a21\u5757\u53ef\u7528\u4e8e\u6c14\u4f53\u6cc4\u6f0f\u68c0\u6d4b\uff08\u53ef\u4ee5\u5728\u5bb6\u91cc\u548c\u5de5\u5382\u4e2d\u4f7f\u7528\uff09\u3002 \u5b83\u9002\u7528\u4e8e\u68c0\u6d4b \nLPG\uff0cCO\uff0cCH4\n \u3002 \u7531\u4e8e\u5176\u7684\u7075\u654f\u5ea6\u9ad8\uff0c\u54cd\u5e94\u65f6\u95f4\u5feb\uff0c\u6240\u4ee5\u80fd\u591f\u65f6\u65f6\u8fdb\u884c\u6d4b\u91cf\u3002 \u4f20\u611f\u5668\u7684\u7075\u654f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7535\u4f4d\u5668\u8fdb\u884c\u8c03\u6574\u3002\n\n\n\n\nNote\n\n\u8fd9\u4e2a\u4f20\u611f\u5668\u503c\u4ec5\u80fd\u591f\u53cd\u6620\u6c14\u4f53\u6d53\u5ea6\u5728\u5141\u8bb8\u8bef\u5dee\u8303\u56f4\u5185\u7684\u8fd1\u4f3c\u8d8b\u52bf\uff0c\u5b83\u4e0d\u8868\u793a\u7cbe\u786e\u7684\u6c14\u4f53\u6d53\u5ea6\u3002 \u7a7a\u6c14\u4e2d\u67d0\u4e9b\u6210\u5206\u7684\u68c0\u6d4b\u901a\u5e38\u9700\u8981\u66f4\u52a0\u7cbe\u786e\u548c\u66f4\u52a0\u6602\u8d35\u7684\u4eea\u5668\uff0c\u8fd9\u4e0d\u80fd\u5355\u5355\u4f7f\u7528\u8fd9\u4e2a\u6c14\u4f53\u4f20\u611f\u5668\u6765\u5b8c\u6210\u3002 \u5982\u679c\u60a8\u7684\u9879\u76ee\u60f3\u8981\u975e\u5e38\u7cbe\u786e\u7684\u5f97\u5230\u6c14\u4f53\u6d53\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u6c14\u4f53\u4f20\u611f\u5668\u3002\n\n\n\n\n\n\n\n\n\n\n\u4f20\u611f\u5668\n\n\n\u68c0\u6d4b\u6c14\u4f53\u7c7b\u578b\n\n\n\u8d2d\u4e70\u5730\u5740\n\n\n\n\n\n\n\n\n\n\n\n\nMQ2\n\n\n\u53ef\u71c3\u6c14\u4f53\uff0c\u70df\u96fe\n\n\n\n\n\n\n\n\n\n\nMQ3\n\n\n\u9152\u7cbe\u84b8\u6c14\n\n\n\n\n\n\n\n\n\n\nMQ5\n\n\n\u77f3\u6cb9\u6c14\uff0c\u5929\u7136\u6c14\uff0c\u57ce\u9547\u7164\u6c14\n\n\n\n\n\n\n\n\n\n\nMQ9\n\n\n\u4e00\u6c27\u5316\u78b3\uff0c\u7164\u6c14\uff0c\u6db2\u5316\u6c14\n\n\n\n\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u68c0\u6d4b\u8303\u56f4\u5e7f\n\n\n\u80fd\u591f\u7a33\u5b9a\u548c\u957f\u65f6\u95f4\u4f7f\u7528\n\n\n\u54cd\u5e94\u5feb\uff0c\u7075\u654f\u5ea6\u9ad8\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u4ea7\u54c1\u53c2\u6570\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u53c2\u6570\n\n\n\u6700\u5c0f\n\n\n\u6807\u51c6\n\n\n\u6700\u5927\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n4.9\n\n\n5\n\n\n5.1\n\n\nV\n\n\n\n\n\n\nPH\n\n\n\u6d88\u8017\u80fd\u91cf\n\n\n0.5\n\n\n-\n\n\n340\n\n\nmW\n\n\n\n\n\n\nRL\n\n\n\u8d1f\u8f7d\u7535\u963b\n\n\n\n\n\u53ef\u8c03\u6574\u7684\n\n\n\n\n\n\n\n\n\n\nRH\n\n\n\u52a0\u70ed\u5668\u7535\u963b\n\n\n-\n\n\n33\u03a9\u00b15%\n\n\n-\n\n\n\u03a9\n\n\n\n\n\n\nRs\n\n\n\u611f\u5e94\u7535\u963b\n\n\n2\n\n\n-\n\n\n20000\n\n\n\u03a9\n\n\n\n\n\n\nCO / CH4 / LPG\u8303\u56f4\n\n\n\u68c0\u6d4b\u6d53\u5ea6\n\n\n200\n\n\n-\n\n\n1000/10000/10000\n\n\nppm\n\n\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u6c14\u4f53\u6cc4\u6f0f\u68c0\u6d4b\u3002\n\n\n\u73a9\u5177\u3002\n\n\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\u8fd9\u662f\u4e00\u4e2a\u4ee5\u6a21\u62df\u91cf\u8f93\u51fa\u7684\u4f20\u611f\u5668\u3002 \u8fd9\u9700\u8981\u8fde\u63a5\u5230\nGrove Base Shield\n\u4e2d\u7684\u4e00\u4e2a\u6a21\u62df\u7aef\u53e3\u3002 \u672c\u6559\u7a0b\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528\u7684\u662f \nA0\n \u6a21\u62df\u5f15\u811a\u3002 \u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684 \nA0\n \u7aef\u53e3\u3002\n\n\n\u4f7f\u7528\u8fde\u63a5\u7ebf\u5c06Grove\u6a21\u5757\u6309\u7167\u4e0b\u8868\u8fde\u63a5\u5230Arduino\uff1a\n\n\n\n\n\n\n\n\nArduino\n\n\nGas Sensor\n\n\n\n\n\n\n\n\n\n\n5V\n\n\nVCC\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nNC\n\n\nNC\n\n\n\n\n\n\nA0\n\n\nSIG\n\n\n\n\n\n\n\n\n\u5f53\u6c14\u4f53\u6d53\u5ea6\u589e\u52a0\u65f6\uff0c\u6c14\u4f53\u4f20\u611f\u5668\u7684\u8f93\u51fa\u7535\u538b\u4f1a\u589e\u52a0\u3002 \u7075\u654f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u7535\u4f4d\u5668\u6765\u8c03\u8282\u3002 \n\u8bf7\u6ce8\u610f\uff0c\u4f20\u611f\u5668\u7684\u6700\u4f73\u9884\u70ed\u65f6\u95f4\u9700\u8981\u8d85\u8fc724\u5c0f\u65f6\n\u3002 \u6709\u5173MQ-9\u4f20\u611f\u5668\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \n\u8d44\u6e90\u4e0b\u8f7d\n \u90e8\u5206\u4e2d\u63d0\u4f9b\u7684\u6570\u636e\u8868\u3002\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u5c06 Grove - Gas Sensor(MQ9)\u8fde\u63a5\u5230 \nA0\n \u7aef\u53e3\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\n\n\n\u6c14\u4f53\u68c0\u6d4b\uff1a\u57fa\u672c\u4f8b\u5b50\n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f20\u611f\u5668\u8fde\u63a5\u5230 \nA0\n \u5f15\u811a\u3002 \u4ece\u4f20\u611f\u5668\u8bfb\u53d6\u5230\u7684\u7535\u538b\u53ef\u4ee5\u663e\u793a\u51fa\u6765\u3002 \u5e76\u4e14\u8be5\u503c\u53ef\u4ee5\u7528\u4f5c\u68c0\u6d4b\u6c14\u4f53\u6d53\u5ea6\u662f\u5426\u589e\u52a0/\u51cf\u5c11\u7684\u57fa\u51c6\u3002\n\n\nvoid setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n    float sensor_volt;\n    float sensorValue;\n\n    sensorValue = analogRead(A0);\n    sensor_volt = sensorValue/1024*5.0;\n\n    Serial.print(\nsensor_volt = \n);\n    Serial.print(sensor_volt);\n    Serial.println(\nV\n);\n    delay(1000);\n}\n\n\n\n\n\u6d4b\u91cf\uff1a\u8fd1\u4f3c\u503c\n\n\n\u8fd9\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u4e86\u4e00\u79cd\u77e5\u9053\u6c14\u4f53\u8fd1\u4f3c\u6d53\u5ea6\u7684\u65b9\u6cd5\u3002 \u6839\u636eMQ9\u4f20\u611f\u5668\u7684\u6570\u636e\u8868\uff0c\u5728\u6807\u51c6\u6761\u4ef6\u4e0b\u5bf9\u8fd9\u4e9b\u65b9\u7a0b\u8ba1\u7b97\u7684\u7ed3\u679c\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u6821\u51c6\u3002 \u4e0d\u8fc7\u5b83\u53ef\u80fd\u4f1a\u6839\u636e\u6e29\u5ea6\u6216\u6e7f\u5ea6\u7684\u53d8\u5316\u800c\u53d8\u5316\u3002\n\n\n\n\n\u5c06\u6c14\u4f53\u4f20\u611f\u5668\u4fdd\u6301\u5728\u6e05\u6d01\u7684\u7a7a\u6c14\u73af\u5883\u4e2d\u3002 \u4e0a\u4f20\u4ee5\u4e0b\u7a0b\u5e8f\u3002\n\n\n\n\nvoid setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n    float sensor_volt;\n    float RS_air; //  Get the value of RS via in a clear air\n    float R0;  // Get the value of R0 via in LPG\n    float sensorValue;\n\n    /*--- Get a average data by testing 100 times ---*/\n    for(int x = 0 ; x \n 100 ; x++)\n    {\n        sensorValue = sensorValue + analogRead(A0);\n    }\n    sensorValue = sensorValue/100.0;\n    /*-----------------------------------------------*/\n\n    sensor_volt = sensorValue/1024*5.0;\n    RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n    R0 = RS_air/9.9; // The ratio of RS/R0 is 9.9 in LPG gas from Graph (Found using WebPlotDigitizer)\n\n    Serial.print(\nsensor_volt = \n);\n    Serial.print(sensor_volt);\n    Serial.println(\nV\n);\n\n    Serial.print(\nR0 = \n);\n    Serial.println(R0);\n    delay(1000);\n\n}\n\n\n\n\n\n\n\u7136\u540e\u6253\u5f00Arduino IDE\u7684\u4e32\u884c\u76d1\u89c6\u5668\u3002 \u8bb0\u4e0b \nR0\n \u7684\u503c\uff0c\u8fd9\u9700\u8981\u5728\u4e0b\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002 \u8bfb\u53d6\u7a33\u5b9a\u540e\uff0c\u8bf7\u5c06 \nR0\n \u653e\u5728\u4e0b\u65b9\u3002\n\n\n\n\n\u5c06\u4e0b\u9762\u7684 \nR0\n \u66ff\u6362\u4e3a\u4e0a\u9762\u6d4b\u8bd5\u7684 \nR0\n \u503c \n. \u5c06\u4e0b\u9762\u7684R0\u66ff\u6362\u4e3a\u4e0a\u9762\u6d4b\u8bd5\u7684R0\u503c\u3002 \u5c06\u4f20\u611f\u5668\u653e\u7f6e\u5728\u4e0a\u8ff0\u4efb\u4f55\u4e00\u79cd\u6c14\u4f53\u4e2d\u3002\n\n\nvoid setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n\n    float sensor_volt;\n    float RS_gas; // Get value of RS in a GAS\n    float ratio; // Get ratio RS_GAS/RS_air\n    int sensorValue = analogRead(A0);\n    sensor_volt=(float)sensorValue/1024*5.0;\n    RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n          /*-Replace the name \nR0\n with the value of R0 in the demo of First Test -*/\n    ratio = RS_gas/R0;  // ratio = RS/R0\n          /*-----------------------------------------------------------------------*/\n\n    Serial.print(\nsensor_volt = \n);\n    Serial.println(sensor_volt);\n    Serial.print(\nRS_ratio = \n);\n    Serial.println(RS_gas);\n    Serial.print(\nRs/R0 = \n);\n    Serial.println(ratio);\n\n    Serial.print(\n\\n\\n\n);\n\n    delay(1000);\n\n}\n\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u56fe\u83b7\u5f97\u6c14\u4f53\u7684\u6d53\u5ea6\u3002\n\n\n\n\n\u6839\u636e\u8be5\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u7684\u6700\u5c0f\u6d53\u5ea6\u4e3a200ppm\uff0c\u6700\u5927\u503c\u4e3a10000ppm\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u52300.02\uff05\u301c1\uff05\u4e4b\u95f4\u7684\u6c14\u4f53\u6d53\u5ea6\u3002 \u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u5f97\u5230\u4e00\u4e2a\u516c\u5f0f\uff0c\u56e0\u4e3a\u6bd4\u4f8b\u548c\u6d53\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u975e\u7ebf\u6027\u7684\u3002\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\nSuggest Reading / References\n\n\n\n\nHow to choose a Gas Sensor\n\n\nWhat's LEL\n\n\n\n\nSchematic\n\n\n\n\nGrove Gas Sensor - EAGLE (Schematic and Board) files\n\n\nGrove Gas Sensor - PDF Schematic\n\n\n\n\nDatasheet\n\n\n\n\nMQ-9 Datasheet", 
            "title": "Grove-Gas_Sensor-MQ9"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_1", 
            "text": "\u68c0\u6d4b\u8303\u56f4\u5e7f  \u80fd\u591f\u7a33\u5b9a\u548c\u957f\u65f6\u95f4\u4f7f\u7528  \u54cd\u5e94\u5feb\uff0c\u7075\u654f\u5ea6\u9ad8    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_2", 
            "text": "\u9879\u76ee  \u53c2\u6570  \u6700\u5c0f  \u6807\u51c6  \u6700\u5927  \u5355\u4f4d      VCC  \u5de5\u4f5c\u7535\u538b  4.9  5  5.1  V    PH  \u6d88\u8017\u80fd\u91cf  0.5  -  340  mW    RL  \u8d1f\u8f7d\u7535\u963b   \u53ef\u8c03\u6574\u7684      RH  \u52a0\u70ed\u5668\u7535\u963b  -  33\u03a9\u00b15%  -  \u03a9    Rs  \u611f\u5e94\u7535\u963b  2  -  20000  \u03a9    CO / CH4 / LPG\u8303\u56f4  \u68c0\u6d4b\u6d53\u5ea6  200  -  1000/10000/10000  ppm", 
            "title": "\u4ea7\u54c1\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_3", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_4", 
            "text": "\u6c14\u4f53\u6cc4\u6f0f\u68c0\u6d4b\u3002  \u73a9\u5177\u3002", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_5", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u4ee5\u6a21\u62df\u91cf\u8f93\u51fa\u7684\u4f20\u611f\u5668\u3002 \u8fd9\u9700\u8981\u8fde\u63a5\u5230 Grove Base Shield \u4e2d\u7684\u4e00\u4e2a\u6a21\u62df\u7aef\u53e3\u3002 \u672c\u6559\u7a0b\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528\u7684\u662f  A0  \u6a21\u62df\u5f15\u811a\u3002 \u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230Base Shield\u7684  A0  \u7aef\u53e3\u3002  \u4f7f\u7528\u8fde\u63a5\u7ebf\u5c06Grove\u6a21\u5757\u6309\u7167\u4e0b\u8868\u8fde\u63a5\u5230Arduino\uff1a     Arduino  Gas Sensor      5V  VCC    GND  GND    NC  NC    A0  SIG     \u5f53\u6c14\u4f53\u6d53\u5ea6\u589e\u52a0\u65f6\uff0c\u6c14\u4f53\u4f20\u611f\u5668\u7684\u8f93\u51fa\u7535\u538b\u4f1a\u589e\u52a0\u3002 \u7075\u654f\u5ea6\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u7535\u4f4d\u5668\u6765\u8c03\u8282\u3002  \u8bf7\u6ce8\u610f\uff0c\u4f20\u611f\u5668\u7684\u6700\u4f73\u9884\u70ed\u65f6\u95f4\u9700\u8981\u8d85\u8fc724\u5c0f\u65f6 \u3002 \u6709\u5173MQ-9\u4f20\u611f\u5668\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605  \u8d44\u6e90\u4e0b\u8f7d  \u90e8\u5206\u4e2d\u63d0\u4f9b\u7684\u6570\u636e\u8868\u3002", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_6", 
            "text": "\u5c06 Grove - Gas Sensor(MQ9)\u8fde\u63a5\u5230  A0  \u7aef\u53e3\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_7", 
            "text": "\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f20\u611f\u5668\u8fde\u63a5\u5230  A0  \u5f15\u811a\u3002 \u4ece\u4f20\u611f\u5668\u8bfb\u53d6\u5230\u7684\u7535\u538b\u53ef\u4ee5\u663e\u793a\u51fa\u6765\u3002 \u5e76\u4e14\u8be5\u503c\u53ef\u4ee5\u7528\u4f5c\u68c0\u6d4b\u6c14\u4f53\u6d53\u5ea6\u662f\u5426\u589e\u52a0/\u51cf\u5c11\u7684\u57fa\u51c6\u3002  void setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n    float sensor_volt;\n    float sensorValue;\n\n    sensorValue = analogRead(A0);\n    sensor_volt = sensorValue/1024*5.0;\n\n    Serial.print( sensor_volt =  );\n    Serial.print(sensor_volt);\n    Serial.println( V );\n    delay(1000);\n}", 
            "title": "\u6c14\u4f53\u68c0\u6d4b\uff1a\u57fa\u672c\u4f8b\u5b50"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_8", 
            "text": "\u8fd9\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u4e86\u4e00\u79cd\u77e5\u9053\u6c14\u4f53\u8fd1\u4f3c\u6d53\u5ea6\u7684\u65b9\u6cd5\u3002 \u6839\u636eMQ9\u4f20\u611f\u5668\u7684\u6570\u636e\u8868\uff0c\u5728\u6807\u51c6\u6761\u4ef6\u4e0b\u5bf9\u8fd9\u4e9b\u65b9\u7a0b\u8ba1\u7b97\u7684\u7ed3\u679c\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u6821\u51c6\u3002 \u4e0d\u8fc7\u5b83\u53ef\u80fd\u4f1a\u6839\u636e\u6e29\u5ea6\u6216\u6e7f\u5ea6\u7684\u53d8\u5316\u800c\u53d8\u5316\u3002   \u5c06\u6c14\u4f53\u4f20\u611f\u5668\u4fdd\u6301\u5728\u6e05\u6d01\u7684\u7a7a\u6c14\u73af\u5883\u4e2d\u3002 \u4e0a\u4f20\u4ee5\u4e0b\u7a0b\u5e8f\u3002   void setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n    float sensor_volt;\n    float RS_air; //  Get the value of RS via in a clear air\n    float R0;  // Get the value of R0 via in LPG\n    float sensorValue;\n\n    /*--- Get a average data by testing 100 times ---*/\n    for(int x = 0 ; x   100 ; x++)\n    {\n        sensorValue = sensorValue + analogRead(A0);\n    }\n    sensorValue = sensorValue/100.0;\n    /*-----------------------------------------------*/\n\n    sensor_volt = sensorValue/1024*5.0;\n    RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n    R0 = RS_air/9.9; // The ratio of RS/R0 is 9.9 in LPG gas from Graph (Found using WebPlotDigitizer)\n\n    Serial.print( sensor_volt =  );\n    Serial.print(sensor_volt);\n    Serial.println( V );\n\n    Serial.print( R0 =  );\n    Serial.println(R0);\n    delay(1000);\n\n}   \u7136\u540e\u6253\u5f00Arduino IDE\u7684\u4e32\u884c\u76d1\u89c6\u5668\u3002 \u8bb0\u4e0b  R0  \u7684\u503c\uff0c\u8fd9\u9700\u8981\u5728\u4e0b\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002 \u8bfb\u53d6\u7a33\u5b9a\u540e\uff0c\u8bf7\u5c06  R0  \u653e\u5728\u4e0b\u65b9\u3002   \u5c06\u4e0b\u9762\u7684  R0  \u66ff\u6362\u4e3a\u4e0a\u9762\u6d4b\u8bd5\u7684  R0  \u503c  . \u5c06\u4e0b\u9762\u7684R0\u66ff\u6362\u4e3a\u4e0a\u9762\u6d4b\u8bd5\u7684R0\u503c\u3002 \u5c06\u4f20\u611f\u5668\u653e\u7f6e\u5728\u4e0a\u8ff0\u4efb\u4f55\u4e00\u79cd\u6c14\u4f53\u4e2d\u3002  void setup() {\n    Serial.begin(9600);\n}\n\nvoid loop() {\n\n    float sensor_volt;\n    float RS_gas; // Get value of RS in a GAS\n    float ratio; // Get ratio RS_GAS/RS_air\n    int sensorValue = analogRead(A0);\n    sensor_volt=(float)sensorValue/1024*5.0;\n    RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n          /*-Replace the name  R0  with the value of R0 in the demo of First Test -*/\n    ratio = RS_gas/R0;  // ratio = RS/R0\n          /*-----------------------------------------------------------------------*/\n\n    Serial.print( sensor_volt =  );\n    Serial.println(sensor_volt);\n    Serial.print( RS_ratio =  );\n    Serial.println(RS_gas);\n    Serial.print( Rs/R0 =  );\n    Serial.println(ratio);\n\n    Serial.print( \\n\\n );\n\n    delay(1000);\n\n}  \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u56fe\u83b7\u5f97\u6c14\u4f53\u7684\u6d53\u5ea6\u3002   \u6839\u636e\u8be5\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u7684\u6700\u5c0f\u6d53\u5ea6\u4e3a200ppm\uff0c\u6700\u5927\u503c\u4e3a10000ppm\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u52300.02\uff05\u301c1\uff05\u4e4b\u95f4\u7684\u6c14\u4f53\u6d53\u5ea6\u3002 \u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u5f97\u5230\u4e00\u4e2a\u516c\u5f0f\uff0c\u56e0\u4e3a\u6bd4\u4f8b\u548c\u6d53\u5ea6\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u975e\u7ebf\u6027\u7684\u3002", 
            "title": "\u6d4b\u91cf\uff1a\u8fd1\u4f3c\u503c"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#_9", 
            "text": "Suggest Reading / References   How to choose a Gas Sensor  What's LEL", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Gas_Sensor-MQ9/#schematic", 
            "text": "Grove Gas Sensor - EAGLE (Schematic and Board) files  Grove Gas Sensor - PDF Schematic   Datasheet   MQ-9 Datasheet", 
            "title": "Schematic"
        }, 
        {
            "location": "/Grove-HCHO_Sensor/", 
            "text": "Grove - HCHO Sensor\u662f\u4e00\u79cd\u534a\u5bfc\u4f53VOC\u6c14\u4f53\u4f20\u611f\u5668\u3002 \u5176\u8bbe\u8ba1\u57fa\u4e8eWSP2110\uff0c\u5b83\u7684\u7535\u5bfc\u7387\u53ef\u4ee5\u968f\u7740\u7a7a\u6c14\u4e2dVOC\u6c14\u4f53\u6d53\u5ea6\u800c\u53d8\u5316\u3002 \u901a\u8fc7\u7535\u8def\uff0c\u7535\u5bfc\u7387\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5bf9\u5e94\u4e8e\u6c14\u4f53\u6d53\u5ea6\u7684\u8f93\u51fa\u4fe1\u53f7\u3002 \u8be5\u4f20\u611f\u5668\u53ef\u4ee5\u68c0\u6d4b\u6d53\u5ea6\u9ad8\u8fbe1ppm\u7684\u6c14\u4f53\u3002 \u9002\u7528\u4e8e\u68c0\u6d4b\u7532\u919b\uff0c\u82ef\uff0c\u7532\u82ef\u7b49\u6325\u53d1\u6027\u6210\u5206\u3002 \u672c\u4ea7\u54c1\u53ef\u7528\u4e8e\u5728\u5bb6\u5ead\u73af\u5883\u4e2d\u68c0\u6d4b\u6709\u5bb3\u6c14\u4f53\u3002 \u56e0\u6b64\uff0c\u8fd9\u662f\u63d0\u5347\u5ba4\u5185\u73af\u5883\u8d28\u7d20\u7684\u597d\u5e2e\u624b\u3002\n\n\n\n\n\n\nWarning\n\n\u8fd9\u4e2a\u4f20\u611f\u5668\u8f93\u51fa\u7684\u6570\u503c\u4ec5\u4ec5\u80fd\u591f\u53cd\u6620\u5728\u5141\u8bb8\u8bef\u5dee\u8303\u56f4\u5185\u6c14\u4f53\u6d53\u5ea6\u7684\u8fd1\u4f3c\u8d8b\u52bf\uff0c\u5b83\u4e0d\u80fd\u7cbe\u786e\u7684\u8868\u793a\u6c14\u4f53\u6d53\u5ea6\u3002 \u7a7a\u6c14\u4e2d\u7279\u5b9a\u6210\u5206\u7684\u68c0\u6d4b\u901a\u5e38\u9700\u8981\u66f4\u7cbe\u786e\u3001\u66f4\u52a0\u6602\u8d35\u7684\u4eea\u5668\uff0c\u8fd9\u4e0d\u80fd\u53ea\u4f7f\u7528\u4e00\u4e2a\u6c14\u4f53\u4f20\u611f\u5668\u6765\u5b8c\u6210\u3002 \u5982\u679c\u60a8\u7684\u9879\u76ee\u65e8\u5728\u83b7\u5f97\u975e\u5e38\u7cbe\u786e\u7684\u6c14\u4f53\u6d53\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u6c14\u4f53\u4f20\u611f\u5668\u3002\n\n\n\n\n\u4ea7\u54c1\u53c2\u6570\n\n\n\n\n\u5de5\u4f5c\u7535\u538b: 5.0V \u00b1 0.3V\n\n\n\u76ee\u6807\u6c14\u4f53\uff1aHCHO\uff0c\u82ef\uff0c\u7532\u82ef\uff0c\u9152\u7cbe\n\n\n\u6d53\u5ea6\u8303\u56f4\uff1a1\u301c50 ppm\n\n\n\u4f20\u611f\u5668\u7535\u963b\u503c\uff08Rs\uff09\uff1a10K\u03a9-100K\u03a9\uff0810ppm HCHO\uff09\n\n\n\u7075\u654f\u5ea6\uff1aRs\uff08\u7a7a\u6c14\u4e2d\uff09/ Rs\uff0810ppm HCHO\uff09\u22655\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\nGrove - HCHO Sensor\u53ef\u7528\u4e8e\u68c0\u6d4bVOC\uff0c\u5982HCHO\uff0c\u7532\u82ef\uff0c\u82ef\uff0c\u9152\u7cbe\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5HCHO\u4e3a\u4f8b\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u8be5\u4f20\u611f\u5668\u3002\n\n\n\n\n// demo of Grove - HCHO Sensor\n\n#define Vc 4.95\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int sensorValue=analogRead(A0);\n    float R0=(1023.0/sensorValue)-1;\n    Serial.print(\nR0 = \n);\n    Serial.println(R0);\n    delay(500);\n}\n\n\n\n\n\u5728\u4e0a\u4f20\u4ee3\u7801\u540e\uff0c\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff0c\u4f7fR0\u8f93\u51fa\u7684\u6570\u503c\u663e\u793a\u5728\u6b63\u5e38\u72b6\u6001\u4e0b\uff08\u5728\u5ba4\u5916\u662f\u6700\u597d\u7684\uff09\u3002\n\n\n\u4f7f\u7528\u5c0f\u8d77\u5b50\u8c03\u6574R1\uff08\u84dd\u8272\u7535\u4f4d\u5668\uff09\u7684\u7535\u963b\uff0c\u4f7fR0\u7684\u6570\u503c\u572810-100\u8303\u56f4\u5185\uff0c\u5e76\u8bb0\u5f55\u8be5\u6570\u5b57\uff08\u6211\u7684R0\u663e\u793a\u7684\u5728\u6b63\u5e38\u72b6\u51b5\u4e0b\u4e3a34.28\uff09\u3002\n\n\n\n\n\u5728 \n#define R0 ***\n\u4e2d\u8f93\u5165\u4e4b\u524dR0\u7684\u663e\u793a\u7684\u6570\u503c\uff0c\u7136\u540e\u4e0a\u4f20\u4ee3\u7801\u3002 \u8bb0\u4f4f\u4e0d\u8981\u518d\u62e7\u7d27R1\uff0c\u9664\u975e\u4f60\u51b3\u5b9a\u518d\u6b21\u68c0\u6d4bR0\u7684\u503c\u3002\n\n\n// demo of Grove - HCHO Sensor\n#include \nmath.h\n\n#define Vc 4.95\n//the number of R0 you detected just now\n#define R0 34.28\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int sensorValue=analogRead(A0);\n    double Rs=(1023.0/sensorValue)-1;\n    Serial.print(\nRs = \n);\n    Serial.println(Rs);\n    double ppm=pow(10.0,((log10(Rs/R0)-0.0827)/(-0.4807)));\n    Serial.print(\nHCHO ppm = \n);\n    Serial.println(ppm);\n    delay(1000);\n}\n\n\n\n\n\u7136\u540e\u5c06\u4f20\u611f\u5668\u79fb\u5165\u529e\u516c\u5ba4\uff0c\u5e76\u8bfb\u53d6HCHO ppm\u503c\uff1a\n\n\n\n\n\u4ece\u5178\u578b\u7075\u654f\u5ea6\u66f2\u7ebf\u56fe\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u68c0\u6d4b\u8303\u56f4\u662f1-50ppm\u3002\n\n\n\n\n\u8981\u68c0\u6d4b\u5176\u4ed6VOC\u6c14\u4f53\uff0c\u53ef\u4ee5\u8ba1\u7b97Rs / R0\uff0c\u7136\u540e\u53c2\u8003\u7075\u654f\u5ea6\u7279\u6027\u66f2\u7ebf\u56fe\uff0c\u627e\u5230\u76f8\u5e94\u7684\u6c14\u4f53\u6d53\u5ea6\u3002 \u6216\u8005\u4f7f\u7528\u4ee5\u4e0bpython\u7a0b\u5e8f\u6765\u5339\u914d\u5bf9\u5e94\u7684\u66f2\u7ebf\u5e76\u8ba1\u7b97a\u548cb\u7684\u503c\uff1a\n\n\nppm = 10 ^ ((log10(Rs/R0) + a) / b)\n\n\n# coding=utf-8\n# calculate a and b of HCHO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#get the measure data from the Typical Sensitivity Curve\nx = np.array([1, 5, 10, 20, 40])\ny = np.array([1.21, 0.56, 0.4, 0.3, 0.21])\n\nplt.subplot(221)\nplt.loglog(x,y,lw=2)\n#plt.ylim(0,1.5)  \nplt.xlabel(\nlog(x)\n)  \nplt.ylabel(\nlog(y)\n)  \nplt.show()  \n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - HCHO Sensor Eagle File\n\n\nGrove - HCHO Sensor Schematic in PDF\n\n\nWSP2110 Datasheet (Chinese)\n\n\nWSP2110 Datasheet (English)", 
            "title": "Grove-HCHO_Sensor"
        }, 
        {
            "location": "/Grove-HCHO_Sensor/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b: 5.0V \u00b1 0.3V  \u76ee\u6807\u6c14\u4f53\uff1aHCHO\uff0c\u82ef\uff0c\u7532\u82ef\uff0c\u9152\u7cbe  \u6d53\u5ea6\u8303\u56f4\uff1a1\u301c50 ppm  \u4f20\u611f\u5668\u7535\u963b\u503c\uff08Rs\uff09\uff1a10K\u03a9-100K\u03a9\uff0810ppm HCHO\uff09  \u7075\u654f\u5ea6\uff1aRs\uff08\u7a7a\u6c14\u4e2d\uff09/ Rs\uff0810ppm HCHO\uff09\u22655    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u53c2\u6570"
        }, 
        {
            "location": "/Grove-HCHO_Sensor/#_2", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-HCHO_Sensor/#_3", 
            "text": "Grove - HCHO Sensor\u53ef\u7528\u4e8e\u68c0\u6d4bVOC\uff0c\u5982HCHO\uff0c\u7532\u82ef\uff0c\u82ef\uff0c\u9152\u7cbe\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5HCHO\u4e3a\u4f8b\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u8be5\u4f20\u611f\u5668\u3002   // demo of Grove - HCHO Sensor\n\n#define Vc 4.95\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int sensorValue=analogRead(A0);\n    float R0=(1023.0/sensorValue)-1;\n    Serial.print( R0 =  );\n    Serial.println(R0);\n    delay(500);\n}  \u5728\u4e0a\u4f20\u4ee3\u7801\u540e\uff0c\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff0c\u4f7fR0\u8f93\u51fa\u7684\u6570\u503c\u663e\u793a\u5728\u6b63\u5e38\u72b6\u6001\u4e0b\uff08\u5728\u5ba4\u5916\u662f\u6700\u597d\u7684\uff09\u3002  \u4f7f\u7528\u5c0f\u8d77\u5b50\u8c03\u6574R1\uff08\u84dd\u8272\u7535\u4f4d\u5668\uff09\u7684\u7535\u963b\uff0c\u4f7fR0\u7684\u6570\u503c\u572810-100\u8303\u56f4\u5185\uff0c\u5e76\u8bb0\u5f55\u8be5\u6570\u5b57\uff08\u6211\u7684R0\u663e\u793a\u7684\u5728\u6b63\u5e38\u72b6\u51b5\u4e0b\u4e3a34.28\uff09\u3002   \u5728  #define R0 *** \u4e2d\u8f93\u5165\u4e4b\u524dR0\u7684\u663e\u793a\u7684\u6570\u503c\uff0c\u7136\u540e\u4e0a\u4f20\u4ee3\u7801\u3002 \u8bb0\u4f4f\u4e0d\u8981\u518d\u62e7\u7d27R1\uff0c\u9664\u975e\u4f60\u51b3\u5b9a\u518d\u6b21\u68c0\u6d4bR0\u7684\u503c\u3002  // demo of Grove - HCHO Sensor\n#include  math.h \n#define Vc 4.95\n//the number of R0 you detected just now\n#define R0 34.28\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    int sensorValue=analogRead(A0);\n    double Rs=(1023.0/sensorValue)-1;\n    Serial.print( Rs =  );\n    Serial.println(Rs);\n    double ppm=pow(10.0,((log10(Rs/R0)-0.0827)/(-0.4807)));\n    Serial.print( HCHO ppm =  );\n    Serial.println(ppm);\n    delay(1000);\n}  \u7136\u540e\u5c06\u4f20\u611f\u5668\u79fb\u5165\u529e\u516c\u5ba4\uff0c\u5e76\u8bfb\u53d6HCHO ppm\u503c\uff1a   \u4ece\u5178\u578b\u7075\u654f\u5ea6\u66f2\u7ebf\u56fe\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u68c0\u6d4b\u8303\u56f4\u662f1-50ppm\u3002   \u8981\u68c0\u6d4b\u5176\u4ed6VOC\u6c14\u4f53\uff0c\u53ef\u4ee5\u8ba1\u7b97Rs / R0\uff0c\u7136\u540e\u53c2\u8003\u7075\u654f\u5ea6\u7279\u6027\u66f2\u7ebf\u56fe\uff0c\u627e\u5230\u76f8\u5e94\u7684\u6c14\u4f53\u6d53\u5ea6\u3002 \u6216\u8005\u4f7f\u7528\u4ee5\u4e0bpython\u7a0b\u5e8f\u6765\u5339\u914d\u5bf9\u5e94\u7684\u66f2\u7ebf\u5e76\u8ba1\u7b97a\u548cb\u7684\u503c\uff1a  ppm = 10 ^ ((log10(Rs/R0) + a) / b)  # coding=utf-8\n# calculate a and b of HCHO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#get the measure data from the Typical Sensitivity Curve\nx = np.array([1, 5, 10, 20, 40])\ny = np.array([1.21, 0.56, 0.4, 0.3, 0.21])\n\nplt.subplot(221)\nplt.loglog(x,y,lw=2)\n#plt.ylim(0,1.5)  \nplt.xlabel( log(x) )  \nplt.ylabel( log(y) )  \nplt.show()", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-HCHO_Sensor/#_4", 
            "text": "Grove - HCHO Sensor Eagle File  Grove - HCHO Sensor Schematic in PDF  WSP2110 Datasheet (Chinese)  WSP2110 Datasheet (English)", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/", 
            "text": "\u8be5\u6a21\u5757\u57fa\u4e8e\u6709 \nI2C\n \u6570\u5b57\u8f93\u51fa\u7aef\u53e3\u7684 color sensor TCS3414CS\u3002 \u4e5f\u57fa\u4e8e 8\u00d72 \u9635\u5217\u7684\u6ee4\u6ce2\u5149\u7535\u4e8c\u6781\u7ba1\u548c 16\u4f4d\u6a21\u6570\u8f6c\u6362\u5668\uff0c\u53ef\u4ee5\u6d4b\u91cf\u73af\u5883\u5149\u7684\u8272\u5ea6\u6216\u7269\u4f53\u7684\u989c\u8272\u3002 \u572816\u4e2a\u5149\u7535\u4e8c\u6781\u7ba1\u4e2d\uff0c4\u4e2a\u5177\u6709\u7ea2\u8272\u6ee4\u5149\u7247\uff0c4\u4e2a\u5177\u6709\u7eff\u8272\u6ee4\u5149\u7247\uff0c4\u4e2a\u5177\u6709\u84dd\u8272\u6ee4\u5149\u7247\uff0c4\u4e2a\u6ca1\u6709\u6ee4\u5149\u7247\uff08\u900f\u660e\uff09\u3002 \u4ed6\u4eec\u4f7f\u7528\u540c\u6b65\u8f93\u5165\u5f15\u811a\uff0c\u5916\u90e8\u8109\u51b2\u5149\u6e90\u53ef\u4ee5\u63d0\u4f9b\u7cbe\u786e\u7684\u540c\u6b65\u8f6c\u6362\u63a7\u5236\u3002\n\n\n\n\nNote\n\n\n\u8bf7\u6ce8\u610f\uff0c\u6700\u65b0\u7248\u672cV2.0\u5df2\u7ecf\u7528 TCS3472 \u66ff\u6362\u4e86 IC \uff0c\u800c\u65e7\u7684\u5e93\u4e5f\u5df2\u66f4\u65b0\uff0c\u5982\u679c\u60a8\u4f7f\u7528V2.0\u7248\u672c\uff0c\u8bf7\u4f7f\u7528 \n\u65b0\u7684\u5e93\u6587\u4ef6\n\u3002\n\n\n\n\n\u7248\u672c\u4fe1\u606f\n\n\n\n\n\n\n\n\n\u7248\u672c\u8c03\u6574\n\n\n\u63cf\u8ff0\n\n\n\u53d1\u5e03\u65e5\u671f\n\n\n\u8d2d\u4e70\u94fe\u63a5\n\n\n\n\n\n\n\n\n\n\nv1.2\n\n\n\u521d\u6b21\u516c\u5f00\u53d1\u5e03\uff08\u6d4b\u8bd5\u7248\uff09\n\n\n2013\u5e741\u670817\u65e5\n\n\n\u65e0\n\n\n\n\n\n\nv2.0\n\n\n\u7528 TCS34725FN \u66ff\u6362 TCS3472\uff08EOL\uff09\u5e76\u4f18\u5316\u4e86 PCB \u5e03\u5c40\n\n\n2010\u5e744\u670827\u65e5\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u80fd\u591f\u517c\u5bb9 Grove \u63a5\u53e3\n\n\n\u5e26 I2C \u7aef\u53e3\u7684 16\u4f4d\u6570\u5b57\u8f93\u51fa\n\n\nSYNC \u8f93\u5165\u5c06\u79ef\u5206\u5468\u671f\u540c\u6b65\u5230\u8c03\u5236\u5149\u6e90\n\n\n\u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\u4e3a -40\u00b0C \u81f3 85\u00b0C\n\n\n\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u5b9e\u73b0\u4e2d\u65ad\u529f\u80fd\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e0a\u9650\u548c\u4e0b\u9650\u9608\u503c\n\n\n\u7b26\u5408RoHS\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u4ea7\u54c1\u89c4\u683c\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u503c/\u8303\u56f4\n\n\n\n\n\n\n\n\n\n\nPCB\u5c3a\u5bf8\n\n\n2.0 cm x 4.0 cm\n\n\n\n\n\n\n\u63a5\u53e3\n\n\n2.0mm\u8282\u8ddd\u7684\u5f15\u811a\n\n\n\n\n\n\nVCC\n\n\n3.3 - 6.0 V\n\n\n\n\n\n\nI2C \u9891\u7387\n\n\n400 kHz\n\n\n\n\n\n\n\n\nPlatforms Supported\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u4ee5\u4e0b\u6587\u6863\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528 Grove \u8fdb\u884c\u5165\u95e8\u5b66\u4e60\u3002\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u5173\u4e8e grove\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\nGrove\u4ea7\u54c1\u5177\u6709\u73af\u4fdd\u6027\uff0c\u5e76\u4e14\u90fd\u5177\u6709\u53ef\u63d2\u5165\nGrove Base Shield\n \u7684\u76f8\u540c\u8fde\u63a5\u53e3\u3002 \u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230 Base Shield \u7684 \nI2C\n \u7aef\u53e3\u3002 \u5982\u679c\u4f60\u6ca1\u6709 Base Shield\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u7ebf\u5c06 Grove - I2C Color Sensor \u8fde\u63a5\u5230 Arduino\u3002\n\n\n\n\n\n\n\n\nArduino UNO\n\n\nGrove - I2C Color Sensor\n\n\n\n\n\n\n\n\n\n\n5V\n\n\nVCC\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nSDA\n\n\nSDA\n\n\n\n\n\n\nSCL\n\n\nSCL\n\n\n\n\n\n\n\n\n\u8f6f\u4ef6\u5b89\u88c5\n\n\nSeeed\u5165\u95e8\u6307\u5bfc\n\n\n\u6f14\u793a\n\n\n\u8be5\u6a21\u5757\u53ef\u7528\u4e8e\u68c0\u6d4b\u5149\u6e90\u7684\u989c\u8272\u6216\u7269\u4f53\u7684\u989c\u8272\u3002 \u5f53\u7528\u4e8e\u68c0\u6d4b\u5149\u6e90\u7684\u989c\u8272\u65f6\uff0c\u5e94\u5173\u95ed LED \u5f00\u5173\uff0c\u5e76\u4e14\u5149\u6e90\u5e94\u76f4\u63a5\u7167\u5c04\u5230\u4f20\u611f\u5668\u4e0a\u3002 \u5f53\u7528\u4e8e\u68c0\u6d4b\u7269\u4f53\u7684\u989c\u8272\u65f6\uff0cLED \u5e94\u8be5\u662f\u6253\u5f00\u7684\uff0c\u4f60\u5e94\u8be5\u4f20\u611f\u5668\u653e\u5728\u7269\u4f53\u7684\u4e0a\u9762\u3002\u901a\u8fc7\u53cd\u5c04\u7406\u8bba\u6765\u611f\u77e5\u989c\u8272\u3002 \u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n\n\n\n\u5f69\u8272\u4f20\u611f\u5668\u5e93\n\n\n\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5e93\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528 Seeeduino / Arduino\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u8bbe\u7f6e\u5e93\u3002\n\n\n\u5f00\u59cb\u5efa\u7acb\n\n\n\n\n\u4ece Grove_I2C_Color_Sensor github \u9875\u9762\u4e0b\u8f7d \n\u5e93\u4ee3\u7801\n\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u6700\u65b0\u7248\u672cV2.0\uff08IC \u4e3a TCS3472\uff09\uff0c\u8bf7\u4f7f\u7528\n \n\u65b0\u5e93\n\n\n\u5c06\u4e0b\u8f7d\u7684\u6587\u4ef6\u89e3\u538b\u7f29\u5230... / arduino / libraries \u4e2d\u3002\n\n\n\u53ef\u4ee5\u89e3\u538b\u540e\u91cd\u547d\u540d\u6587\u4ef6\u5939\u4e3a \u201cColor_Sensor\u201d\n\n\n\u542f\u52a8 Arduino IDE\uff08\u5982\u679c\u6253\u5f00\uff0c\u8bf7\u91cd\u65b0\u542f\u52a8\uff09\u3002\n\n\n\n\n\u529f\u80fd\u8bf4\u660e\n\n\n\u8fd9\u662f\u5e93\u4e2d\u6700\u91cd\u8981/\u6700\u6709\u7528\u7684\u529f\u80fd\uff0c\u6211\u4eec\u9080\u8bf7\u60a8\u81ea\u5df1\u67e5\u770b .h \u548c .cpp \u6587\u4ef6\uff0c\u4ee5\u67e5\u770b\u6240\u6709\u53ef\u7528\u7684\u529f\u80fd\u3002\n\n\n\u901a\u8fc7\u5e93\u51fd\u6570\u8bfb\u53d6RGB\u6570\u636e\n\n\nreadRGB(int *red, int *green, int *blue)\n\n\n\n\nred:\n \u4f7f\u7528\u53ef\u53d8\u5730\u5740\u4fdd\u5b58 \nR\n.\n\n\ngreen:\n \u4f7f\u7528\u53ef\u53d8\u5730\u5740\u4fdd\u5b58\u4e3a \nG\n.\n\n\nblue:\n \u4f7f\u7528\u53ef\u53d8\u5730\u5740\u4fdd\u5b58\u4e3a \nB\n.\n\n\n\n\nvoid loop()\n{\n    int red, green, blue;\n    GroveColorSensor colorSensor;\n    colorSensor.ledStatus = 1;            // When turn on the color sensor LED, ledStatus = 1; When turn off the color sensor LED, ledStatus = 0.\n    while(1)\n    {\n        colorSensor.readRGB(\nred, \ngreen, \nblue);    //Read RGB values to variables.\n        delay(300);\n        Serial.print(\nThe RGB value are: RGB( \n);\n        Serial.print(red,DEC);\n        Serial.print(\n, \n);\n        Serial.print(green,DEC);\n        Serial.print(\n, \n);\n        Serial.print(blue,DEC);\n        Serial.println(\n )\n);\n        colorSensor.clearInterrupt();\n    }\n}\n\n\n\n\n\u989c\u8272\u4f20\u611f\u5668\u793a\u4f8b/\u5e94\u7528\n\n\n\u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528 Grove - I2C Color Sensor \u7684\u529f\u80fd\uff0c\u5e76\u4f7f\u7528 \nChainable RGB LED Grove\n \u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\n\n\nNote\n\n\u5982\u679c\u60a8\u4e4b\u524d\u5c1a\u672a\u5c06 \nGrove-Chainable RGB LED \u5e93\n \u4e0b\u8f7d\u5230\u4f60\u7684 Arduino IDE , \u8bf7\u5148\u4e0b\u8f7d\u5e76\u8bbe\u7f6e\u5e93\u3002\n\n-   \u6253\u5f00 **File\uff08\u6587\u4ef6\uff09 - >Examples\uff08\u793a\u4f8b\uff09 - >Color_Sensor - >example - >ColorSensorWithRGB-LED** \u4f7f\u7528 RGB-LED \u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u6216\u5c06\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n**\u63cf\u8ff0**: \u8be5\u793a\u4f8b\u53ef\u4ee5\u6d4b\u91cf\u73af\u5883\u5149\u7684\u989c\u8272\u8272\u5ea6\u6216\u7269\u4f53\u7684\u989c\u8272\uff0c\u5e76\u901a\u8fc7\u53ef\u8fde\u63a5\u7684 RGB LED Grove\uff0c\u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u663e\u793a\u6a21\u5757\u901a\u8fc7 Grove - I2C Color Sensor \u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\u0002wzxhzdk:1\u0003\n\n-   \u5c06\u4ee3\u7801\u4e0a\u4f20\u5230\u5f00\u53d1\u677f\u3002\n-   \u7136\u540e Grove _ Chainable_RGB_LED \u5c06\u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\n\u5176\u4ed6\u53c2\u8003\n---------------\n\n\u8be5\u6a21\u5757\u57fa\u4e8e color sensor TCS3414CS\u3002 TCS3414CS digital color sensor \u4ece\u56db\u4e2a\u901a\u9053\u8fd4\u56de\u6570\u636e\uff1a\u7ea2\u8272\uff08R\uff09\uff0c\u7eff\u8272\uff08G\uff09\uff0c\u84dd\u8272\uff08B\uff09\u548c\u6e05\u9664\uff08C\uff09\uff08\u672a\u8fc7\u6ee4\uff09\u3002 \u7ea2\u8272\uff0c\u7eff\u8272\u548c\u84dd\u8272\u901a\u9053\uff08RGB\uff09\u7684\u54cd\u5e94\u53ef\u7528\u4e8e\u786e\u5b9a\u7279\u5b9a\u5149\u6e90\u7684\u8272\u5ea6\u5750\u6807\uff08x\uff0cy\uff09\u3002 \u8fd9\u4e9b\u6807\u51c6\u7531\u56fd\u9645\u6cd5\u59d4\u5458\u4f1a\uff08CIE\uff09\u5236\u5b9a\u3002 CIE\u662f\u6d89\u53ca\u989c\u8272\u548c\u989c\u8272\u6d4b\u91cf\u7684\u4e3b\u8981\u56fd\u9645\u7ec4\u7ec7\u3002\u4e3a\u4e86\u4f7f\u7528 TCS3414CS \u83b7\u53d6\u7ed9\u5b9a\u5bf9\u8c61\u7684\u989c\u8272\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u5c06\u4f20\u611f\u5668\u54cd\u5e94\uff08RGB\uff09\u6620\u5c04\u5230CIE\u7684\u6807\u51c6\u503c\uff08XYZ\uff09\u3002 \u7136\u540e\u9700\u8981\u8ba1\u7b97\u8272\u5ea6\u5750\u6807\uff08x\uff0cy\uff09\u3002\n\n![](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Coordinates_transform.png)\n\n\u8272\u5ea6\u8ba1\u7b97\u8fc7\u7a0b\u6982\u8ff0\n\n\u8fdb\u884c\u8f6c\u6362\u7684\u65b9\u7a0b\u5f0f\uff1a\n\n![](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Equations.png)\n\n\u53d8\u6362\u65b9\u7a0b\n\n-   \u5f53\u6211\u4eec\u5f97\u5230\u5750\u6807\uff08x\uff0cy\uff09\u65f6\uff0c\u8bf7\u53c2\u8003\u4e0b\u56fe\uff0c\u4ee5\u83b7\u5f97\u63a8\u8350\u7684\u989c\u8272\u3002\n\n![](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Chromaticity_Diagram.jpg)\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n---------\n\n-   **[Library]**[Library for Grove - I2C Color Sensor V1.2](https://github.com/Seeed-Studio/Grove_I2C_Color_Sensor)\n-   **[Library]**[Library for Grove - I2C Color Sensor V2.0](https://github.com/Seeed-Studio/Grove_I2C_Color_Sensor_TCS3472)\n-   **[Eagle]**[Grove-I2C Color Sensor Eagle File V1.2](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove-I2C%20Color%20Sensor%20Eagle%20File%20V1.2.zip)\n-   **[Eagle]**[Grove-I2C Color Sensor Eagle File V2.0](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20I2C%20Color%20Sensor%20v2.0.zip)\n-   **[PDF]**[Grove-I2C Color Sensor SCH File V1.2](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v1.2%20SCH.pdf)\n-   **[PDF]**[Grove-I2C Color Sensor SCH File V2.0](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v2.0%20SCH.pdf)\n-   **[PDF]**[Grove-I2C Color Sensor PCB File V1.2](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v1.2%20PCB.pdf)\n-   **[PDF]**[Grove-I2C Color Sensor PCB File V2.0](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v2.0%20PCB.pdf)\n-   **[Datasheet]**[TCS3414-A Datasheet](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/res/TCS3404_TCS3414-A.pdf)\n-  **[Datasheet]**[TCS3472 Datasheet](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/TCS3472%20Datasheet.pdf)", 
            "title": "Grove-I2C_Color_Sensor"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_1", 
            "text": "\u7248\u672c\u8c03\u6574  \u63cf\u8ff0  \u53d1\u5e03\u65e5\u671f  \u8d2d\u4e70\u94fe\u63a5      v1.2  \u521d\u6b21\u516c\u5f00\u53d1\u5e03\uff08\u6d4b\u8bd5\u7248\uff09  2013\u5e741\u670817\u65e5  \u65e0    v2.0  \u7528 TCS34725FN \u66ff\u6362 TCS3472\uff08EOL\uff09\u5e76\u4f18\u5316\u4e86 PCB \u5e03\u5c40  2010\u5e744\u670827\u65e5  \u9a6c\u4e0a\u8d2d\u4e70", 
            "title": "\u7248\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_2", 
            "text": "\u80fd\u591f\u517c\u5bb9 Grove \u63a5\u53e3  \u5e26 I2C \u7aef\u53e3\u7684 16\u4f4d\u6570\u5b57\u8f93\u51fa  SYNC \u8f93\u5165\u5c06\u79ef\u5206\u5468\u671f\u540c\u6b65\u5230\u8c03\u5236\u5149\u6e90  \u5de5\u4f5c\u6e29\u5ea6\u8303\u56f4\u4e3a -40\u00b0C \u81f3 85\u00b0C  \u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u5b9e\u73b0\u4e2d\u65ad\u529f\u80fd\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e0a\u9650\u548c\u4e0b\u9650\u9608\u503c  \u7b26\u5408RoHS    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_3", 
            "text": "\u53c2\u6570  \u503c/\u8303\u56f4      PCB\u5c3a\u5bf8  2.0 cm x 4.0 cm    \u63a5\u53e3  2.0mm\u8282\u8ddd\u7684\u5f15\u811a    VCC  3.3 - 6.0 V    I2C \u9891\u7387  400 kHz", 
            "title": "\u4ea7\u54c1\u89c4\u683c"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_4", 
            "text": "\u4ee5\u4e0b\u6587\u6863\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528 Grove \u8fdb\u884c\u5165\u95e8\u5b66\u4e60\u3002   \u5165\u95e8\u6307\u5bfc  \u5173\u4e8e grove", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_5", 
            "text": "Grove\u4ea7\u54c1\u5177\u6709\u73af\u4fdd\u6027\uff0c\u5e76\u4e14\u90fd\u5177\u6709\u53ef\u63d2\u5165 Grove Base Shield  \u7684\u76f8\u540c\u8fde\u63a5\u53e3\u3002 \u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230 Base Shield \u7684  I2C  \u7aef\u53e3\u3002 \u5982\u679c\u4f60\u6ca1\u6709 Base Shield\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u7ebf\u5c06 Grove - I2C Color Sensor \u8fde\u63a5\u5230 Arduino\u3002     Arduino UNO  Grove - I2C Color Sensor      5V  VCC    GND  GND    SDA  SDA    SCL  SCL", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_6", 
            "text": "Seeed\u5165\u95e8\u6307\u5bfc", 
            "title": "\u8f6f\u4ef6\u5b89\u88c5"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_7", 
            "text": "\u8be5\u6a21\u5757\u53ef\u7528\u4e8e\u68c0\u6d4b\u5149\u6e90\u7684\u989c\u8272\u6216\u7269\u4f53\u7684\u989c\u8272\u3002 \u5f53\u7528\u4e8e\u68c0\u6d4b\u5149\u6e90\u7684\u989c\u8272\u65f6\uff0c\u5e94\u5173\u95ed LED \u5f00\u5173\uff0c\u5e76\u4e14\u5149\u6e90\u5e94\u76f4\u63a5\u7167\u5c04\u5230\u4f20\u611f\u5668\u4e0a\u3002 \u5f53\u7528\u4e8e\u68c0\u6d4b\u7269\u4f53\u7684\u989c\u8272\u65f6\uff0cLED \u5e94\u8be5\u662f\u6253\u5f00\u7684\uff0c\u4f60\u5e94\u8be5\u4f20\u611f\u5668\u653e\u5728\u7269\u4f53\u7684\u4e0a\u9762\u3002\u901a\u8fc7\u53cd\u5c04\u7406\u8bba\u6765\u611f\u77e5\u989c\u8272\u3002 \u5982\u4e0b\u56fe\u6240\u793a\u3002", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_8", 
            "text": "\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5e93\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528 Seeeduino / Arduino\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u8bbe\u7f6e\u5e93\u3002", 
            "title": "\u5f69\u8272\u4f20\u611f\u5668\u5e93"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_9", 
            "text": "\u4ece Grove_I2C_Color_Sensor github \u9875\u9762\u4e0b\u8f7d  \u5e93\u4ee3\u7801 \u3002 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u6700\u65b0\u7248\u672cV2.0\uff08IC \u4e3a TCS3472\uff09\uff0c\u8bf7\u4f7f\u7528\n  \u65b0\u5e93  \u5c06\u4e0b\u8f7d\u7684\u6587\u4ef6\u89e3\u538b\u7f29\u5230... / arduino / libraries \u4e2d\u3002  \u53ef\u4ee5\u89e3\u538b\u540e\u91cd\u547d\u540d\u6587\u4ef6\u5939\u4e3a \u201cColor_Sensor\u201d  \u542f\u52a8 Arduino IDE\uff08\u5982\u679c\u6253\u5f00\uff0c\u8bf7\u91cd\u65b0\u542f\u52a8\uff09\u3002", 
            "title": "\u5f00\u59cb\u5efa\u7acb"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_10", 
            "text": "\u8fd9\u662f\u5e93\u4e2d\u6700\u91cd\u8981/\u6700\u6709\u7528\u7684\u529f\u80fd\uff0c\u6211\u4eec\u9080\u8bf7\u60a8\u81ea\u5df1\u67e5\u770b .h \u548c .cpp \u6587\u4ef6\uff0c\u4ee5\u67e5\u770b\u6240\u6709\u53ef\u7528\u7684\u529f\u80fd\u3002", 
            "title": "\u529f\u80fd\u8bf4\u660e"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#rgb", 
            "text": "readRGB(int *red, int *green, int *blue)   red:  \u4f7f\u7528\u53ef\u53d8\u5730\u5740\u4fdd\u5b58  R .  green:  \u4f7f\u7528\u53ef\u53d8\u5730\u5740\u4fdd\u5b58\u4e3a  G .  blue:  \u4f7f\u7528\u53ef\u53d8\u5730\u5740\u4fdd\u5b58\u4e3a  B .   void loop()\n{\n    int red, green, blue;\n    GroveColorSensor colorSensor;\n    colorSensor.ledStatus = 1;            // When turn on the color sensor LED, ledStatus = 1; When turn off the color sensor LED, ledStatus = 0.\n    while(1)\n    {\n        colorSensor.readRGB( red,  green,  blue);    //Read RGB values to variables.\n        delay(300);\n        Serial.print( The RGB value are: RGB(  );\n        Serial.print(red,DEC);\n        Serial.print( ,  );\n        Serial.print(green,DEC);\n        Serial.print( ,  );\n        Serial.print(blue,DEC);\n        Serial.println(  ) );\n        colorSensor.clearInterrupt();\n    }\n}", 
            "title": "\u901a\u8fc7\u5e93\u51fd\u6570\u8bfb\u53d6RGB\u6570\u636e"
        }, 
        {
            "location": "/Grove-I2C_Color_Sensor/#_11", 
            "text": "\u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528 Grove - I2C Color Sensor \u7684\u529f\u80fd\uff0c\u5e76\u4f7f\u7528  Chainable RGB LED Grove  \u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002   Note \n\u5982\u679c\u60a8\u4e4b\u524d\u5c1a\u672a\u5c06  Grove-Chainable RGB LED \u5e93  \u4e0b\u8f7d\u5230\u4f60\u7684 Arduino IDE , \u8bf7\u5148\u4e0b\u8f7d\u5e76\u8bbe\u7f6e\u5e93\u3002\n\n-   \u6253\u5f00 **File\uff08\u6587\u4ef6\uff09 - >Examples\uff08\u793a\u4f8b\uff09 - >Color_Sensor - >example - >ColorSensorWithRGB-LED** \u4f7f\u7528 RGB-LED \u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u6216\u5c06\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n**\u63cf\u8ff0**: \u8be5\u793a\u4f8b\u53ef\u4ee5\u6d4b\u91cf\u73af\u5883\u5149\u7684\u989c\u8272\u8272\u5ea6\u6216\u7269\u4f53\u7684\u989c\u8272\uff0c\u5e76\u901a\u8fc7\u53ef\u8fde\u63a5\u7684 RGB LED Grove\uff0c\u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u663e\u793a\u6a21\u5757\u901a\u8fc7 Grove - I2C Color Sensor \u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\u0002wzxhzdk:1\u0003\n\n-   \u5c06\u4ee3\u7801\u4e0a\u4f20\u5230\u5f00\u53d1\u677f\u3002\n-   \u7136\u540e Grove _ Chainable_RGB_LED \u5c06\u663e\u793a\u68c0\u6d4b\u5230\u7684\u989c\u8272\u3002\n\n\n\u5176\u4ed6\u53c2\u8003\n---------------\n\n\u8be5\u6a21\u5757\u57fa\u4e8e color sensor TCS3414CS\u3002 TCS3414CS digital color sensor \u4ece\u56db\u4e2a\u901a\u9053\u8fd4\u56de\u6570\u636e\uff1a\u7ea2\u8272\uff08R\uff09\uff0c\u7eff\u8272\uff08G\uff09\uff0c\u84dd\u8272\uff08B\uff09\u548c\u6e05\u9664\uff08C\uff09\uff08\u672a\u8fc7\u6ee4\uff09\u3002 \u7ea2\u8272\uff0c\u7eff\u8272\u548c\u84dd\u8272\u901a\u9053\uff08RGB\uff09\u7684\u54cd\u5e94\u53ef\u7528\u4e8e\u786e\u5b9a\u7279\u5b9a\u5149\u6e90\u7684\u8272\u5ea6\u5750\u6807\uff08x\uff0cy\uff09\u3002 \u8fd9\u4e9b\u6807\u51c6\u7531\u56fd\u9645\u6cd5\u59d4\u5458\u4f1a\uff08CIE\uff09\u5236\u5b9a\u3002 CIE\u662f\u6d89\u53ca\u989c\u8272\u548c\u989c\u8272\u6d4b\u91cf\u7684\u4e3b\u8981\u56fd\u9645\u7ec4\u7ec7\u3002\u4e3a\u4e86\u4f7f\u7528 TCS3414CS \u83b7\u53d6\u7ed9\u5b9a\u5bf9\u8c61\u7684\u989c\u8272\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u5c06\u4f20\u611f\u5668\u54cd\u5e94\uff08RGB\uff09\u6620\u5c04\u5230CIE\u7684\u6807\u51c6\u503c\uff08XYZ\uff09\u3002 \u7136\u540e\u9700\u8981\u8ba1\u7b97\u8272\u5ea6\u5750\u6807\uff08x\uff0cy\uff09\u3002\n\n![](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Coordinates_transform.png)\n\n\u8272\u5ea6\u8ba1\u7b97\u8fc7\u7a0b\u6982\u8ff0\n\n\u8fdb\u884c\u8f6c\u6362\u7684\u65b9\u7a0b\u5f0f\uff1a\n\n![](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Equations.png)\n\n\u53d8\u6362\u65b9\u7a0b\n\n-   \u5f53\u6211\u4eec\u5f97\u5230\u5750\u6807\uff08x\uff0cy\uff09\u65f6\uff0c\u8bf7\u53c2\u8003\u4e0b\u56fe\uff0c\u4ee5\u83b7\u5f97\u63a8\u8350\u7684\u989c\u8272\u3002\n\n![](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/img/Chromaticity_Diagram.jpg)\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n---------\n\n-   **[Library]**[Library for Grove - I2C Color Sensor V1.2](https://github.com/Seeed-Studio/Grove_I2C_Color_Sensor)\n-   **[Library]**[Library for Grove - I2C Color Sensor V2.0](https://github.com/Seeed-Studio/Grove_I2C_Color_Sensor_TCS3472)\n-   **[Eagle]**[Grove-I2C Color Sensor Eagle File V1.2](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove-I2C%20Color%20Sensor%20Eagle%20File%20V1.2.zip)\n-   **[Eagle]**[Grove-I2C Color Sensor Eagle File V2.0](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20I2C%20Color%20Sensor%20v2.0.zip)\n-   **[PDF]**[Grove-I2C Color Sensor SCH File V1.2](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v1.2%20SCH.pdf)\n-   **[PDF]**[Grove-I2C Color Sensor SCH File V2.0](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v2.0%20SCH.pdf)\n-   **[PDF]**[Grove-I2C Color Sensor PCB File V1.2](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v1.2%20PCB.pdf)\n-   **[PDF]**[Grove-I2C Color Sensor PCB File V2.0](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/Grove%20-%20I2C%20Color%20sensor%20v2.0%20PCB.pdf)\n-   **[Datasheet]**[TCS3414-A Datasheet](https://raw.githubusercontent.com/SeeedDocument/Grove-I2C_Color_Sensor/master/res/TCS3404_TCS3414-A.pdf)\n-  **[Datasheet]**[TCS3472 Datasheet](https://github.com/SeeedDocument/Grove-I2C_Color_Sensor/raw/master/res/TCS3472%20Datasheet.pdf)", 
            "title": "\u989c\u8272\u4f20\u611f\u5668\u793a\u4f8b/\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/", 
            "text": "Infrared Receiver \u7528\u4e8e\u63a5\u6536\u7ea2\u5916\u4fe1\u53f7\uff0c\u4e5f\u53ef\u7528\u4e8e\u8fdc\u7a0b\u63a7\u5236\u68c0\u6d4b\u3002 Infrared Receiver \u4e0a\u6709\u4e00\u4e2a IR \u63a2\u6d4b\u5668\uff0c\u7528\u4e8e\u83b7\u5f97\u7ea2\u5916\u53d1\u5c04\u5668\u53d1\u51fa\u7684\u7ea2\u5916\u7ebf\u3002 IR \u68c0\u6d4b\u5668\u5185\u90e8\u6709\u4e00\u4e2a\u89e3\u8c03\u5668\uff0c\u5bfb\u627e 38 KHz\u7684\u4fe1\u53f7\u3002 Infrared Receiver\u53ef\u4ee5\u572810\u7c73\u4ee5\u5185\u63a5\u6536\u4fe1\u53f7\u3002 \u5982\u679c\u8d85\u8fc710\u7c73\uff0c\u63a5\u6536\u5668\u53ef\u80fd\u65e0\u6cd5\u5f97\u5230\u4fe1\u53f7\u3002 \u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u4e24\u4e2a Groves-Infrared Receiver \u548c \nGrove - Infrared Emitter\n \u6765\u4e00\u8d77\u5de5\u4f5c\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5de5\u4f5c\u7535\u538b: 3.3-5V\n\n\n\u63a5\u6536\u8ddd\u79bb: 10m\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\nPlatforms Supported\n\n\n\u793a\u4f8b\n\n\n\u6211\u4eec\u5c06\u5728\u672c\u793a\u4f8b\u4e2d\u4f7f\u7528 Grove-Infrared Receiver \u548c Grove - Infrared Emitter\u3002 Infrared Receiver\u5c06\u6536\u5230  Grove - Infrared Emitter \u53d1\u9001\u7684\u6570\u636e\u3002\n\n\n\n\n\u5c06 Grove - Infrared Emitter \u8fde\u63a5\u5230 \nD3\n\u3002\n\n\n\u5c06 Grove - Infrared Emitter \u8fde\u63a5\u5230 \nD2\n\u3002\n\n\n\n\n\u4f7f\u7528 Arduino/Seeeduino\n\n\n\u63a8\u8350\u9605\u8bfb\u5165\u95e8\n\n\n\n\n\n\nArduino\u5165\u95e8\n\n\n\n\n\n\n\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u3002\n\n\n\n\n\n\nIRSendRev \u5e93\n\n\n\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5e93\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528 Seeeduino / Arduino\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u8bbe\u7f6e\u5e93\u3002\n\n\n\u8bbe\u7f6e\n\n\n\n\n\u4ece IRSendRev github \u9875\u9762\u4e0a\u4e0b\u8f7d \n\u5e93\u6587\u4ef6\u538b\u7f29\u5305\n \u3002\n\n\n\u5c06\u4e0b\u8f7d\u7684\u6587\u4ef6\u89e3\u538b\u7f29\u5230... / arduino / libraries \u4e2d\u3002\n\n\n\u89e3\u538b\u6587\u4ef6\u5939\u5e76\u547d\u540d\u4e3a \u201cIRSendRev\u201d\n\n\n\u542f\u52a8 Arduino IDE\uff08\u5982\u679c\u5df2\u7ecf\u6253\u5f00\uff0c\u8bf7\u91cd\u65b0\u542f\u52a8\uff09\u3002\n\n\n\n\nInfrared Receiver\u7684\u793a\u4f8b/\u5e94\u7528\n\n\n\u8fd9\u4e9b\u4f8b\u5b50\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Grove - Infrared Receiver \u7684\u529f\u80fd\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 Infrared Receiver \u4e0e Grove - Infrared Emitter \u7ec4\u5408\u4f7f\u7528\u3002 \u5c06 \nIR\u53d1\u5c04\n  \u5f15\u811a\u8fde\u63a5\u5230 \nD2\n \u8fdb\u884c\u6f14\u793a\u3002\n\n\n\u63a5\u6536\u5668\n\n\n\n\n\u6253\u5f00File\uff08\u6587\u4ef6\uff09 - \nExamples\uff08\u793a\u4f8b\uff09 - \n IRSendRev-\n example-\n recv \u67e5\u770b\u5b8c\u6574\u7684\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6216\u5c06\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n\n\n\n\u63cf\u8ff0\n:\n\u6b64\u793a\u4f8b\u5c06 \nIR\u63a5\u6536\u5668\n \u5f15\u811a\u8fde\u63a5\u5230 \nD2\n\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4e32\u53e3\u76d1\u89c6\u5668\u770b\u5230\u9065\u63a7\u5668\u7684\u7ea2\u5916\u6570\u636e\uff0c\u7136\u540e\u5c06\u63a5\u6536\u5230\u7684\u7ea2\u5916\u6570\u636e\u5199\u5165 send.ino\uff0c\u5e76\u4f7f\u7528 Infrared Emitter \u4e0a\u4f20\u5230\u7535\u8def\u677f\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u4f7f\u7528\u9065\u63a7\u5668\u53d1\u9001\u76f8\u540c\u7684\u6570\u636e\u3002\n\n\n\u521b\u610f\u5e94\u7528\n:\n\u60a8\u53ef\u4ee5\u901a\u8fc7 Infrared Receiver \u77e5\u9053\u9065\u63a7\u5668\u53d1\u9001\u7684\u7ea2\u5916\u6570\u636e\uff0c\u7136\u540e\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u901a\u8fc7 Infrared Emitter \u53d1\u9001\u76f8\u540c\u7684\u6570\u636e\uff0c\u4f8b\u5982\u5ba4\u5185\u6e29\u5ea6\u5927\u4e8e26\u5ea6\u65f6\u6253\u5f00\u98ce\u6247\u5f00\u5173\u3002\n\n\n#include \nIRSendRev.h\n\n\u00a0\n#define BIT_LEN         0\n#define BIT_START_H     1\n#define BIT_START_L     2\n#define BIT_DATA_H      3\n#define BIT_DATA_L      4\n#define BIT_DATA_LEN    5\n#define BIT_DATA        6\n\u00a0\nconst int pinRecv = 2;              // ir receiver connect to D2\n\u00a0\nvoid setup()\n{\n    Serial.begin(115200);\n    IR.Init(pinRecv);\n    Serial.println(\ninit over\n);\n}\n\u00a0\nunsigned char dta[20];\n\u00a0\nvoid loop()\n{\n    if(IR.IsDta())                  // get IR data\n    {\n        IR.Recv(dta);               // receive data to dta\n\u00a0\n        Serial.println(\n+------------------------------------------------------+\n);\n        Serial.print(\nLEN = \n);\n        Serial.println(dta[BIT_LEN]);\n        Serial.print(\nSTART_H: \n);\n        Serial.print(dta[BIT_START_H]);\n        Serial.print(\n\\tSTART_L: \n);\n        Serial.println(dta[BIT_START_L]);\n\u00a0\n        Serial.print(\nDATA_H: \n);\n        Serial.print(dta[BIT_DATA_H]);\n        Serial.print(\n\\tDATA_L: \n);\n        Serial.println(dta[BIT_DATA_L]);\n\u00a0\n        Serial.print(\n\\r\\nDATA_LEN = \n);\n        Serial.println(dta[BIT_DATA_LEN]);\n\u00a0\n        Serial.print(\nDATA: \n);\n        for(int i=0; i\ndta[BIT_DATA_LEN]; i++)\n        {\n            Serial.print(\n0x\n);\n            Serial.print(dta[i+BIT_DATA], HEX);\n            Serial.print(\n\\t\n);\n        }\n        Serial.println();\n\u00a0\n        Serial.print(\nDATA: \n);\n        for(int i=0; i\ndta[BIT_DATA_LEN]; i++)\n        {\n            Serial.print(dta[i+BIT_DATA], DEC);\n            Serial.print(\n\\t\n);\n        }\n        Serial.println();\n        Serial.println(\n+------------------------------------------------------+\\r\\n\\r\\n\n);\n    }\n}\n\n\n\n\n\n\n\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230\u5f00\u53d1\u677f\u3002\n\n\n\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u7b49\u5f85\u6570\u636e\u8f93\u5165\u3002\n\n\n\u4f7f\u7528\u7ea2\u5916\u9065\u63a7\u53d1\u9001\u6570\u636e\n\uff08\u6b64\u793a\u4f8b\u4f7f\u7528 MIDEA \u516c\u53f8\u7684\u7ea2\u5916\u9065\u63a7\u5668\u7684\u98ce\u6247\uff0c\u7136\u540e\u6309\u5f00/\u5173\u952e\uff09\n\u3002\n\n\n\u60a8\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\u3002\n\n\n\n\n\n\n\u53d1\u5c04\u5668\n\n\n\n\n\u6253\u5f00 \nFile\uff08\u6587\u4ef6\uff09 - \nExamples\uff08\u793a\u4f8b\uff09 - \n IRSendRev-\n example\n \u6253\u5f00\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6216\u5c06\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n\n\n\n\u63cf\u8ff0\n:\n\u5728\u8fd9\u4e2a\u6f14\u793a\u4e2d\u6211\u4eec\u5c06 \nIR\u53d1\u5c04\n \u5f15\u811a\u8fde\u63a5\u5230 \nD3\n \u7aef\u53e3\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\u901a\u8fc7 Infrared Receiver \u63a5\u6536\u5230\u7684\u9065\u63a7\u5668\u7684\u7ea2\u5916\u6570\u636e\uff0c\u5982\u4e0a\u8ff0\u793a\u4f8b\u3002 \u7136\u540e\u5c06\u63a5\u6536\u5230\u7684\u7ea2\u5916\u6570\u636e\u5199\u5165\u6b64\u793a\u4f8b\uff0c\u5e76\u4f7f\u7528 Infrared Emitter \u4e0a\u4f20\u5230\u7535\u8def\u677f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u9065\u63a7\u5668\u53d1\u9001\u51fa\u76f8\u540c\u7684\u6570\u636e\u3002\n\n\n\n\nNote\n\n\u6b64\u6f14\u793a\u5fc5\u987b\u5c06 **IR\u53d1\u5c04** \u5f15\u811a\u8fde\u63a5\u5230 **D3** \u7aef\u53e3\u3002\n\n\n\n\n#include \nIRSendRev.h\n\n\u00a0\n#define BIT_LEN         0\n#define BIT_START_H     1\n#define BIT_START_L     2\n#define BIT_DATA_H      3\n#define BIT_DATA_L      4\n#define BIT_DATA_LEN    5\n#define BIT_DATA        6\n\u00a0\nconst int ir_freq = 38;                 // 38k\n\u00a0\nunsigned char dtaSend[20];\n\u00a0\nvoid dtaInit()\n{\n    dtaSend[BIT_LEN]        = 11;          // all data that needs to be sent\n    dtaSend[BIT_START_H]    = 180;         // the logic high duration of \nStart\n\n    dtaSend[BIT_START_L]    = 91;          // the logic low duration of \nStart\n\n    dtaSend[BIT_DATA_H]     = 11;          // the logic \nlong\n duration in the communication\n    dtaSend[BIT_DATA_L]     = 33;          // the logic \nshort\n duration in the communication\n\u00a0\n    dtaSend[BIT_DATA_LEN]   = 6;           // Number of data which will sent. If the number is other, you should increase or reduce dtaSend[BIT_DATA+x].\n\u00a0\n    dtaSend[BIT_DATA+0]     = 128;           // data that will sent\n    dtaSend[BIT_DATA+1]     = 127;\n    dtaSend[BIT_DATA+2]     = 192;\n    dtaSend[BIT_DATA+3]     = 63;\n    dtaSend[BIT_DATA+4]     = 192;\n    dtaSend[BIT_DATA+5]     = 63;\n}\n\u00a0\nvoid setup()\n{\n    dtaInit();\n}\n\u00a0\nvoid loop()\n{\n    IR.Send(dtaSend, 38);\n\u00a0\n    delay(2000);\n}\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nGrove - Infrared Receiver eagle files\n\n\nIR Send and Receiver Library\n\n\nIR Receive Library for LinkIt ONE\n\n\nTSOP282 Datasheet", 
            "title": "Grove-Infrared_Receiver"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b: 3.3-5V  \u63a5\u6536\u8ddd\u79bb: 10m    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_2", 
            "text": "\u6211\u4eec\u5c06\u5728\u672c\u793a\u4f8b\u4e2d\u4f7f\u7528 Grove-Infrared Receiver \u548c Grove - Infrared Emitter\u3002 Infrared Receiver\u5c06\u6536\u5230  Grove - Infrared Emitter \u53d1\u9001\u7684\u6570\u636e\u3002   \u5c06 Grove - Infrared Emitter \u8fde\u63a5\u5230  D3 \u3002  \u5c06 Grove - Infrared Emitter \u8fde\u63a5\u5230  D2 \u3002", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#arduinoseeeduino", 
            "text": "", 
            "title": "\u4f7f\u7528 Arduino/Seeeduino"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_3", 
            "text": "Arduino\u5165\u95e8    \u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb \u8fd9\u91cc \u3002", 
            "title": "\u63a8\u8350\u9605\u8bfb\u5165\u95e8"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#irsendrev", 
            "text": "\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5e93\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528 Seeeduino / Arduino\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u8bbe\u7f6e\u5e93\u3002", 
            "title": "IRSendRev \u5e93"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_4", 
            "text": "\u4ece IRSendRev github \u9875\u9762\u4e0a\u4e0b\u8f7d  \u5e93\u6587\u4ef6\u538b\u7f29\u5305  \u3002  \u5c06\u4e0b\u8f7d\u7684\u6587\u4ef6\u89e3\u538b\u7f29\u5230... / arduino / libraries \u4e2d\u3002  \u89e3\u538b\u6587\u4ef6\u5939\u5e76\u547d\u540d\u4e3a \u201cIRSendRev\u201d  \u542f\u52a8 Arduino IDE\uff08\u5982\u679c\u5df2\u7ecf\u6253\u5f00\uff0c\u8bf7\u91cd\u65b0\u542f\u52a8\uff09\u3002", 
            "title": "\u8bbe\u7f6e"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#infrared-receiver", 
            "text": "\u8fd9\u4e9b\u4f8b\u5b50\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Grove - Infrared Receiver \u7684\u529f\u80fd\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 Infrared Receiver \u4e0e Grove - Infrared Emitter \u7ec4\u5408\u4f7f\u7528\u3002 \u5c06  IR\u53d1\u5c04   \u5f15\u811a\u8fde\u63a5\u5230  D2  \u8fdb\u884c\u6f14\u793a\u3002", 
            "title": "Infrared Receiver\u7684\u793a\u4f8b/\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_5", 
            "text": "\u6253\u5f00File\uff08\u6587\u4ef6\uff09 -  Examples\uff08\u793a\u4f8b\uff09 -   IRSendRev-  example-  recv \u67e5\u770b\u5b8c\u6574\u7684\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6216\u5c06\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002   \u63cf\u8ff0 :\n\u6b64\u793a\u4f8b\u5c06  IR\u63a5\u6536\u5668  \u5f15\u811a\u8fde\u63a5\u5230  D2 \u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4e32\u53e3\u76d1\u89c6\u5668\u770b\u5230\u9065\u63a7\u5668\u7684\u7ea2\u5916\u6570\u636e\uff0c\u7136\u540e\u5c06\u63a5\u6536\u5230\u7684\u7ea2\u5916\u6570\u636e\u5199\u5165 send.ino\uff0c\u5e76\u4f7f\u7528 Infrared Emitter \u4e0a\u4f20\u5230\u7535\u8def\u677f\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u4f7f\u7528\u9065\u63a7\u5668\u53d1\u9001\u76f8\u540c\u7684\u6570\u636e\u3002  \u521b\u610f\u5e94\u7528 :\n\u60a8\u53ef\u4ee5\u901a\u8fc7 Infrared Receiver \u77e5\u9053\u9065\u63a7\u5668\u53d1\u9001\u7684\u7ea2\u5916\u6570\u636e\uff0c\u7136\u540e\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u901a\u8fc7 Infrared Emitter \u53d1\u9001\u76f8\u540c\u7684\u6570\u636e\uff0c\u4f8b\u5982\u5ba4\u5185\u6e29\u5ea6\u5927\u4e8e26\u5ea6\u65f6\u6253\u5f00\u98ce\u6247\u5f00\u5173\u3002  #include  IRSendRev.h \n\u00a0\n#define BIT_LEN         0\n#define BIT_START_H     1\n#define BIT_START_L     2\n#define BIT_DATA_H      3\n#define BIT_DATA_L      4\n#define BIT_DATA_LEN    5\n#define BIT_DATA        6\n\u00a0\nconst int pinRecv = 2;              // ir receiver connect to D2\n\u00a0\nvoid setup()\n{\n    Serial.begin(115200);\n    IR.Init(pinRecv);\n    Serial.println( init over );\n}\n\u00a0\nunsigned char dta[20];\n\u00a0\nvoid loop()\n{\n    if(IR.IsDta())                  // get IR data\n    {\n        IR.Recv(dta);               // receive data to dta\n\u00a0\n        Serial.println( +------------------------------------------------------+ );\n        Serial.print( LEN =  );\n        Serial.println(dta[BIT_LEN]);\n        Serial.print( START_H:  );\n        Serial.print(dta[BIT_START_H]);\n        Serial.print( \\tSTART_L:  );\n        Serial.println(dta[BIT_START_L]);\n\u00a0\n        Serial.print( DATA_H:  );\n        Serial.print(dta[BIT_DATA_H]);\n        Serial.print( \\tDATA_L:  );\n        Serial.println(dta[BIT_DATA_L]);\n\u00a0\n        Serial.print( \\r\\nDATA_LEN =  );\n        Serial.println(dta[BIT_DATA_LEN]);\n\u00a0\n        Serial.print( DATA:  );\n        for(int i=0; i dta[BIT_DATA_LEN]; i++)\n        {\n            Serial.print( 0x );\n            Serial.print(dta[i+BIT_DATA], HEX);\n            Serial.print( \\t );\n        }\n        Serial.println();\n\u00a0\n        Serial.print( DATA:  );\n        for(int i=0; i dta[BIT_DATA_LEN]; i++)\n        {\n            Serial.print(dta[i+BIT_DATA], DEC);\n            Serial.print( \\t );\n        }\n        Serial.println();\n        Serial.println( +------------------------------------------------------+\\r\\n\\r\\n );\n    }\n}   \u5c06\u4ee3\u7801\u4e0a\u4f20\u5230\u5f00\u53d1\u677f\u3002  \u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\uff0c\u7b49\u5f85\u6570\u636e\u8f93\u5165\u3002  \u4f7f\u7528\u7ea2\u5916\u9065\u63a7\u53d1\u9001\u6570\u636e \uff08\u6b64\u793a\u4f8b\u4f7f\u7528 MIDEA \u516c\u53f8\u7684\u7ea2\u5916\u9065\u63a7\u5668\u7684\u98ce\u6247\uff0c\u7136\u540e\u6309\u5f00/\u5173\u952e\uff09 \u3002  \u60a8\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\u3002", 
            "title": "\u63a5\u6536\u5668"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_6", 
            "text": "\u6253\u5f00  File\uff08\u6587\u4ef6\uff09 -  Examples\uff08\u793a\u4f8b\uff09 -   IRSendRev-  example  \u6253\u5f00\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6216\u5c06\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002   \u63cf\u8ff0 :\n\u5728\u8fd9\u4e2a\u6f14\u793a\u4e2d\u6211\u4eec\u5c06  IR\u53d1\u5c04  \u5f15\u811a\u8fde\u63a5\u5230  D3  \u7aef\u53e3\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\u901a\u8fc7 Infrared Receiver \u63a5\u6536\u5230\u7684\u9065\u63a7\u5668\u7684\u7ea2\u5916\u6570\u636e\uff0c\u5982\u4e0a\u8ff0\u793a\u4f8b\u3002 \u7136\u540e\u5c06\u63a5\u6536\u5230\u7684\u7ea2\u5916\u6570\u636e\u5199\u5165\u6b64\u793a\u4f8b\uff0c\u5e76\u4f7f\u7528 Infrared Emitter \u4e0a\u4f20\u5230\u7535\u8def\u677f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u9065\u63a7\u5668\u53d1\u9001\u51fa\u76f8\u540c\u7684\u6570\u636e\u3002   Note \n\u6b64\u6f14\u793a\u5fc5\u987b\u5c06 **IR\u53d1\u5c04** \u5f15\u811a\u8fde\u63a5\u5230 **D3** \u7aef\u53e3\u3002  #include  IRSendRev.h \n\u00a0\n#define BIT_LEN         0\n#define BIT_START_H     1\n#define BIT_START_L     2\n#define BIT_DATA_H      3\n#define BIT_DATA_L      4\n#define BIT_DATA_LEN    5\n#define BIT_DATA        6\n\u00a0\nconst int ir_freq = 38;                 // 38k\n\u00a0\nunsigned char dtaSend[20];\n\u00a0\nvoid dtaInit()\n{\n    dtaSend[BIT_LEN]        = 11;          // all data that needs to be sent\n    dtaSend[BIT_START_H]    = 180;         // the logic high duration of  Start \n    dtaSend[BIT_START_L]    = 91;          // the logic low duration of  Start \n    dtaSend[BIT_DATA_H]     = 11;          // the logic  long  duration in the communication\n    dtaSend[BIT_DATA_L]     = 33;          // the logic  short  duration in the communication\n\u00a0\n    dtaSend[BIT_DATA_LEN]   = 6;           // Number of data which will sent. If the number is other, you should increase or reduce dtaSend[BIT_DATA+x].\n\u00a0\n    dtaSend[BIT_DATA+0]     = 128;           // data that will sent\n    dtaSend[BIT_DATA+1]     = 127;\n    dtaSend[BIT_DATA+2]     = 192;\n    dtaSend[BIT_DATA+3]     = 63;\n    dtaSend[BIT_DATA+4]     = 192;\n    dtaSend[BIT_DATA+5]     = 63;\n}\n\u00a0\nvoid setup()\n{\n    dtaInit();\n}\n\u00a0\nvoid loop()\n{\n    IR.Send(dtaSend, 38);\n\u00a0\n    delay(2000);\n}", 
            "title": "\u53d1\u5c04\u5668"
        }, 
        {
            "location": "/Grove-Infrared_Receiver/#_7", 
            "text": "Grove - Infrared Receiver eagle files  IR Send and Receiver Library  IR Receive Library for LinkIt ONE  TSOP282 Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/", 
            "text": "\u60f3\u8981\u5b8c\u6210\u4e30\u5bcc\u591a\u5f69\u7684\u7684\u5355\u8272\u80cc\u5149\u663e\u793a\u5417\uff1f \u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u60a8\u53ef\u4ee5\u5c06\u663e\u793a\u7684\u989c\u8272\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u60a8\u559c\u6b22\u7684\u989c\u8272\n\u5b83\u5177\u6709\u7b80\u5355\u800c\u4e14\u7b80\u6d01\u7684\u754c\u9762\u3002 \u5b83\u4ee5I2C\u603b\u7ebf\u4f5c\u4e3a\u5fae\u63a7\u5236\u5668\u7684\u901a\u4fe1\u65b9\u5f0f\u3002\n\u56e0\u6b64\uff0c\u6570\u636e\u4ea4\u6362\u548c\u80cc\u5149\u63a7\u5236\u6240\u9700\u7684\u5f15\u811a\u6570\u53ef\u4ee5\u4ece10\u4e2a\u51cf\u5c11\u52302\u4e2a\uff0c\u4ece\u800c\u51cf\u8f7b\u4e86IO\u53e3\u7684\u4f7f\u7528 \u6b64\u5916\uff0cGrove - LCD RGB Backlight\u652f\u6301\u7528\u6237\u81ea\u5df1\u5b9a\u4e49\u7684\u5b57\u7b26\u3002 \u60f3\u8981\u5f97\u5230\n\u7231\u5fc3\u56fe\u6848\u548c\u5176\u4ed6\u4e00\u4e9b\u4eba\u7269\u5f62\u8c61\u7684\u56fe\u6848\u5417\uff1f \u53ea\u8981\u5229\u7528\u8fd9\u4e2a\u6a21\u5757\u60a8\u5c31\u53ef\u4ee5\u81ea\u5df1\u8bbe\u8ba1\uff01\n\u8be5\u4ea7\u54c1\u662fGrove - Serial LCD\u7684\u66ff\u4ee3\u54c1\u3002 \u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u539f\u59cb\u768416x2\u6db2\u6676\u663e\u793a\u6a21\u5757\uff0c\u6211\u4eec\n\u6709\u7eff\u8272\u3001\u9ec4\u8272\u548c\u84dd\u8272\u7684Grove - LCD RGB Backlight\u51fa\u552e\u3002\n\n\n\n\n\n\nNote\n\n\n\u672c\u6587\u6863\u9002\u7528\u4e8e1.0\uff0c2.0\u548c4.0\u7248\u672c\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5177\u6709RGB\u80cc\u5149\u663e\u793a\u7684\u529f\u80fd\n\n\nI2C\u603b\u7ebf\u8fde\u63a5\n\n\n\u5185\u90e8\u8bbe\u7f6e\u6709\u82f1\u6587\u5b57\u4f53\n\n\n16x2 LCD\u80cc\u5149\u5c4f\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u6570\u503c\n\n\n\n\n\n\n\n\n\n\n\u8f93\u5165\u7535\u538b\n\n\n5V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n60mA\n\n\n\n\n\n\nCGROM\n\n\n10880\u4f4d\n\n\n\n\n\n\nCGRAM\n\n\n64x8 \u4f4d\n\n\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u4eba\u673a\u63a5\u53e3\n\n\n\u667a\u6167\u4e4b\u5bb6\n\n\n\u4f20\u611f\u5668\u4e2d\u5fc3\n\n\n\n\n\u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u7ed9\u60a8\u53c2\u8003\n\n\n\n\n\n\n\n\nEdison Wi-Fi Address\n\n\nWiFi Enabled Greenhouse\n\n\nGrove Lucky Dumpling\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMake it Now!\n\n\nMake it Now!\n\n\nMake it Now!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToothbrushing Instructor\n\n\nLinkIt ONE Pager\n\n\nLinkIt ONE IoT Demo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMake it Now!\n\n\nMake it Now!\n\n\nMake it Now!\n\n\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u8fd9\u4e2a\u5165\u95e8\u6307\u5bfc\u5c06\u5411\u4f60\u5c55\u793a\u600e\u4e48\u4f7f\u7528Grove - LCD RGB Backlight\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u9700\u8981 \nSeeeduino\n\n\n\n\nNote\n\n\n\u8fd9\u4e2a\u6f14\u793a\u662f\u5728Win10\u548cArduino IDE1.6.9\u73af\u5883\u4e0b\u8fdb\u884c\u7684\u3002\n\n\n\n\n\u7b2c\u4e00\u6b65.\u4e0b\u8f7d Arduino \u5e93\n\n\n\u60a8\u9700\u8981\u4e0b\u8f7d\u8be5\u5e93\u5e76\u5b89\u88c5\u5230\u60a8\u7684Arduino IDE\u3002\n\n\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u5e76\u4e14\u5b8c\u6210 LCD RGB Backlight \u5e93\u7684\u5b89\u88c5\u3002\n\n\n\n\n\u7b2c\u4e8c\u6b65. \u786c\u4ef6\u5b89\u88c5\n\n\n\u786c\u4ef6\u8fde\u63a5\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3aSeeeduino\u6709\u4e00\u4e2aI2C Grove\u7aef\u53e3\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\n\u901a\u8fc7Grove\u8fde\u63a5\u7ebf\u5c06\u5176\u8fde\u63a5\u5230I2C Grove\u7aef\u53e3\u5c31\u597d\u3002\n\n\n\n\nNote\n\n\n\u8bf7\u901a\u8fc7Seeeduino V4.2\u4e0a\u7684\u62e8\u52a8\u5f00\u5173\u9009\u62e95v\uff0c\u5426\u5219Grove - LCD RGB Backlight\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\n\n\n\n\n\n\n\u7b2c\u4e09\u6b65.\u4e0b\u8f7d\u6570\u636e\u5e76\u4e14\u4e0a\u4f20\n\n\n\u60a8\u53ef\u4ee5\u5728Github\u4e2d\u4e0b\u8f7d\u6f14\u793a\u4ee3\u7801\uff0c\u70b9\u51fb \n\u8fd9\u91cc\n\uff0c\u7136\u540e\u5c06\u5176\u89e3\u538b\u7f29\u5230\u4efb\u4f55\u5730\u65b9\u3002\n\n\n\u5982\u679c\u60a8\u8fd9\u4e2a\u6b65\u9aa4\u6709\u95ee\u9898\uff0c\u8bf7\u53c2\u9605 \nArduino\u5165\u95e8\u6307\u5bfc\n \u5728\u5e93\u4e2d\u6709\u4e00\u4e2aHello World\u793a\u4f8b\uff0c\u5c06\u5176\u6253\u5f00\u5e76\u4e0a\u4f20\u5230Seeeduino V4.2\u3002 \u7136\u540e\u53ef\u4ee5\u5728\u7b2c\u4e00\u884c\u770b\u5230\u201cHello world\u201d\uff0c\u7b2c\u4e8c\u884c\u5c06\u663e\u793a\u4ece\u590d\u4f4d\u540e\u663e\u793a\u65f6\u95f4\u7684\u79d2\u6570\u3002\n\n\n\n\n\u7b2c\u56db\u6b65. \u6539\u53d8\u80cc\u5149\u5c4f\u7684\u989c\u8272\n\n\nGrove - LCD RGB Backlight\u7684\u6700\u91cd\u8981\u7684\u7279\u70b9\u4e4b\u4e00\u662f\uff1a\u60a8\u53ef\u4ee5\u66f4\u6539\u80cc\u5149\u6e90\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u53ea\u9700\u4f7f\u7528\u4ee5\u4e0b\u529f\u80fd\uff1a\n\n\nvoid setRGB(int r, int g, int b);\n\n\n\n\n\n\u7136\u540e\u8ba9\u6211\u4eec\u5c1d\u8bd5\u7ea2\u8272\u7684\u80cc\u5149\u663e\u793a\u3002\n\u5c06\u989c\u8272\u4ee3\u7801\u4fee\u6539\u4e3a\uff1a\n\n\nconst int colorR = 255;\nconst int colorG = 0;\nconst int colorB = 0;\n\n\n\n\n\n\u518d\u6b21\u4e0a\u4f20\u4ee3\u7801\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u5230\u80cc\u5149\u5c4f\u7684\u989c\u8272\u8f6c\u5230\u7ea2\u8272\u4e86\uff1f \u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5c1d\u8bd5\u53e6\u4e00\u79cd\u989c\u8272\u5462\uff1f\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nSoftware Library\n\n\nGithub page for the Library\n\n\nGithub page for this document", 
            "title": "Grove-LCD_RGB_Backlight"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_1", 
            "text": "\u5177\u6709RGB\u80cc\u5149\u663e\u793a\u7684\u529f\u80fd  I2C\u603b\u7ebf\u8fde\u63a5  \u5185\u90e8\u8bbe\u7f6e\u6709\u82f1\u6587\u5b57\u4f53  16x2 LCD\u80cc\u5149\u5c4f    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_2", 
            "text": "\u9879\u76ee  \u6570\u503c      \u8f93\u5165\u7535\u538b  5V    \u5de5\u4f5c\u7535\u6d41  60mA    CGROM  10880\u4f4d    CGRAM  64x8 \u4f4d", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_3", 
            "text": "\u4eba\u673a\u63a5\u53e3  \u667a\u6167\u4e4b\u5bb6  \u4f20\u611f\u5668\u4e2d\u5fc3   \u8fd9\u91cc\u6709\u4e00\u4e9b\u9879\u76ee\u7ed9\u60a8\u53c2\u8003     Edison Wi-Fi Address  WiFi Enabled Greenhouse  Grove Lucky Dumpling           Make it Now!  Make it Now!  Make it Now!        Toothbrushing Instructor  LinkIt ONE Pager  LinkIt ONE IoT Demo           Make it Now!  Make it Now!  Make it Now!", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_4", 
            "text": "\u8fd9\u4e2a\u5165\u95e8\u6307\u5bfc\u5c06\u5411\u4f60\u5c55\u793a\u600e\u4e48\u4f7f\u7528Grove - LCD RGB Backlight\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u9700\u8981  Seeeduino   Note  \u8fd9\u4e2a\u6f14\u793a\u662f\u5728Win10\u548cArduino IDE1.6.9\u73af\u5883\u4e0b\u8fdb\u884c\u7684\u3002", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#arduino", 
            "text": "\u60a8\u9700\u8981\u4e0b\u8f7d\u8be5\u5e93\u5e76\u5b89\u88c5\u5230\u60a8\u7684Arduino IDE\u3002  \u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u5e76\u4e14\u5b8c\u6210 LCD RGB Backlight \u5e93\u7684\u5b89\u88c5\u3002", 
            "title": "\u7b2c\u4e00\u6b65.\u4e0b\u8f7d Arduino \u5e93"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_5", 
            "text": "\u786c\u4ef6\u8fde\u63a5\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3aSeeeduino\u6709\u4e00\u4e2aI2C Grove\u7aef\u53e3\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\n\u901a\u8fc7Grove\u8fde\u63a5\u7ebf\u5c06\u5176\u8fde\u63a5\u5230I2C Grove\u7aef\u53e3\u5c31\u597d\u3002   Note  \u8bf7\u901a\u8fc7Seeeduino V4.2\u4e0a\u7684\u62e8\u52a8\u5f00\u5173\u9009\u62e95v\uff0c\u5426\u5219Grove - LCD RGB Backlight\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002", 
            "title": "\u7b2c\u4e8c\u6b65. \u786c\u4ef6\u5b89\u88c5"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_6", 
            "text": "\u60a8\u53ef\u4ee5\u5728Github\u4e2d\u4e0b\u8f7d\u6f14\u793a\u4ee3\u7801\uff0c\u70b9\u51fb  \u8fd9\u91cc \uff0c\u7136\u540e\u5c06\u5176\u89e3\u538b\u7f29\u5230\u4efb\u4f55\u5730\u65b9\u3002  \u5982\u679c\u60a8\u8fd9\u4e2a\u6b65\u9aa4\u6709\u95ee\u9898\uff0c\u8bf7\u53c2\u9605  Arduino\u5165\u95e8\u6307\u5bfc  \u5728\u5e93\u4e2d\u6709\u4e00\u4e2aHello World\u793a\u4f8b\uff0c\u5c06\u5176\u6253\u5f00\u5e76\u4e0a\u4f20\u5230Seeeduino V4.2\u3002 \u7136\u540e\u53ef\u4ee5\u5728\u7b2c\u4e00\u884c\u770b\u5230\u201cHello world\u201d\uff0c\u7b2c\u4e8c\u884c\u5c06\u663e\u793a\u4ece\u590d\u4f4d\u540e\u663e\u793a\u65f6\u95f4\u7684\u79d2\u6570\u3002", 
            "title": "\u7b2c\u4e09\u6b65.\u4e0b\u8f7d\u6570\u636e\u5e76\u4e14\u4e0a\u4f20"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_7", 
            "text": "Grove - LCD RGB Backlight\u7684\u6700\u91cd\u8981\u7684\u7279\u70b9\u4e4b\u4e00\u662f\uff1a\u60a8\u53ef\u4ee5\u66f4\u6539\u80cc\u5149\u6e90\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u53ea\u9700\u4f7f\u7528\u4ee5\u4e0b\u529f\u80fd\uff1a  void setRGB(int r, int g, int b);  \u7136\u540e\u8ba9\u6211\u4eec\u5c1d\u8bd5\u7ea2\u8272\u7684\u80cc\u5149\u663e\u793a\u3002\n\u5c06\u989c\u8272\u4ee3\u7801\u4fee\u6539\u4e3a\uff1a  const int colorR = 255;\nconst int colorG = 0;\nconst int colorB = 0;  \u518d\u6b21\u4e0a\u4f20\u4ee3\u7801\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u5230\u80cc\u5149\u5c4f\u7684\u989c\u8272\u8f6c\u5230\u7ea2\u8272\u4e86\uff1f \u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u5c1d\u8bd5\u53e6\u4e00\u79cd\u989c\u8272\u5462\uff1f", 
            "title": "\u7b2c\u56db\u6b65. \u6539\u53d8\u80cc\u5149\u5c4f\u7684\u989c\u8272"
        }, 
        {
            "location": "/Grove-LCD_RGB_Backlight/#_8", 
            "text": "Software Library  Github page for the Library  Github page for this document", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/", 
            "text": "Grove - Loudness Sensor \u65e8\u5728\u68c0\u6d4b\u73af\u5883\u7684\u58f0\u97f3\u3002 \u5b83\u57fa\u4e8eLM2904\u653e\u5927\u5668\u548c\u5185\u7f6e\u7684\u9ea6\u514b\u98ce\uff0c\u5b83\u53ef\u4ee5\u4ece\u9ea6\u514b\u98ce\u4e2d\u63a5\u6536\u5230\u9ad8\u9891\u4fe1\u53f7\u5e76\u4e14\u8fdb\u884c\u653e\u5927\u548c\u6ee4\u6ce2\uff0c\u5e76\u8f93\u51fa\u6b63\u5305\u7edc\u3002 \u8fd9\u53ef\u4ee5\u7528Arduino\u8fdb\u884c\u4fe1\u53f7\u91c7\u96c6\u3002 \u800c\u4e14\u5b83\u8f93\u51fa\u503c\u53d6\u51b3\u4e8e\u58f0\u97f3\u8f93\u5165\u7684\u7535\u5e73\u9ad8\u4f4e\u3002\u8f93\u5165\u4fe1\u53f7\u4f1a\u7ecf\u8fc7\u6a21\u5757\u7684\u4e24\u6b21\u6ee4\u6ce2\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u4fe1\u53f7\u5e72\u6270\u3002 \u800c\u4e14\u8fd9\u91cc\u6709\u4e00\u4e2a\u87ba\u65cb\u7535\u4f4d\u8ba1\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u8c03\u6574\u8f93\u51fa\u589e\u76ca\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5de5\u4f5c\u7535\u538b \uff1a3.5~10 VDC\n\n\n\u5de5\u4f5c\u9891\u7387 \uff1a50~2000 Hz\n\n\n\u7075\u654f\u5ea6\u00a0: -48~66 dB\n\n\n\u4fe1\u566a\u6bd4\uff1a\n 58 dB\n\n\n\u8f93\u51fa\u4fe1\u53f7\u8303\u56f4\uff1a\u6a21\u62df\u4fe1\u53f7\uff080-1023\uff09\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u4f7f\u7528 Arduino\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u8be5\u6a21\u5757\u4f7f\u7528\u82af\u7247LM2904\u5c06\u8ff7\u4f60\u9ea6\u514b\u98ce\u4ea7\u751f\u7684\u7535\u5b50\u4fe1\u53f7\u8fdb\u884c\u653e\u5927\u3002 \u6700\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u6a21\u6570\u8f6c\u6362\u503c\u3002 \u6211\u4eec\u5c1d\u8bd5\u8bfb\u53d6\u8f93\u51fa\u503c\u3002\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2a Grove - Loudness Sensor\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Loudness Sensor\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5c06 Loudness sensor \u8fde\u63a5\u5230 Grove-Base Shield \u7684\u6a21\u62df\u7aef\u53e3 \nA0\n\u3002\n\n\n\n\n\n\n\n\n\u4f7f\u7528  USB\u6570\u636e\u7ebf\u5c06 Arduino / Seeeduino \u8fde\u63a5\u5230 PC\u3002\n\n\n\n\n\u7a0b\u5e8f\n\n\n\n\n\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002\n\n\n\n\nint val;\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    analogRead(0);\n    delay(10);\n    val = analogRead(0);\n    Serial.println(val);\n    delay(200);\n}\n\n\n\n\n\n\n\u4e0a\u4f20\u4ee3\u7801\n\n\n\u7136\u540e\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\u3002 \u5f53\u5411\u4f20\u611f\u5668\u5439\u6c14\u65f6\u4f1a\u770b\u5230\u6570\u503c\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002\n\n\n\n\n\n\n\u8fd9\u662f\u793a\u6ce2\u5668\u7684\u6d4b\u8bd5\u622a\u56fe\n\n\u84dd\u7ebf\u662f\u6765\u81ea\u9ea6\u514b\u98ce\u7684\u539f\u59cb\u4fe1\u53f7\uff0c\u9ec4\u8272\u662f Loudness Sensor \u8f93\u5165\u7684\u4fe1\u53f7\u3002 \u5b83\u662f\u6a21\u5757\u8f93\u51fa\u7684\u539f\u59cb\u4fe1\u53f7\u3002\n\n\n\u7136\u540e\u5411\u8fd9\u4e2a\u4f20\u611f\u5668\u5439\u6c14:\n\n\n\n\n\u5411\u8fd9\u4e2a\u4f20\u611f\u5668\u8bf4\u8bdd\uff1a\n\n\n\n\n\u4f7f\u7528Raspberry Pi\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u9996\u5148\uff0c\u4f60\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\u3002\n\n\n\n\n\n\n\n\n\n\nRaspberry pi\n\n\nGrove - DHT Sensor pro\n\n\nGrovepi+\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\n\n\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa\n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n\n\n\n\n\n\n\u901a\u8fc7\u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7 \nA0\n \u7aef\u53e3 \u3002\n\n\n\n\n\n\n\n\u7a0b\u5e8f\n\n\n\n\n\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a\n\n\n\n\n    cd yourpath/GrovePi/Software/Python/\n\n\n\n\n\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n    nano grove_loudness_sensor.py   # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import grovepi\n\n    # Connect the Grove Loudness Sensor to analog port A0\n    # SIG,NC,VCC,GND\n    loudness_sensor = 0\n\n    while True:\n        try:\n            # Read the sound level\n            sensor_value = grovepi.analogRead(loudness_sensor)\n\n            print \nsensor_value =\n, sensor_value\n            time.sleep(.5)\n\n        except IOError:\n            print \nError\n\n\n\n\n\n\n\n\n\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n    sudo python grove_loudness_sensor.py\n\n\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\u3010Eagle\u3011\n \nGrove - Loudness Sensor in Eagle format\n\n\n\u3010PDF\u3011\n \nGrove - loudness sensor Schematic in PDF format\n\n\n\u3010PDF\u3011\n \nGrove - loudness sensor PCB in PDF format\n\n\n\u3010Datasheet\u3011\n \nLM2904DR Datasheet", 
            "title": "Grove-Loudness_Sensor"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b \uff1a3.5~10 VDC  \u5de5\u4f5c\u9891\u7387 \uff1a50~2000 Hz  \u7075\u654f\u5ea6\u00a0: -48~66 dB  \u4fe1\u566a\u6bd4\uff1a  58 dB  \u8f93\u51fa\u4fe1\u53f7\u8303\u56f4\uff1a\u6a21\u62df\u4fe1\u53f7\uff080-1023\uff09    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_2", 
            "text": "", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_3", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#arduino", 
            "text": "", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_4", 
            "text": "\u8be5\u6a21\u5757\u4f7f\u7528\u82af\u7247LM2904\u5c06\u8ff7\u4f60\u9ea6\u514b\u98ce\u4ea7\u751f\u7684\u7535\u5b50\u4fe1\u53f7\u8fdb\u884c\u653e\u5927\u3002 \u6700\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u6a21\u6570\u8f6c\u6362\u503c\u3002 \u6211\u4eec\u5c1d\u8bd5\u8bfb\u53d6\u8f93\u51fa\u503c\u3002  \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2a Grove - Loudness Sensor\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Loudness Sensor  Base Shield           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5c06 Loudness sensor \u8fde\u63a5\u5230 Grove-Base Shield \u7684\u6a21\u62df\u7aef\u53e3  A0 \u3002     \u4f7f\u7528  USB\u6570\u636e\u7ebf\u5c06 Arduino / Seeeduino \u8fde\u63a5\u5230 PC\u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_5", 
            "text": "\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684 Arduino \u7f16\u8f91\u9875\u9762\u4e0a\u3002   int val;\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    analogRead(0);\n    delay(10);\n    val = analogRead(0);\n    Serial.println(val);\n    delay(200);\n}   \u4e0a\u4f20\u4ee3\u7801  \u7136\u540e\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\u3002 \u5f53\u5411\u4f20\u611f\u5668\u5439\u6c14\u65f6\u4f1a\u770b\u5230\u6570\u503c\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002    \u8fd9\u662f\u793a\u6ce2\u5668\u7684\u6d4b\u8bd5\u622a\u56fe \n\u84dd\u7ebf\u662f\u6765\u81ea\u9ea6\u514b\u98ce\u7684\u539f\u59cb\u4fe1\u53f7\uff0c\u9ec4\u8272\u662f Loudness Sensor \u8f93\u5165\u7684\u4fe1\u53f7\u3002 \u5b83\u662f\u6a21\u5757\u8f93\u51fa\u7684\u539f\u59cb\u4fe1\u53f7\u3002  \u7136\u540e\u5411\u8fd9\u4e2a\u4f20\u611f\u5668\u5439\u6c14:   \u5411\u8fd9\u4e2a\u4f20\u611f\u5668\u8bf4\u8bdd\uff1a", 
            "title": "\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#raspberry-pi", 
            "text": "", 
            "title": "\u4f7f\u7528Raspberry Pi"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_6", 
            "text": "\u9996\u5148\uff0c\u4f60\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\u3002      Raspberry pi  Grove - DHT Sensor pro  Grovepi+           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70       \u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002    \u901a\u8fc7\u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165Grovepi\u63d2\u5ea7  A0  \u7aef\u53e3 \u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_7", 
            "text": "\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a       cd yourpath/GrovePi/Software/Python/    \u627e\u5230\u8fd9\u884c\u4ee3\u7801     nano grove_loudness_sensor.py   #  Ctrl+x  to exit #      import time\n    import grovepi\n\n    # Connect the Grove Loudness Sensor to analog port A0\n    # SIG,NC,VCC,GND\n    loudness_sensor = 0\n\n    while True:\n        try:\n            # Read the sound level\n            sensor_value = grovepi.analogRead(loudness_sensor)\n\n            print  sensor_value = , sensor_value\n            time.sleep(.5)\n\n        except IOError:\n            print  Error     \u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b     sudo python grove_loudness_sensor.py", 
            "title": "\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Loudness_Sensor/#_8", 
            "text": "\u3010Eagle\u3011   Grove - Loudness Sensor in Eagle format  \u3010PDF\u3011   Grove - loudness sensor Schematic in PDF format  \u3010PDF\u3011   Grove - loudness sensor PCB in PDF format  \u3010Datasheet\u3011   LM2904DR Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Moisture_Sensor/", 
            "text": "\u8fd9\u4e2aMoisture Senor\u53ef\u4ee5\u7528\u4e8e\u68c0\u6d4b\u571f\u58e4\u7684\u6c34\u5206\uff0c\u6216\u8005\u5224\u65ad\u4f20\u611f\u5668\u5468\u56f4\u662f\u5426\u6709\u6c34\u5206\uff0c\u8ba9\u60a8\u82b1\u56ed\u91cc\u7684\u690d\u7269\u5728\u6e34\u671b\u65f6\u80fd\u591f\u4f38\u51fa\u63f4\u624b\u3002 \u8be5\u4f20\u611f\u5668\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u60a8\u53ea\u9700\u5c06\u5b83\u63d2\u5165\u571f\u58e4\u5e76\u8bfb\u53d6\u6570\u636e\u5373\u53ef\u3002 \u4f7f\u7528\u8fd9\u4e2a\u4f20\u611f\u5668\uff0c\u60a8\u53ef\u4ee5\u5236\u4f5c\u4e00\u4e2a\u5c0f\u5de5\u7a0b\uff0c\u8ba9\u690d\u7269\u7ed9\u60a8\u53d1\u9001\u6d88\u606f\uff0c\u5982\u201c\u6211\u73b0\u5728\u53e3\u6e34\uff0c\u8bf7\u7ed9\u6211\u4e00\u4e9b\u6c34\u201d\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u80fd\u591f\u901a\u8fc7\u571f\u58e4\u7535\u963b\u7387\uff0c\u6d4b\u91cf\u51fa\u7684\u571f\u58e4\u6c34\u5206\u542b\u91cf\n\n\n\u65b9\u4fbf\u4f7f\u7528\n\n\n2.0 cm X 6.0 cm \u7684grove \u6a21\u5757\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove_System\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u9879\u76ee\n\n\n\u4f7f\u7528\u73af\u5883\n\n\n\u6700\u5c0f\n\n\n\u6807\u51c6\n\n\n\u6700\u5927\n\n\n\u5355\u4f4d\n\n\n\n\n\n\n\n\n\n\n\u7535\u538b\n\n\n-\n\n\n3.3\n\n\n-\n\n\n5\n\n\nV\n\n\n\n\n\n\n\u7535\u6d41\n\n\n-\n\n\n0\n\n\n-\n\n\n35\n\n\nmA\n\n\n\n\n\n\n\u8f93\u51fa\u6570\u503c\n\n\n\u5728\u5e72\u71e5\u7684\u571f\u58e4\u4e2d\n\u5728\u6f6e\u6e7f\u7684\u571f\u58e4\u4e2d\n\u5728\u6c34\u4e2d\n\n\n0\n300\n700\n\n\n-\n\n\n300\n700\n950\n\n\n-\n\n\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\n\n\u5e94\u7528\u5728\u690d\u7269\u56ed\u6797\u4e2d\n\n\n\u6e7f\u5ea6\u68c0\u6d4b\n\n\n\u6d53\u5ea6\u68c0\u6d4b\n\n\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\n\n\n\u4f7f\u7528Arduino\n\n\n\u8fd9\u662f\u53ef\u4ee5\u7528\u4e8e\u68c0\u6d4b\u571f\u58e4\u6c34\u5206\u7684moisture sensor\u7684\u4f7f\u7528\u8bf4\u660e\u3002 \u5f53\u68c0\u6d4b\u5230\u571f\u58e4\u6c34\u5206\u6d88\u5931\u65f6\uff0c\u4f20\u611f\u5668\u8f93\u51fa\u503c\u4f1a\u964d\u4f4e\u3002 \u60a8\u53ef\u4ee5\u89c2\u5bdf\u4f20\u611f\u5668\u8f93\u51fa\u7684\u7ed3\u679c\u77e5\u9053\u690d\u7269\u662f\u5426\u9700\u8981\u6c34\u3002 \u4e0b\u9762\u5c55\u793a\u8fd9\u4e2a\u4f20\u611f\u5668\u5728\u611f\u5e94\u571f\u58e4\u6c34\u5206\u65b9\u9762\u7684\u7b80\u5355\u5e94\u7528\u3002\n\n\n\n\n\n\n\u4f7f\u75284\u9488\u7684Grove\u8fde\u63a5\u7ebf\u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230 \nGrove - Base Shield\n \u7684 \nA0\n \u7684\u6a21\u62df\u7aef\u53e3\uff0c\uff0c\u7136\u540e\u5c06\u4f20\u611f\u5668\u63d2\u5165\u571f\u58e4\u6216\u653e\u7f6e\u5728\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u5730\u65b9\u3002\n\n\n\n\n\n\n\u5c06Grove-Base Shield\u63d2\u5165Arduino Seeeduino\uff0c\u5e76\u901a\u8fc7USB\u6570\u636e\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002\n\n\n\n\n\n\n\u786c\u4ef6\u5b89\u88c5\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\nNote\n\n\n\u8be5\u4f20\u611f\u5668\u4e0d\u4f1a\u56e0\u4e3a\u63a7\u5236\u7535\u8def\u4e0e\u6c34\u63a5\u89e6\u800c\u5931\u6548\uff0c\u4f46\u662f\u53ef\u80fd\u5bb9\u6613\u5728\u63a2\u9488\u4e4b\u95f4\u53d1\u751f\u7535\u89e3\u8150\u8680\uff0c\u56e0\u6b64\u4e0d\u9002\u5408\u4e00\u76f4\u7559\u5728\u6c34\u91cc\u6216\u5728\u5ba4\u5916\u4f7f\u7528\u3002\n\n\n\n\n\n\n\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u9875\u9762\u4e0a\n\n\n\n\n// Test code for Grove - Moisture Sensor\n\n\nint\n \nsensorPin\n \n=\n \nA0\n;\n \n// select the input pin for the potentiometer\n\n\nint\n \nsensorValue\n \n=\n \n0\n;\n \n// variable to store the value coming from the sensor7\n\n\n\nvoid\n \nsetup\n()\n \n{\n\n    \n// declare the ledPin as an OUTPUT:\n\n    \nSerial\n.\nbegin\n(\n9600\n);\n\n\n}\n\n\nvoid\n \nloop\n()\n \n{\n\n    \n// read the value from the sensor:\n\n    \nsensorValue\n \n=\n \nanalogRead\n(\nsensorPin\n);\n\n    \nSerial\n.\nprint\n(\nsensor = \n \n);\n\n    \nSerial\n.\nprintln\n(\nsensorValue\n);\n\n    \ndelay\n(\n1000\n);\n\n\n}\n\n\n\n\n\n\n\n\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u3002\n\n\n\n\n\n\n\u4f7f\u7528TI LaunchPad\n\n\n\u7167\u987e\u4f60\u7684\u690d\u7269\uff08\u4f7f\u7528Moisture Sensor\uff09\n\n\n\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u5728\u571f\u58e4\u4e2d\u68c0\u6d4b\u6c34\u5206\u7684\u7b80\u5355\u5e94\u7528\u3002\u901a\u8fc7\u89c2\u5bdf\u4f20\u611f\u5668\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u60a8\u53ef\u4ee5\u77e5\u9053\u690d\u7269\u662f\u5426\u9700\u8981\u6c34\n\n\n\n\n/*\n\n\n  Moisture-Sensor\n\n\n  The following sketch demonstrates a simple application of sensing\n\n\n  the moisture of the soil. You can know whether a plant needs water\n\n\n  or not by observing the results that the sensor outputs.\n\n\n  The circuit:\n\n\n    * Moisture-Sensor attached to pin 24 (J6 plug on Grove Base BoosterPack)\n\n\n    * one side pin (either one) to ground\n\n\n    * the other side pin to +VCC\n\n\n    * LED anode (long leg) attached to RED_LED\n\n\n    * LED cathode (short leg) attached to ground\n\n\n  - NOTE:\n\n\n    This example code is in the public domain.\n\n\n    http://seeedstudio.com/wiki/Grove_-_Moisture_Sensor\n\n\n*/\n\n\n#include\n \nTM1637.h\n\n\n/* Macro Define */\n\n\n#define CLK 39              \n/* 4-digital display clock pin */\n\n\n#define DIO 38              \n/* 4-digiral display data pin */\n\n\n#define BLINK_LED RED_LED   \n/* blink led */\n\n\n#define MOISTURE_PIN 24     \n/* pin of moisture sensor */\n\n\n#define THRESHOLD_VALUE 300 \n/* threshold for watering the flowers */\n\n\n#define ON HIGH             \n/* led on */\n\n\n#define OFF LOW             \n/* led off */\n\n\n#define _handle_led(x) digitalWrite(BLINK_LED, x) \n/* handle led */\n\n\n\n/* Global Varibles */\n\n\nTM1637\n \ntm1637\n(\nCLK\n,\n \nDIO\n);\n    \n/* 4-digital display object */\n\n\nint\n \nanalog_value\n \n=\n \n0\n;\n       \n/* varible to store the value coming from rotary angle\n\n\nsensor */\n\n\nint8_t\n \nbits\n[\n4\n]\n \n=\n \n{\n0\n};\n       \n/* array to store the single bits of the value */\n\n\n/* the setup() method runs once, when the sketch starts */\n\n\nvoid\n \nsetup\n()\n \n{\n\n\n/* Initialize 4-digital display */\n\n    \ntm1637\n.\ninit\n();\n\n    \ntm1637\n.\nset\n(\nBRIGHT_TYPICAL\n);\n\n\n/* declare the red_led pin as an OUTPUT */\n\n    \npinMode\n(\nBLINK_LED\n,\n \nOUTPUT\n);\n\n\n}\n\n\n/* the loop() method runs over and over again */\n\n\nvoid\n \nloop\n()\n \n{\n\n    \nanalog_value\n \n=\n \nanalogRead\n(\nMOISTURE_PIN\n);\n \n/* read the value from the sensor */\n\n\n/* if the value is smaller than threshold, turn on led */\n\n    \nif\n(\nanalog_value\n \n \nTHRESHOLD_VALUE\n)\n \n{\n\n        \n_handle_led\n(\nON\n);\n\n    \n}\n \nelse\n \n{\n\n        \n_handle_led\n(\nOFF\n);\n\n    \n}\n\n    \nmemset\n(\nbits\n,\n \n0\n,\n \n4\n);\n \n/* reset array when we use it */\n\n    \nfor\n(\nint\n \ni\n \n=\n \n3\n;\n \ni\n \n=\n \n0\n;\n \ni\n--\n)\n \n{\n\n\n/* get single bits of the analog value */\n\n        \nbits\n[\ni\n]\n \n=\n \nanalog_value\n \n%\n \n10\n;\n\n        \nanalog_value\n \n=\n \nanalog_value\n \n/\n \n10\n;\n\n        \ntm1637\n.\ndisplay\n(\ni\n,\n \nbits\n[\ni\n]);\n \n/* display by 4-digital display */\n\n    \n}\n\n    \ndelay\n(\n200\n);\n\n\n}\n\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n1. \u4f60\u5e94\u8be5\u51c6\u5907\u4e00\u4e2aRaspberry Pi\u548c\u4e00\u4e2agrove pi\u6216grove pi +\n2. \u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa\n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n3. \u786c\u4ef6\u8fde\u63a5\n- \u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165grove pi\u7684 \nA0\n \u7aef\u53e3\u3002\n4. \u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\n\n\ncd yourpath/GrovePi/Software/Python/\n\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n\nnano\n \ngrove_moisture_sensor\n.\npy\n \n# \nCtrl+x\n to exit #\n\n\nimport\n \ntime\n\n\nimport\n \ngrovepi\n\n\n# Connect the Grove Moisture Sensor to analog port A0\n\n\n# SIG,NC,VCC,GND\n\n\nsensor\n \n=\n \n0\n\n\nwhile\n \nTrue\n:\n\n\ntry\n:\n\n\nprint\n \ngrovepi\n.\nanalogRead\n(\nsensor\n)\n\n\ntime\n.\nsleep\n(\n.\n5\n)\n\n\nexcept\n \nKeyboardInterrupt\n:\n\n\nbreak\n\n\nexcept\n \nIOError\n:\n\n\nprint\n \nError\n\n\n\n\n\n\n\n\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n\n\n\nsudo python grove_moisture_sensor.py\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n202000089_PCBA-Grove Moisture sensor V1.3_schemic file", 
            "title": "Grove-Moisture_Sensor"
        }, 
        {
            "location": "/Grove-Moisture_Sensor/#_1", 
            "text": "\u80fd\u591f\u901a\u8fc7\u571f\u58e4\u7535\u963b\u7387\uff0c\u6d4b\u91cf\u51fa\u7684\u571f\u58e4\u6c34\u5206\u542b\u91cf  \u65b9\u4fbf\u4f7f\u7528  2.0 cm X 6.0 cm \u7684grove \u6a21\u5757    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove_System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Moisture_Sensor/#_2", 
            "text": "\u9879\u76ee  \u4f7f\u7528\u73af\u5883  \u6700\u5c0f  \u6807\u51c6  \u6700\u5927  \u5355\u4f4d      \u7535\u538b  -  3.3  -  5  V    \u7535\u6d41  -  0  -  35  mA    \u8f93\u51fa\u6570\u503c  \u5728\u5e72\u71e5\u7684\u571f\u58e4\u4e2d \u5728\u6f6e\u6e7f\u7684\u571f\u58e4\u4e2d \u5728\u6c34\u4e2d  0 300 700  -  300 700 950  -", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-Moisture_Sensor/#_3", 
            "text": "\u5e94\u7528\u5728\u690d\u7269\u56ed\u6797\u4e2d  \u6e7f\u5ea6\u68c0\u6d4b  \u6d53\u5ea6\u68c0\u6d4b", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-Moisture_Sensor/#_4", 
            "text": "\u4f7f\u7528Arduino  \u8fd9\u662f\u53ef\u4ee5\u7528\u4e8e\u68c0\u6d4b\u571f\u58e4\u6c34\u5206\u7684moisture sensor\u7684\u4f7f\u7528\u8bf4\u660e\u3002 \u5f53\u68c0\u6d4b\u5230\u571f\u58e4\u6c34\u5206\u6d88\u5931\u65f6\uff0c\u4f20\u611f\u5668\u8f93\u51fa\u503c\u4f1a\u964d\u4f4e\u3002 \u60a8\u53ef\u4ee5\u89c2\u5bdf\u4f20\u611f\u5668\u8f93\u51fa\u7684\u7ed3\u679c\u77e5\u9053\u690d\u7269\u662f\u5426\u9700\u8981\u6c34\u3002 \u4e0b\u9762\u5c55\u793a\u8fd9\u4e2a\u4f20\u611f\u5668\u5728\u611f\u5e94\u571f\u58e4\u6c34\u5206\u65b9\u9762\u7684\u7b80\u5355\u5e94\u7528\u3002    \u4f7f\u75284\u9488\u7684Grove\u8fde\u63a5\u7ebf\u5c06\u6b64\u6a21\u5757\u8fde\u63a5\u5230  Grove - Base Shield  \u7684  A0  \u7684\u6a21\u62df\u7aef\u53e3\uff0c\uff0c\u7136\u540e\u5c06\u4f20\u611f\u5668\u63d2\u5165\u571f\u58e4\u6216\u653e\u7f6e\u5728\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u5730\u65b9\u3002    \u5c06Grove-Base Shield\u63d2\u5165Arduino Seeeduino\uff0c\u5e76\u901a\u8fc7USB\u6570\u636e\u7ebf\u5c06Arduino\u8fde\u63a5\u5230PC\u3002    \u786c\u4ef6\u5b89\u88c5\u5982\u4e0b\u56fe\u6240\u793a\uff1a    Note  \u8be5\u4f20\u611f\u5668\u4e0d\u4f1a\u56e0\u4e3a\u63a7\u5236\u7535\u8def\u4e0e\u6c34\u63a5\u89e6\u800c\u5931\u6548\uff0c\u4f46\u662f\u53ef\u80fd\u5bb9\u6613\u5728\u63a2\u9488\u4e4b\u95f4\u53d1\u751f\u7535\u89e3\u8150\u8680\uff0c\u56e0\u6b64\u4e0d\u9002\u5408\u4e00\u76f4\u7559\u5728\u6c34\u91cc\u6216\u5728\u5ba4\u5916\u4f7f\u7528\u3002    \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u7684Arduino\u7f16\u8f91\u9875\u9762\u4e0a   // Test code for Grove - Moisture Sensor  int   sensorPin   =   A0 ;   // select the input pin for the potentiometer  int   sensorValue   =   0 ;   // variable to store the value coming from the sensor7  void   setup ()   { \n     // declare the ledPin as an OUTPUT: \n     Serial . begin ( 9600 );  }  void   loop ()   { \n     // read the value from the sensor: \n     sensorValue   =   analogRead ( sensorPin ); \n     Serial . print ( sensor =    ); \n     Serial . println ( sensorValue ); \n     delay ( 1000 );  }    \u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb \u8fd9\u91cc \u3002    \u4f7f\u7528TI LaunchPad  \u7167\u987e\u4f60\u7684\u690d\u7269\uff08\u4f7f\u7528Moisture Sensor\uff09  \u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u5728\u571f\u58e4\u4e2d\u68c0\u6d4b\u6c34\u5206\u7684\u7b80\u5355\u5e94\u7528\u3002\u901a\u8fc7\u89c2\u5bdf\u4f20\u611f\u5668\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u60a8\u53ef\u4ee5\u77e5\u9053\u690d\u7269\u662f\u5426\u9700\u8981\u6c34   /*    Moisture-Sensor    The following sketch demonstrates a simple application of sensing    the moisture of the soil. You can know whether a plant needs water    or not by observing the results that the sensor outputs.    The circuit:      * Moisture-Sensor attached to pin 24 (J6 plug on Grove Base BoosterPack)      * one side pin (either one) to ground      * the other side pin to +VCC      * LED anode (long leg) attached to RED_LED      * LED cathode (short leg) attached to ground    - NOTE:      This example code is in the public domain.      http://seeedstudio.com/wiki/Grove_-_Moisture_Sensor  */  #include   TM1637.h  /* Macro Define */  #define CLK 39               /* 4-digital display clock pin */  #define DIO 38               /* 4-digiral display data pin */  #define BLINK_LED RED_LED    /* blink led */  #define MOISTURE_PIN 24      /* pin of moisture sensor */  #define THRESHOLD_VALUE 300  /* threshold for watering the flowers */  #define ON HIGH              /* led on */  #define OFF LOW              /* led off */  #define _handle_led(x) digitalWrite(BLINK_LED, x)  /* handle led */  /* Global Varibles */  TM1637   tm1637 ( CLK ,   DIO );      /* 4-digital display object */  int   analog_value   =   0 ;         /* varible to store the value coming from rotary angle  sensor */  int8_t   bits [ 4 ]   =   { 0 };         /* array to store the single bits of the value */  /* the setup() method runs once, when the sketch starts */  void   setup ()   {  /* Initialize 4-digital display */ \n     tm1637 . init (); \n     tm1637 . set ( BRIGHT_TYPICAL );  /* declare the red_led pin as an OUTPUT */ \n     pinMode ( BLINK_LED ,   OUTPUT );  }  /* the loop() method runs over and over again */  void   loop ()   { \n     analog_value   =   analogRead ( MOISTURE_PIN );   /* read the value from the sensor */  /* if the value is smaller than threshold, turn on led */ \n     if ( analog_value     THRESHOLD_VALUE )   { \n         _handle_led ( ON ); \n     }   else   { \n         _handle_led ( OFF ); \n     } \n     memset ( bits ,   0 ,   4 );   /* reset array when we use it */ \n     for ( int   i   =   3 ;   i   =   0 ;   i -- )   {  /* get single bits of the analog value */ \n         bits [ i ]   =   analog_value   %   10 ; \n         analog_value   =   analog_value   /   10 ; \n         tm1637 . display ( i ,   bits [ i ]);   /* display by 4-digital display */ \n     } \n     delay ( 200 );  }   \u4f7f\u7528 Raspberry Pi \n1. \u4f60\u5e94\u8be5\u51c6\u5907\u4e00\u4e2aRaspberry Pi\u548c\u4e00\u4e2agrove pi\u6216grove pi +\n2. \u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002\n3. \u786c\u4ef6\u8fde\u63a5\n- \u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165grove pi\u7684  A0  \u7aef\u53e3\u3002\n4. \u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55  cd yourpath/GrovePi/Software/Python/  \u627e\u5230\u8fd9\u884c\u4ee3\u7801  nano   grove_moisture_sensor . py   #  Ctrl+x  to exit #  import   time  import   grovepi  # Connect the Grove Moisture Sensor to analog port A0  # SIG,NC,VCC,GND  sensor   =   0  while   True :  try :  print   grovepi . analogRead ( sensor )  time . sleep ( . 5 )  except   KeyboardInterrupt :  break  except   IOError :  print   Error    \u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b   sudo python grove_moisture_sensor.py", 
            "title": "\u4f7f\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/Grove-Moisture_Sensor/#_5", 
            "text": "202000089_PCBA-Grove Moisture sensor V1.3_schemic file", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Grove-Touch_Sensor/", 
            "text": "Grove - Touch Sensor \u53ef\u4ee5\u611f\u53d7\u5230\u4f60\u5728\u629a\u6478\u8fc7\u7a0b\u4e2d\u7684\u538b\u529b\u3002 \u5f53\u624b\u6307\u9760\u8fd1\u65f6\uff0c\u5b83\u4e5f\u53ef\u4ee5\u68c0\u6d4b\u7535\u5bb9\u7684\u53d8\u5316\u3002 \u8fd9\u610f\u5473\u7740\u65e0\u8bba\u60a8\u7684\u624b\u6307\u662f\u76f4\u63a5\u89e6\u6478\u8fd8\u662f\u53ea\u662f\u9760\u8fd1\uff0cGrove - Touch Sensor \u4e5f\u4f1a\u8f93\u51fa\u9ad8\u7535\u5e73\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\uff1a2.0 - 5.5V\n\n\n\u5de5\u4f5c\u7535\u6d41\uff08Vcc = 3V\uff09\uff1a1.5 - 3.0\u03bcA\n\n\n\u5de5\u4f5c\u7535\u6d41\uff08VDD = 3V\uff09\uff1a3.5 - 7.0\u03bcA\n\n\n\u8f93\u51fa\u54cd\u5e94\u65f6\u95f4\uff1a60 - 220mS\n\n\n\u4f7f\u7528\u7684\u82af\u7247\uff1aTTP223-BA6\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\nPlatforms Supported\n\n\n\u9009\u9879\u529f\u80fd\n\n\n\n\n\n\n\n\nAHLB\n\n\nTOG\n\n\nLPMB\n\n\nMOTB\n\n\nSLRFTB\n\n\nRST\n\n\nQ\n\n\nOPDO\n\n\n\n\n\n\n\n\n\n\n\u8f93\u51fa\u6709\u6548\u9ad8/\u4f4e\n\n\n\u5207\u6362\u6a21\u5f0f\n\n\n\u7535\u6e90\u6a21\u5f0f\n\n\nMax. On Time\n\n\n\u53d6\u6837\u65f6\u95f4\u957f\u77ed\n\n\n\u590d\u4f4d\u5f15\u811a\n\n\nCMOS\u8f93\u51fa\n\n\nOpen Drain\u6a21\u5f0f\n\n\n\n\n\n\nV\n\n\nV\n\n\n0\n\n\n1\n\n\n1\n\n\nX\n\n\nV\n\n\nX\n\n\n\n\n\n\n\u6709\u6548\u9ad8\n\n\n\u4e0d\u80fd\n\n\nLOW\n\n\nInfinite\n\n\n1.6\u6beb\u79d2\n\n\nN/A\n\n\nPresent\n\n\nN/A\n\n\n\n\n\n\n\n\n\u793a\u8303\n\n\n\u4f7f\u7528 Arduino\n\n\n\n\u6b64\u6f14\u793a\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u6253\u5f00/\u5173\u95edLED\u3002\n\n\n\u6f14\u793a\u4ee3\u7801:\n\n\nconst int TouchPin=9;\nconst int ledPin=12;\n\nvoid setup() {\n    pinMode(TouchPin, INPUT);\n    pinMode(ledPin,OUTPUT);\n}\n\nvoid loop() {\n    int sensorValue = digitalRead(TouchPin);\n    if(sensorValue==1)\n    {\n        digitalWrite(ledPin,HIGH);\n    }\n    else\n    {\n        digitalWrite(ledPin,LOW);\n    }\n}\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n\n\n\u4f60\u5e94\u8be5\u6709\u4e00\u4e2a raspberry pi \u548c\u4e00\u4e2a grovepi \u6216 grovepi +\u3002\n\n\n\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n- \u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165 Grovepi \u63d2\u5ea7 \nD4\n \u7aef\u53e3\u3002\n\n\n\n\n\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a\n\n\n\n\n    cd yourpath/GrovePi/Software/Python/\n\n\n\n\n\n\n\u627e\u5230\u8fd9\u884c\u4ee3\u7801\n\n\n\n\n    nano grove_touch_sensor.py   # \nCtrl+x\n to exit #\n\n\n\n    import time\n    import grovepi\n\n    # Connect the Grove Touch Sensor to digital port D4\n    # SIG,NC,VCC,GND\n    touch_sensor = 4\n\n    grovepi.pinMode(touch_sensor,\nINPUT\n)\n\n    while True:\n        try:\n            print grovepi.digitalRead(touch_sensor)\n            time.sleep(.5)\n\n        except IOError:\n            print \nError\n\n\n\n\n5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\n\n\n    sudo python grove_touch_sensor.py\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\nEagle Files\n\n\nTTP223pdf", 
            "title": "Grove-Touch_Sensor"
        }, 
        {
            "location": "/Grove-Touch_Sensor/#_1", 
            "text": "\u5de5\u4f5c\u7535\u538b\uff1a2.0 - 5.5V  \u5de5\u4f5c\u7535\u6d41\uff08Vcc = 3V\uff09\uff1a1.5 - 3.0\u03bcA  \u5de5\u4f5c\u7535\u6d41\uff08VDD = 3V\uff09\uff1a3.5 - 7.0\u03bcA  \u8f93\u51fa\u54cd\u5e94\u65f6\u95f4\uff1a60 - 220mS  \u4f7f\u7528\u7684\u82af\u7247\uff1aTTP223-BA6    Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Touch_Sensor/#platforms-supported", 
            "text": "\u9009\u9879\u529f\u80fd     AHLB  TOG  LPMB  MOTB  SLRFTB  RST  Q  OPDO      \u8f93\u51fa\u6709\u6548\u9ad8/\u4f4e  \u5207\u6362\u6a21\u5f0f  \u7535\u6e90\u6a21\u5f0f  Max. On Time  \u53d6\u6837\u65f6\u95f4\u957f\u77ed  \u590d\u4f4d\u5f15\u811a  CMOS\u8f93\u51fa  Open Drain\u6a21\u5f0f    V  V  0  1  1  X  V  X    \u6709\u6548\u9ad8  \u4e0d\u80fd  LOW  Infinite  1.6\u6beb\u79d2  N/A  Present  N/A", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-Touch_Sensor/#_2", 
            "text": "", 
            "title": "\u793a\u8303"
        }, 
        {
            "location": "/Grove-Touch_Sensor/#arduino", 
            "text": "\u6b64\u6f14\u793a\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u6253\u5f00/\u5173\u95edLED\u3002  \u6f14\u793a\u4ee3\u7801:  const int TouchPin=9;\nconst int ledPin=12;\n\nvoid setup() {\n    pinMode(TouchPin, INPUT);\n    pinMode(ledPin,OUTPUT);\n}\n\nvoid loop() {\n    int sensorValue = digitalRead(TouchPin);\n    if(sensorValue==1)\n    {\n        digitalWrite(ledPin,HIGH);\n    }\n    else\n    {\n        digitalWrite(ledPin,LOW);\n    }\n}", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Touch_Sensor/#raspberry-pi", 
            "text": "\u4f60\u5e94\u8be5\u6709\u4e00\u4e2a raspberry pi \u548c\u4e00\u4e2a grovepi \u6216 grovepi +\u3002  \u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa  \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002  \u786c\u4ef6\u8fde\u63a5   - \u4f7f\u7528grove\u8fde\u63a5\u7ebf\u5c06\u4f20\u611f\u5668\u63d2\u5165 Grovepi \u63d2\u5ea7  D4  \u7aef\u53e3\u3002   \u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a       cd yourpath/GrovePi/Software/Python/   \u627e\u5230\u8fd9\u884c\u4ee3\u7801       nano grove_touch_sensor.py   #  Ctrl+x  to exit #      import time\n    import grovepi\n\n    # Connect the Grove Touch Sensor to digital port D4\n    # SIG,NC,VCC,GND\n    touch_sensor = 4\n\n    grovepi.pinMode(touch_sensor, INPUT )\n\n    while True:\n        try:\n            print grovepi.digitalRead(touch_sensor)\n            time.sleep(.5)\n\n        except IOError:\n            print  Error   5.\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b      sudo python grove_touch_sensor.py", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-Touch_Sensor/#_3", 
            "text": "Eagle Files  TTP223pdf", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Actuator/", 
            "text": "Grove - \u6267\u884c\u5668\u5305\u62ec\u7535\u673a\u9a71\u52a8\u5668\uff0cLED\u663e\u793a\u5c4f\uff0c\u7ee7\u7535\u5668\uff0c\u626c\u58f0\u5668\uff0c\u8702\u9e23\u5668\u7b49\u6a21\u5757\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u6267\u884c\u5668\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nGrove-MP3_v2.0\n\n\nGrove-Relay\n\n\nGrove-Vibration_Motor", 
            "title": "Actuator"
        }, 
        {
            "location": "/Actuator/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u6267\u884c\u5668\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Grove-MP3_v2.0  Grove-Relay  Grove-Vibration_Motor", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Grove-MP3_v2.0/", 
            "text": "\u7b80\u4ecb\n\n\nGrove \u2013 MP3 V2.0\u662f\u4e00\u6b3e\u5916\u5f62\u5c0f\u5de7\uff0c\u8bbe\u8ba1\u7d27\u51d1\u7684\u97f3\u9891\u6a21\u5757\u3002\u672c\u6a21\u5757\u652f\u6301\u591a\u79cd\u683c\u5f0f\u7684\u64ad\u653e\uff0cMP3, WAV\u4ee5\u53caWMV\u706f\u3002\u5e76\u652f\u6301\u591a\u79cd\u64ad\u653e\u6a21\u5f0f\uff0c\u968f\u673a\u64ad\u653e\uff0c\u5faa\u73af\u64ad\u653e\u4ee5\u53ca\u5355\u66f2\u5faa\u73af\u7b49\u3002Grove \u2013 MP3 V2\u91c7\u7528\u4e32\u53e3\u901a\u4fe1\u534f\u8bae\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8e\u4efb\u4f55\u5177\u6709\u4e32\u53e3\u7684\u4e3b\u63a7\u677f\uff0c\u4f8b\u5982Arduino, Raspberry, LaunchPad\u7b49\u4e3b\u6d41\u7684\u5f00\u6e90\u786c\u4ef6\u5f00\u53d1\u677f\u3002\u53e6\u5916\uff0c\u6a21\u5757\u4e0a\u96c6\u6210\u6709micro-SD\u5361\u69fd\u4ee5\u53ca3.5mm\u97f3\u9891\u63d2\u5b54\uff0c\u4e3a\u4f60\u97f3\u9891\u65b9\u9762\u7684\u5e94\u7528\u5e26\u6765\u6781\u5927\u7684\u4fbf\u5229\u3002\n\n\n\n\n\u7248\u672c\u66f4\u65b0\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7248\u672c\n\n\n\u53d1\u5e03\u65f6\u95f4\n\n\n\u5f53\u524d\u652f\u6301\u72b6\u6001\n\n\n\n\n\n\n\n\n\n\nVersion 1.0\n\n\n2013 04 28\n\n\n\u652f\u6301\n\n\n\n\n\n\nVersion 2.0\n\n\n2015 11 15\n\n\n\u652f\u6301\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\u5185\u7f6e\u57fa\u672c\u7684\u97f3\u9891\u64cd\u4f5c\n\n\n\u534a\u8f7dmicro-SD\u5361\u69fd\u4ee5\u53ca3.5mm\u97f3\u9891\u63d2\u5b54\n\n\n\u591a\u79cd\u91c7\u6837\u7387\u652f\u6301\uff0c8/11.025/12/16/22.05/24/32/44.1/48K\n\n\n24\u4f4dDAC\u9ad8\u7cbe\u5ea6\u8f93\u51fa\uff0c\u6700\u592790dB\u52a8\u6001\u8f93\u51fa@85dB SNR\n\n\n\u652f\u6301\u591a\u79cd\u97f3\u9891\u683c\u5f0f\uff0cMP3, WAV, WMV\u706f\n\n\n10\u79cd\u5747\u8861\u6a21\u5f0f\n\n\n\n\n\n\nNote\n\n\n\n\n\u66f4\u591a\u5173\u4e8eGrove\u63a5\u53e3\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb\u4e0b\u9762\u94fe\u63a5 \nGrove System\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u9002\u5408\u5404\u79cd\u97f3\u9891\u5e94\u7528\u7684\u4e2d\u95f4\u89e3\u51b3\u65b9\u6848.\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u6570\u503c\n\n\n\n\n\n\n\n\n\n\n\u8f93\u5165\n\n\n5 V (DC)\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41 (\u65e0\u4fe1\u53f7\u8f93\u51fa\u65f6)\n\n\n 15 mA\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n 40 mA\n\n\n\n\n\n\n\u4e3b\u63a7\u82af\u7247\n\n\nKT403A \n(datasheet)\n\n\n\n\n\n\n\u82af\u7247\u8f93\u51fa\u7535\u538b\n\n\n3.3 V\n\n\n\n\n\n\n\u82af\u7247\u8f93\u51fa\u7535\u6d41\n\n\n100mA(at Max.)\n\n\n\n\n\n\n\u652f\u6301\u97f3\u9891\u683c\u5f0f\n\n\nMP3, WAV, WMA\n\n\n\n\n\n\n\u652f\u6301SD\u5361\u6700\u5927\u5bb9\u91cf\n\n\n32 GB\n\n\n\n\n\n\n\u91c7\u6837\u9891\u7387\n\n\n8 / 11.025 / 12 / 16 / 22.05 / 24 / 32 / 44.1 / 48(KHz)\n\n\n\n\n\n\n\n\n\u652f\u6301\u5e73\u53f0\n\n\nArduino, Raspberrypi, bbg, linkitone\n\n\n\u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\n\n\n\n\u7ec4\u4ef6\u540d\u79f0\n\n\n\u6570\u91cf\n\n\n\n\n\n\n\n\n\n\nGrove - MP3 v2.0\n\n\n1PC\n\n\n\n\n\n\nGrove - Universal Cable\n\n\n1PC\n\n\n\n\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\u9700\u8981\u7684\u7d20\u6750\n\n\n\n\nSeeeduino \u00d7 1\n\n\nGrove - Base Shield v2 \u00d7 1\n\n\nGrove - MP3 v2.0 \u00d7 1\n\n\n\u88c5\u6709\u97f3\u9891\u6587\u4ef6\u7684SD\u5361 \u00d7 1\n\n\nUSB \u9002\u914d\u7ebf (type A to micro type-B) \u00d7 1\n\n\n\u5e26\u67093.5mm\u63a5\u53e3\u7684\u8033\u673a\u6216\u97f3\u7bb1 \u00d7 1\n\n\n\n\n\u51c6\u5907\u5de5\u4f5c\n\n\n\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u70b9\u51fb\u4e0b\u9762\u7684\u6307\u5357\u6765\u642d\u5efa\u597d\u60a8\u7684IDE\u7f16\u8bd1\u5de5\u5177:.\n\n\nWindows\u7cfb\u7edfIDE\u6307\u5357\n\n\nMac OS X IDE\u6307\u5357\n\n\n\n\n\u63d0\u793a\n\n\u6211\u4eec\u9009\u53d6\u7684Seeeduino\u4f5c\u4e3a\u6b64\u5b9e\u4f8b\u7684\u5f00\u53d1\u677f\uff0c\u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u9009\u7528Arduino\u7684\u5f00\u53d1\u677f\u6765\u5b9e\u73b0\u6240\u6709\u529f\u80fd\uff0c\u4ed6\u4eec\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002\n\n\n\n\n\u786c\u4ef6\u8fde\u63a5\u56fe\n\n\n\n\n\u8f6f\u4ef6\n\n\n\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002\n\n\n\n\nTip\n\n\n\n\n\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u3002\n\n\n\n\n\n\n\u70e7\u5f55\u4f8b\u7a0b\n\n\n\n\n\u5230 \n\u8fd9\u91cc\n \u4e0b\u8f7d\u9a71\u52a8\u5e93\u3002\n\n\n\u628a\u4e0b\u8f7d\u7684\u9a71\u52a8\u5e93\u653e\u5230Arduino IDE\u7684 \nlibraries\n \u6587\u4ef6\u5939\n\n\n\u6253\u5f00MP3_Play_Test\u7684example\uff0c\u628a\u4ee3\u7801\u70e7\u5f55\u5230Seeeduino\n\n\n\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff08Ctrl + Shift + M\uff09\uff0c\u53d1\u9001\u547d\u4ee4\u64ad\u653e\u97f3\u4e50\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n[\u786c\u4ef6\u539f\u7406\u56fe]\n Hardware \nSchematic files\n\n\n[\u5e93]\nLibraries\n on Github.\n\n\n[\u6570\u636e\u624b\u518c]\n KT403A \nDatasheet\n (part)", 
            "title": "Grove-MP3_v2.0"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_1", 
            "text": "Grove \u2013 MP3 V2.0\u662f\u4e00\u6b3e\u5916\u5f62\u5c0f\u5de7\uff0c\u8bbe\u8ba1\u7d27\u51d1\u7684\u97f3\u9891\u6a21\u5757\u3002\u672c\u6a21\u5757\u652f\u6301\u591a\u79cd\u683c\u5f0f\u7684\u64ad\u653e\uff0cMP3, WAV\u4ee5\u53caWMV\u706f\u3002\u5e76\u652f\u6301\u591a\u79cd\u64ad\u653e\u6a21\u5f0f\uff0c\u968f\u673a\u64ad\u653e\uff0c\u5faa\u73af\u64ad\u653e\u4ee5\u53ca\u5355\u66f2\u5faa\u73af\u7b49\u3002Grove \u2013 MP3 V2\u91c7\u7528\u4e32\u53e3\u901a\u4fe1\u534f\u8bae\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8e\u4efb\u4f55\u5177\u6709\u4e32\u53e3\u7684\u4e3b\u63a7\u677f\uff0c\u4f8b\u5982Arduino, Raspberry, LaunchPad\u7b49\u4e3b\u6d41\u7684\u5f00\u6e90\u786c\u4ef6\u5f00\u53d1\u677f\u3002\u53e6\u5916\uff0c\u6a21\u5757\u4e0a\u96c6\u6210\u6709micro-SD\u5361\u69fd\u4ee5\u53ca3.5mm\u97f3\u9891\u63d2\u5b54\uff0c\u4e3a\u4f60\u97f3\u9891\u65b9\u9762\u7684\u5e94\u7528\u5e26\u6765\u6781\u5927\u7684\u4fbf\u5229\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_2", 
            "text": "\u4ea7\u54c1\u7248\u672c  \u53d1\u5e03\u65f6\u95f4  \u5f53\u524d\u652f\u6301\u72b6\u6001      Version 1.0  2013 04 28  \u652f\u6301    Version 2.0  2015 11 15  \u652f\u6301", 
            "title": "\u7248\u672c\u66f4\u65b0"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_3", 
            "text": "\u5185\u7f6e\u57fa\u672c\u7684\u97f3\u9891\u64cd\u4f5c  \u534a\u8f7dmicro-SD\u5361\u69fd\u4ee5\u53ca3.5mm\u97f3\u9891\u63d2\u5b54  \u591a\u79cd\u91c7\u6837\u7387\u652f\u6301\uff0c8/11.025/12/16/22.05/24/32/44.1/48K  24\u4f4dDAC\u9ad8\u7cbe\u5ea6\u8f93\u51fa\uff0c\u6700\u592790dB\u52a8\u6001\u8f93\u51fa@85dB SNR  \u652f\u6301\u591a\u79cd\u97f3\u9891\u683c\u5f0f\uff0cMP3, WAV, WMV\u706f  10\u79cd\u5747\u8861\u6a21\u5f0f    Note   \u66f4\u591a\u5173\u4e8eGrove\u63a5\u53e3\u7684\u4fe1\u606f\u8bf7\u70b9\u51fb\u4e0b\u9762\u94fe\u63a5  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_4", 
            "text": "\u9002\u5408\u5404\u79cd\u97f3\u9891\u5e94\u7528\u7684\u4e2d\u95f4\u89e3\u51b3\u65b9\u6848.", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_5", 
            "text": "\u53c2\u6570  \u6570\u503c      \u8f93\u5165  5 V (DC)    \u5de5\u4f5c\u7535\u6d41 (\u65e0\u4fe1\u53f7\u8f93\u51fa\u65f6)   15 mA    \u5de5\u4f5c\u7535\u6d41   40 mA    \u4e3b\u63a7\u82af\u7247  KT403A  (datasheet)    \u82af\u7247\u8f93\u51fa\u7535\u538b  3.3 V    \u82af\u7247\u8f93\u51fa\u7535\u6d41  100mA(at Max.)    \u652f\u6301\u97f3\u9891\u683c\u5f0f  MP3, WAV, WMA    \u652f\u6301SD\u5361\u6700\u5927\u5bb9\u91cf  32 GB    \u91c7\u6837\u9891\u7387  8 / 11.025 / 12 / 16 / 22.05 / 24 / 32 / 44.1 / 48(KHz)", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_6", 
            "text": "Arduino, Raspberrypi, bbg, linkitone", 
            "title": "\u652f\u6301\u5e73\u53f0"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_7", 
            "text": "", 
            "title": "\u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_8", 
            "text": "\u7ec4\u4ef6\u540d\u79f0  \u6570\u91cf      Grove - MP3 v2.0  1PC    Grove - Universal Cable  1PC", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_9", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_10", 
            "text": "Seeeduino \u00d7 1  Grove - Base Shield v2 \u00d7 1  Grove - MP3 v2.0 \u00d7 1  \u88c5\u6709\u97f3\u9891\u6587\u4ef6\u7684SD\u5361 \u00d7 1  USB \u9002\u914d\u7ebf (type A to micro type-B) \u00d7 1  \u5e26\u67093.5mm\u63a5\u53e3\u7684\u8033\u673a\u6216\u97f3\u7bb1 \u00d7 1", 
            "title": "\u9700\u8981\u7684\u7d20\u6750"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_11", 
            "text": "\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u70b9\u51fb\u4e0b\u9762\u7684\u6307\u5357\u6765\u642d\u5efa\u597d\u60a8\u7684IDE\u7f16\u8bd1\u5de5\u5177:.  Windows\u7cfb\u7edfIDE\u6307\u5357  Mac OS X IDE\u6307\u5357   \u63d0\u793a \n\u6211\u4eec\u9009\u53d6\u7684Seeeduino\u4f5c\u4e3a\u6b64\u5b9e\u4f8b\u7684\u5f00\u53d1\u677f\uff0c\u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u9009\u7528Arduino\u7684\u5f00\u53d1\u677f\u6765\u5b9e\u73b0\u6240\u6709\u529f\u80fd\uff0c\u4ed6\u4eec\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002", 
            "title": "\u51c6\u5907\u5de5\u4f5c"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_12", 
            "text": "", 
            "title": "\u786c\u4ef6\u8fde\u63a5\u56fe"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_13", 
            "text": "\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5Arduino\u5e93\u6587\u4ef6\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc  \u67e5\u770b\u5e93\u6587\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5\u3002   Tip   \u5982\u679c\u60a8\u4e0d\u6e05\u695a\u600e\u4e48\u4e0b\u8f7d\u4ee3\u7801\u5230\u60a8\u7684\u677f\u5b50\u91cc\uff0c\u8bf7\u70b9\u51fb \u8fd9\u91cc \u3002", 
            "title": "\u8f6f\u4ef6"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_14", 
            "text": "\u5230  \u8fd9\u91cc  \u4e0b\u8f7d\u9a71\u52a8\u5e93\u3002  \u628a\u4e0b\u8f7d\u7684\u9a71\u52a8\u5e93\u653e\u5230Arduino IDE\u7684  libraries  \u6587\u4ef6\u5939  \u6253\u5f00MP3_Play_Test\u7684example\uff0c\u628a\u4ee3\u7801\u70e7\u5f55\u5230Seeeduino  \u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff08Ctrl + Shift + M\uff09\uff0c\u53d1\u9001\u547d\u4ee4\u64ad\u653e\u97f3\u4e50", 
            "title": "\u70e7\u5f55\u4f8b\u7a0b"
        }, 
        {
            "location": "/Grove-MP3_v2.0/#_15", 
            "text": "[\u786c\u4ef6\u539f\u7406\u56fe]  Hardware  Schematic files  [\u5e93] Libraries  on Github.  [\u6570\u636e\u624b\u518c]  KT403A  Datasheet  (part)", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/3W_Solar_Panel_138x160/", 
            "text": "\u8fd9\u662f\u4e00\u4e2a\u5b9a\u5236\u7684\u592a\u9633\u80fd\u7535\u6c60\u677f\uff0c\u4e0e\u6211\u4eec\u8bb8\u591a\u5f00\u53d1\u677f\u76f4\u63a5\u914d\u5408\u4f7f\u7528\uff0c\u6548\u7387\u9ad8\u8fbe16\uff05\u3002 \u6bcf\u4e2a\u5355\u5143\u6709\u900f\u660e\u7684\u73af\u6c27\u6d82\u5c42\uff0c\u5e76\u4e14\u5728\u80cc\u9762\u6709\u786c\u8d28\u7684\u677f\u6599\u3002 \u8f93\u51fa\u7684\u7ebf\u8def\u6709\u7740\u5b8c\u5584\u7684\u5bc6\u5c01\u4fdd\u62a4\uff01\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\nPCB\u5c3a\u5bf8: 138*160*1.5 mm\n\n\n\u5355\u7247\u5c3a\u5bf8 : 10.93*156 mm\n\n\n\u5de5\u4f5c\u6548\u7387 : 16%\n\n\n\u5de5\u4f5c\u7535\u538b:5.5V;\n\n\n\u5de5\u4f5c\u7535\u6d41:540mA\n\n\n\u5de5\u4f5c\u529f\u7387:3W\n\n\n\u5de5\u4f5c\u6e29\u5ea6:-20\u00b0~60\u00b0\n\n\n\u8fde\u63a5\u63a5\u53e3: 2.0mm JST\n\n\n\u7c7b\u578b\uff1a156\u4e24\u884c\n\n\nPCB \u6750\u6599 :\u5168\u73bb\u7483\u7ea4\u7ef4\n\n\n\u662f\u5426 PCB \u4e1d\u5370 : \u6709\n\n\n\u540d\u5b57: PET\u5c42\u538b\uff08138 * 160\uff09\n\n\n\u6574\u4f53\u5e03\u5c40:\u4f7f\u75281*11(\u7cfb\u5217)\u7684\u9ed1\u8272\u8d34\u6761\u65e0\u95f4\u8ddd\u7684\u8fdb\u884c\u6392\u5217\n\n\n\u8d28\u91cf\u8981\u6c42 :\n\n\n\u5e73\u9762\u5ea6\u5c0f\u4e8e0.1mm\n\n\n\u4fdd\u6301\u5e72\u51c0\uff0c\u4e0d\u5141\u8bb8\u6709\u5212\u75d5\n\n\n\u4e0d\u5141\u8bb8\u6709\u8131\u6f06\u73b0\u8c61\uff0c\u4e5f\u4e0d\u5141\u8bb8\u51fa\u73b0\u5f00\u5b54\u504f\u5dee\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\u516c\u5dee\u6b63\u8d1f0.1mm\n\n\n\n\n\u5916\u5f62\u5c3a\u5bf8", 
            "title": "3W_Solar_Panel_138x160"
        }, 
        {
            "location": "/3W_Solar_Panel_138x160/#_1", 
            "text": "PCB\u5c3a\u5bf8: 138*160*1.5 mm  \u5355\u7247\u5c3a\u5bf8 : 10.93*156 mm  \u5de5\u4f5c\u6548\u7387 : 16%  \u5de5\u4f5c\u7535\u538b:5.5V;  \u5de5\u4f5c\u7535\u6d41:540mA  \u5de5\u4f5c\u529f\u7387:3W  \u5de5\u4f5c\u6e29\u5ea6:-20\u00b0~60\u00b0  \u8fde\u63a5\u63a5\u53e3: 2.0mm JST  \u7c7b\u578b\uff1a156\u4e24\u884c  PCB \u6750\u6599 :\u5168\u73bb\u7483\u7ea4\u7ef4  \u662f\u5426 PCB \u4e1d\u5370 : \u6709  \u540d\u5b57: PET\u5c42\u538b\uff08138 * 160\uff09  \u6574\u4f53\u5e03\u5c40:\u4f7f\u75281*11(\u7cfb\u5217)\u7684\u9ed1\u8272\u8d34\u6761\u65e0\u95f4\u8ddd\u7684\u8fdb\u884c\u6392\u5217  \u8d28\u91cf\u8981\u6c42 :  \u5e73\u9762\u5ea6\u5c0f\u4e8e0.1mm  \u4fdd\u6301\u5e72\u51c0\uff0c\u4e0d\u5141\u8bb8\u6709\u5212\u75d5  \u4e0d\u5141\u8bb8\u6709\u8131\u6f06\u73b0\u8c61\uff0c\u4e5f\u4e0d\u5141\u8bb8\u51fa\u73b0\u5f00\u5b54\u504f\u5dee      Note  \u516c\u5dee\u6b63\u8d1f0.1mm", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/3W_Solar_Panel_138x160/#_2", 
            "text": "", 
            "title": "\u5916\u5f62\u5c3a\u5bf8"
        }, 
        {
            "location": "/Grove-Relay/", 
            "text": "Grove-Relay\u6a21\u5757\u662f\u4e00\u4e2a\u6570\u5b57\u5e38\u5f00\u5f00\u5173\u3002 \u901a\u8fc7\u5b83\u4f60\u53ef\u4ee5\u4f7f\u7528\u8f83\u4f4e\u7684\u7535\u538b\u8fbe\u5230\u63a7\u5236\u9ad8\u7535\u538b\u7684\u76ee\u7684\uff0c\u5982\u63a7\u5236\u5668\u4e0a\u7684 5V \u7535\u538b\u5c31\u53ef\u4ee5\u3002 \u677f\u4e0a\u6709\u4e00\u4e2a LED\u6307\u793a\u706f\uff0c\u5f53\u53d7\u63a7\u7aef\u95ed\u5408\u65f6\uff0c\u5b83\u5c06\u4eae\u8d77\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\nV1.1\n\n\nV1.2\n\n\n\n\n\n\n\n\n\n\n\u4ea7\u54c1\u53d1\u5e03\u65e5\u671f\n\n\n2013\u5e741\u670827\u65e5\n\n\n2014\u5e746\u67089\u65e5\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n5V\n\n\n3.3V~5V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n60mA\n\n\n100mA\n\n\n\n\n\n\n\u4f7f\u7528\u5bff\u547d\n\n\n100,000\u5468\u671f\n\n\n100,000\u5468\u671f\n\n\n\n\n\n\n\u6700\u5927\u5f00\u5173\u7535\u538b\n\n\n250VAC/30VDC\n\n\n250VAC/30VDC\n\n\n\n\n\n\n\u6700\u5927\u5f00\u5173\u7535\u6d41\n\n\n5A\n\n\n5A\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \nGrove System\n\n\n\n\nPlatforms Supported\n\n\n\n\n\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\u4f7f\u7528 Arduino\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2a Grove - Relay \u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\nSeeeduino V4\n\n\nGrove - Relay\n\n\nGrove -  Button\n\n\nBase Shield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u5c06 Grove-Relay \u6a21\u5757\u8fde\u63a5\u5230 Grove-Base Shield \u7684 \nD4\n \u7aef\u53e3\u3002\n\n\n\u5c06 Grove-Button \u6a21\u5757\u8fde\u63a5\u5230 Grove-Base Shield \u7684 \nD2\n \u548c \nD3\n \u7aef\u53e3\u3002\n\n\n\u5c06 Grove-Base Shield \u63d2\u5165 Arduino\u3002\n\n\n\u901a\u8fc7 USB\u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002\n\n\n\n\n\n\n\nNote\n\n\n\u5982\u679c\u6211\u4eec\u6ca1\u6709base shield\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 Grove-Relay \u548c Grove-Button \u8fde\u63a5\u5230 Arduino \u677f\u4e0a\u3002 \u8bf7\u6309\u7167\u4e0b\u9762\u7684\u8fde\u63a5\u3002\n\n\n\n\n\n\n\n\n\n\nGrove-Relay\n\n\nArduino\n\n\n\n\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nVCC\n\n\n5V\n\n\n\n\n\n\nSIG\n\n\nD4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove-Button#1\n\n\nArduino\n\n\n\n\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nVCC\n\n\n5V\n\n\n\n\n\n\nSIG\n\n\nD2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrove-Button#2\n\n\nArduino\n\n\n\n\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nVCC\n\n\n5V\n\n\n\n\n\n\nSIG\n\n\nD3\n\n\n\n\n\n\n\n\nSoftware\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Grove - Button \u63a7\u5236 Grove - Relay\u3002 \u5f53\u6309\u4e0b\u4e00\u4e2a\u6309\u94ae\u65f6\uff0c\u7ee7\u7535\u5668\u5c06\u5173\u95ed\u3002 \u5f53\u5176\u4ed6\u6309\u94ae\u88ab\u6309\u4e0b\u65f6\uff0c\u7ee7\u7535\u5668\u5c06\u6253\u5f00\u3002\n\n\n// Relay Control\n\nvoid setup()\n{\n  pinMode(2, INPUT);\n  pinMode(3, INPUT);\n  pinMode(4, OUTPUT);\n}\n\nvoid loop()\n{\n  if (digitalRead(2)==HIGH)\n  {\n    digitalWrite(4, HIGH);\n    delay(100);\n  }\n  if (digitalRead(3)==HIGH)\n  {\n    digitalWrite(4, LOW);\n  }\n}\n\n\n\n\n\u4f7f\u7528 TI LaunchPad\n\n\n\u63a7\u5236\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\uff08\u4f7f\u7528\u7ee7\u7535\u5668\uff09\n\n\n\n\n\u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528 Grove-relay \u6a21\u5757\u6765\u63a7\u5236\u8f83\u5927\u7684\u8d1f\u8f7d\uff0c\u4f8b\u5982\u53f0\u706f\u3002 \u4f7f\u7528 3V\u7535\u538b\u4fe1\u53f7\u8ba9\u7ee7\u7535\u5668\u63a5\u901a\uff0c\u5141\u8bb8\u7535\u6d41\u6d41\u8fc7\u6240\u8fde\u63a5\u7684\u8bbe\u5907\u3002\n\n\n/*\nRelay\nThe basic Energia example.\nThis example code is in the public domain.\n*/\n\n#define RELAY_PIN 39\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n         pinMode(RELAY_PIN, OUTPUT); // initialize the digital pin as an output.\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n         digitalWrite(RELAY_PIN, HIGH); // turn the relay on (HIGH is the voltage level)\n         delay(1000);   // wait for a second\n         digitalWrite(RELAY_PIN, LOW);   // turn the relay o by making the voltage LOW\n         delay(1000);   // wait for a second\n}\n\n\n\n\n\u4f7f\u7528 Raspberry Pi\n\n\n\u786c\u4ef6\u8fde\u63a5\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\n\n\n\n\n\nRaspberry pi\n\n\nGrove - Relay\n\n\nGrove - Button\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\u9a6c\u4e0a\u8d2d\u4e70\n\n\n\n\n\n\n\n\n\n\n\u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa \n\u8bf4\u660e\n \u5b8c\u6210\u914d\u7f6e\u3002\n\n\n\u5c06 Grove-Button \u63d2\u5165\u5230 Grovepi + \u7684 \nD3\n \u7aef\u53e3\u3002\n\n\n\u5c06 Grove-Relay \u63d2\u5165 Grovepi + \u7684 \nD4\n \u7aef\u53e3\u3002\n\n\n\n\n\n\u7a0b\u5e8f\n\n\n\u6b64\u6f14\u793a\u5411\u60a8\u5c55\u793a\u5982\u4f55\u901a\u8fc7 Raspberry Pi \u4f7f\u7528 Grove - Relay\u3002\n\n# Raspberry Pi + Grove Switch + Grove Relay\n\nimport time\nimport grovepi\n# Connect the Grove Switch to digital port D3\n# SIG,NC,VCC,GND\n\nswitch = 3\n# Connect the Grove Relay to digital port D4\n# SIG,NC,VCC,GND\n\nrelay = 4\ngrovepi.pinMode(switch,\nINPUT\n)\ngrovepi.pinMode(relay,\nOUTPUT\n)\nwhile True:\n    try:\n        if grovepi.digitalRead(switch):\n            grovepi.digitalWrite(relay,1)\n        else:\n            grovepi.digitalWrite(relay,0)\n            time.sleep(.05)\n    except KeyboardInterrupt:\n        grovepi.digitalWrite(relay,0)\n        break\n    except IOError:\n        print \nError\n\n\n\n\n\n\n\u627e\u5230\u6587\u4ef6\u7684\u8def\u5f84\uff08\u6839\u636e\u4f60\u81ea\u5df1\u7684\u8def\u5f84\u6765\u5b9a\uff09\n\ncd GrovePi/Software/Python/\n\n\n\n\u8fd0\u884c\u8fd9\u4e2a\u4ee3\u7801\n\nsudo python grove_switch_relay.py\n\n\n\n\n\n\u8d44\u6e90\u4e0b\u8f7d\n\n\n\n\n\n\n[Eagle]\n \nGrove - Relay Schematic and PCB in Eagle format\n\n\n[PDF]\n \nGrove - Relay PCB in PDF format\n\n\n[PDF]\n \nGrove - Relay Schematic in PDF format\n\n\n[Datasheet]\n \nHLS8-T73 Series Relay Datasheet", 
            "title": "Grove-Relay"
        }, 
        {
            "location": "/Grove-Relay/#_1", 
            "text": "\u53c2\u6570  V1.1  V1.2      \u4ea7\u54c1\u53d1\u5e03\u65e5\u671f  2013\u5e741\u670827\u65e5  2014\u5e746\u67089\u65e5    \u5de5\u4f5c\u7535\u538b  5V  3.3V~5V    \u5de5\u4f5c\u7535\u6d41  60mA  100mA    \u4f7f\u7528\u5bff\u547d  100,000\u5468\u671f  100,000\u5468\u671f    \u6700\u5927\u5f00\u5173\u7535\u538b  250VAC/30VDC  250VAC/30VDC    \u6700\u5927\u5f00\u5173\u7535\u6d41  5A  5A      Tip  \u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003  Grove System", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Grove-Relay/#platforms-supported", 
            "text": "", 
            "title": "Platforms Supported"
        }, 
        {
            "location": "/Grove-Relay/#_2", 
            "text": "", 
            "title": "\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Grove-Relay/#arduino", 
            "text": "", 
            "title": "\u4f7f\u7528 Arduino"
        }, 
        {
            "location": "/Grove-Relay/#_3", 
            "text": "\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5411\u60a8\u5c55\u793a\u8fd9\u4e2a Grove - Relay \u7684\u5de5\u4f5c\u539f\u7406\u3002 \u9996\u5148\uff0c\u60a8\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a     Seeeduino V4  Grove - Relay  Grove -  Button  Base Shield            \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u5c06 Grove-Relay \u6a21\u5757\u8fde\u63a5\u5230 Grove-Base Shield \u7684  D4  \u7aef\u53e3\u3002  \u5c06 Grove-Button \u6a21\u5757\u8fde\u63a5\u5230 Grove-Base Shield \u7684  D2  \u548c  D3  \u7aef\u53e3\u3002  \u5c06 Grove-Base Shield \u63d2\u5165 Arduino\u3002  \u901a\u8fc7 USB\u6570\u636e\u7ebf\u5c06 Arduino \u8fde\u63a5\u5230 PC\u3002    Note  \u5982\u679c\u6211\u4eec\u6ca1\u6709base shield\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 Grove-Relay \u548c Grove-Button \u8fde\u63a5\u5230 Arduino \u677f\u4e0a\u3002 \u8bf7\u6309\u7167\u4e0b\u9762\u7684\u8fde\u63a5\u3002      Grove-Relay  Arduino      GND  GND    VCC  5V    SIG  D4        Grove-Button#1  Arduino      GND  GND    VCC  5V    SIG  D2        Grove-Button#2  Arduino      GND  GND    VCC  5V    SIG  D3", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Relay/#software", 
            "text": "\u4e0b\u9762\u662f\u4e00\u4e2a\u6f14\u793a\uff0c\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Grove - Button \u63a7\u5236 Grove - Relay\u3002 \u5f53\u6309\u4e0b\u4e00\u4e2a\u6309\u94ae\u65f6\uff0c\u7ee7\u7535\u5668\u5c06\u5173\u95ed\u3002 \u5f53\u5176\u4ed6\u6309\u94ae\u88ab\u6309\u4e0b\u65f6\uff0c\u7ee7\u7535\u5668\u5c06\u6253\u5f00\u3002  // Relay Control\n\nvoid setup()\n{\n  pinMode(2, INPUT);\n  pinMode(3, INPUT);\n  pinMode(4, OUTPUT);\n}\n\nvoid loop()\n{\n  if (digitalRead(2)==HIGH)\n  {\n    digitalWrite(4, HIGH);\n    delay(100);\n  }\n  if (digitalRead(3)==HIGH)\n  {\n    digitalWrite(4, LOW);\n  }\n}", 
            "title": "Software"
        }, 
        {
            "location": "/Grove-Relay/#ti-launchpad", 
            "text": "\u63a7\u5236\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\uff08\u4f7f\u7528\u7ee7\u7535\u5668\uff09   \u6b64\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528 Grove-relay \u6a21\u5757\u6765\u63a7\u5236\u8f83\u5927\u7684\u8d1f\u8f7d\uff0c\u4f8b\u5982\u53f0\u706f\u3002 \u4f7f\u7528 3V\u7535\u538b\u4fe1\u53f7\u8ba9\u7ee7\u7535\u5668\u63a5\u901a\uff0c\u5141\u8bb8\u7535\u6d41\u6d41\u8fc7\u6240\u8fde\u63a5\u7684\u8bbe\u5907\u3002  /*\nRelay\nThe basic Energia example.\nThis example code is in the public domain.\n*/\n\n#define RELAY_PIN 39\n\n// the setup routine runs once when you press reset:\nvoid setup() {\n         pinMode(RELAY_PIN, OUTPUT); // initialize the digital pin as an output.\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n         digitalWrite(RELAY_PIN, HIGH); // turn the relay on (HIGH is the voltage level)\n         delay(1000);   // wait for a second\n         digitalWrite(RELAY_PIN, LOW);   // turn the relay o by making the voltage LOW\n         delay(1000);   // wait for a second\n}", 
            "title": "\u4f7f\u7528 TI LaunchPad"
        }, 
        {
            "location": "/Grove-Relay/#raspberry-pi", 
            "text": "", 
            "title": "\u4f7f\u7528 Raspberry Pi"
        }, 
        {
            "location": "/Grove-Relay/#_4", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u5185\u5bb9\uff1a      Raspberry pi  Grove - Relay  Grove - Button           \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70  \u9a6c\u4e0a\u8d2d\u4e70      \u60a8\u9700\u8981\u5b8c\u6210\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5426\u5219\u9075\u5faa  \u8bf4\u660e  \u5b8c\u6210\u914d\u7f6e\u3002  \u5c06 Grove-Button \u63d2\u5165\u5230 Grovepi + \u7684  D3  \u7aef\u53e3\u3002  \u5c06 Grove-Relay \u63d2\u5165 Grovepi + \u7684  D4  \u7aef\u53e3\u3002", 
            "title": "\u786c\u4ef6\u8fde\u63a5"
        }, 
        {
            "location": "/Grove-Relay/#_5", 
            "text": "\u6b64\u6f14\u793a\u5411\u60a8\u5c55\u793a\u5982\u4f55\u901a\u8fc7 Raspberry Pi \u4f7f\u7528 Grove - Relay\u3002 # Raspberry Pi + Grove Switch + Grove Relay\n\nimport time\nimport grovepi\n# Connect the Grove Switch to digital port D3\n# SIG,NC,VCC,GND\n\nswitch = 3\n# Connect the Grove Relay to digital port D4\n# SIG,NC,VCC,GND\n\nrelay = 4\ngrovepi.pinMode(switch, INPUT )\ngrovepi.pinMode(relay, OUTPUT )\nwhile True:\n    try:\n        if grovepi.digitalRead(switch):\n            grovepi.digitalWrite(relay,1)\n        else:\n            grovepi.digitalWrite(relay,0)\n            time.sleep(.05)\n    except KeyboardInterrupt:\n        grovepi.digitalWrite(relay,0)\n        break\n    except IOError:\n        print  Error    \u627e\u5230\u6587\u4ef6\u7684\u8def\u5f84\uff08\u6839\u636e\u4f60\u81ea\u5df1\u7684\u8def\u5f84\u6765\u5b9a\uff09 cd GrovePi/Software/Python/  \u8fd0\u884c\u8fd9\u4e2a\u4ee3\u7801 sudo python grove_switch_relay.py", 
            "title": "\u7a0b\u5e8f"
        }, 
        {
            "location": "/Grove-Relay/#_6", 
            "text": "[Eagle]   Grove - Relay Schematic and PCB in Eagle format  [PDF]   Grove - Relay PCB in PDF format  [PDF]   Grove - Relay Schematic in PDF format  [Datasheet]   HLS8-T73 Series Relay Datasheet", 
            "title": "\u8d44\u6e90\u4e0b\u8f7d"
        }, 
        {
            "location": "/Display/", 
            "text": "\u8fd9\u91cc\u5217\u51fa\u4e86\u4e0eLCD\u6216LED\u663e\u793a\u76f8\u5173\u7684Grove\u6a21\u5757\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u663e\u793a\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nGrove-4-Digit_Display\n\n\nGrove-LCD_RGB_Backlight", 
            "title": "Display"
        }, 
        {
            "location": "/Display/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u663e\u793a\u677f\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Grove-4-Digit_Display  Grove-LCD_RGB_Backlight", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Communication/", 
            "text": "\u8fd9\u91cc\u5217\u51fa\u4e86\u4e0e\u6709\u7ebf\u6216\u65e0\u7ebf\u901a\u4fe1\u76f8\u5173\u7684Grove\u6a21\u5757\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u901a\u4fe1\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "Communication"
        }, 
        {
            "location": "/Communication/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u901a\u4fe1\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/Others/", 
            "text": "\u5176\u4ed6\u672a\u5217\u51fa\u7684\u5176\u4ed6Grove\u6a21\u5757\u5217\u5728\u6b64\u5904\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove Other Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n* \nGrove-MOSFET", 
            "title": "Others"
        }, 
        {
            "location": "/Others/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove Other Board\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n*  Grove-MOSFET", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/IoT/", 
            "text": "\u7269\u8054\u7f51\uff08IoT\uff09\u4ea7\u54c1\u5217\u5728\u8fd9\u91cc\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684IoT\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "IoT"
        }, 
        {
            "location": "/IoT/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684IoT\u677f\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/MakerPro/", 
            "text": "\u6df1\u5733\u5c31\u50cfMaker\u7684\u5929\u5802\u3002 \u4f5c\u4e3a\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u6df1\u5733\u7684\u5f00\u6e90\u516c\u53f8\uff0cSeeedStudio\u5177\u6709\u4e3a\u4e16\u754c\u5404\u5730\u7684\u5236\u9020\u5546\u63d0\u4f9b\u6240\u6709\u6700\u4f73\u8d44\u6e90\u7684\u4f18\u52bf\u548c\u80fd\u529b\u3002 MakerPro\u4e0d\u662fSeeed\u5f00\u53d1\u4ea7\u54c1\u7684\u90e8\u5206\uff0c\u800c\u662f\u76f4\u63a5\u4ece\u6df1\u5733\u91c7\u8d2d\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684MakerPro\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\n2KM_Long_Range_RF_link_kits_w_encoder_and_decoder\n\n\n3W_Solar_Panel_138x160\n\n\nArduboy\n\n\nPiezo_Sensor-MiniSense_100", 
            "title": "MakerPro"
        }, 
        {
            "location": "/MakerPro/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684MakerPro\u677f\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   2KM_Long_Range_RF_link_kits_w_encoder_and_decoder  3W_Solar_Panel_138x160  Arduboy  Piezo_Sensor-MiniSense_100", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/", 
            "text": "1.  \u7b80\u4ecb\n\n\n\n\n\u8fd9\u662f\u4e00\u6b3e\u8d85\u957f\u8ddd\u79bb\u7684433MHz RF\u901a\u4fe1\u6a21\u5757\u5957\u4ef6\uff0c\u901a\u4fe1\u8ddd\u79bb\u53ef\u8fbe2\u516c\u91cc\uff0c\u5305\u542b\u53d1\u5c04\u548c\u63a5\u6536\u4e24\u4e2a\u6a21\u5757\u3002\u6a21\u5757\u5185\u7f6eVCO, PLL\u6280\u672f\uff0c\u9891\u7387\u7a33\u5b9a\u4ee5\u53ca\u6297\u5e72\u6270\u80fd\u529b\u5f3a\u3002\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u65e0\u7ebf\u6570\u636e\u4f20\u8f93\u548c\u8fdc\u7a0b\u63a7\u5236\u7b49\u5e94\u7528\u4f7f\u7528\u672c\u6a21\u5757\u3002\n\n\n\n\n2. \u89c4\u683c\u53c2\u6570\n\n\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u503c\n\n\n\n\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u538b\n\n\n\u63a5\u6536\u5668\uff1a3\n5V\uff0c\u53d1\u5c04\u56683\n9V\n\n\n\n\n\n\n\u5de5\u4f5c\u7535\u6d41\n\n\n\u22642.5mA\uff08@5V\uff09\n\n\n\n\n\n\n\u5de5\u4f5c\u539f\u7406\n\n\n\"\u8d85\u5916\u5dee\uff08VCO,PLL)\n\n\n\n\n\n\n\u8c03\u5236\u65b9\u5f0f\n\n\nOOK/ASK\n\n\n\n\n\n\n\u5de5\u4f5c\u9891\u6bb5\n\n\n433.92MHz\n\n\n\n\n\n\n\u5e26\u5bbd\n\n\n1.5MHz\n\n\n\n\n\n\n\u7075\u654f\u5ea6\n\n\n-105dBm(50\u03a9)\n\n\n\n\n\n\n\u89e3\u7801\u65b9\u5f0f\n\n\nPT2272\n\n\n\n\n\n\n\u5929\u7ebf\u957f\u5ea6\n\n\n18cm\n\n\n\n\n\n\n\u6700\u5927\u901a\u4fe1\u8ddd\u79bb\n\n\n2Km\n\n\n\n\n\n\n\n\n3. \u521b\u610f\u5e94\u7528\n\n\n\n\n\n\n\u65e0\u7ebf\u5f00\u5173\n\n\n\u8fdc\u7a0b\u4f20\u8f93\n\n\n\u65e0\u7ebf\u63a7\u5236\n\n\n\n\n4. \u786c\u4ef6\u6982\u8ff0\n\n\n\n\n\n\n\n\n5.\u5165\u95e8\u6307\u5bfc\n\n\n\n\n\n\n\u8bf7\u6839\u636e\u4ee5\u4e0b \n\u6d41\u7a0b\n \u6765\u642d\u5efa\u7cfb\u7edf.\n\n\n\u8fde\u63a5\u7535\u6c60, \u6309\u94ae\u548c\u53d1\u5c04\u677f.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\u8bf7\u4f7f\u75283-5V\u7535\u6e90\uff01 9V\u7535\u6e90\u4f1a\u635f\u574f\u63a5\u6536\u677f.\n\n\n\u8fde\u63a5\u7535\u6c60, LEDs and \u63a5\u6536\u677f.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\u4e0d\u8981\u628aRX \u6a21\u5757\u548c TX\u6a21\u5757\u9760\u7684\u5f88\u8fd1: \u8fd9\u5c06\u963b\u6b62\u4ed6\u4eec\u6b63\u5e38\u5de5\u4f5c\u3002 \u786e\u4fddRX\u6a21\u5757\u548cTX\u6a21\u5757\u8ddd\u79bb\u81f3\u5c111\u7c73\u3002\n\n\n\u5f53\u6211\u4eec\u6309\u53d1\u5c04\u673a\u4fa7\u7684\u6309\u94ae\u65f6\uff0c\u63a5\u6536\u673a\u4fa7\u7684\u76f8\u5173LED\u5c06\u88ab\u6253\u5f00\u3002\n\n\n\n\n\n\n6. \u8d44\u6e90\n\n\n\n\n\n\n\n\n[\u6d41\u7a0b]\n   \nTransmitter and receiver Setup Manual\n\n\n\n\n\n\n[\u6570\u636e\u624b\u518c]\n   \nDatasheet for PT2272 and PT2262", 
            "title": "2KM_Long_Range_RF_link_kits_w_encoder_and_decoder"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/#1", 
            "text": "\u8fd9\u662f\u4e00\u6b3e\u8d85\u957f\u8ddd\u79bb\u7684433MHz RF\u901a\u4fe1\u6a21\u5757\u5957\u4ef6\uff0c\u901a\u4fe1\u8ddd\u79bb\u53ef\u8fbe2\u516c\u91cc\uff0c\u5305\u542b\u53d1\u5c04\u548c\u63a5\u6536\u4e24\u4e2a\u6a21\u5757\u3002\u6a21\u5757\u5185\u7f6eVCO, PLL\u6280\u672f\uff0c\u9891\u7387\u7a33\u5b9a\u4ee5\u53ca\u6297\u5e72\u6270\u80fd\u529b\u5f3a\u3002\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u65e0\u7ebf\u6570\u636e\u4f20\u8f93\u548c\u8fdc\u7a0b\u63a7\u5236\u7b49\u5e94\u7528\u4f7f\u7528\u672c\u6a21\u5757\u3002", 
            "title": "1.  \u7b80\u4ecb"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/#2", 
            "text": "\u53c2\u6570  \u503c      \u5de5\u4f5c\u7535\u538b  \u63a5\u6536\u5668\uff1a3 5V\uff0c\u53d1\u5c04\u56683 9V    \u5de5\u4f5c\u7535\u6d41  \u22642.5mA\uff08@5V\uff09    \u5de5\u4f5c\u539f\u7406  \"\u8d85\u5916\u5dee\uff08VCO,PLL)    \u8c03\u5236\u65b9\u5f0f  OOK/ASK    \u5de5\u4f5c\u9891\u6bb5  433.92MHz    \u5e26\u5bbd  1.5MHz    \u7075\u654f\u5ea6  -105dBm(50\u03a9)    \u89e3\u7801\u65b9\u5f0f  PT2272    \u5929\u7ebf\u957f\u5ea6  18cm    \u6700\u5927\u901a\u4fe1\u8ddd\u79bb  2Km", 
            "title": "2. \u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/#3", 
            "text": "\u65e0\u7ebf\u5f00\u5173  \u8fdc\u7a0b\u4f20\u8f93  \u65e0\u7ebf\u63a7\u5236", 
            "title": "3. \u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/#4", 
            "text": "", 
            "title": "4. \u786c\u4ef6\u6982\u8ff0"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/#5", 
            "text": "\u8bf7\u6839\u636e\u4ee5\u4e0b  \u6d41\u7a0b  \u6765\u642d\u5efa\u7cfb\u7edf.  \u8fde\u63a5\u7535\u6c60, \u6309\u94ae\u548c\u53d1\u5c04\u677f.    Note   \u8bf7\u4f7f\u75283-5V\u7535\u6e90\uff01 9V\u7535\u6e90\u4f1a\u635f\u574f\u63a5\u6536\u677f.  \u8fde\u63a5\u7535\u6c60, LEDs and \u63a5\u6536\u677f.      Warning   \u4e0d\u8981\u628aRX \u6a21\u5757\u548c TX\u6a21\u5757\u9760\u7684\u5f88\u8fd1: \u8fd9\u5c06\u963b\u6b62\u4ed6\u4eec\u6b63\u5e38\u5de5\u4f5c\u3002 \u786e\u4fddRX\u6a21\u5757\u548cTX\u6a21\u5757\u8ddd\u79bb\u81f3\u5c111\u7c73\u3002  \u5f53\u6211\u4eec\u6309\u53d1\u5c04\u673a\u4fa7\u7684\u6309\u94ae\u65f6\uff0c\u63a5\u6536\u673a\u4fa7\u7684\u76f8\u5173LED\u5c06\u88ab\u6253\u5f00\u3002", 
            "title": "5.\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/2KM_Long_Range_RF_link_kits_w_encoder_and_decoder/#6", 
            "text": "[\u6d41\u7a0b]     Transmitter and receiver Setup Manual    [\u6570\u636e\u624b\u518c]     Datasheet for PT2272 and PT2262", 
            "title": "6. \u8d44\u6e90"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/", 
            "text": "MiniSense 100\u662f\u4e00\u79cd\u4f4e\u6210\u672c\u7684\u60ac\u81c2\u5f0f\u632f\u52a8\u4f20\u611f\u5668\uff0c\u4f20\u611f\u5668\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u8d28\u91cf\u5757\uff0c\u53ef\u5728\u4f4e\u9891\u4e0b\u63d0\u4f9b\u9ad8\u7075\u654f\u5ea6\u3002\u5f15\u811a\u8bbe\u8ba1\u6613\u4e8e\u5b89\u88c5\uff0c\u53ef\u710a\u63a5\u3002\u63d0\u4f9b\u6c34\u5e73\u548c\u5782\u76f4\u5b89\u88c5\u9009\u9879\u3002\u5bc6\u5c01\u4f20\u611f\u5668\u4ee5\u63d0\u9ad8RFI / EMI\u6291\u5236\u3002\u575a\u56fa\u8010\u7528\u7684\u67d4\u6027PVDF\u4f20\u611f\u5143\u4ef6\u53ef\u627f\u53d7\u9ad8\u51b2\u51fb\u3002\u4f20\u611f\u5668\u5177\u6709\u4f18\u5f02\u7684\u7ebf\u6027\u5ea6\u548c\u52a8\u6001\u8303\u56f4\uff0c\u53ef\u7528\u4e8e\u68c0\u6d4b\u8fde\u7eed\u632f\u52a8\u6216\u51b2\u51fb\u3002\u8bf7\u54a8\u8be2\u539f\u5382\u5982\u4f55\u4fee\u6539\u8d28\u91cf\u5757\u4ee5\u83b7\u5f97\u66ff\u4ee3\u9891\u7387\u54cd\u5e94\u548c\u7075\u654f\u5ea6\u9009\u62e9\u3002MiniSense 100\u4f5c\u4e3a\u60ac\u81c2\u6881\u52a0\u901f\u5ea6\u8ba1\uff0c\u5f53\u6c34\u5e73\u5b89\u88c5\u65f6\uff0c\u5782\u76f4\u5e73\u9762\u4e0a\u7684\u52a0\u901f\u5ea6\u4f1a\u7531\u4e8e\u8d28\u91cf\u5757\u800c\u4ea7\u751f\u5f2f\u66f2\u3002\u4f20\u611f\u5668\u5e94\u53d8\u4ea7\u751f\u538b\u7535\u54cd\u5e94\uff0c\u5176\u53ef\u4ee5\u88ab\u68c0\u6d4b\u4e3a\u4f20\u611f\u5668\u7684\u7535\u6781\u7684\u7535\u8377\u6216\u7535\u538b\u8f93\u51fa\u3002\u4f20\u611f\u5668\u4e5f\u53ef\u7528\u4e8e\u68c0\u6d4b\u8fde\u7eed\u6216\u8109\u51b2\u632f\u52a8\u6216\u51b2\u51fb\u3002\u5bf9\u4e8e\u4f4e\u4e8e\u4f20\u611f\u5668\u8c10\u632f\u9891\u7387\u7684\u6fc0\u53d1\u9891\u7387\uff0c\u5668\u4ef6\u4ea7\u751f\u7531\u201c\u57fa\u7ebf\u201d\u7075\u654f\u5ea6\u63a7\u5236\u7684\u7ebf\u6027\u8f93\u51fa\uff0c\u5171\u632f\u7684\u7075\u654f\u5ea6\u660e\u663e\u8f83\u9ad8\u3002\u4f20\u611f\u5668\u68c0\u6d4b\u4f4e\u9891\u8fd0\u52a8\u7684\u80fd\u529b\u53d7\u5230\u5916\u90e8\u7535\u8def\u7684\u5f3a\u70c8\u5f71\u54cd\u3002\n\n\n\n\n\u4ea7\u54c1\u7279\u6027\n\n\n\n\n\n\n\u4f4e\u6210\u672c\n\n\n\n\n\n\n\u60ac\u81c2\u5f0f\u632f\u52a8\u4f20\u611f\u5668\n\n\n\n\n\n\n\u4f4e\u9891\u7075\u654f\u5ea6\u9ad8\n\n\n\n\n\n\n\u4f20\u611f\u5668\u88ab\u5bc6\u5c01\u7528\u4e8e\u63d0\u9ad8RFI/EMI\u6291\u5236\n\n\n\n\n\n\n\u826f\u597d\u7684\u7ebf\u6027\u5ea6\u548c\u52a8\u6001\u8303\u56f4\n\n\n\n\n\n\n\u575a\u56fa\u8010\u7528\u7684\u67d4\u6027PVDF\u4f20\u611f\u5143\u4ef6\u53ef\u627f\u53d7\u9ad8\u51b2\u51fb\n\n\n\n\n\n\n\u521b\u610f\u5e94\u7528\n\n\n\n\n\u68c0\u6d4b\u8fde\u7eed\n\n\n\u8109\u51b2\u632f\u52a8\u6216\u51b2\u51fb\n\n\n\n\n\u89c4\u683c\u53c2\u6570\n\n\n\u5178\u578b\u6027\u80fd (25\u00b0C)\n\n\n\n\n\n\n \u53c2\u6570\n\n\n\n \u503c\n\n\n\n \u5355\u4f4d\n\n\n\n\n\n \u7535\u538b\u7075\u654f\u5ea6 (open-circuit, baseline)\n\n\n\n  1.1\n\n\n\n  V/g\n\n\n\n\n\n \u7535\u8377\u7075\u654f\u5ea6 (baseline)\n\n\n\n  260\n\n\n\n  pC/g\n\n\n\n\n\n \u5171\u632f\u9891\u7387\n\n\n\n  75\n\n\n\n  Hz\n\n\n\n\n\n \u7535\u538b\u7075\u654f\u5ea6 (open-circuit, at resonance)\n\n\n\n  6\n\n\n\n  V/g\n\n\n\n\n\n \u4e0a\u7ebf\u9891\u7387 (+3 dB)\n\n\n\n  42\n\n\n\n  Hz\n\n\n\n\n\n \u7ebf\u6027\n\n\n\n  +/-1\n\n\n\n  %\n\n\n\n\n\n \u7535\u5bb9\n\n\n\n  244\n\n\n\n  pF\n\n\n\n\n\n \u8017\u6563\u7cfb\u6570\n\n\n\n 0.018\n\n\n\n (none)\n\n\n\n\n\n \u60ef\u6027\u8d28\u91cf\n\n\n\n  0.3\n\n\n\n  gram\n\n\n\n\n\u73af\u5883\u6307\u6807\n\n\n\n\n\n\n \u53c2\u6570\n\n\n\n \u503c\n\n\n\n \u5355\u4f4d\n\n\n\n\n\n \u50a8\u5b58\u6e29\u5ea6\n\n\n\n  -40 to +80 deg C\n\n\n\n\n\n  \u5de5\u4f5c\u6e29\u5ea6\n\n\n\n  -20 to +60 deg C\n\n\n\n\n\n \u91cd\u91cf\n\n\n\n  Minisense 100H\n\n\n\n 0.5 gram\n\n\n\n\n\n  Minisense 100V\n\n\n\n 0.6 gram\n\n\n\n\n\u8d44\u6599\u4e0b\u8f7d\n\n\n\n\n\n\nPiezo Film Sensors Technical Manual\n\n\n\n\n\n\nMiniSense 100 Vibration Sensor Manual", 
            "title": "Piezo_Sensor-MiniSense_100"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/#_1", 
            "text": "\u4f4e\u6210\u672c    \u60ac\u81c2\u5f0f\u632f\u52a8\u4f20\u611f\u5668    \u4f4e\u9891\u7075\u654f\u5ea6\u9ad8    \u4f20\u611f\u5668\u88ab\u5bc6\u5c01\u7528\u4e8e\u63d0\u9ad8RFI/EMI\u6291\u5236    \u826f\u597d\u7684\u7ebf\u6027\u5ea6\u548c\u52a8\u6001\u8303\u56f4    \u575a\u56fa\u8010\u7528\u7684\u67d4\u6027PVDF\u4f20\u611f\u5143\u4ef6\u53ef\u627f\u53d7\u9ad8\u51b2\u51fb", 
            "title": "\u4ea7\u54c1\u7279\u6027"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/#_2", 
            "text": "\u68c0\u6d4b\u8fde\u7eed  \u8109\u51b2\u632f\u52a8\u6216\u51b2\u51fb", 
            "title": "\u521b\u610f\u5e94\u7528"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/#_3", 
            "text": "", 
            "title": "\u89c4\u683c\u53c2\u6570"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/#25c", 
            "text": "\u53c2\u6570   \u503c   \u5355\u4f4d    \u7535\u538b\u7075\u654f\u5ea6 (open-circuit, baseline)    1.1    V/g    \u7535\u8377\u7075\u654f\u5ea6 (baseline)    260    pC/g    \u5171\u632f\u9891\u7387    75    Hz    \u7535\u538b\u7075\u654f\u5ea6 (open-circuit, at resonance)    6    V/g    \u4e0a\u7ebf\u9891\u7387 (+3 dB)    42    Hz    \u7ebf\u6027    +/-1    %    \u7535\u5bb9    244    pF    \u8017\u6563\u7cfb\u6570   0.018   (none)    \u60ef\u6027\u8d28\u91cf    0.3    gram", 
            "title": "\u5178\u578b\u6027\u80fd (25\u00b0C)"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/#_4", 
            "text": "\u53c2\u6570   \u503c   \u5355\u4f4d    \u50a8\u5b58\u6e29\u5ea6    -40 to +80 deg C     \u5de5\u4f5c\u6e29\u5ea6    -20 to +60 deg C    \u91cd\u91cf    Minisense 100H   0.5 gram     Minisense 100V   0.6 gram", 
            "title": "\u73af\u5883\u6307\u6807"
        }, 
        {
            "location": "/Piezo_Sensor-MiniSense_100/#_5", 
            "text": "Piezo Film Sensors Technical Manual    MiniSense 100 Vibration Sensor Manual", 
            "title": "\u8d44\u6599\u4e0b\u8f7d"
        }, 
        {
            "location": "/Arduboy/", 
            "text": "1.  \u7b80\u4ecb\n\n\n\n\nArduboy\u662f\u4e00\u4e2a\u5c0f\u578b\u6e38\u620f\u7cfb\u7edf\uff0c\u4fe1\u7528\u5361\u7684\u5927\u5c0f\u3002 \u5b83\u914d\u5907\u4e86\u4e00\u4e2a\u7ecf\u5178\u76848\u4f4d\u6e38\u620f\uff0c\u53ef\u4ee5\u4ece\u5728\u7ebf\u7684\u5f00\u6e90\u6e38\u620f\u5e93\u4e0b\u8f7d\u91cd\u65b0\u7f16\u7a0b\u3002 Arduboy\u662f\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5b66\u4e60\u7f16\u5199\u548c\u521b\u5efa\u81ea\u5df1\u7684\u6e38\u620f\u3002\n\n\n\n\n2. \u5982\u4f55\u4e0b\u8f7d\u65b0\u7684\u6e38\u620f\n\n\n\u672c\u6307\u5357\u5c06\u6559\u60a8\u5982\u4f55\u8bbe\u7f6e\u60a8\u7684\u8ba1\u7b97\u673a\u5c06\u6e38\u620f\u4e0a\u4f20\u5230\u60a8\u7684Arduboy\u3002\n\n\n\n\nArduboy\u53f3\u4e0b\u89d2\u7684\u5c0f\u65b9\u5757\u9ed1\u8272\u82af\u7247\u79f0\u4e3a\u5fae\u63a7\u5236\u5668\uff0c\u5b83\u662f\u8bbe\u5907\u7684\u5927\u8111\u3002\u8fd9\u4e2a\u5fae\u5c0f\u76848\u4f4d\u8ba1\u7b97\u673a\u5305\u542b\u6240\u6709\u7684\u6307\u4ee4\uff0c\u56fe\u5f62\u548c\u58f0\u97f3\uff0c\u4ee5\u4ea7\u751f\u5728\u8bbe\u5907\u4e0a\u64ad\u653e\u7684\u6e38\u620f\u3002\n\n\na. \u4e0b\u8f7dArduino IDE\n\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9Arduboy\u91cd\u65b0\u7f16\u7a0b\uff0c\u5e76\u4f7f\u7528USB\u7535\u7f06\u548cArduino\u8f6f\u4ef6\u6765\u66f4\u6539\u6e38\u620f\u3002\u8bf7\u70b9\u51fb\n\u8fd9\u91cc\n\u4e0b\u8f7d\u5e76\u5b89\u88c5Arduino IDE.\n\n\n\n\nb. \u7ba1\u7406\u5e93\u6587\u4ef6\n\n\n\n\n\u5728\u6211\u4eec\u91cd\u65b0\u7f16\u7a0bArduboy\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u8bbe\u7f6e\u4e00\u4e9b\u4e8b\u60c5\uff0c \u6211\u4eec\u8981\u4e0b\u8f7d\u4e00\u4e9b\u9700\u8981\u7f16\u8bd1Arduboy\u5e93\u6587\u4ef6\u3002\n\n\n\u7f16\u8bd1\u4ee3\u7801\u610f\u5473\u7740\u5c06\u4eba\u7c7b\u53ef\u8bfb\u7684C ++\u4ee3\u7801\u8f6c\u6362\u4e3a\u5fae\u63a7\u5236\u5668\u53ef\u4ee5\u7406\u89e3\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u8bed\u8a00\u3002\n\n\n\u4e3a\u4e86\u4f7f\u82af\u7247\u4e0eOLED\u663e\u793a\u5c4f\uff0c\u6309\u94ae\u548c\u626c\u58f0\u5668\u4e00\u8d77\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e0b\u8f7d\u4e00\u4e9b\u5e93\u3002\n\n\n\n\n\u8bf7\u6309\u7167\u4e00\u4e0b\u6d41\u7a0b\u9009\u62e9\u5e93\u7ba1\u7406\u5668\uff1a\n\n\n\u9879\u76ee\n\u52a0\u8f7d\u5e93\n\u7ba1\u7406\u5e93\n\n\n\n\nc. \u4e0b\u8f7d\u5e93\u6587\u4ef6\n\n\n\u627e\u5230\u5b83\u4eec\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u641c\u7d22\u201cArduboy\u201d\n\n\n\u4ee5\u4e0b\u662f\u6211\u4eec\u5efa\u8bae\u5b89\u88c5\u7684\u5e93\u6587\u4ef6\u5217\u8868\uff1a\n\n\n\n\nArduboy\n\n\nArduboy2\n\n\nArduboyTones\n\n\nArduboyPlaytune\n\n\nArdBitmap\n\n\nArdVoice\n\n\nATMlib\n\n\nArduboy-TinyFont\n\n\n\n\n\n\nd. \u9009\u62e9\u6b63\u786e\u7684\u677f\u548c\u7aef\u53e3\n\n\n\n\n\u5c06Micro-USB\u7535\u7f06\u63d2\u5165Arduboy\u5e76\u5c06\u5176\u8fde\u63a5\u5230PC\u3002\n\n\n\u4f7f\u7528\u9876\u90e8\u7684\u7535\u6e90\u5f00\u5173\u6253\u5f00Arduboy\u3002\n\n\n\n\n\u9009\u62e9Arduino Leonardo\u677f\u578b\uff08Arduboy\u57fa\u4e8eLeonardo\uff09\n\n\n\u5de5\u5177\n\u5f00\u53d1\u677f\n Arduino Leonardo\n\n\n\n\n\n\n\n\n\n\n\u9009\u62e9\u6b63\u786e\u7684\u7aef\u53e3\u53f7,\u6bcf\u4e2a\u8ba1\u7b97\u673a\u7684\u7aef\u53e3\u53f7\u53ef\u4ee5\u4e0d\u540c\n\n\n\n\n\n\ne. \u4e0b\u8f7d\u7a0b\u5e8f\n\n\n\u9996\u5148\u6211\u4eec\u9009\u62e9\u4e00\u4e2aArduboy2\u5e93\u91cc\u9762\u7684\u7a0b\u5e8f\uff0c \u5927\u591a\u6570\u5e93\u5305\u62ec\u51e0\u4e2a\u7a0b\u5e8f\uff0c\u6f14\u793a\u4e00\u4e9b\u529f\u80fd\u3002\n\n\n\n\n\n\n\u8bf7\u6839\u636e\u4e00\u4e0b\u6d41\u7a0b\u8fdb\u884c\u9009\u62e9\uff0c\n\n\n\u6587\u4ef6\n\u793a\u4f8b\n Arduboy2\n Hello World\n\n\n\n\n\n\n\n\n\n\n\u4f7f\u7528\u4e0a\u4f20\u6309\u94ae\u4e0a\u4f20\u7a0b\u5e8f\n\n\n\n\n\n\nArduino\u5c06\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\uff0c\u5e76\u901a\u8fc7USB\u7535\u7f06\u5c06\u5176\u4f20\u8f93\u5230Arduboy\u3002\u4f60\u5c31\u53ef\u4ee5\u73a9\u6e38\u620f\u4e86\uff01\n\n\n3. \u6e38\u620f\u8d44\u6e90\n\n\n\n\n\u4f60\u53ef\u4ee5\u6e38\u89c8\nArduboy\u6e38\u620f\u7f51\u7ad9\n\uff0c\u6765\u4e0b\u8f7d\u7a0b\u5e8f\u3002\u7f51\u7ad9\u662f\u82f1\u6587\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3cChome\u7684\u5728\u7ebf\u7ffb\u8bd1\u63d2\u4ef6\u6765\u9884\u89c8\u3002", 
            "title": "Arduboy"
        }, 
        {
            "location": "/Arduboy/#1", 
            "text": "Arduboy\u662f\u4e00\u4e2a\u5c0f\u578b\u6e38\u620f\u7cfb\u7edf\uff0c\u4fe1\u7528\u5361\u7684\u5927\u5c0f\u3002 \u5b83\u914d\u5907\u4e86\u4e00\u4e2a\u7ecf\u5178\u76848\u4f4d\u6e38\u620f\uff0c\u53ef\u4ee5\u4ece\u5728\u7ebf\u7684\u5f00\u6e90\u6e38\u620f\u5e93\u4e0b\u8f7d\u91cd\u65b0\u7f16\u7a0b\u3002 Arduboy\u662f\u5f00\u6e90\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5b66\u4e60\u7f16\u5199\u548c\u521b\u5efa\u81ea\u5df1\u7684\u6e38\u620f\u3002", 
            "title": "1.  \u7b80\u4ecb"
        }, 
        {
            "location": "/Arduboy/#2", 
            "text": "\u672c\u6307\u5357\u5c06\u6559\u60a8\u5982\u4f55\u8bbe\u7f6e\u60a8\u7684\u8ba1\u7b97\u673a\u5c06\u6e38\u620f\u4e0a\u4f20\u5230\u60a8\u7684Arduboy\u3002   Arduboy\u53f3\u4e0b\u89d2\u7684\u5c0f\u65b9\u5757\u9ed1\u8272\u82af\u7247\u79f0\u4e3a\u5fae\u63a7\u5236\u5668\uff0c\u5b83\u662f\u8bbe\u5907\u7684\u5927\u8111\u3002\u8fd9\u4e2a\u5fae\u5c0f\u76848\u4f4d\u8ba1\u7b97\u673a\u5305\u542b\u6240\u6709\u7684\u6307\u4ee4\uff0c\u56fe\u5f62\u548c\u58f0\u97f3\uff0c\u4ee5\u4ea7\u751f\u5728\u8bbe\u5907\u4e0a\u64ad\u653e\u7684\u6e38\u620f\u3002", 
            "title": "2. \u5982\u4f55\u4e0b\u8f7d\u65b0\u7684\u6e38\u620f"
        }, 
        {
            "location": "/Arduboy/#a-arduino-ide", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u5bf9Arduboy\u91cd\u65b0\u7f16\u7a0b\uff0c\u5e76\u4f7f\u7528USB\u7535\u7f06\u548cArduino\u8f6f\u4ef6\u6765\u66f4\u6539\u6e38\u620f\u3002\u8bf7\u70b9\u51fb \u8fd9\u91cc \u4e0b\u8f7d\u5e76\u5b89\u88c5Arduino IDE.", 
            "title": "a. \u4e0b\u8f7dArduino IDE"
        }, 
        {
            "location": "/Arduboy/#b", 
            "text": "\u5728\u6211\u4eec\u91cd\u65b0\u7f16\u7a0bArduboy\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u8bbe\u7f6e\u4e00\u4e9b\u4e8b\u60c5\uff0c \u6211\u4eec\u8981\u4e0b\u8f7d\u4e00\u4e9b\u9700\u8981\u7f16\u8bd1Arduboy\u5e93\u6587\u4ef6\u3002  \u7f16\u8bd1\u4ee3\u7801\u610f\u5473\u7740\u5c06\u4eba\u7c7b\u53ef\u8bfb\u7684C ++\u4ee3\u7801\u8f6c\u6362\u4e3a\u5fae\u63a7\u5236\u5668\u53ef\u4ee5\u7406\u89e3\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u8bed\u8a00\u3002  \u4e3a\u4e86\u4f7f\u82af\u7247\u4e0eOLED\u663e\u793a\u5c4f\uff0c\u6309\u94ae\u548c\u626c\u58f0\u5668\u4e00\u8d77\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e0b\u8f7d\u4e00\u4e9b\u5e93\u3002   \u8bf7\u6309\u7167\u4e00\u4e0b\u6d41\u7a0b\u9009\u62e9\u5e93\u7ba1\u7406\u5668\uff1a  \u9879\u76ee \u52a0\u8f7d\u5e93 \u7ba1\u7406\u5e93", 
            "title": "b. \u7ba1\u7406\u5e93\u6587\u4ef6"
        }, 
        {
            "location": "/Arduboy/#c", 
            "text": "\u627e\u5230\u5b83\u4eec\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u641c\u7d22\u201cArduboy\u201d  \u4ee5\u4e0b\u662f\u6211\u4eec\u5efa\u8bae\u5b89\u88c5\u7684\u5e93\u6587\u4ef6\u5217\u8868\uff1a   Arduboy  Arduboy2  ArduboyTones  ArduboyPlaytune  ArdBitmap  ArdVoice  ATMlib  Arduboy-TinyFont", 
            "title": "c. \u4e0b\u8f7d\u5e93\u6587\u4ef6"
        }, 
        {
            "location": "/Arduboy/#d", 
            "text": "\u5c06Micro-USB\u7535\u7f06\u63d2\u5165Arduboy\u5e76\u5c06\u5176\u8fde\u63a5\u5230PC\u3002  \u4f7f\u7528\u9876\u90e8\u7684\u7535\u6e90\u5f00\u5173\u6253\u5f00Arduboy\u3002   \u9009\u62e9Arduino Leonardo\u677f\u578b\uff08Arduboy\u57fa\u4e8eLeonardo\uff09  \u5de5\u5177 \u5f00\u53d1\u677f  Arduino Leonardo      \u9009\u62e9\u6b63\u786e\u7684\u7aef\u53e3\u53f7,\u6bcf\u4e2a\u8ba1\u7b97\u673a\u7684\u7aef\u53e3\u53f7\u53ef\u4ee5\u4e0d\u540c", 
            "title": "d. \u9009\u62e9\u6b63\u786e\u7684\u677f\u548c\u7aef\u53e3"
        }, 
        {
            "location": "/Arduboy/#e", 
            "text": "\u9996\u5148\u6211\u4eec\u9009\u62e9\u4e00\u4e2aArduboy2\u5e93\u91cc\u9762\u7684\u7a0b\u5e8f\uff0c \u5927\u591a\u6570\u5e93\u5305\u62ec\u51e0\u4e2a\u7a0b\u5e8f\uff0c\u6f14\u793a\u4e00\u4e9b\u529f\u80fd\u3002    \u8bf7\u6839\u636e\u4e00\u4e0b\u6d41\u7a0b\u8fdb\u884c\u9009\u62e9\uff0c  \u6587\u4ef6 \u793a\u4f8b  Arduboy2  Hello World      \u4f7f\u7528\u4e0a\u4f20\u6309\u94ae\u4e0a\u4f20\u7a0b\u5e8f    Arduino\u5c06\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\uff0c\u5e76\u901a\u8fc7USB\u7535\u7f06\u5c06\u5176\u4f20\u8f93\u5230Arduboy\u3002\u4f60\u5c31\u53ef\u4ee5\u73a9\u6e38\u620f\u4e86\uff01", 
            "title": "e. \u4e0b\u8f7d\u7a0b\u5e8f"
        }, 
        {
            "location": "/Arduboy/#3", 
            "text": "\u4f60\u53ef\u4ee5\u6e38\u89c8 Arduboy\u6e38\u620f\u7f51\u7ad9 \uff0c\u6765\u4e0b\u8f7d\u7a0b\u5e8f\u3002\u7f51\u7ad9\u662f\u82f1\u6587\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3cChome\u7684\u5728\u7ebf\u7ffb\u8bd1\u63d2\u4ef6\u6765\u9884\u89c8\u3002", 
            "title": "3. \u6e38\u620f\u8d44\u6e90"
        }, 
        {
            "location": "/Tutorial/", 
            "text": "\u672c\u8282\u5305\u62ec\u7531\u5404\u79cd\u65b9\u6cd5\u7684\u4ecb\u7ecd\u3002\n\n\n\u4ea7\u54c1\u6e05\u5355\n\n\n\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u5404\u79cd\u65b9\u6cd5\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\nGetting_Started_with_Seeeduino\n\n\nHow_to_edit_Wiki\n\n\nHow_to_install_Arduino_Library\n\n\nUpload_Code", 
            "title": "Tutorial"
        }, 
        {
            "location": "/Tutorial/#_1", 
            "text": "\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684\u5404\u79cd\u65b9\u6cd5\u7684\u5217\u8868\u3002 \u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   Getting_Started_with_Seeeduino  How_to_edit_Wiki  How_to_install_Arduino_Library  Upload_Code", 
            "title": "\u4ea7\u54c1\u6e05\u5355"
        }, 
        {
            "location": "/How_to_install_Arduino_Library/", 
            "text": "Note\n\n\n\n\n\u6b64\u6559\u7a0b\u662f\u57fa\u4e8e Arduino 1.6.9.\n\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u5c06\u5411\u60a8\u4ecb\u7ecd\u5982\u4f55\u5b89\u88c5Arduino\u5e93\u3002\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u51e0\u4e4e\u6240\u6709\u7684\u5e93\u90fd\u5b58\u50a8\u5728Github\u4e0a\u3002\u5f53\u4ea7\u54c1\u9700\u8981\u65f6\uff0c\u6211\u4eec\u5c06\u63d0\u4f9bArduino\u5e93\u3002\u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u4ea7\u54c1\uff0c\u5b83\u4e0d\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u5e93\uff0c\u5982Grove - Button\u3002    \n\n\n\u9996\u5148\uff0c\u4ea7\u54c1\u9875\u9762\u4e0a\u6709\u4e00\u4e2a\u4e0b\u8f7d\u5e93\u6309\u94ae\u3002\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\n\u70b9\u51fb\u6309\u94ae\u5f00\u59cb\u4e0b\u8f7d\u3002\u6570\u79d2\u540e\u79d2\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u5305\u3002\n\n\n\u5982\u679c\u60a8\u70b9\u51fb\u6309\u94ae\u540e\u83b7\u5f97Github\u9875\u9762\uff0c\u5219\u53ef\u4ee5\u5355\u51fb \nClond or download \n Download ZIP\n \u6309\u952e\u6765\u83b7\u53d6\u5e93\u6587\u4ef6\u3002\n\n\n\n\n\u7136\u540e\u6253\u5f00\u60a8\u7684Arduino IDE\uff0c\u5355\u51fb**Sketch (\u9879\u76ee)\n Include Library (\u52a0\u8f7d\u5e93)\n Add .ZIP Library\uff08\u6dfb\u52a0\u4e00\u4e2azip\u5e93\uff09**\n\n\n\n\n\u7136\u540e\u6211\u4eec\u68c0\u67e5\u4e00\u4e0b\u5e93\u662f\u5426\u6b63\u786e\u5b89\u88c5\u3002\n\n\n\u70b9\u51fb \nFile\uff08\u6587\u4ef6\uff09 \n Example \uff08\u793a\u4f8b\uff09 \n OLED_Display_96x96-master \n OLED_Hello_World\n \u6253\u5f00\u4e00\u4e2a\u4f8b\u5b50\uff0c\u70b9\u51fb\u9a8c\u8bc1\u6309\u94ae\uff0c\u5982\u679c\u6ca1\u6709\u9519\u8bef\uff0c\u795d\u8d3a\uff0c\u5e93\u5b8c\u7f8e\u5b89\u88c5\u3002", 
            "title": "\u5982\u4f55\u5b89\u88c5Arduino\u5e93"
        }, 
        {
            "location": "/Upload_Code/", 
            "text": "The specific steps for uploading the code:\n\n\n1.\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u9009\u62e9\u60a8\u6b63\u5728\u4f7f\u7528\u7684Arduino\u677f\u5b50\uff1aTools\uff08\u5de5\u5177\uff09 --\n Board\uff08\u5f00\u53d1\u677f\uff09 --\n  \uff08\u4f8b\u5982\uff09Arduino UNO\n\n\n\n\n\u5982\u679c\u51fa\u73b0\u4e0b\u56fe\u7684\u63d0\u793a\uff0c\u53ef\u80fd\u662f\u60a8\u9009\u62e9\u4e86\u9519\u8bef\u7684\u5f00\u53d1\u677f\uff0c\u8bf7\u91cd\u65b0\u9009\u62e9\u60a8\u6b63\u5728\u4f7f\u7528\u7684Arduino\u677f\u3002\n\n\n\n\n\n\n\u901a\u8fc7\u4ee5\u4e0b\u8def\u5f84\u9009\u62e9\u6b63\u5728\u4f7f\u7528\u7684\u4e32\u884c\u7aef\u53e3: Tools\uff08\u5de5\u5177\uff09 --\n Serial Port\uff08\u7aef\u53e3\uff09 --\n \uff08\u4f8b\u5982\uff09 COM3.\n\n\n\u5982\u4e0b\u56fe\u6240\u793a\u4e0a\u4f20\u793a\u4f8b\u4ee3\u7801:\n\n\n\n\n\n\n\u5f53\u51fa\u73b0\"Done uploading\"\u65f6\uff0c\u606d\u559c\u60a8\u4e0a\u4f20\u6210\u529f\u3002", 
            "title": "\u5982\u4f55\u4e0a\u4f20\u4ee3\u7801"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/", 
            "text": "0. Hello world\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u8001\u5e08\u4f1a\u6559\u4f1a\u6211\u4eec\u5728\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u65f6\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684Hello World\u793a\u4f8b\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u4ecb\u7ecd\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u8fc7\u7a0b\u3002\u867d\u7136\u4f60\u4e0d\u719f\u6089Arduino\uff0c\u4e0d\u7528\u62c5\u5fc3\u3002\u4f60\u53ef\u4ee5\u5b66\u4e60\u5173\u4e8eArduino\u7684\u95ee\u9898\uff1a\u70b9\u4eaeLED\u3002\u73b0\u5728\u4ee5Seeeduino\u4e3a\u4f8b\uff0c\u4e86\u89e3\u5982\u4f55\u70b9\u4eae\u7531\u6570\u5b5713\u9488\u63a7\u5236\u7684LED\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5df2\u4e0b\u8f7dArduino Environment\u5e76\u6210\u529f\u5b89\u88c5Seeeduino\u9a71\u52a8\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u70b9\u51fb \n\u8fd9\u91cc\n\u4e86\u89e3\u5177\u4f53\u6b65\u9aa4\u3002\n\n\n1. \u5c06Seeeduino\u548c\u7535\u8111\u76f8\u8fde\n\n\n\u4f7f\u7528USB\u7535\u7f06\u5c06Seeeduino\u677f\u8fde\u63a5\u5230\u7535\u8111\u3002\u7eff\u8272\u7535\u6e90LED\uff08\u6807\u6709PWR\uff09\u5e94\u70b9\u4eae\u3002\uff08\u5f53Seeeduino\u72ec\u7acb\u5de5\u4f5c\u65f6\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9USB\u6216\u7535\u6e90\u9002\u914d\u5668\u4e3aSeeeduino\u4f9b\u7535\u3002\uff09\n\n\n2. \u6253\u5f00\u4f8b\u7a0b Blink\n\n\n\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u627e\u5230\u5e76\u6253\u5f00\u4f8b\u7a0b\uff1a \nFile\uff08\u6587\u4ef6\uff09\nExamples\uff08\u793a\u4f8b\uff09\n01.Basics\nBlink\n.\n\n\n\n\n3. \u9009\u62e9\u60a8\u7684\u5f00\u53d1\u677f\n\n\n\u60a8\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u8fdb\u884c\u9009\u62e9 Tools\uff08\u5de5\u5177\uff09 \n Board menu\uff08\u5f00\u53d1\u677f\uff09\uff0c\u9009\u62e9\u60a8\u5f53\u524d\u7684\u5f00\u53d1\u677f. \u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9ATmega328.\n\n\n\n\n4. \u9009\u62e9\u60a8\u7684\u4e32\u53e3\n\n\n\u9009\u62e9\u60a8\u7684\u5f00\u53d1\u677f\u5f53\u524d\u5360\u7528\u7684\u4e32\u53e3\uff0c\u5728 Tools\uff08\u5de5\u5177\uff09 | Serial Port\uff08\u7aef\u53e3\uff09 \u4e2d\u8fdb\u884c\u9009\u62e9\u3002\n\n\n\n\n5. \u4e0a\u4f20\u7a0b\u5e8f\n\n\n\u73b0\u5728\uff0c\u53ea\u9700\u70b9\u51fb\u5f00\u53d1\u73af\u5883\u4e2d\u7684\u201c\u4e0a\u4f20\u201d\u6309\u94ae\u5373\u53ef\u3002\u7b49\u5f85\u51e0\u79d2\u949f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u677f\u4e0a\u7684RX\u548cTX LED\u95ea\u70c1\u3002\u5982\u679c\u4e0a\u4f20\u6210\u529f\uff0c\u5219\u4f1a\u5728\u72b6\u6001\u680f\u4e2d\u663e\u793a\u201c\u5b8c\u6210\u4e0a\u4f20\u201d\u6d88\u606f\u3002\n\n\n\n\n6. \u7ed3\u679c\n\n\n\u4e0a\u4f20\u5b8c\u6210\u540e\u7684\u51e0\u79d2\u949f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u677f\u4e0a\u768413\uff08L\uff09\u9488\u811a\u5f00\u59cb\u95ea\u70c1\uff08\u6a59\u8272\uff09\u3002\u5982\u679c\u662f\uff0c\u606d\u559c\uff01\u4f60\u7684Arduino\u7a0b\u5e8f\u5df2\u7ecf\u5f00\u59cb\u8fd0\u884c\u4e86\u3002", 
            "title": "Seeeduino\u5165\u95e8\u6307\u5bfc"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#0-hello-world", 
            "text": "\u4e00\u822c\u6765\u8bf4\uff0c\u8001\u5e08\u4f1a\u6559\u4f1a\u6211\u4eec\u5728\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u65f6\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684Hello World\u793a\u4f8b\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u4ecb\u7ecd\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u8fc7\u7a0b\u3002\u867d\u7136\u4f60\u4e0d\u719f\u6089Arduino\uff0c\u4e0d\u7528\u62c5\u5fc3\u3002\u4f60\u53ef\u4ee5\u5b66\u4e60\u5173\u4e8eArduino\u7684\u95ee\u9898\uff1a\u70b9\u4eaeLED\u3002\u73b0\u5728\u4ee5Seeeduino\u4e3a\u4f8b\uff0c\u4e86\u89e3\u5982\u4f55\u70b9\u4eae\u7531\u6570\u5b5713\u9488\u63a7\u5236\u7684LED\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5df2\u4e0b\u8f7dArduino Environment\u5e76\u6210\u529f\u5b89\u88c5Seeeduino\u9a71\u52a8\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u70b9\u51fb  \u8fd9\u91cc \u4e86\u89e3\u5177\u4f53\u6b65\u9aa4\u3002", 
            "title": "0. Hello world"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#1-seeeduino", 
            "text": "\u4f7f\u7528USB\u7535\u7f06\u5c06Seeeduino\u677f\u8fde\u63a5\u5230\u7535\u8111\u3002\u7eff\u8272\u7535\u6e90LED\uff08\u6807\u6709PWR\uff09\u5e94\u70b9\u4eae\u3002\uff08\u5f53Seeeduino\u72ec\u7acb\u5de5\u4f5c\u65f6\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9USB\u6216\u7535\u6e90\u9002\u914d\u5668\u4e3aSeeeduino\u4f9b\u7535\u3002\uff09", 
            "title": "1. \u5c06Seeeduino\u548c\u7535\u8111\u76f8\u8fde"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#2-blink", 
            "text": "\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u627e\u5230\u5e76\u6253\u5f00\u4f8b\u7a0b\uff1a  File\uff08\u6587\u4ef6\uff09 Examples\uff08\u793a\u4f8b\uff09 01.Basics Blink .", 
            "title": "2. \u6253\u5f00\u4f8b\u7a0b Blink"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#3", 
            "text": "\u60a8\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8def\u5f84\u8fdb\u884c\u9009\u62e9 Tools\uff08\u5de5\u5177\uff09   Board menu\uff08\u5f00\u53d1\u677f\uff09\uff0c\u9009\u62e9\u60a8\u5f53\u524d\u7684\u5f00\u53d1\u677f. \u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9ATmega328.", 
            "title": "3. \u9009\u62e9\u60a8\u7684\u5f00\u53d1\u677f"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#4", 
            "text": "\u9009\u62e9\u60a8\u7684\u5f00\u53d1\u677f\u5f53\u524d\u5360\u7528\u7684\u4e32\u53e3\uff0c\u5728 Tools\uff08\u5de5\u5177\uff09 | Serial Port\uff08\u7aef\u53e3\uff09 \u4e2d\u8fdb\u884c\u9009\u62e9\u3002", 
            "title": "4. \u9009\u62e9\u60a8\u7684\u4e32\u53e3"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#5", 
            "text": "\u73b0\u5728\uff0c\u53ea\u9700\u70b9\u51fb\u5f00\u53d1\u73af\u5883\u4e2d\u7684\u201c\u4e0a\u4f20\u201d\u6309\u94ae\u5373\u53ef\u3002\u7b49\u5f85\u51e0\u79d2\u949f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u677f\u4e0a\u7684RX\u548cTX LED\u95ea\u70c1\u3002\u5982\u679c\u4e0a\u4f20\u6210\u529f\uff0c\u5219\u4f1a\u5728\u72b6\u6001\u680f\u4e2d\u663e\u793a\u201c\u5b8c\u6210\u4e0a\u4f20\u201d\u6d88\u606f\u3002", 
            "title": "5. \u4e0a\u4f20\u7a0b\u5e8f"
        }, 
        {
            "location": "/Getting_Started_with_Seeeduino/#6", 
            "text": "\u4e0a\u4f20\u5b8c\u6210\u540e\u7684\u51e0\u79d2\u949f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u677f\u4e0a\u768413\uff08L\uff09\u9488\u811a\u5f00\u59cb\u95ea\u70c1\uff08\u6a59\u8272\uff09\u3002\u5982\u679c\u662f\uff0c\u606d\u559c\uff01\u4f60\u7684Arduino\u7a0b\u5e8f\u5df2\u7ecf\u5f00\u59cb\u8fd0\u884c\u4e86\u3002", 
            "title": "6. \u7ed3\u679c"
        }, 
        {
            "location": "/How_to_edit_Wiki/", 
            "text": "Seeed\u4e2d\u6587\u6587\u6863\u7ef4\u62a4\u8bf4\u660e\n\n\n\u8fd9\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u90e8\u5206Seeed\u4ea7\u54c1\u7684\n\u4e2d\u6587\u6587\u6863\n\uff0c\u7531\u4e8e\u8fd9\u4e2a\u7ad9\u70b9\u521a\u5efa\u7acb\uff0c\u6240\u4ee5\u53ea\u6709\u90e8\u5206\u5df2\u7ecf\u7ffb\u8bd1\u7684\u6587\u6863\u3002\n\n\n\u6ca1\u6709\u4e2d\u6587\u6587\u6863\u7684\u4ea7\u54c1\uff0c\u4ecd\u7136\u9700\u8981\u5230\n\u82f1\u6587\u7ad9\u70b9\n.\n\n\n\u8fd9\u4e2a\u7ad9\u70b9\u57fa\u4e8e\u4f18\u79c0\u7684\u5e76\u4e14\u5f00\u6e90\u7684\u6587\u6863\u7cfb\u7edf\nMkDocs\n\u4ee5\u53ca\u4e3b\u9898\nMaterial\n.\n\n\n\u57fa\u672c\u64cd\u4f5c\n\n\n0. \u6267\u884c\u521d\u59cb\u5316\u64cd\u4f5c\n\n\n\n\n\u6309\u7167\nmkdocs.org\n\u5b89\u88c5python, pip, mkdocs\n\n\n\u6267\u884c pip install mkdocs-material\n\n\ngit clone \nhttps://github.com/SeeedDocument/wiki_chinese.git\n \u5230\u672c\u5730\u76ee\u5f55 \uff08mkdocs\u6e90\u6587\u4ef6\uff09\n\n\ngit clone \nhttps://github.com/SeeedDocument/SeeedDocument.github.io.git\n \u5230\u672c\u5730\u76ee\u5f55 \uff08\u7f16\u8bd1\u7684html\u6587\u4ef6\uff09\n\n\n\n\n1. \u65b0\u589e\u65b0\u4ea7\u54c1\u7684md\u6587\u4ef6\uff0c \u6587\u4ef6\u7684\u524d\u9762\u90e8\u5206\u5fc5\u987b\u53c2\u7167\u4e0b\u9762\u683c\u5f0f\n\n\ntitle: CAN-BUS Shield V1.2\ncategory: Shield\nbzurl: https://www.seeedstudio.com/CAN-BUS-Shield-V1.2-p-2256.html\noldwikiname: CAN-BUS_Shield_V1.2\nprodimagename: Can_bus_shield_all.jpg\nwikiurl: http://seeed.wiki/CAN-BUS_Shield_V1.2\nsku: 113030021\n\n\n\n\n2. \u7f16\u5199wiki_chinese\u76ee\u5f55\u4e0b\u7684mkdocs.yml\u6587\u4ef6\n\n\npages:\n  - Seeed\u6587\u6863\u4e2d\u6587\u7ad9\u70b9\u4ecb\u7ecd: \nindex.md\n\n\n  - \u5e73\u53f0:\n    - Arduino:\n      - Arduino: Arduino.md\n      - Seeeduino_Cloud: Seeeduino_Cloud.md\n      - Seeeduino_LoRAWAN: Seeeduino_LoRAWAN.md  \n    - LinkIt:\n      - LinkIt: LinkIt.md\n      - LinkIt_Smart_7688: LinkIt_Smart_7688.md\n\n  - Grove:\n    - Grove\u7cfb\u7edf: Grove_System.md\n    - \u4f20\u611f\u5668:\n      - Sensor: Sensor.md\n      - Grove-Encoder: Grove-Encoder.md\n      - Grove-Multichannel_Gas_Sensor: Grove-Multichannel_Gas_Sensor.md\n      - Grove-Piezo_Vibration_Sensor: Grove-Piezo_Vibration_Sensor.md\n    - \u6267\u884c\u5668:\n      - Actuator: Actuator.md\n      - Grove-MP3_v2.0: Grove-MP3_v2.0.md\n\n\n\n\n3. \u5728wiki_chinese\u4e0b\uff0c\u8fd0\u884c python Category_Generator.py \u6765\u751f\u6210\u5404\u4e2acategory\u7684md\u6587\u4ef6\n\n\n\n\n\u4ecewiki_chinese\\docs\\template\u76ee\u5f55\u4e0b\u590d\u5236category\u7684md\u6587\u4ef6\n\n\n\n\ntitle: Grove - Actuator\nnointro:\n\nGrove - \u6267\u884c\u5668\u5305\u62ec\u7535\u673a\u9a71\u52a8\u5668\uff0cLED\u663e\u793a\u5c4f\uff0c\u7ee7\u7535\u5668\uff0c\u626c\u58f0\u5668\uff0c\u8702\u9e23\u5668\u7b49\u6a21\u5757\u3002\n\n## \u4ea7\u54c1\u6e05\u5355\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u6267\u884c\u5668\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n\n\n\n\n\n\u5728docs\u4e0b\u751f\u6210\u76f8\u5173category\u7684\u7d22\u5f15\n\n\n\n\ntitle: Grove - Actuator\nnointro:\n\nGrove - \u6267\u884c\u5668\u5305\u62ec\u7535\u673a\u9a71\u52a8\u5668\uff0cLED\u663e\u793a\u5c4f\uff0c\u7ee7\u7535\u5668\uff0c\u626c\u58f0\u5668\uff0c\u8702\u9e23\u5668\u7b49\u6a21\u5757\u3002\n\n## \u4ea7\u54c1\u6e05\u5355\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u6267\u884c\u5668\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n* [Grove-MP3_v2.0](http://seeed.wiki/Grove-MP3_v2.0)\n\n\n\n\n4. \u6267\u884c\u6267\u884c \nmkdocs serve\n \u8fdb\u884c\u9884\u89c8\n\n\n5. \u6267\u884c \nmkdocs build --clean\n\uff0c\u7f16\u8bd1\u7684\u9759\u6001\u6587\u4ef6\u4f1a\u51fa\u73b0\u5728 \nsite\n \u6587\u4ef6\u5939\n\n\n6. \u5728wiki_chinese\u4e0b\uff0c\u8fd0\u884c python SKU_generator_wiki_CN.py \u5728site\u4e0b\u751f\u6210sku html\u6587\u4ef6\n\n\n7. \u4e0a\u4f20mkdocs\u6587\u6863\u548chtml\u7f51\u9875\u6587\u4ef6\u5230github\n\n\ngit add. \ngit commit -m \nupdate\n\ngit push origin master \n\n\n\n\n\n\nNote\n\n\nCNAME\u6587\u4ef6\u4e0d\u8981\u5220\u6389\n\n\n\n\n\u6587\u6863\u683c\u5f0f\n\n\n\n\n1. \u7b80\u4ecb\n\n\n2. \u89c4\u683c\u53c2\u6570\n\n\n3. \u521b\u610f\u5e94\u7528\n\n\n4. \u786c\u4ef6\u6982\u8ff0\n\n\n5. \u5165\u95e8\u6307\u5bfc\n\n\n6. \u8d44\u6e90\n\n\n\n\n\u8d21\u732e\n\n\n\u8fd9\u4e2a\u6587\u6863\u7cfb\u7edf\u6709Seeed\u7ef4\u62a4\uff0c\u5e76\u4e14\u6b22\u8fce\u4f60\u5bf9\u6587\u6863\u7684\u5185\u5bb9\u5206\u6790\u4f60\u7684\u8d21\u732e\uff0c\u8d21\u732e\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\n\n\n\n\n\u9519\u522b\u5b57\u6216\u8005\u4e0d\u6070\u5f53\u7684\u8bcd\u6c47\u8868\u8fbe\n\n\n\u589e\u52a0\u5185\u5bb9\u4ee5\u4f7f\u6559\u7a0b\u66f4\u52a0\u7684\u6e05\u6670\n\n\n\u4e0a\u4f20\u66f4\u597d\u7684\u56fe\u7247\n\n\n\u5176\u4ed6\u5fc5\u8981\u7684\u4fee\u6539\u6216\u4f18\u5316\n\n\n\n\nMkDocs\n\n\n\u8fd9\u4e2a\u9879\u76ee\u57fa\u4e8e\u5f00\u6e90\u7684\u6587\u6863\u7cfb\u7edfMKDocs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nView the \nMkDocs documentation\n.\n\n\nProject \nrelease notes\n.\n\n\nVisit the \nMkDocs wiki\n for community\n  resources, including third party themes and a list of MkDocs users.\n\n\nIRC channel: \n#mkdocs\n on freenode.\n\n\nDiscussions and support: \nhttps://groups.google.com/forum/#!forum/mkdocs\n\n\n\n\n\u534f\u8bae\n\n\nCopyright \n 2018-2017 Seeed Inc. (\nhttps://www.seeedstudio.com\n)\n\n\n\u6587\u6863\u53ca\u56fe\u7247\n\n\n\n\u8fd9\u91cc\u6240\u6709\u7684\u56fe\u7247\u548c\u6587\u6863\u987a\u4ece \nCreative Commons Attribution-ShareAlike 4.0 International License\n. \n \n\n\u7684\u534f\u8bae\n\n\n\u8054\u7cfb\u6211\u4eec\n\n\n\u5982\u679c\u4f60\u6709\u6587\u6863\u6216\u8005\u6280\u672f\u4e0a\u7684\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb", 
            "title": "How_to_edit_Wiki"
        }, 
        {
            "location": "/How_to_edit_Wiki/#seeed", 
            "text": "\u8fd9\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u90e8\u5206Seeed\u4ea7\u54c1\u7684 \u4e2d\u6587\u6587\u6863 \uff0c\u7531\u4e8e\u8fd9\u4e2a\u7ad9\u70b9\u521a\u5efa\u7acb\uff0c\u6240\u4ee5\u53ea\u6709\u90e8\u5206\u5df2\u7ecf\u7ffb\u8bd1\u7684\u6587\u6863\u3002  \u6ca1\u6709\u4e2d\u6587\u6587\u6863\u7684\u4ea7\u54c1\uff0c\u4ecd\u7136\u9700\u8981\u5230 \u82f1\u6587\u7ad9\u70b9 .  \u8fd9\u4e2a\u7ad9\u70b9\u57fa\u4e8e\u4f18\u79c0\u7684\u5e76\u4e14\u5f00\u6e90\u7684\u6587\u6863\u7cfb\u7edf MkDocs \u4ee5\u53ca\u4e3b\u9898 Material .", 
            "title": "Seeed\u4e2d\u6587\u6587\u6863\u7ef4\u62a4\u8bf4\u660e"
        }, 
        {
            "location": "/How_to_edit_Wiki/#_1", 
            "text": "", 
            "title": "\u57fa\u672c\u64cd\u4f5c"
        }, 
        {
            "location": "/How_to_edit_Wiki/#0", 
            "text": "\u6309\u7167 mkdocs.org \u5b89\u88c5python, pip, mkdocs  \u6267\u884c pip install mkdocs-material  git clone  https://github.com/SeeedDocument/wiki_chinese.git  \u5230\u672c\u5730\u76ee\u5f55 \uff08mkdocs\u6e90\u6587\u4ef6\uff09  git clone  https://github.com/SeeedDocument/SeeedDocument.github.io.git  \u5230\u672c\u5730\u76ee\u5f55 \uff08\u7f16\u8bd1\u7684html\u6587\u4ef6\uff09", 
            "title": "0. \u6267\u884c\u521d\u59cb\u5316\u64cd\u4f5c"
        }, 
        {
            "location": "/How_to_edit_Wiki/#1-md", 
            "text": "title: CAN-BUS Shield V1.2\ncategory: Shield\nbzurl: https://www.seeedstudio.com/CAN-BUS-Shield-V1.2-p-2256.html\noldwikiname: CAN-BUS_Shield_V1.2\nprodimagename: Can_bus_shield_all.jpg\nwikiurl: http://seeed.wiki/CAN-BUS_Shield_V1.2\nsku: 113030021", 
            "title": "1. \u65b0\u589e\u65b0\u4ea7\u54c1\u7684md\u6587\u4ef6\uff0c \u6587\u4ef6\u7684\u524d\u9762\u90e8\u5206\u5fc5\u987b\u53c2\u7167\u4e0b\u9762\u683c\u5f0f"
        }, 
        {
            "location": "/How_to_edit_Wiki/#2-wiki_chinesemkdocsyml", 
            "text": "pages:\n  - Seeed\u6587\u6863\u4e2d\u6587\u7ad9\u70b9\u4ecb\u7ecd:  index.md \n\n  - \u5e73\u53f0:\n    - Arduino:\n      - Arduino: Arduino.md\n      - Seeeduino_Cloud: Seeeduino_Cloud.md\n      - Seeeduino_LoRAWAN: Seeeduino_LoRAWAN.md  \n    - LinkIt:\n      - LinkIt: LinkIt.md\n      - LinkIt_Smart_7688: LinkIt_Smart_7688.md\n\n  - Grove:\n    - Grove\u7cfb\u7edf: Grove_System.md\n    - \u4f20\u611f\u5668:\n      - Sensor: Sensor.md\n      - Grove-Encoder: Grove-Encoder.md\n      - Grove-Multichannel_Gas_Sensor: Grove-Multichannel_Gas_Sensor.md\n      - Grove-Piezo_Vibration_Sensor: Grove-Piezo_Vibration_Sensor.md\n    - \u6267\u884c\u5668:\n      - Actuator: Actuator.md\n      - Grove-MP3_v2.0: Grove-MP3_v2.0.md", 
            "title": "2. \u7f16\u5199wiki_chinese\u76ee\u5f55\u4e0b\u7684mkdocs.yml\u6587\u4ef6"
        }, 
        {
            "location": "/How_to_edit_Wiki/#3-wiki_chinese-python-category_generatorpy-categorymd", 
            "text": "\u4ecewiki_chinese\\docs\\template\u76ee\u5f55\u4e0b\u590d\u5236category\u7684md\u6587\u4ef6   title: Grove - Actuator\nnointro:\n\nGrove - \u6267\u884c\u5668\u5305\u62ec\u7535\u673a\u9a71\u52a8\u5668\uff0cLED\u663e\u793a\u5c4f\uff0c\u7ee7\u7535\u5668\uff0c\u626c\u58f0\u5668\uff0c\u8702\u9e23\u5668\u7b49\u6a21\u5757\u3002\n\n## \u4ea7\u54c1\u6e05\u5355\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u6267\u884c\u5668\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002   \u5728docs\u4e0b\u751f\u6210\u76f8\u5173category\u7684\u7d22\u5f15   title: Grove - Actuator\nnointro:\n\nGrove - \u6267\u884c\u5668\u5305\u62ec\u7535\u673a\u9a71\u52a8\u5668\uff0cLED\u663e\u793a\u5c4f\uff0c\u7ee7\u7535\u5668\uff0c\u626c\u58f0\u5668\uff0c\u8702\u9e23\u5668\u7b49\u6a21\u5757\u3002\n\n## \u4ea7\u54c1\u6e05\u5355\n\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u5728Seeed WiKi\u4e2d\u627e\u5230\u7684Grove - \u6267\u884c\u5668\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\u3002\n\n* [Grove-MP3_v2.0](http://seeed.wiki/Grove-MP3_v2.0)", 
            "title": "3. \u5728wiki_chinese\u4e0b\uff0c\u8fd0\u884c python Category_Generator.py \u6765\u751f\u6210\u5404\u4e2acategory\u7684md\u6587\u4ef6"
        }, 
        {
            "location": "/How_to_edit_Wiki/#4-mkdocs-serve", 
            "text": "", 
            "title": "4. \u6267\u884c\u6267\u884c mkdocs serve \u8fdb\u884c\u9884\u89c8"
        }, 
        {
            "location": "/How_to_edit_Wiki/#5-mkdocs-build-clean-site", 
            "text": "", 
            "title": "5. \u6267\u884c mkdocs build --clean\uff0c\u7f16\u8bd1\u7684\u9759\u6001\u6587\u4ef6\u4f1a\u51fa\u73b0\u5728 site \u6587\u4ef6\u5939"
        }, 
        {
            "location": "/How_to_edit_Wiki/#6-wiki_chinese-python-sku_generator_wiki_cnpy-sitesku-html", 
            "text": "", 
            "title": "6. \u5728wiki_chinese\u4e0b\uff0c\u8fd0\u884c python SKU_generator_wiki_CN.py \u5728site\u4e0b\u751f\u6210sku html\u6587\u4ef6"
        }, 
        {
            "location": "/How_to_edit_Wiki/#7-mkdocshtmlgithub", 
            "text": "git add. \ngit commit -m  update \ngit push origin master    Note  CNAME\u6587\u4ef6\u4e0d\u8981\u5220\u6389", 
            "title": "7. \u4e0a\u4f20mkdocs\u6587\u6863\u548chtml\u7f51\u9875\u6587\u4ef6\u5230github"
        }, 
        {
            "location": "/How_to_edit_Wiki/#_2", 
            "text": "1. \u7b80\u4ecb  2. \u89c4\u683c\u53c2\u6570  3. \u521b\u610f\u5e94\u7528  4. \u786c\u4ef6\u6982\u8ff0  5. \u5165\u95e8\u6307\u5bfc  6. \u8d44\u6e90", 
            "title": "\u6587\u6863\u683c\u5f0f"
        }, 
        {
            "location": "/How_to_edit_Wiki/#_3", 
            "text": "\u8fd9\u4e2a\u6587\u6863\u7cfb\u7edf\u6709Seeed\u7ef4\u62a4\uff0c\u5e76\u4e14\u6b22\u8fce\u4f60\u5bf9\u6587\u6863\u7684\u5185\u5bb9\u5206\u6790\u4f60\u7684\u8d21\u732e\uff0c\u8d21\u732e\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a   \u9519\u522b\u5b57\u6216\u8005\u4e0d\u6070\u5f53\u7684\u8bcd\u6c47\u8868\u8fbe  \u589e\u52a0\u5185\u5bb9\u4ee5\u4f7f\u6559\u7a0b\u66f4\u52a0\u7684\u6e05\u6670  \u4e0a\u4f20\u66f4\u597d\u7684\u56fe\u7247  \u5176\u4ed6\u5fc5\u8981\u7684\u4fee\u6539\u6216\u4f18\u5316", 
            "title": "\u8d21\u732e"
        }, 
        {
            "location": "/How_to_edit_Wiki/#mkdocs", 
            "text": "\u8fd9\u4e2a\u9879\u76ee\u57fa\u4e8e\u5f00\u6e90\u7684\u6587\u6863\u7cfb\u7edfMKDocs        View the  MkDocs documentation .  Project  release notes .  Visit the  MkDocs wiki  for community\n  resources, including third party themes and a list of MkDocs users.  IRC channel:  #mkdocs  on freenode.  Discussions and support:  https://groups.google.com/forum/#!forum/mkdocs", 
            "title": "MkDocs"
        }, 
        {
            "location": "/How_to_edit_Wiki/#_4", 
            "text": "Copyright   2018-2017 Seeed Inc. ( https://www.seeedstudio.com )", 
            "title": "\u534f\u8bae"
        }, 
        {
            "location": "/How_to_edit_Wiki/#_5", 
            "text": "\u8fd9\u91cc\u6240\u6709\u7684\u56fe\u7247\u548c\u6587\u6863\u987a\u4ece  Creative Commons Attribution-ShareAlike 4.0 International License .    \n\u7684\u534f\u8bae", 
            "title": "\u6587\u6863\u53ca\u56fe\u7247"
        }, 
        {
            "location": "/How_to_edit_Wiki/#_6", 
            "text": "\u5982\u679c\u4f60\u6709\u6587\u6863\u6216\u8005\u6280\u672f\u4e0a\u7684\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u8054\u7cfb", 
            "title": "\u8054\u7cfb\u6211\u4eec"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nMIT License\n\n\nCopyright \n 2008 - 2017 Seeed INC.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.", 
            "title": "\u6587\u6863\u534f\u8bae"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT License  Copyright   2008 - 2017 Seeed INC.  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}